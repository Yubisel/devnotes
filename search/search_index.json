{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to &lt;dev notes/&gt;","text":"<pre><code>'########::'########:'##::::'##:'##::: ##::'#######::'########:'########::'######::\n ##.... ##: ##.....:: ##:::: ##: ###:: ##:'##.... ##:... ##..:: ##.....::'##... ##:\n ##:::: ##: ##::::::: ##:::: ##: ####: ##: ##:::: ##:::: ##:::: ##::::::: ##:::..::\n ##:::: ##: ######::: ##:::: ##: ## ## ##: ##:::: ##:::: ##:::: ######:::. ######::\n ##:::: ##: ##...::::. ##:: ##:: ##. ####: ##:::: ##:::: ##:::: ##...:::::..... ##:\n ##:::: ##: ##::::::::. ## ##::: ##:. ###: ##:::: ##:::: ##:::: ##:::::::'##::: ##:\n ########:: ########:::. ###:::: ##::. ##:. #######::::: ##:::: ########:. ######::\n........:::........:::::...:::::..::::..:::.......::::::..:::::........:::......:::\n</code></pre>"},{"location":"about/about/","title":"Sobre","text":""},{"location":"about/about/#subtitulo-1","title":"Subtitulo 1","text":""},{"location":"about/about/#subtitulo-2","title":"Subtitulo 2","text":""},{"location":"about/authors/","title":"Authors","text":""},{"location":"about/authors/#autor","title":"Autor","text":""},{"location":"about/mkdocs/","title":"MkDocs basics","text":"<p>For full documentation visit mkdocs.org.</p> <ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs help</code> - Print this help message.</li> </ul>"},{"location":"about/mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"commands/dd/","title":"dd","text":"<p>sudo su -c 'dd if=/dev/zero | pv | dd of=/dev/sdc'</p>"},{"location":"commands/jq/","title":"jq - commandline JSON processor","text":"<p>Usage: <code>jq [options] &lt;jq filter&gt; [file...]</code></p> <p>jq is a tool for processing JSON inputs, applying the given filter to its JSON text inputs and producing the filter's results as JSON on standard output.</p> <p>The simplest filter is ., which is the identity filter, copying jq's input to its output unmodified (except for formatting).</p> <p>For more advanced filters see the jq(1) manpage (\"man jq\") and/or https://stedolan.github.io/jq</p> <p>Some of the options include:</p> <ul> <li><code>-c</code> compact instead of pretty-printed output;</li> <li><code>-n</code> use <code>null</code> as the single input value;</li> <li><code>-e</code> set the exit status code based on the output;</li> <li><code>-s</code> read (slurp) all inputs into an array; apply filter to it;</li> <li><code>-r</code> output raw strings, not JSON texts;</li> <li><code>-R</code> read raw strings, not JSON texts;</li> <li><code>-C</code> colorize JSON;</li> <li><code>-M</code> monochrome (don't colorize JSON);</li> <li><code>-S</code> sort keys of objects on output;</li> <li><code>--tab</code> use tabs for indentation;</li> <li><code>--arg</code> a <code>v</code> set variable <code>$a</code> to value <code>&lt;v&gt;</code>;</li> <li><code>--argjson</code> a <code>v</code> set variable <code>$a</code> to JSON value <code>&lt;v&gt;</code>;</li> <li><code>--slurpfile</code> a <code>f</code> set variable <code>$a</code> to an array of JSON texts read from <code>&lt;f&gt;</code>;</li> </ul>"},{"location":"commands/jq/#examples","title":"Examples","text":"<pre><code>jq -r '.version' #obtener el propiedad version de un json pasado como parametro \n</code></pre>"},{"location":"commands/mktemp/","title":"mktemp","text":"<p>Usage: <code>mktemp [OPTION]... [TEMPLATE]</code></p> <p>Create a temporary file or directory, safely, and print its name. <code>TEMPLATE</code> must contain at least 3 consecutive 'X's in last component. If TEMPLATE is not specified, use <code>tmp.XXXXXXXXXX</code>, and <code>--tmpdir</code> is implied. Files are created <code>u+rw</code>, and directories <code>u+rwx</code>, minus umask restrictions.</p> <ul> <li><code>-d, --directory</code>     create a directory, not a file</li> <li><code>-u, --dry-run</code>       do not create anything; merely print a name (unsafe)</li> <li><code>-q, --quiet</code>         suppress diagnostics about file/dir-creation failure</li> <li><code>--suffix=SUFF</code>   append <code>SUFF</code> to <code>TEMPLATE</code>; <code>SUFF</code> must not contain a slash.                         This option is implied if <code>TEMPLATE</code> does not end in X</li> <li><code>-p DIR, --tmpdir[=DIR]</code>  interpret <code>TEMPLATE</code> relative to <code>DIR</code>; if <code>DIR</code> is not                         specified, use <code>$TMPDIR</code> if set, else <code>/tmp</code>.  With                         this option, <code>TEMPLATE</code> must not be an absolute name;                         unlike with <code>-t</code>, <code>TEMPLATE</code> may contain slashes, but                         mktemp creates only the final component</li> <li><code>-t</code>                  interpret <code>TEMPLATE</code> as a single file name component,                         relative to a directory: <code>$TMPDIR</code>, if set; else the                         directory specified via <code>-p</code>; else <code>/tmp [deprecated]</code></li> <li><code>--help</code>     display this help and exit</li> <li><code>--version</code>  output version information and exit</li> </ul>"},{"location":"commands/mktemp/#example","title":"Example","text":"<p>By default create the directory in the <code>tmp</code> folder and return de path</p> <pre><code>mktemp -d\n/tmp/tmp.CxYovCveam  #output\n</code></pre> <p>If you want open the path in the same sentence</p> <pre><code>cd $(mktemp -d)\n</code></pre> <p>To create in the directory</p> <pre><code>mktemp -p .\n</code></pre>"},{"location":"commands/ncdu/","title":"ncdu","text":"<p>Sirve para saber el espacio ocupado por carpetas</p>"},{"location":"commands/ncdu/#instalar","title":"Instalar","text":"<pre><code>sudo apt install ncdu\n</code></pre>"},{"location":"commands/others/","title":"Others commands","text":""},{"location":"commands/others/#echo","title":"echo","text":"<p>Los comandos en linux tienen c\u00f3digos de retorno por convenci\u00f3n el 0 es que todo se ejecut\u00f3 de manera satisfactoria en caso de no ser 0 cada uno de los comandos tienen su propio significado para el c\u00f3digo de retorno.</p> <p>Una de las formas de saber que retorno un comando es luego de su ejecuci\u00f3n hacer la consulta con <code>echo $?</code> esto devolver\u00e1 el c\u00f3digo en cuesti\u00f3n.</p>"},{"location":"commands/others/#saber-el-nombre-de-tu-usuario","title":"Saber el nombre de tu usuario","text":"<pre><code>whoami\n</code></pre>"},{"location":"commands/pwgen/","title":"pwgen","text":""},{"location":"commands/pwgen/#generador-de-passwords-en-la-terminal","title":"Generador de passwords en la terminal","text":""},{"location":"commands/pwgen/#instalar","title":"Instalar","text":"<pre><code>sudo apt install pwgen\n</code></pre>"},{"location":"commands/pwgen/#optionssyntax","title":"Options/Syntax","text":"<p>Usage: pwgen [ OPTIONS ] [ pw_length ] [ num_pw ]</p> <p>Options supported by pwgen:</p> <ul> <li><code>-c</code> or <code>--capitalize</code> Include at least one capital letter in the password</li> <li><code>-A</code> or <code>--no-capitalize</code> Don't include capital letters in the password</li> <li><code>-n</code> or <code>--numerals</code> Include at least one number in the password</li> <li><code>-0</code> or <code>--no-numerals</code> Don't include numbers in the password</li> <li><code>-y</code> or <code>--symbols</code>   Include at least one special symbol in the password</li> <li><code>-r &lt;chars&gt;</code> or <code>--remove-chars=&lt;chars&gt;</code> Remove characters from the set of characters to generate passwords</li> <li><code>-s</code> or <code>--secure</code> Generate completely random passwords</li> <li><code>-B</code> or <code>--ambiguous</code> Don't include ambiguous characters in the password</li> <li><code>-h</code> or <code>--help</code> Print a help message</li> <li><code>-H</code> or <code>--sha1=path/to/file[#seed]</code> Use sha1 hash of given file as a (not so) random generator</li> <li><code>-C</code> Print the generated passwords in columns</li> <li><code>-1</code> Don't print the generated passwords in columns</li> <li><code>-v</code> or <code>--no-vowels</code> Do not use any vowels so as to avoid accidental nasty words</li> </ul>"},{"location":"commands/seq/","title":"seq","text":"<p>Generar secuencias de n\u00fameros en consola</p> <p>NAME        seq - print a sequence of numbers</p> <p>SYNOPSIS        seq [OPTION]... LAST        seq [OPTION]... FIRST LAST        seq [OPTION]... FIRST INCREMENT LAST</p> <p>DESCRIPTION        Print numbers from FIRST to LAST, in steps of INCREMENT.</p> <pre><code>   Mandatory arguments to long options are mandatory for short options too.\n\n   -f, --format=FORMAT\n          use printf style floating-point FORMAT\n\n   -s, --separator=STRING\n          use STRING to separate numbers (default: \\n)\n\n   -w, --equal-width\n          equalize width by padding with leading zeroes\n\n   --help display this help and exit\n\n   --version\n          output version information and exit\n\n   If  FIRST  or INCREMENT is omitted, it defaults to 1.  That is, an omitted INCREMENT defaults to 1 even when LAST is smaller than FIRST.  The sequence of numbers ends when the sum of the current number and INCRE\u2010\n   MENT would become greater than LAST.  FIRST, INCREMENT, and LAST are interpreted as floating point values.  INCREMENT is usually positive if FIRST is smaller than LAST, and INCREMENT is usually negative if  FIRST\n   is  greater  than LAST.  INCREMENT must not be 0; none of FIRST, INCREMENT and LAST may be NaN.  FORMAT must be suitable for printing one argument of type 'double'; it defaults to %.PRECf if FIRST, INCREMENT, and\n   LAST are all fixed point decimal numbers with maximum precision PREC, and to %g otherwise.\n</code></pre>"},{"location":"commands/tar/","title":"tar","text":"<p>Compres files</p> <p>Usage: <code>tar [OPTION...] [FILE]...</code></p> <ul> <li><code>-c, --create</code> create a new archive</li> <li><code>-u, --update</code> only append files newer than copy in archive</li> <li><code>-x, --extract, --get</code> extract files from an archive</li> <li><code>-f, --file=ARCHIVE</code> use archive file or device <code>ARCHIVE</code></li> <li><code>-a, --auto-compress</code> use archive suffix to determine the compression program</li> <li><code>-z, --gzip, --gunzip, --ungzip</code> filter the archive through gzip</li> <li><code>-v, --verbose</code> verbosely list files processed</li> <li><code>-t, --list</code> list the contents of an archive</li> </ul>"},{"location":"commands/tar/#ejemplos","title":"Ejemplos","text":""},{"location":"commands/tar/#crear-comprimido","title":"Crear comprimido","text":"<pre><code>tar -caf nombreFichero.tar.gz * # con el * comprime todo en el directorio donde se ejecuta el comando, sustituir por nombre de carpeta en case de querer solo una\n</code></pre>"},{"location":"commands/tar/#mostrar-el-contenido-de-un-fichero-comprimido","title":"Mostrar el contenido de un fichero comprimido","text":"<pre><code>tar -taf nombreFichero.tar.gz\n</code></pre>"},{"location":"commands/tar/#extraer-solo-una-de-las-carpetas-o-fichero-dentro-del-comprimido","title":"Extraer solo una de las carpetas o fichero dentro del comprimido","text":"<pre><code>tar -xaf nombreFichero.tar.gz carpetaInterna\n</code></pre>"},{"location":"commands/uniq/","title":"uniq","text":"<p>Reportar u omitir lineas repetidas</p> <p>Un caso de uso de este comando es cuando queremos obtener las lineas \u00fanicas de un fichero o una entrada.</p> <p>Supongamos que tenemos un fichero de texto <code>ficheroEjemplo.txt</code> y queremos obtener todas las entradas del fichero desechando las duplicadas, el fichero contiene:</p> <pre><code>item 1\nitem 1\nitem 2\nitem 2\nitem 3\nitem 4\nitem 5\nitem 6\n</code></pre> <p>En este caso el item 1 y 2 se repiten varias veces por lo que si ejecutamos:</p> <pre><code>cat ficheroEjemplo.txt | uniq\n</code></pre> <p>Devolver\u00e1</p> <pre><code>item 1\nitem 2\nitem 3\nitem 4\nitem 5\nitem 6\n</code></pre>"},{"location":"commands/uniq/#man-uniq","title":"man uniq","text":""},{"location":"commands/uniq/#name","title":"NAME","text":"<p><code>uniq</code> - report or omit repeated lines</p>"},{"location":"commands/uniq/#synopsis","title":"SYNOPSIS","text":"<p><code>uniq [OPTION]... [INPUT [OUTPUT]]</code></p>"},{"location":"commands/uniq/#description","title":"DESCRIPTION","text":"<p>Filter adjacent matching lines from <code>INPUT</code> (or standard input), writing to <code>OUTPUT</code> (or standard output).</p> <p>With no options, matching lines are merged to the first occurrence.</p> <p>Mandatory arguments to long options are mandatory for short options too.</p> <ul> <li><code>-c, --count</code> prefix lines by the number of occurrences</li> <li><code>-d, --repeated</code> only print duplicate lines, one for each group</li> <li><code>-D</code> print all duplicate lines</li> <li><code>--all-repeated[=METHOD]</code> like <code>-D</code>, but allow separating groups with an empty line; METHOD={none(default),prepend,separate}</li> <li><code>-f, --skip-fields=N</code> avoid comparing the first N fields</li> <li><code>--group[=METHOD]</code> show all items, separating groups with an empty line; METHOD={separate(default),prepend,append,both}</li> <li><code>-i, --ignore-case</code> ignore differences in case when comparing</li> <li><code>-s, --skip-chars=N</code> avoid comparing the first N characters</li> <li><code>-u, --unique</code> only print unique lines</li> <li><code>-z, --zero-terminated</code> line delimiter is NUL, not newline</li> <li><code>-w, --check-chars=N</code> compare no more than N characters in lines</li> <li><code>--help</code> display this help and exit</li> <li><code>--version</code> output version information and exit</li> </ul> <p>A field is a run of blanks (usually spaces and/or TABs), then non-blank characters.  Fields are skipped before chars.</p> <p>Note: <code>uniq</code> does not detect repeated lines unless they are adjacent.  You may want to sort the input first, or use <code>sort -u</code> without <code>uniq</code>.  Also, comparisons honor the rules specified by <code>LC_COLLATE</code>.</p>"},{"location":"commands/grep/directory_word_search/","title":"C\u00f3mo encontrar una cadena o palabra espec\u00edfica en archivos y directorios","text":"<p>El siguiente comando mostrar\u00e1 una lista de todos los archivos que contienen una l\u00ednea con el texto <code>\"check_root\"</code>, buscando de forma recursiva y agresiva el directorio <code>~/bin</code>.</p> <pre><code>grep -Rw ~/bin/ -e 'check_root'\n</code></pre> <p>Donde la opci\u00f3n <code>-R</code> le dice a <code>grep</code> que lea todos los archivos debajo de cada directorio, recursivamente, siguiendo los enlaces simb\u00f3licos solo si est\u00e1n en la l\u00ednea de comando y la opci\u00f3n <code>-w</code> le indica que seleccione solo las l\u00edneas que contienen coincidencias que forman palabras completas, y <code>-e</code> se utiliza para especificar la cadena (patr\u00f3n) a buscar.</p> <p>Debe usar el comando sudo cuando busque en determinados directorios o archivos que requieren permisos de root (a menos que est\u00e9 administrando su sistema con la cuenta de root).</p> <pre><code>sudo grep -Rw / -e 'check_root' \n</code></pre> <p>Para ignorar las distinciones de casos, utilice la opci\u00f3n <code>-i</code> como se muestra:</p> <pre><code>grep -Riw ~/bin/ -e 'check_root'\n</code></pre> <p>Si desea saber la l\u00ednea exacta donde existe la cadena de texto, incluya la opci\u00f3n <code>-n</code>.</p> <pre><code>grep -Rinw ~/bin/ -e 'check_root'\n</code></pre> <p>Suponiendo que hay varios tipos de archivos en un directorio en el que desea buscar, tambi\u00e9n puede especificar el tipo de archivos que se buscar\u00e1n, por su extensi\u00f3n, mediante la opci\u00f3n <code>--include</code>.</p> <p>Este ejemplo le indica a grep que solo mire todos los archivos <code>.sh</code>.</p> <pre><code>grep -Rnw --include=\\*.sh ~/bin/ -e 'check_root'\n</code></pre> <p>Adem\u00e1s, es posible buscar m\u00e1s de un patr\u00f3n, utilizando el siguiente comando.</p> <pre><code>grep -Rinw ~/bin/ -e 'check_root' -e 'netstat'\n</code></pre>"},{"location":"commands/ssh/copy_the_public_key/","title":"Copy the Public Key to Server","text":"<p>Fuente</p> <p>The quickest way to copy your public key to the Ubuntu host is to use a utility called <code>ssh-copy-id</code>. Due to its simplicity, this method is highly recommended if available. If you do not have <code>ssh-copy-id</code> available to you on your client machine, you may use one of the two alternate methods provided in this section (copying via password-based SSH, or manually copying the key).</p>"},{"location":"commands/ssh/copy_the_public_key/#copying-public-key-using-ssh-copy-id","title":"Copying Public Key Using ssh-copy-id","text":"<p>The <code>ssh-copy-id</code> tool is included by default in many operating systems, so you may have it available on your local system. For this method to work, you must already have password-based SSH access to your server.</p> <p>To use the utility, you simply need to specify the remote host that you would like to connect to and the user account that you have password SSH access to. This is the account to which your public SSH key will be copied.</p> <p>The syntax is:</p> <pre><code>ssh-copy-id username@remote_host\n</code></pre> <p>You may see the following message:</p> <pre><code>Output\nThe authenticity of host '203.0.113.1 (203.0.113.1)' can't be established.\nECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.\nAre you sure you want to continue connecting (yes/no)? yes\n</code></pre> <p>This means that your local computer does not recognize the remote host. This will happen the first time you connect to a new host. Type \u201cyes\u201d and press <code>ENTER</code> to continue.</p> <p>Next, the utility will scan your local account for the <code>id_rsa.pub</code> key that we created earlier. When it finds the key, it will prompt you for the password of the remote user\u2019s account:</p> <p>Type in the password (your typing will not be displayed for security purposes) and press <code>ENTER</code>. The utility will connect to the account on the remote host using the password you provided. It will then copy the contents of your <code>~/.ssh/id_rsa.pub</code> key into a file in the remote account\u2019s home <code>~/.ssh</code> directory called <code>authorized_keys</code>.</p> <p>You should see the following output:</p> <pre><code>Output\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh 'username@203.0.113.1'\"\nand check to make sure that only the key(s) you wanted were added.\n</code></pre>"},{"location":"commands/ssh/copy_the_public_key/#copying-public-key-using-ssh","title":"Copying Public Key Using SSH","text":"<p>If you do not have <code>ssh-copy-id</code> available, but you have password-based SSH access to an account on your server, you can upload your keys using a conventional SSH method.</p> <p>We can do this by using the <code>cat</code> command to read the contents of the public SSH key on our local computer and piping that through an SSH connection to the remote server.</p> <p>On the other side, we can make sure that the <code>~/.ssh</code> directory exists and has the correct permissions under the account we\u2019re using.</p> <p>We can then output the content we piped over into a file called <code>authorized_keys</code> within this directory. We\u2019ll use the <code>&gt;&gt;</code> redirect symbol to append the content instead of overwriting it. This will let us add keys without destroying previously added keys.</p> <p>The full command looks like this:</p> <pre><code>cat ~/.ssh/id_rsa.pub | ssh username@remote_host \"mkdir -p ~/.ssh &amp;&amp; touch ~/.ssh/authorized_keys &amp;&amp; chmod -R go= ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"\n</code></pre> <p>You may see the following message:</p> <pre><code>Output\nThe authenticity of host '203.0.113.1 (203.0.113.1)' can't be established.\nECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.\nAre you sure you want to continue connecting (yes/no)? yes\n</code></pre> <p>This means that your local computer does not recognize the remote host. This will happen the first time you connect to a new host. Type \u201cyes\u201d and press <code>ENTER</code> to continue.</p> <p>Afterwards, you should be prompted to enter the remote user account password:</p> <pre><code>Output\nusername@203.0.113.1's password:\n</code></pre> <p>After entering your password, the content of your <code>id_rsa.pub</code> key will be copied to the end of the <code>authorized_keys</code> file of the remote user\u2019s account. Continue on to Step 3 if this was successful.</p>"},{"location":"commands/ssh/copy_the_public_key/#copying-public-key-manually","title":"Copying Public Key Manually","text":"<p>If you do not have password-based SSH access to your server available, you will have to complete the above process manually.</p> <p>We will manually append the content of your <code>id_rsa.pub</code> file to the <code>~/.ssh/authorized_keys</code> file on your remote machine.</p> <p>To display the content of your <code>id_rsa.pub</code> key, type this into your local computer:</p> <pre><code>cat ~/.ssh/id_rsa.pub\n</code></pre> <p>You will see the key\u2019s content, which should look something like this:</p> <pre><code>Output\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqql6MzstZYh1TmWWv11q5O3pISj2ZFl9HgH1JLknLLx44+tXfJ7mIrKNxOOwxIxvcBF8PXSYvobFYEZjGIVCEAjrUzLiIxbyCoxVyle7Q+bqgZ8SeeM8wzytsY+dVGcBxF6N4JS+zVk5eMcV385gG3Y6ON3EG112n6d+SMXY0OEBIcO6x+PnUSGHrSgpBgX7Ks1r7xqFa7heJLLt2wWwkARptX7udSq05paBhcpB0pHtA1Rfz3K2B+ZVIpSDfki9UVKzT8JUmwW6NNzSgxUfQHGwnW7kj4jp4AT0VZk3ADw497M2G/12N0PPB5CnhHf7ovgy6nL1ikrygTKRFmNZISvAcywB9GVqNAVE+ZHDSCuURNsAInVzgYo9xgJDW8wUw2o8U77+xiFxgI5QSZX3Iq7YLMgeksaO4rBJEa54k8m5wEiEE1nUhLuJ0X/vh2xPff6SQ1BL/zkOhvJCACK6Vb15mDOeCSq54Cr7kvS46itMosi/uS66+PujOO+xt/2FWYepz6ZlN70bRly57Q06J+ZJoc9FfBCbCyYH7U/ASsmY095ywPsBo1XQ9PqhnN1/YOorJ068foQDNVpm146mUpILVxmq41Cj55YKHEazXGsdBIbXWhcrRf4G2fJLRcGUr9q8/lERo9oxRm5JFX6TCmj6kmiFqv+Ow9gI0x8GvaQ== demo@test\n</code></pre> <p>Access your remote host using whichever method you have available.</p> <p>Once you have access to your account on the remote server, you should make sure the ~/.ssh directory exists. This command will create the directory if necessary, or do nothing if it already exists:</p> <pre><code>mkdir -p ~/.ssh\n</code></pre> <p>Now, you can create or modify the <code>authorized_keys</code> file within this directory. You can add the contents of your <code>id_rsa.pub</code> file to the end of the <code>authorized_keys</code> file, creating it if necessary, using this command:</p> <pre><code>echo public_key_string &gt;&gt; ~/.ssh/authorized_keys\n</code></pre> <p>In the above command, substitute the <code>public_key_string</code> with the output from the <code>cat ~/.ssh/id_rsa.pub</code> command that you executed on your local system. It should start with <code>ssh-rsa AAAA....</code></p> <p>Finally, we\u2019ll ensure that the <code>~/.ssh</code> directory and <code>authorized_keys</code> file have the appropriate permissions set:</p> <pre><code>chmod -R go= ~/.ssh\n</code></pre> <p>This recursively removes all \u201cgroup\u201d and \u201cother\u201d permissions for the <code>~/.ssh/</code> directory.</p> <p>If you\u2019re using the <code>root</code> account to set up keys for a user account, it\u2019s also important that the <code>~/.ssh</code> directory belongs to the user and not to <code>root</code>:</p> <pre><code>chown -R sammy:sammy ~/.ssh\n</code></pre> <p>In this tutorial our user is named <code>sammy</code> but you should substitute the appropriate username into the above command.</p> <p>We can now attempt passwordless authentication with our Ubuntu server.</p>"},{"location":"commands/ssh/ssh/","title":"ssh","text":""},{"location":"commands/ssh/ssh/#create-ssh-key","title":"Create ssh key","text":"<p>Las herramientas para crear y usar SSH son est\u00e1ndar y est\u00e1n presentes en la mayor\u00eda de las distribuciones de Linux. Con los siguientes comandos, puede generar la key ssh.</p> <ul> <li>Corre: <code>ssh-keygen -t rsa</code>. Para una llave m\u00e1s segura de 4096-bit key, corra: <code>ssh-keygen -t rsa -b 4096</code></li> <li>Al dar enter se preguntar\u00e1 donde quiere guardar la clave que se va a generar, en caso de dar enter guardar\u00e1 la key en el lugar por defecto <code>/home/username/.ssh/id_rsa</code></li> <li>Luego se deber\u00e1 introducir una frase y su confirmaci\u00f3n.</li> <li>Como resultado se informa el lugar donde se guard\u00f3 la llave publica y privada adem\u00e1s del fingerprint.</li> </ul> <p>Nota: en caso de especificar el par\u00e1metro <code>-f ruta</code> se le dice donde quedar\u00e1 la nueva key generada por lo que se omite la pregunta de ubicaci\u00f3n ej: <code>ssh-keygen -t rsa -f /home/username/.ssh/new-key</code></p>"},{"location":"commands/ssh/ssh/#create-alias-for-ssh-command","title":"Create alias for ssh command","text":"<p>Standard ssh client reads the configuration files before any connection:</p> <pre><code>/etc/ssh/ssh_config   # system-wide\n~/.ssh/config         # per user\n</code></pre> <p>with the latter with more priority.</p> <p>Ideally you want to configure the systemwide config with parameters that please all users and the config in your homedir with options specific to you. Here's an expample of <code>~/.ssh/config</code></p> <pre><code>Host server1\n  HostName 10.12.152.200\n  User jonh\n\nHost server2\n  HostName 25.74.84.203\n  User root\n  Port 2022\n</code></pre> <p>Then to connect to server1:</p> <pre><code>ssh server1\n</code></pre> <p>Note: <code>~/.ssh/config</code> must have read/write permissions for the user, and not be accessible by others (<code>chmod 600 ~/.ssh/config</code>)</p> <p>All possible options are documented in ssh_config manual pages: man ssh_config</p>"},{"location":"commands/ssh/ssh/#use-multiple-ssh-private-keys-on-one-client","title":"Use multiple SSH private keys on one client","text":"<p>Suppose you have 2 keys</p> <pre><code>/home/username/.ssh/id_rsa #default key\n/home/username/some_directory/other-ssh-key\n</code></pre> <p>One way is using the -i param followed by the route to the key, example <code>ssh -i /home/username/some_directory/other-ssh-key hostuser@servername</code></p> <p>Other way is configure the alias on the ssh config file (default location) <code>/home/username/.ssh/config</code> the param <code>IdentityFile</code>, example:</p> <pre><code>Host serverAlias\n    HostName 12.25.36.175\n    IdentityFile ~/some_directory/other-ssh-key  # different private key to the default\n    User remoteusername\n\nHost serverAlias2\n    HostName server.organism.org\n    IdentityFile ~/.ssh/id_rsa  # default private key \n    User username\n</code></pre>"},{"location":"database/mysql/","title":"MySql","text":""},{"location":"database/mysql/#habilitar-el-acceso-a-mysql-con-el-usuario-root","title":"Habilitar el acceso a mysql con el usuario root","text":"<p>Entrar en la terminal y conecctarse a mysql mediante el comando</p> <pre><code>sudo -u mysql\n</code></pre> <p>Luego ejecutar los siguientes comandos:</p> <pre><code>use mysql;\n\nupdate user set plugin='mysql_native_password' where user='root';\n\nflush privileges;\n</code></pre>"},{"location":"database/mysql/#permitir-en-el-phpmyadmin-entrar-sin-password","title":"Permitir en el phpmyadmin entrar sin password","text":"<pre><code>// Ubicacion del fichero en el sistema (Ubuntu)\n/etc/phpyadmin/config.inc.php\n\n$cfg['Servers'][$i]['AllowNoPassword'] = TRUE;\n</code></pre> <p>Se descomenta en las 2 l\u00edneas que aparece y luego para que los cambios tengan efecto se debe reiniciar el apache</p>"},{"location":"database/mysql/#cambiar-la-collations-a-todas-las-tablas","title":"Cambiar la collations a todas las tablas","text":"<p>Cambiar dbase por el nombre de la bd luego ejecutar los script que da la consulta como resultado</p> <pre><code>SELECT CONCAT('ALTER TABLE `', \n        tbl.`TABLE_SCHEMA`, '`.`', \n        tbl.`TABLE_NAME`, \n        '` CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;') \nFROM `information_schema`.`TABLES` tbl \nWHERE tbl.`TABLE_SCHEMA` = 'dbase';\n</code></pre>"},{"location":"database/sql_server/","title":"SQL Server","text":""},{"location":"database/sql_server/#t-sql-listar-todos-los-procedimientos-almacenados","title":"T-SQL: Listar todos los Procedimientos Almacenados","text":"<pre><code>SELECT ROUTINE_NAME \nFROM INFORMATION_SCHEMA.ROUTINES \nWHERE ROUTINE_TYPE = 'PROCEDURE'\nORDER BY ROUTINE_NAME \n</code></pre>"},{"location":"database/sql_server/#desencriptando-procedimientos-almacenados","title":"Desencriptando Procedimientos almacenados","text":"<p>Para desencriptar procedimientos almacenados debemos hacer lo siguiente:</p> <p>Si tenemos un procedimiento encriptado como el siguiente:</p> <pre><code>CREATE PROCEDURE desencriptame\nWITH ENCRYPTION\nAS\nPRINT 'desencriptame porfavor'\nGO\n</code></pre> <p>y si luego quiesieramos visualizar el texto de este procedimiento nos apareceria lo siguiente:</p> <pre><code>exec sp_helptext desencriptame\n\nmensaje: Los comentarios de objeto han sido cifrados.\n</code></pre> <p>Para ver el c\u00f3digo desencriptado hagamos lo siguiente. Vamos a crear un procedimiento que desencripte esto. este procedimiento se llamar\u00e1 <code>DECRYPTSP2K</code> y su c\u00f3digo es el siguiente: compilenlo:</p> <pre><code>CREATE PROCEDURE [DBO].[DECRYPTSP2K](\n@objName VARCHAR(50))\nAS\nDECLARE @a NVARCHAR(4000),\n@b NVARCHAR(4000),\n@c NVARCHAR(4000),\n@d NVARCHAR(4000),\n@i INT,\n@t BIGINT\n--get encrypted data\nSET @a = (SELECT CTEXT\nFROM SYSCOMMENTS\nWHERE ID = OBJECT_ID(@objName))\nSET @b = 'ALTER PROCEDURE ' + @objName + ' WITH ENCRYPTION AS ' +\n\nREPLICATE('-',4000 - 62)\n\nEXECUTE( @b)\n--get encrypted bogus SP\nSET @c = (SELECT CTEXT\nFROM SYSCOMMENTS\nWHERE ID = OBJECT_ID(@objName))\nSET @b = 'CREATE PROCEDURE ' + @objName + ' WITH ENCRYPTION AS ' +\n\nREPLICATE('-',4000 - 62)\n--start counter\nSET @i = 1\n\n--fill temporary variable\n\nSET @d = REPLICATE(N'A',(DATALENGTH(@a) / 2))\n\n--loop\n\nWHILE @i &lt;= DATALENGTH(@a) / 2\n\nBEGIN\n\n--xor original+bogus+bogus encrypted\n\nSET @d = STUFF(@d,@i,1,NCHAR(UNICODE(SUBSTRING(@a,@i,1)) ^ (UNICODE(SUBSTRING(@b,@i,1)) ^ UNICODE(SUBSTRING(@c,@i,1)))))\n\nSET @i = @i + 1\n\nEND\n\n--drop original SP\n\nEXECUTE( 'drop PROCEDURE ' + @objName)\n\n--remove encryption\n\n--try to preserve case\n\nSET @d = REPLACE((@d),'WITH ENCRYPTION','')\n\nSET @d = REPLACE((@d),'With Encryption','')\n\nSET @d = REPLACE((@d),'with encryption','')\n\nIF CHARINDEX('WITH ENCRYPTION',UPPER(@d)) &gt; 0\n\nSET @d = REPLACE(UPPER(@d),'WITH ENCRYPTION','')\n\n--replace SP\n\nEXECUTE( @d)\n</code></pre> <p>Luego ejecutenlo de la siguiente manera:</p> <pre><code>exec DECRYPTSP2K 'desencriptame'\ngo\n</code></pre> <p>Luego vuelvan a ejecutar el sp_helptext y obtendr\u00e1n el c\u00f3digo desencriptado:</p> <pre><code>exec sp_helptext desencriptame\nmensaje:\nText\nCREATE PROCEDURE desencriptame\nAS\nPRINT 'desencriptame porfavor'\n</code></pre>"},{"location":"docker/docker_install/","title":"Instalar Docker","text":"<p>Config file <code>/lib/systemd/system/docker.service</code></p>"},{"location":"docker/docker_install/#centos","title":"CentOS","text":"<p>Utilidades</p> <pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre> <p>Agregar el repo de docker</p> <pre><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre> <p>Instalar docker</p> <pre><code>sudo yum install docker-ce -y\n</code></pre> <p>Iniciar el servicio</p> <pre><code>sudo systemctl start docker\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_install/#fedoras","title":"Fedoras","text":"<p>La instalaci\u00f3n es igual que en CentOS, solo deben modificar la url del repo, porque los pasos son id\u00e9nticos</p> <p>Utilidades</p> <pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre> <p>Agregar el repo de docker</p> <pre><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo\n</code></pre> <p>Instalar docker</p> <pre><code>sudo yum install docker-ce -y\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_install/#ubuntu","title":"Ubuntu","text":"<p>Actualiza los repos</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instala utilidades</p> <pre><code>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y\n</code></pre> <p>Agregar el gpg </p> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n</code></pre> <p>Agregar el repo</p> <pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n</code></pre> <p>Actualizar de nuevo</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instalar docker</p> <pre><code>sudo apt-get install docker-ce\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_install/#debian","title":"Debian","text":"<p>Actualiza los repos</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instala utilidades</p> <pre><code>sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y\n</code></pre> <p>Agregar el gpg</p> <pre><code>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -\n</code></pre> <p>Agregar el repo</p> <pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\"\n</code></pre> <p>Actualizar de nuevo</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instalar docker</p> <pre><code>sudo apt-get install docker-ce\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_notes/","title":"Notas","text":""},{"location":"docker/docker_notes/#hacer-cat-a-fichero-dentro-de-contenedor","title":"Hacer cat a fichero dentro de contenedor","text":"<p>Esto es util para cuando hace falta el contenido de un fichero dentro del container por ejemplo luego de una instalacion de jenkins </p> <pre><code>docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n</code></pre> <p>Descargar una imagen oficial</p> <pre><code>-docker pull &lt;nombreImagen&gt;:&lt;tag&gt;\n</code></pre> <p>Mostrar contenedores corriendo (<code>-a</code> los lista todos)</p> <pre><code>-docker ps\n</code></pre> <p>Mostrar la historia de las capas de una imagen <code>--no-trunc</code> no trunca la descripcion de salida</p> <pre><code>-docker history -H &lt;nombreImagen&gt; --no-trunc\n</code></pre> <p>Construir imagen de dockerfile <code>tag</code> no es requerido</p> <pre><code>-docker build -t &lt;nombreimagen&gt;:&lt;tag&gt; .\n</code></pre> <p>especificar un dockerfile con distinto nombre se suma la bandera <code>-f &lt;nombrefichero&gt;</code></p> <p>Ver las imagenes que tienes en la pc</p> <pre><code>-docker images\n</code></pre> <p>Para filtrar imagenes dangling</p> <pre><code>-docker images -f dangling=true\n</code></pre> <p>Eliminar imagenes</p> <pre><code>-docker rmi (&lt;id&gt; || &lt;nombreImagen&gt;:&lt;tag&gt;)\n</code></pre> <p>Eliminar todas las imagenes dangling</p> <pre><code>-docker images -f dangling=true -q | xargs docker rmi\n</code></pre> <p>Correr container en base a una imagen</p> <ul> <li><code>-p &lt;puertoMiMaquina&gt;:&lt;puertoContenedor&gt;</code> mapea el puerto del container al host</li> <li><code>-d</code> correr el contenedor en segundo plano</li> <li><code>-t</code> terminal</li> <li><code>-i</code> interactive</li> <li><code>--name &lt;nombreContainer&gt;</code> definir nombre al contenedor</li> <li><code>-e \"&lt;nombreVariableEntorno&gt;=&lt;valor&gt;\"</code>  definir variable de entorno</li> <li><code>-m | --memory \"xxxmb\" | \"xxxgb\"</code> limitar la memoria que tendra como limite el contenedor</li> <li><code>-cpuset-cpus 0-3</code> cantidad de cpu que podra usar el contenerdor ej: si son 2 sera 0-1</li> </ul> <pre><code>-docker run -d -p 80:80 &lt;nombreImagen&gt;:&lt;tag&gt; \n</code></pre> <p>Borrar contenedor corriendo <code>-f</code> fuerza el borrado</p> <pre><code>-docker rm -fv &lt;nombreContenedor&gt;\n</code></pre> <p>Borrar todos los contenedores</p> <pre><code>-docker rm -fv $(docker ps -aq)\n</code></pre> <p>Detener un contenedor</p> <pre><code>-docker stop (&lt;nombreContainer&gt; || &lt;idContainer&gt;)\n</code></pre> <p>Iniciar contenedor</p> <pre><code>-docker start (&lt;nombreContainer&gt; || &lt;idContainer&gt;)\n</code></pre> <p>Reiniciar contenedor</p> <pre><code>-docker restart (&lt;nombreContainer&gt; || &lt;idContainer&gt;)\n</code></pre> <p>Cambiar nombre a un container corriendo</p> <pre><code>-docker rename &lt;nombreViejo&gt; &lt;nombreNuevo&gt;\n</code></pre> <p>Entrar a un container</p> <ul> <li><code>-t</code> terminal</li> <li><code>-i</code> interactivo</li> <li><code>-u root</code> para entrar como otro usuario en este caso root</li> </ul> <pre><code>-docker exec -ti (&lt;nombreContainer&gt; || &lt;idContainer&gt;) bash\n</code></pre> <p>Ver detalles de contendor corriendo</p> <pre><code>-docker inspect &lt;nombreContainer&gt;\n</code></pre> <p>Saber cuantos recursos esta usando un contenedor</p> <pre><code>-docker stats &lt;nombreContainer&gt;\n</code></pre> <p>Copiar ficheros dentro de un contenedor</p> <pre><code>-docker cp fichero &lt;container&gt;:&lt;ruta&gt;\n</code></pre> <p>Copiar ficheros de un contenedor al host</p> <pre><code>-docker cp &lt;container&gt;:&lt;ruta&gt; &lt;destino&gt;\n</code></pre> <p>Para sobreescribir el CMD de una imagen se pasa el comando luego del nombre de la imagen al crear un contenerdor</p> <pre><code>-docker run -d -p 8080:8080 centos python -m SimpleHTTPServer 8080\n</code></pre> <p>Listas volumenes</p> <pre><code>-docker volume ls\n</code></pre> <p>Crear Volumen</p> <pre><code>-docker volume create &lt;nombre&gt;\n</code></pre> <p>Borrar volumen</p> <pre><code>-docker volume -rm &lt;nombre&gt;\n</code></pre> <p>Listar volumenes dangling</p> <pre><code>-docker volume ls -f dangling=true\n</code></pre> <p>Eliminar volumenes dangling</p> <pre><code>-docker volume ls -f dangling=true -q | xargs docker volume rm\n</code></pre> <p>Ejecutar comando desde fuera del container</p> <pre><code>-docker exec &lt;nombreContainer&gt; bash -c \"&lt;comando a ejecutar&gt;\"\n</code></pre>"},{"location":"docker/docker_notes/#redes","title":"Redes","text":"<p>Listar las redes de docker</p> <pre><code>-docker network ls\n</code></pre> <p>Inspeccionar la red (bridge) network por defecto de docker</p> <pre><code>-docker network inspect bridge\n</code></pre> <p>Crear red en docker</p> <pre><code>-docker network create &lt;nombre&gt;\n</code></pre> <p>Definir propiedades ej</p> <pre><code>-d # driver por defecto bridge\n-subnet 172.142.10.0/24 \n--gateway 172.124.10.1\n</code></pre> <p>Crear contenedor en una red distinta a la por defecto</p> <pre><code>-dcoker run --network &lt;nombreRed&gt; -d --name &lt;nombreContenedor&gt; &lt;nombreImagen&gt;\n</code></pre> <p>Conectar contenedores en distintas redes</p> <pre><code>-docker network conect &lt;nombreRed&gt; &lt;nombreContenedorOtraRed&gt;\n</code></pre> <p>Esto le poner al <code>&lt;nombreContenedorOtraRed&gt;</code> otra interfaz de red conectada a <code>&lt;nombreRed&gt;</code></p> <p>Desconectar contenedor de una red</p> <pre><code>-docker network disconnect &lt;nombreRed&gt; &lt;nombreContenedor&gt;\n</code></pre> <p>Eliminar redes, si da error es porque tiene contenedores conectados</p> <pre><code>-docker network rm &lt;nombreRed&gt;\n</code></pre> <p>Asignar ip a contenedor</p> <pre><code>-docker run --network &lt;nombreRed&gt; --ip &lt;ip&gt;  -d --name &lt;nombreContainer&gt; &lt;imagen&gt;\n</code></pre>"},{"location":"docker/docker_notes/#salvar-en-fichero-una-imagen","title":"Salvar en fichero una imagen","text":"<p>Util cuando se quiere compartir una imagen sin depender de docker hub o un repositorio alojado en la nube, se comprime la imagen y se comparte como un fichero</p> <pre><code>docker save myusername/myproject:latest | gzip -c &gt; myproject_img_bak20141103.tgz\n</code></pre> <p>Forma de cargarla en la pc destino </p> <pre><code>gunzip -c myproject_img_bak20141103.tgz | docker load\n</code></pre>"},{"location":"docker/docker_notes/#inspect-a-docker-images-content-without-starting-a-container","title":"Inspect a Docker Image's Content Without Starting a Container","text":"<p>Docker images can bundle arbitrary binaries and libraries into a single blob of data. Inspecting what's actually inside an image helps you assess its suitability and identify any security hazards.</p> <p>The easiest way to explore an image's content involves starting a container, getting a shell session, and then using regular terminal commands like <code>ls</code> and <code>cd</code> to view its directory structure from within. This isn't ideal in security-critical environments though - creating a container with an unknown image could expose you to a malicious entrypoint script.</p> <p>Here are techniques you can use to inspect an image's files without starting a container.</p>"},{"location":"docker/docker_notes/#creating-a-container-without-starting-it","title":"Creating a Container Without Starting It","text":"<p><code>docker create</code> is a lesser-known counterpart to docker run. It creates a new container atop a given image without starting it. You could launch it later on with the docker start command.</p> <p>Creating a new container isn't dangerous as it'll stay inert until it's run. You can roughly liken it to defining the config settings for a VM which you don't use. Even if it's set to boot from a tainted operating system ISO, you're not going to cause any damage to your environment.</p> <p><code>docker create --name suspect-container suspect-image:latest</code></p> <p>The command above creates a new container called suspect-container that will be based on the suspect-image:latest image.</p>"},{"location":"docker/docker_notes/#exporting-the-containers-filesystem","title":"Exporting the Container's Filesystem","text":"<p>Now you've got a valid but stopped container, you can export its filesystem using the docker export command. As the container's never been started, you can be sure the export accurately represents the filesystem defined by your image's layers.</p> <p><code>docker export suspect-container &gt; suspect-container.tar</code></p> <p>You'll end up with a tar archive in your working directory that contains everything inside your image. Open or extract this archive using your favorite software to browse the image's directories and list and view files.</p> <p>If you don't need to save or open the archive, instead preferring to get the file list in your terminal, modify the tar command:</p> <p><code>docker export suspect-container | tar t &gt; suspect-container-files.txt</code></p> <p><code>tar t</code> lists the contents of the input archive. You'll end up with a list of everything in your image inside <code>suspect-container-files.txt</code>.</p>"},{"location":"docker/docker_notes/#using-docker-image-save","title":"Using \"docker image save\"","text":"<p>A variation on this technique is using docker image save. This command directly saves an image's data to a tar archive.</p> <p><code>docker image save suspect-image:latest &gt; suspect-image.tar</code></p> <p>This method produces an archive that's focused on the image, not containers created from it. The tar will include a manifest.json file, describing the image's layers, and a set of directories containing the content of all the individual layers.</p> <p>This is helpful when you're evaluating each layer's role in building the image. However, creating and exporting a stopped container is a more accessible way to browse the image's final filesystem.</p>"},{"location":"docker/docker_notes/#listing-layers-with-docker-image-history","title":"Listing Layers With \"docker image history\"","text":"<p>Another way of inspecting an image's content is to view its layer list with the docker image history command.</p> <p><code>docker image history suspect-image:latest</code></p> <p>This exposes the Dockerfile instructions that composed the image's layers. It won't let you see individual files and directories in the image's filesystem but can more be effective at highlighting suspect behavior.</p> <p>Each line in the command's output represents a new layer in the image. The \"CREATED BY\" column shows the Dockerfile instruction that created the layer.</p> <p>Scanning the layer list helps you quickly identify suspicious actions that could indicate you're using a malicious image. Look for unknown binaries in RUN instructions, unexpected environment variable changes, and suspicious CMD and ENTRYPOINT statements.</p> <p>The latter two layers are arguably the most important to assess when inspecting an image's history. They tell you exactly what will launch when you docker run or docker start a container. If either instruction looks suspicious or unfamiliar, consider using the techniques above to fully inspect the referenced binaries or scripts.</p> <p>Accessing an image's filesystem provides a very granular view of its contents where malicious content can easily go unnoticed, even after manual inspection. The layer list exposed by docker image history can't help you find disguised filesystem items but is more effective at surfacing blatantly malicious operations such as furtive spyware downloads or environment variable overrides.</p>"},{"location":"docker/docker_notes_2/","title":"Notas 2","text":""},{"location":"docker/docker_notes_2/#notas","title":"Notas","text":""},{"location":"docker/docker_notes_2/#espacio-usado-por-docker","title":"Espacio usado por docker","text":"<p><code>docker system df</code></p> <p>para liberar espacio usar <code>docker system prune --all</code> borra los siguientes datos</p> <ul> <li>all stopped containers</li> <li>all networks not used by at least one container</li> <li>all images without at least one container associated to them</li> <li>all build cache</li> </ul>"},{"location":"docker/docker_notes_2/#conocer-sobre-los-recursos-utilizados-por-los-contenedores","title":"Conocer sobre los recursos utilizados por los contenedores","text":"<p><code>docker stats</code></p>"},{"location":"ghost_docs/ok/","title":"Gosth","text":"<p>asdasdasd</p>"},{"location":"git/git/","title":"git","text":""},{"location":"git/git/#mostrar-grafica-de-commits-en-consola","title":"Mostrar grafica de commits en consola","text":"<pre><code>git log --branches --remotes --tags --graph --oneline --decorate\n</code></pre>"},{"location":"git/git/#cambios-locales-que-no-se-han-subido-al-server","title":"Cambios locales que no se han subido al server","text":"<pre><code>git log --branches --not --remotes=origin\n</code></pre> <p>por revisar</p> <pre><code>git log --reverse --pretty=format:'\"%h\":{%n \"parents\":\"%p\",%n \"message\":\"%s\",%n \"dat\":\"%cr\",%n \"name\":\"%an\"%n},'\n</code></pre>"},{"location":"git/git/#exportar-de-una-revision-a-otra-en-git","title":"Exportar de una revisi\u00f3n a otra en git","text":"<p>Este comando es sobre el cmd de windows</p> <pre><code>for /f \"usebackq tokens=*\" %A in (`git diff-tree -r --no-commit-id --name-only --diff-filter=ACMRT 441dc870f52ee04068a5aba6a2c4acd1d6840ffe HEAD`) do echo FA|xcopy \"%~fA\" \"C:\\git_changed_files\\%A\"\n</code></pre>"},{"location":"git/git/#guardar-credenciales","title":"Guardar credenciales","text":"<p>Se usa para que no las solicite cada vez que se realiza una operaci\u00f3n sobre los remotes, tener cuidado que se almacenan en texto plano en <code>/home/username/.git-credentials</code></p> <pre><code>git config --global credential.helper store\n</code></pre>"},{"location":"git/git/#definir-usuario-y-email-para-los-commits","title":"Definir usuario y email para los commits","text":"<p>Esta configuraci\u00f3n se alamcena en <code>/home/username/.gitconfig</code></p> <pre><code>git config --global user.email \"usuario@servidor.com\"\ngit config --global user.name \"Nombre Usuario\"\n</code></pre>"},{"location":"git/git/#cambiar-origen-de-repositorio-de-https-a-ssh","title":"Cambiar origen de repositorio de https a ssh","text":"<p>Para ver donde apuntan los origenes del repositorio se ejecuta el comando <code>git remote -v</code> el que tiene como salida algo como esto:</p> <pre><code>origin  https://usuario@servidor.org/url/del/repositorio.git (fetch)\norigin  https://usuario@servidor.org/url/del/repositorio.git (push)\n</code></pre> <p>Para cambiar la url de origen a <code>ssh</code> se realiza con el siguiente comando:</p> <pre><code>git remote set-url origin git@servidor.org:url/del/repositorio.git\n</code></pre> <p>Si volvieramos a ejecutar <code>git remote -v</code> veremos como nuestro origen a cambiado de <code>https</code> a <code>ssh</code></p> <pre><code>origin  git@servidor.org:url/del/repositorio.git (fetch)\norigin  git@servidor.org:url/del/repositorio.git (push)\n</code></pre> <p>Nota: en caso de querer cambiar de <code>ssh</code> a <code>https</code> ser\u00eda el mismo proceso pero cambiando la url</p>"},{"location":"git/git/#compare-changes-from-branch-xxx-against-master","title":"Compare changes from branch XXX against master","text":"<pre><code>git reset $(git merge-base master XXX)\n</code></pre>"},{"location":"git/git/#create-a-fake-commit-and-trigger-the-new-build","title":"Create a fake commit and trigger the new build","text":"<pre><code>git commit -a --amend --no-edit --no-verify; git push --force-with-lease\n</code></pre>"},{"location":"git/git/#create-an-empty-commit","title":"Create an empty commit","text":"<pre><code>git commit --allow-empty -m \"My empty commit with a message\"\n</code></pre>"},{"location":"git/git/#rename-git-branch-locally-and-remotely","title":"Rename git branch locally and remotely","text":"<pre><code>git branch -m old_branch new_branch         # Rename branch locally    \ngit push origin :old_branch                 # Delete the old branch    \ngit push --set-upstream origin new_branch   # Push the new branch, set local branch to track the new remote\n</code></pre>"},{"location":"git/git/#takes-a-patch-eg-the-output-of-git-diff-and-applies-it-to-the-working-directory","title":"Takes a patch (e.g. the output of git diff ) and applies it to the working directory","text":"<pre><code>git apply &lt;&lt; EOF\n... some diff here\nEOF\n</code></pre>"},{"location":"git/git/#attaches-a-pull-request-for-the-current-branch-to-the-existing-issue-number-x-using-hub","title":"Attaches a pull request for the current branch to the existing issue number x using hub","text":"<pre><code>hub pull-request -i x\n</code></pre>"},{"location":"git/git/#remove-all-your-local-git-branches-but-keep-master","title":"Remove all your local git branches but keep master","text":"<pre><code>git branch | grep -v \"master\" | xargs git branch -D\n</code></pre>"},{"location":"git/git/#pull-multiple-projects-automatically","title":"Pull multiple projects automatically","text":"<pre><code>find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull \\;\n</code></pre>"},{"location":"git/git/#remove-all-files-which-are-not-tracked-by-git","title":"Remove all files which are not tracked by git","text":"<pre><code>git clean -fxd\n</code></pre>"},{"location":"git/git/#move-branches-around","title":"Move branches around","text":"<p>Reassign a branch to a commit with the -f option. It moves (by force) the main branch to three parents behind HEAD.</p> <pre><code>git branch -f main HEAD~3\n</code></pre>"},{"location":"git/git/#shorthand-for-a-fetch-and-a-rebase","title":"Shorthand for a fetch and a rebase","text":"<pre><code>git pull --rebase\n</code></pre>"},{"location":"git/git/#show-any-action-performed-in-git","title":"Show any action performed in git","text":"<pre><code>git reflog\n</code></pre>"},{"location":"git/git/#print-the-sha1-hashes-given-a-revision","title":"Print the SHA1 hashes given a revision","text":"<pre><code>git rev-parse\n</code></pre>"},{"location":"git/git/#remove-all-branches-matching-a-pattern","title":"Remove all branches matching a pattern","text":"<pre><code>git branch | grep \"&lt;pattern&gt;\" | xargs git branch -D\n</code></pre>"},{"location":"git/git/#check-all-differences-between-two-branches-and-apply-to-a-new-branch","title":"Check all differences between two branches and apply to a new branch","text":"<pre><code>git checkout master\ngit diff master..your-branch &gt; mypatch.patch\ngit checkout -b new-branch\ngit apply mypatch.patch\n</code></pre>"},{"location":"git/git/#remove-all-untracked-files","title":"Remove all untracked files","text":"<p>To see which files will be deleted:</p> <pre><code>git clean -n\n</code></pre> <p>To remove all files:</p> <pre><code>git clean -f\n</code></pre>"},{"location":"git/git/#revert-latest-commit-which-was-pushed","title":"Revert latest commit which was pushed","text":"<p>Create a new commit that undoes the changes of a previous commit.</p> <pre><code>git revert HEAD\n</code></pre>"},{"location":"git/git/#create-a-path-file","title":"Create a path file","text":"<pre><code>git diff &gt; my_patch.patch\n</code></pre>"},{"location":"git/git/#apply-a-path-file","title":"Apply a path file","text":"<pre><code> git apply my_patch.patch\n</code></pre>"},{"location":"git/tips/","title":"Tips","text":"<p>https://firstaidgit.io/</p>"},{"location":"git/tips/#merge-my-local-changes-with-another-branch","title":"Merge my local changes with another branch","text":""},{"location":"git/tips/#modify-undo-commit-after-push-reset","title":"modify undo commit after push reset","text":"<p>This can be done while a regular <code>merge</code>, and you should keep your merge history by making sure to use <code>--no-ff</code>, which means no fast forward. </p> <p>Switch to the branch you're merging against, make sure it's up to date, and merge: </p> <p><code>git merge &lt;the-other-branch&gt; --no-ff</code> </p> <p>You should get a commit message with the <code>merge X into Y branch</code>, anthen you can safely push your merge.&gt;</p>"},{"location":"git/tips/#undo-commit-before-pushing-changes","title":"Undo commit before pushing changes","text":""},{"location":"git/tips/#modify-undo-commit-local-before-push-reset","title":"modify undo commit local before push reset","text":"<p>If you made a commit that you wish to modify or erase entirely, the git <code>reset</code> command can be of help here. </p> <p><code>git reset HEAD~1 # undo last commit, keep the changes</code> </p> <p><code>git reset --hard HEAD~1 #undo last commit, erase the changes</code> </p> <p>Naturally, be careful when using the last option as your local files will be discarded! </p> <p>To keep the samcommit message:</p> <p><code>git commit -a -c ORIG_HEAD</code></p> <p>You will be prompted with your last commit message. </p> <p>Tips from hrbonz </p>"},{"location":"git/tips/#recover-a-deleted-branch","title":"Recover a deleted branch","text":""},{"location":"git/tips/#recover-deleted-branch","title":"recover deleted branch\"","text":"<p>By typing <code>git reflog</code>, you can grab the commit hash (SHA1) at the top of your deleted branch. Copy this <code>sha</code>, then use: </p> <p><code>git checkout &lt;sha&gt;</code> </p> <p>Once you've done that, recover the branch by typing: </p> <p><code>git checkout -b &lt;branchname&gt;</code></p> <p>git reflog</p>"},{"location":"git/tips/#display-the-commits-that-have-deleted-files","title":"Display the commits that have deleted files","text":""},{"location":"git/tips/#display-show-deleted-files-history","title":"display show deleted files history","text":"<p>You can quickly check which commits included deleted files by using the following command: </p> <p><code>git log --diff-filter=D --summary</code> </p> <p>This will show you the commits in which files were removed.</p>"},{"location":"git/tips/#rebase-my-branch-with-master","title":"Rebase my branch with master","text":""},{"location":"git/tips/#rebase-branch-against-master-changes","title":"rebase branch against master changes","text":"<p>To catch-up with the latest changes from master (or any other branch you started from), you can and should rebase against it. Say you're working on the <code>foobar</code> branch: </p> <p><code>git checkout foobar</code> </p> <p>Followed by a rebase: </p> <p><code>git rebase master</code> </p> <p>This applies the <code>origin</code> commits on top of master. When you're done with solving conflicts, continuby using <code>git rebase --continue</code>. At this point you can continue to work on your branch or merge it against master. </p> <p>Learn more about rebases</p>"},{"location":"git/tips/#restore-a-deleted-file","title":"Restore a deleted file","text":""},{"location":"git/tips/#restore-recover-deleted-file","title":"restore recover deleted file","text":"<p>If you deleted a file by accident, you can get it back by checking it out again: </p> <p><code>git checkout myFile.txt</code> </p> <p>If you need to restore a file from a certain point in time in your commit history, grab the hash of that commit and run: </p> <p><code>git checkout $commit~1 myFile.txt</code></p>"},{"location":"git/tips/#discard-local-file-changes","title":"Discard local file changes","text":""},{"location":"git/tips/#revert-changes-reset-file-specific-version","title":"revert changes reset file specific version","text":"<p>The easiest way to get rid of unwanted changes is by resetting a file or a folder to the current commit state. To do so, you can use </p> <p><code>git checkout myFile.txt</code> </p> <p>You can also reset a specific path instead: </p> <p><code>git checkout -- myPath</code></p>"},{"location":"git/tips/#clear-all-stashed-states","title":"Clear all stashed states","text":""},{"location":"git/tips/#clear-stash","title":"clear stash","text":"<p>You can clear all stashed states by using: </p> <p><code>git stash clear</code></p>"},{"location":"git/tips/#remove-untracked-files-and-folders","title":"Remove untracked files and folders","text":""},{"location":"git/tips/#remove-clear-untracked-files","title":"remove clear untracked files\"","text":"<p>To remove all untracked files from your working copy: </p> <p><code>git clean -f</code> </p> <p>To remove all untracked files and folders: </p> <p><code>git clean -fd</code> </p> <p>Tip: If you'd like to see first which files will be untracked before actually removing them, you can do a safe clean test by running: </p> <p><code>git clean -n</code></p> <p>git clean</p>"},{"location":"git/tips/#undo-a-commit-message-before-pushing","title":"Undo a commit message before pushing","text":""},{"location":"git/tips/#undo-commit-message-before-pushing-amend","title":"undo commit message before pushing amend","text":"<p>You can amend your commit message by typing <code>git commit --amend</code>, which will open your editor and allow you to make changes to the most recent commit message. </p> <p>You can also modify the message directly, by using: </p> <p><code>git commit --amend -m \\\"My new awesome message\\\"</code></p>"},{"location":"git/tips/#display-commits-by-author","title":"Display commits by author","text":""},{"location":"git/tips/#display-show-commits-by-author-name","title":"display show commits by author name\"","text":"<p>You can filter the commit history by author by using: </p> <p><code>git log --author=\\\"AuthorName\\\"</code></p> <p>git log author</p>"},{"location":"git/tips/#search-for-a-specific-commit-message-in-all-commits","title":"Search for a specific commit message in all commits","text":""},{"location":"git/tips/#search-commit-message-regexp-log-find","title":"search commit message regexp log find","text":"<p>You can search for a specific commit log by matching it on a regular expression. Use: </p> <p><code>git log --grep &lt;your-query&gt;</code></p>"},{"location":"git/tips/#undo-a-commit-message-after-pushing","title":"Undo a commit message after pushing","text":""},{"location":"git/tips/#undo-commit-message-after-pushing-amend","title":"undo commit message after pushing amend","text":"<p>This is a two-step process. You need to amend your commit message by using <code>git commit --amend</code>, and then you re-write your branch commit history by force pushing the commit: <code>git push &lt;remote&gt; &lt;branch&gt; --force</code> </p> <p>Warning: by force pushing, you can lose the remote branch commits if your local branch is not up to date, so be careful.</p>"},{"location":"git/tips/#combine-two-or-more-commits","title":"Combine two or more commits","text":""},{"location":"git/tips/#combine-commits-join-rebase","title":"combine commits join rebase\"","text":"<p>You will need to use an interactive rebase. If you're rebasing against master, start the process by typing <code>git rebase -i master</code>. However, if you're not rebasing against a branch, you'll need to rebase against your <code>HEAD</code>.</p> <p>If you want to squash your last 2 commits, you can use: </p> <p><code>git rebase -i HEAD~2</code>.</p> <p>You will then be prompted to folloinstructions to pick commits. If you wish to combine all your commits with the oldest first commit, leave the first line with <code>pick</code> and change the letter to <code>f</code> on all other commits. Learn more about rebases </p> <p>git rebase</p>"},{"location":"git/tips/#remove-a-file-from-git-but-keep-the-local-file","title":"Remove a file from git but keep the local file","text":""},{"location":"git/tips/#remove-file-from-git-delete","title":"remove file from git delete","text":"<p>This will remove the file your your git tracking, but keep your local copy:</p> <p><code>git rm --cached myfile.txt</code></p>"},{"location":"git/tips/#compare-an-old-revision-of-a-file","title":"Compare an old revision of a file","text":""},{"location":"git/tips/#compare-old-revision-file","title":"compare old revision file\"","text":"<p>You can easily view the contents of a file at a specific point in time by using: </p> <p><code>git show commitHash:myFile.txt</code></p> <p>git show</p>"},{"location":"git/tips/#squash-feature-branch-commits-to-merge-into-the-release-branch","title":"Squash feature branch commits to merge into the release branch","text":""},{"location":"git/tips/#squash-combine-commits-feature-merge-update-release","title":"squash combine commits feature merge update release\"","text":"<p>If you decide to merge and squash your commits, this will create a new commit but only in the release branch, therefore the history of the feature branch will remain intact. </p> <p>Here's an example on how to achieve this: </p> <p><code>git fetch origin</code> </p> <p><code>git checkout [release-branch]</code> </p> <p><code>git rebase origin/[release-branch]</code> </p> <p><code>git merge \u2014squas\u2014no-commit [feature-branch]</code> </p> <p><code>git commit -m 'Merge X into Y'</code> </p> <p>You'll end up with one commit only in your release branch, while keeping the feature history intact. </p> <p>Learn more about feature branches</p> <p>git squash</p>"},{"location":"git/tips/#reset-to-a-certain-commit-in-history","title":"Reset to a certain commit in history","text":""},{"location":"git/tips/#revert-reset-commit-certain-history","title":"revert reset commit certain history","text":"<p>If you don't care about your local changes, you can reset back to one commit back in time by doing a hard reset: </p> <p><code>git reset --hard HEAD~1</code> </p> <p>This will set the HEAD back by one commit. You can also do this using the commit hash instead.</p>"},{"location":"git/tips/#untrack-files-that-already-exist","title":"Untrack files that already exist","text":""},{"location":"git/tips/#untrack-remove-files-already-exist-there","title":"untrack remove files already exist there","text":"<p>If you want to untrack a file that already exists in the repo but would still like to keep it locally, commit your changes and run: </p> <p><code>git rm -r --cached</code> </p> <p>This will remove changed files from the staging area. Afterwards, just run a normal: </p> <p><code>git add .</code> and commit your changes.</p>"},{"location":"git/tips/#recover-a-deleted-tag","title":"Recover a deleted tag","text":""},{"location":"git/tips/#recover-undo-deleted-tag-accident","title":"recover undo deleted tag accident","text":"<p>If you want to recover a tag deleted by accident, start by grabbing it: </p> <p><code>git fsck --unreachable | grep tag</code> </p> <p>Once you found it, you can restore it: </p> <p><code>git update-ref refs/tags/NAME KEY</code> </p> <p>Source</p>"},{"location":"git/tips/#move-uncommited-changes-to-a-new-branch","title":"Move uncommited changes to a new branch","text":""},{"location":"git/tips/#create-new-branch-keep-changes","title":"create new branch keep changes","text":"<p>Too often we start changing files on a branch to fix something, only then realising we didn't create a new branch before. Luckily, this is as simple as creating a new branch: </p> <p><code>git checkout -b my-new-branch-name</code> </p> <p>This will bring any files from your current branch into the new one, which you can commit then.</p>"},{"location":"git/tips/#push-locally-created-branch-to-remote","title":"Push locally created branch to remote","text":""},{"location":"git/tips/#push-local-branch-remote","title":"push local branch remote","text":"<p>If you've created a local branch but now want it to be tracked on the remote you can run: </p> <p><code>git push -u origin my-new-branch-name</code> </p> <p>Now everyone can checkout to your branch.</p>"},{"location":"git/tips/#recover-stashed-changes","title":"Recover stashed changes","text":""},{"location":"git/tips/#recover-stash-stash-changes-stashed","title":"recover stash stash@ changes stashed\"","text":"<p>If you still have your changes stashed, you can apply them onto your branch by using <code>git stash apply</code>. You can run <code>git diff</code> to compare the differences. To get rid of the stash afterwards run: </p> <p><code>git stash drop</code> </p> <p>If you have more than one stash, find the one you need by running: </p> <p><code>git stash list</code> and applying it by referencing its index</p> <p><code>git stash@{1}</code> </p> <p>Keep in mind that this is zero-based (<code>stash@{0}</code> is the first one) </p> <p>Read more about stashes</p> <p>git checkout stash</p>"},{"location":"git/tips/#rename-my-local-and-remote-branch","title":"Rename my local and remote branch","text":""},{"location":"git/tips/#rename-wrong-name-branch","title":"rename wrong name branch","text":"<p>Let\u2019s say you have a \u201cfix-bug25\u201d branch, and you want to rename it to \u201chotfix-users\u201d. First, change the local branch: </p> <p><code>git branch -m fix-bug25 hotfix-users</code> </p> <p>Now, the remote branch: you can\u2019t rename the branch directly, so you\u2019ll need to delete it and push it again with the new name. Make sure no one else within your team is working on itDelete the branch: <code>git push origin --delete fix-bug25</code> </p> <p>And now let's push the new one: <code>git push origin hotfix-users</code></p>"},{"location":"git/tips/#undo-a-commit-after-pushing-it-to-master","title":"Undo a commit after pushing it to master","text":""},{"location":"git/tips/#undo-revert-commit-pushed-after-push","title":"undo revert commit pushed after push\"","text":"<p>This will revert one or more commits that you want to erase from the remote branch. You can either specify one by hash: </p> <p><code>git revert b712c3c</code> </p> <p>Revert only the second to last commit: </p> <p><code>git revert HEAD^</code> </p> <p>Or undo the last commit without creating a revert commit: </p> <p><code>git revert -n HEAD</code> </p> <p>Tip: <code>HEAD~1</code> is a shortcut to <code>HEAD^</code>, themean the same thing. Learn more about git revert</p> <p>git revert</p>"},{"location":"git/tips/#unstage-a-file","title":"Unstage a file","text":""},{"location":"git/tips/#unstage-file-from-remove-commit","title":"unstage file from remove commit","text":"<p>To unstage a file added by mistake, the easiest option would be: </p> <p><code>git reset HEAD unlovedFile.txt</code></p>"},{"location":"git/tips/#committed-to-the-wrong-branc-commit-wrong-branch-master-accident","title":"Committed to the wrong branc### commit wrong branch master accident","text":"<p>Start by switching to the new branch you forgot to create, by typing </p> <p><code>git checkout -b &lt;new-branch&gt;</code>. </p> <p>Switch back to the original branch now: </p> <p><code>git checkout &lt;original-branch&gt;</code> </p> <p>...and reset to the last commit you want to keep. </p> <p>To do so, you can type <code>git log</code> and save the hash (SHA1) of the last commit that you want to keep. Let'say this is <code>a31a45c</code>. </p> <p>Now you have to reset it: <code>git reset --hard a31a45c</code> and push this last forced reset. </p> <p>Warning: Make sure no one has committed to that original branch in the meantime, or changes might be lost!</p>"},{"location":"git/tips/#delete-remote-branch","title":"Delete remote branch","text":""},{"location":"git/tips/#delete-remote-branch_1","title":"delete remote branch","text":"<p>If you are positive this branch can be deleted, type: </p> <p><code>git push origin --delete branch-name</code></p> <p>ssuming that you have no changes that you want to save, this can be done with two easy commands. </p> <p>First let's get a fresh fetch of the remote: </p> <p><code>git fetch &lt;remoteBranchName&gt;</code>. </p> <p>Then let's tell git that we want to reset our local to the head of our remote branch like so: </p> <p><code>git reset --hard origin/&lt;localBranchName&gt;</code>. </p> <p>If you do hav### you wish to keep, you should check out a new branch and make a commit before resetting: <code>git commit -m \\\"just in case\\\"</code> </p> <p><code>git branch my-new-branch-name</code>\"</p>"},{"location":"git/tips/#reset-local-branch-to-match-remote","title":"Reset local branch to match remote","text":"<p>reset local branch to match remote</p>"},{"location":"git/tips/#show-number-of-commits-from-each-contributor","title":"Show number of commits from each contributor","text":""},{"location":"git/tips/#show-number-commits","title":"show number commits","text":"<p>Want to see how many commits everyone in your team has made? </p> <p><code>git shortlog -s -n</code> </p> <p>This will order the authors in decending order by number of commits made.</p>"},{"location":"git/tips/#show-all-the-commits-to-one-file","title":"Show all the commits to one file","text":""},{"location":"git/tips/#show-all-commits-file","title":"show all commits file\"","text":"<p>Ever wanted to see all the commits made to a single file? </p> <p><code>git log --follow -p -- myfile</code> </p> <p>This will show all the commits made to a single file. The <code>--follow</code> argument ensures that we can see commits made to that file even if it was under a different file name at the time. </p> <p>Omit the <code>-p</code> to just see the commit messages and not the commicontent.</p> <p>git log follow</p>"},{"location":"git/tips/#use-command-aliass-in-your-cli","title":"Use command alias's in your CLI","text":""},{"location":"git/tips/#command-alias","title":"command alias","text":"<p>Getting fed up of typing <code>git status</code>? Well we can easily alias that command to something slightly quicker to type within git. </p> <p><code>git config --global alias.st status</code> </p> <p>Now all we have to type is <code>git st</code> </p> <p>We can take it a step further by aliasing more complicated commands to an alias: </p> <p><code>git config --global alias.logme 'log ---author=Rob'</code> </p> <p>Now we've aliased <code>git logme</code> to show all of our commits.</p>"},{"location":"git/tips/#mark-a-conflict-file-as-resolved","title":"Mark a conflict file as resolved","text":""},{"location":"git/tips/#conflict-mark-resolve-file","title":"conflict mark resolve file\"","text":"<p>To mark a file (or several) conflicted files as resolved so you can push the changes up, normally add these files: </p> <p><code>git add &lt;file&gt;</code> </p> <p>You can then type <code>git commit</code> to solve these conflicts and push the changes up. </p> <p>Suggested by Robert W\u00fcnsch.</p> <p>git add</p>"},{"location":"git/tips/#display-all-unpushed-commits","title":"Display all unpushed commits","text":""},{"location":"git/tips/#display-show-unpushed-commits","title":"display show unpushed commits\"","text":"<p>To view all the commits that are yet to be pushed to all branches, use the following command: </p> <p><code>git log --branches --not --remotes</code> </p> <p>Alternatively, you can also use: </p> <p><code>git log origin/master..HEAD</code></p> <p>git log</p>"},{"location":"git/tips/#rename-a-git-tag","title":"Rename a git tag","text":""},{"location":"git/tips/#rename-tag-name-change","title":"rename tag name change\"","text":"<p>To rename an existing tag: </p> <p><code>git tag &lt;newTag&gt; &lt;oldTag&gt;</code> </p> <p><code>git tag -d &lt;oldTag&gt;</code> </p> <p><code>git push origin :refs/tags/&lt;oldTag&gt;</code> </p> <p><code>git push --tags</code></p> <p>git tag</p>"},{"location":"git/tips/#remove-old-remote-git-branches","title":"Remove old remote git branches","text":""},{"location":"git/tips/#remove-old-prune-branch","title":"remove old prune branch\"","text":"<p>If a branch is removed on the remote, you can delete it from the local refs by using the <code>git-remote prune &lt;name&gt;</code> feature. </p> <p>This will delete the stale remote-tracking branch under , where the stale branch has already been removed from the remote repository referenced by , but are still locally available in <code>remotes/&lt;name&gt;</code>. <p>git remote prune"},{"location":"git/tips/#update-a-specific-submodule","title":"Update a specific submodule","text":""},{"location":"git/tips/#update-submodule","title":"update submodule\"","text":"<p>To update a specific submodule in your repository, you should append the path to your submodule: </p> <p><code>git submodule update --remote --merge &lt;path&gt;</code> </p> <p>Suggested by Wouter Peschier.</p> <p>git submodule remote merge</p>"},{"location":"git/tips/#stage-deleted-files","title":"Stage deleted files","text":""},{"location":"git/tips/#stage-commit-deleted-files-folders","title":"stage commit deleted files folders\"","text":"<p>To stage for commit files or folders that you have deleted locally, you can use: </p> <p><code>git add -u</code> </p> <p>If you only want to stage the current path you're in, use: </p> <p><code>git add -u .</code></p> <p>git add -u</p>"},{"location":"git/tips/#move-recent-commits-to-a-new-branch","title":"Move recent commits to a new branch","text":""},{"location":"git/tips/#move-recent-commits-to-new-branch-last","title":"move recent commits to new branch last\"","text":"<p>Say you want to move the last 2 commits into a new, separate branch. You can do this by creating the branch, rolling back 2 commits and checking out the branch. So: </p> <p><code>git branch &lt;branch-name&gt;</code> </p> <p><code>git reset --hard HEAD~2 # this rolls back 2 commits</code> </p> <p><code>git checkout &lt;branch-name&gt;</code> </p> <p>Note that by HARD resetting you will lose any uncommitework. So make sure that everything is committed!</p> <p>git reset branch</p>"},{"location":"git/tips/#show-all-remote-branches","title":"Show all remote branches","text":""},{"location":"git/tips/#show-branches-remote-display","title":"show branches remote display\"","text":"<p>To view a list of all tracked and untracked remote branches, use: </p> <p><code>git remote show origin</code></p> <p>git add -u</p>"},{"location":"git/tips/#list-all-files-changed-in-a-commit","title":"List all files changed in a commit","text":""},{"location":"git/tips/#show-branches-remote-display_1","title":"show branches remote display\"","text":"<p>To view just the file names, use: </p> <p><code>git show --name-only SHA1</code></p> <p>Also view the status:</p> <p><code>git show --name-status SHA1</code></p> <p>git show</p>"},{"location":"git/tips/#checkout-a-file-from-a-different-branch","title":"Checkout a file from a different branch","text":""},{"location":"git/tips/#checkout-file-different-branch","title":"checkout file different branch\"","text":"<p>You can checkout a single file from a different branch without switching to it. Use: </p> <p><code>git checkout &lt;branch_name&gt; -- &lt;file_path&gt;</code></p> <p>git checkout</p>"},{"location":"git/tips/#show-contents-of-a-file-at-a-specific-commit","title":"Show contents of a file at a specific commit","text":""},{"location":"git/tips/#show-contents-of-a-file-at-a-particular-commit","title":"Show contents of a file at a particular commit\"","text":"<p>You can get a file\u2019s contents out from a specific commit. Use: </p> <p><code>git show &lt;treeish&gt;:&lt;file&gt;</code> </p> <p>Source</p> <p>git show</p>"},{"location":"git/tips/#clone-a-repository-without-getting-the-entire-history","title":"Clone a repository without getting the entire history","text":""},{"location":"git/tips/#git-clone","title":"git clone\"","text":"<p>You're looking for a shallow clone. This will only fetch the latest history and not all the objects in the repository, which might take a long time while not necessary. </p> <p><code>git clone &lt;repository URL&gt; --depth 1</code> </p> <p>The <code>depth</code> parameter allows you to specify how deep you want to go: </p> <p><code>git clone &lt;repository URL&gt; --depth 5</code></p> <p>clone shallow depth</p>"},{"location":"git/tips/#add-a-remote-repository","title":"Add a remote repository","text":""},{"location":"git/tips/#remote-add-origin","title":"remote add origin\"","text":"<p>Before you can push to a remote, you first need to add one. When you clone a repository, git will automatically add the URL you cloned from as the <code>origin</code> remote. To add one yourself, use: </p> <p><code>git remote add &lt;remote eame&gt; &lt;repository URL&gt;</code> </p> <p>For example: </p> <p><code>git remote add upstream https://github.com/magalhini/firstaidgit.git</code></p> <p>git remote add</p>"},{"location":"git/tips/#list-all-remote-branches","title":"List all remote branches","text":""},{"location":"git/tips/#remote-branch-list-all","title":"remote branch list all\"","text":"<p>To list all remotes: </p> <p><code>git remote</code> </p> <p>This will only show the names of the remotes. To view more information, use <code>git remote show</code>.</p> <p>git remote</p>"},{"location":"git/tips/#show-information-about-a-remote-branch","title":"Show information about a remote branch","text":""},{"location":"git/tips/#remote-branch-show-information","title":"remote branch show information\"","text":"<p>To show information about a remote branch, such as fetch and push URLs, tracked branches and HEAD, use: </p> <p><code>git remote show origin</code> </p> <p>Where <code>origin</code> is your remote.</p> <p>git remote show</p>"},{"location":"git/tips/#delete-specified-tag","title":"Delete specified tag","text":""},{"location":"git/tips/#delete-tag-for-local-and-remote","title":"delete tag for local and remote\"","text":"<p>You can delete a specific tag locally using: </p> <p><code>git tag -d [tag name]</code> </p> <p>Remove tag from remote using: </p> <p><code>git push [remote name] :refs/tags/[tag name]</code> </p> <p>git tag</p> <p>## Rename a remote</p>"},{"location":"git/tips/#rename-a-remote","title":"rename a remote\"","text":"<p>To rename a remote: </p> <p><code>git remote rename &lt;oldRemote&gt; &lt;newRemote&gt;</code> </p> <p>You can verify your changes by listing the remotes: </p> <p><code>git remote</code> </p> <p>Source</p> <p>git remote rename  <p>{</p>"},{"location":"git/tips/#remove-a-submodule","title":"Remove a submodule","text":""},{"location":"git/tips/#remove-submodule-rm-delete","title":"remove submodule rm delete\"","text":"<p>To remove a submodule use: </p> <p><code>git rm &lt;submodule_path&gt;</code></p> <p>In case you later want to add a submodule with the same name, you will also need to use:</p> <p><code>rm -rf .git/modules/&lt;submodule_path&gt;</code></p> <p>git rm</p>"},{"location":"git/tips/#compare-commit-log-difference-between-2-branches","title":"Compare commit log difference between 2 branches","text":""},{"location":"git/tips/#commit-log-difference-between-2-branches","title":"commit log difference between 2 branches\"","text":"<p>You can compare difference in commit log between 2 branches by: </p> <p><code>git log [branch one]..[branch two]</code> </p> <p>Example to compare the staging and development branch logs: </p> <p><code>git log staging..development</code> </p> <p>git log</p>"},{"location":"git/tips/#list-untracked-files-within-untracked-directories","title":"List untracked files within untracked directories","text":""},{"location":"git/tips/#list-untracked-files-within-untracked-directories_1","title":"list untracked files within untracked directories\"","text":"<p>To list untracked files within untracked directories: </p> <p><code>git status -u</code> </p> <p>By default, git will not show files within directories that are untracked.</p> <p>git status</p>"},{"location":"links/api/","title":"api","text":"<ul> <li>https://unsplash.com/developers</li> </ul>"},{"location":"links/api/#directorio-de-apis","title":"Directorio de api's","text":"<ul> <li> <p>https://rapidapi.com/collection/stock-photo-api</p> </li> <li> <p>Api para probar frontend con datos reales https://reqres.in/</p> </li> </ul>"},{"location":"links/images/","title":"Images","text":"<ul> <li>Pexels</li> <li>Pixabay</li> <li>Unsplash</li> <li>Morguefile</li> <li>Foter</li> <li>123rf</li> <li>Wallhaven</li> <li>Undraw</li> <li>Flaticon</li> <li>Freepik</li> <li>svgporn</li> </ul>"},{"location":"links/others/","title":"Others links","text":"<ul> <li> <p>Zedge</p> </li> <li> <p>Linuxize</p> </li> <li> <p>https://tldr.sh/</p> </li> <li> <p>https://devhints.io/</p> </li> <li> <p>https://crontab.guru/</p> </li> <li> <p>Consultar IP p\u00fablica http://www.vermiip.es/</p> </li> <li> <p>Compartir ficheros https://pixeldrain.com/apps</p> </li> <li> <p>P\u00e1gina de art\u00edculos de linux https://es.linux-console.net/</p> </li> </ul>"},{"location":"operating_systems/linux/cdpath/","title":"CDPATH","text":"<p>CDPATH es una variable de entorno. Muy parecida a PATH que contiene muchas rutas diferentes concatenadas usando ':'</p>"},{"location":"operating_systems/linux/cdpath/#uso","title":"Uso","text":"<p>Digamos, por ejemplo, que el usuario accede con frecuencia a algunos directorios presentes en un directorio <code>\"X\"</code>. Cada vez que el usuario quiere llegar a cualquiera de estos directorios presentes en <code>\"X\"</code>, la mayor\u00eda de las veces lo atraviesa dando la ruta absoluta, lo que lleva poco tiempo si tiene que encontrarla. Qu\u00e9 bueno ser\u00eda si pudi\u00e9ramos hacer <code>\"cd\"</code> en el directorio en particular como si ese directorio que est\u00e1 buscando estuviera justo debajo de su directorio actual. Esto es lo que logra <code>CDPATH</code>.</p> <p>Normalmente, cuando se da el comando <code>cd</code>, verifica el nombre del directorio en el directorio actual y arroja un error si no se encuentra, de lo contrario, atraviesa el directorio. Si se establece el <code>CDPATH</code>, el comando <code>\"cd\"</code> comienza a buscar el directorio en la lista de directorios presentes en la variable <code>CDPATH</code> y luego hace que el directorio cambie de manera apropiada.</p>"},{"location":"operating_systems/linux/cdpath/#como-definir-la-varialbe-cdpath","title":"Como definir la varialbe CDPATH","text":"<p>Definir la variable <code>CDPATH</code> es exactamente igual que con la variable <code>PATH</code>, puedes agregar mas de un directorio de entrada separando las rutas por <code>:</code>, por ejemplo:</p> <pre><code>$ export CDPATH=\".:/home/guru:/usr\"\n</code></pre> <p>Para que tengas estos cambios cada vez que inicies sesi\u00f3n deberias ubicar la exportaci\u00f3n dentro de el fichero <code>~/.bash_profile</code> o <code>~/.profile</code></p>"},{"location":"operating_systems/linux/estructura_de_directorios/","title":"estructura-de-directorios","text":"<p>Fuente https://geekland.eu/estructura-de-directorios-en-linux/</p>"},{"location":"operating_systems/linux/bash/ps1/","title":"PS1","text":"<p>Cuando lo ejecutamos de forma interactiva, y cuando est\u00e1 preparado para leer un comando, bash nos muestra el indicador primario <code>PS1</code>. El indicador secundario <code>PS2</code> aparece cuando necesita m\u00e1s informaci\u00f3n para completar un comando.</p> <p>Bash nos permite personalizar las cadenas de mensajes, insertando barra invertida y caracteres especiales. En la siguiente tabla vemos como se decodifican los caracteres.</p> Car\u00e1cter Que mensaje insertan \\a an ASCII bell character (07) \\d the date in \"Weekday Month Date\" format (e.g., \"Tue May 26\") \\D the format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation. The braces are required \\e an ASCII escape character (033) \\h the hostname up to the first `.' \\H the hostname \\j the number of jobs currently managed by the shell \\l the basename of the shell's terminal device name \\n newline \\r carriage return \\s the name of the shell, the basename of $0 (the portion following the final slash) \\t the current time in 24-hour HH:MM:SS format \\T the current time in 12-hour HH:MM:SS format \\@ the current time in 12-hour am/pm format \\A the current time in 24-hour HH:MM format \\u the username of the current user \\v the version of bash (e.g., 4.3) \\V the release of bash, version + patch level (e.g., 4.3.48) \\w the current working directory, with $HOME abbreviated with a tilde (uses the value of the PROMPT_DIRTRIM variable) \\W the basename of the current working directory, with $HOME abbreviated with a tilde ! the history number of this command # the command number of this command \\$ if the effective UID is 0, a #, otherwise a $ \\nnn the character corresponding to the octal number nnn | \\ a backslash [ begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt"},{"location":"operating_systems/linux/gnome/extensions/","title":"Extensions","text":"<p>Weather In The Clock - GNOME Shell Extensions https://extensions.gnome.org/extension/1380/weather-in-the-clock/</p> <p>gTile - GNOME Shell Extensions https://extensions.gnome.org/extension/28/gtile/</p> <p>Random Wallpaper - GNOME Shell Extensions https://extensions.gnome.org/extension/1040/random-wallpaper/</p>"},{"location":"operating_systems/ubuntu/clipboard/","title":"Access Clipboard From Terminal In Ubuntu Using Xclip!","text":"<p>If You are going back and forth between terminal and any other application, accessing system clipboard contents from command line will be invaluable.</p> <p>If You are using mac, there are inbuilt commands pbcopy &amp; pbpaste. But in Ubuntu these are not available. You need to install a small utility called xclip. Go ahead and install it.</p> <pre><code>sudo apt-get install xclip\n</code></pre> <p>Now, You can copy any text ( or the output one command ) into the clipboard using xclip. To copy contents of fruits.txt to clipboard,</p> <pre><code>cat fruits.txt | xclip\n</code></pre> <p>If You want to see the contents of clipboard, You can use</p> <pre><code>xclip -o\n</code></pre> <p>This copy and paste will work only in the terminal, If You switch to another application and try to paste there, it wont work.</p> <p>If You want to paste in another application, You need to copy like this</p> <pre><code>cat fruits.txt | xclip -selection clipboard\n</code></pre> <p>Now, You can switch to any other application &amp; You can paste (CTRL + V) the contents.</p> <p>Tip: Instead of typing all of this everytime, You can setup alias in .bashrc file</p> <pre><code>alias c='xclip -selection clipboard'\nalias v='xclip -o'\n</code></pre> <p>Now You can easily copy the contents like this</p> <pre><code>cat fruits.txt | c\n</code></pre>"},{"location":"operating_systems/ubuntu/create_a_self_signed_ssl_certificate_for_apache/","title":"ssl","text":"<p>https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04-es</p>"},{"location":"operating_systems/ubuntu/lamp/","title":"lamp","text":"<p>https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-ubuntu-18-04</p>"},{"location":"operating_systems/ubuntu/my_config/","title":"Tools and config's","text":""},{"location":"operating_systems/ubuntu/my_config/#used-tools","title":"Used tools","text":"<ul> <li>Flameshot</li> <li>Tweaks</li> <li>Zoom</li> <li>Dbeaver Community</li> <li>VS Code</li> <li>Firefox Developer Edition</li> <li>Guake</li> <li>Google Chrome</li> <li>Ranger</li> <li>Synaptic</li> <li>Gparted</li> <li>xclip</li> <li>docker</li> <li>docker-compose</li> <li>nvm</li> <li>openssh-server</li> <li>apache2</li> <li>mysql-server</li> <li>git</li> <li>Fonts Fira Code (<code>sudo apt install fonts-firacode</code>)</li> </ul>"},{"location":"operating_systems/ubuntu/my_config/#extensions","title":"Extensions","text":"<ul> <li>[x] Clipboard indicator</li> <li>[x] Dash to panel</li> <li>[ ] Desktop icons</li> <li>[x] Refresh wifi connections</li> <li>[x] Resource monitor</li> <li>[ ] Ubuntu appindicators</li> <li>[ ] Ubuntu dock</li> <li>[x] User themes</li> <li>[ ] Vitals</li> </ul> <p>Revisar (instalaci\u00f3n de las extenciones seg\u00fan el n\u00famero en la web)</p> <p>wget -q -O gnome-shell-extension-installer \"https://github.com/brunelli/gnome-shell-extension-installer/raw/master/gnome-shell-extension-installer\" 1&gt;/dev/null chmod +x gnome-shell-extension-installer sudo cp gnome-shell-extension-installer /usr/local/bin/</p>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/","title":"Rename several files at once, in batch, from console","text":"<p>Muchas veces tenemos un mont\u00f3n de ficheros y queremos modificar en lote su nombre de archivo por alguna circunstancia, a\u00f1adir texto, suprimir texto, reemplazar alg\u00fan car\u00e1cter por otro... y nos llevar\u00eda mucho tiempo ir editando uno a uno cuando lo que queremos es hacer la misma edici\u00f3n para todos. Para ello podemos renombrar todos los archivos en lote, todos a la vez, usando desde una consola Linux el comando rename con expresiones regulares que nos permitan reemplazar lo que necesitemos. Mostraremos caracter\u00edsticas, algunos ejemplos y la explicaci\u00f3n de expresiones regulares para usar con rename:</p> <pre><code>Usage:\n\n    rename [ -h|-m|-V ] [ -v ] [ -n ] [ -f ] [ -e|-E *perlexpr*]*|*perlexpr* [ *files* ]\n</code></pre> <p>Please note that the rename command is part of the util-linux package and can be installed on a Debian or Ubuntu Linux, using the following syntax:</p> <pre><code>$ sudo apt-get install renameutils\n</code></pre>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/#caracteristicas","title":"Caracter\u00edsticas:","text":"<p>Par\u00e1metros del comando rename (poner a continuaci\u00f3n del nombre del comando):</p> <ul> <li><code>-v</code> (Verbose: modo detallado, nos saca en pantalla lo que se va haciendo en el proceso)</li> <li><code>-n</code> (No Action: no realiza la acci\u00f3n, solo nos muestra lo que har\u00eda, es importante poner este par\u00e1metro junto con <code>-v</code> la primera vez que ejecutamos para comprobar que el resultado que vamos a obtener es el que queremos)</li> <li><code>-f</code> (Force: sobrescribe los ficheros existentes)</li> <li><code>*.*</code> para que trate todos los archivos con extensi\u00f3n del directorio</li> <li><code>\\</code> Localiza caracteres especiales tipo <code>[ , {, (, -, _, \".\", \u2026</code></li> </ul>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/#ejemplos","title":"Ejemplos","text":"<p>1) A\u00f1adir algo tras una parte del nombre del archivo que es com\u00fan en todos los ficheros. Ejemplo:</p> <p><code>imagenXXXX.jpg</code> por <code>imagen_NEW_XXXX.jpg</code></p> <pre><code># rename -v -n 's/imagen/imagen_NEW_/' *.jpg\n</code></pre> <p>2) Renombrar un grupo de im\u00e1genes con nombres diferentes. Si tenemos un grupo de im\u00e1genes (por ejemplo PNG) a las que les queremos a\u00f1adir una informaci\u00f3n en la parte final del nombre de la imagen antes de la extensi\u00f3n. Ejemplo: <code>nombreimagen.png</code> por <code>nombreimagen_150x150.png</code></p> <pre><code># rename -v -n 's/\\.png/\\_150x150.png/' *.png\n</code></pre> <p>3) Vamos a suponer que queremos reemplazar los guiones bajos por guiones medios (\"_\" por \"-\") en los nombres de nuestros archivos de un directorio determinado.</p> <pre><code># rename -v -n 's/_/-/' *.jpg\n</code></pre> <p>Podemos ejecutar repetidamente por si hay varios guiones bajos en el nombre del archivo o utilizar expresiones regulares de repetici\u00f3n tipo {m} {n}...</p> <p>4) A\u00f1adir texto al inicio del nombre del fichero. Con el car\u00e1cter ^ le indicamos al comando rename que se sit\u00fae en el comienzo del nombre del fichero y ah\u00ed inserte o ejecute la segunda parte. Ejemplo:</p> <pre><code>leccion 1.doc,\nleccion 2.doc ...\n</code></pre> <p>por</p> <pre><code>tema - leccion 1.doc,\ntema - leccion 2.doc ...\n</code></pre> <pre><code># rename -v -n 's/^/tema \u2013 /' *.doc\n</code></pre> <p>5) Si queremos eliminar varios caracteres antes de un punto de corte determinado. Ejemplo:</p> <pre><code>texto1_abc_001_small.jpg,\ntexto2_abc_002_small.jpg,\ntexto3_abc_003_small.jpg\n</code></pre> <p>por</p> <pre><code>texto1_small.jpg,\ntexto2_small.jpg,\ntexto3_small.jpg\n</code></pre> <p>Utilizamos para el corte la cadena \"_small\" y le decimos que nos elimine los 8 caracteres (\\w) anteriores, o los reemplace por lo que indiquemos en la segunda parte del comando rename.</p> <pre><code># rename -v -n 's/\\w{8}\\_small/_small/' *.jpg\n</code></pre> <p>5b) Si queremos reemplazar desde un punto determinado de corte, pero respetando un n\u00famero concreto de caracteres num\u00e9ricos antes de la parte donde se produce el corte. Para este caso usamos el elemento \"$1\" en la cadena de la parte derecha, para que nos coja esa variable obtenida de la parte izquierda.  Viendo el ejemplo se entender\u00e1 mejor. Ejemplo:</p> <pre><code>texto1_uno001_small.jpg,\ntexto2_otro002_small.jpg,\ntexto3_cualquiera003_small.jpg ...\n</code></pre> <p>por</p> <pre><code>texto1_uno_ADD-001_small.jpg,\ntexto2_otro_ADD-002_small.jpg,\ntexto3_cualquiera_ADD-003_small.jpg ...\n</code></pre> <p>Utilizamos para el corte la cadena \"_small\" y le decimos que nos guarde los 3 caracteres num\u00e9ricos (\\d) anteriores (001, 002, 003...) utilizando el $1 en la segunda parte del comando (la expresi\u00f3n de la derecha) Nos a\u00f1adir\u00e1 o modificara lo indicado en la segunda parte del comando rename justo antes de esos 3 caracteres reservados antes del corte.</p> <pre><code># rename -v -n 's/(\\w{3})\\_small/_ADD\u2013$1_small/' *.jpg\n</code></pre> <p>6) Cambiar may\u00fasculas y min\u00fasculas. Ejemplo: <code>mi_fichero.txt</code> por <code>MI_FICHERO.TXT</code></p> <pre><code># rename -v -n 'y/a-z/A-Z/' *.txt\n</code></pre> <p>7) Eliminar del nombre del fichero caracteres especiales que no est\u00e1n entre la letra a y la z (a-z) . Dejando en el nombre del fichero solo caracteres alfanum\u00e9ricos. Ejemplo: <code>mi-fichero.txt</code> por <code>mifichero.txt</code></p> <pre><code># rename -v -n 'v/[^a-z]//' *.*\n</code></pre> <p>Para cambiar varios caracteres lo ejecutamos varias veces. Ejemplo: <code>mi-fichero-con-varios-caracteres.txt</code> por <code>mificheroconvarioscaracteres.txt</code> lo ejecutaremos 4 veces.</p>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/#expresiones-regulares","title":"Expresiones regulares","text":"<p>A continuaci\u00f3n dejo un listado explicando (en ingl\u00e9s) las expresiones regulares que se pueden utilizar con este comando rename:</p> <ul> <li><code>^</code> matches the beginning of the line</li> <li><code>$</code> matches the end of the line</li> <li><code>.</code> Matches any single character</li> <li><code>(character)*</code> match arbitrarily many occurences of (character)</li> <li><code>(character)?</code> Match 0 or 1 instance of (character)</li> <li><code>[abcdef]</code> Match any character enclosed in [] (in this instance, a b c d e or f) ranges of characters such as [a-z] are permitted. The behaviour of this deserves more description.</li> <li><code>[^abcdef]</code> Match any character NOT enclosed in [] (in this instance, any character other than a b c d e or f)</li> <li><code>(character){m,n}</code> Match m-n repetitions of (character)</li> <li><code>(character){m,}</code> Match m or more repetitions of (character)</li> <li><code>(character){,n}</code> Match n or less (possibly 0) repetitions of (character)</li> <li><code>(character){n}</code> Match exactly n repetitions of (character)</li> <li><code>(expression)</code> Group operator.</li> <li><code>expression1|expression2</code> Matches expression1 or expression 2. Works with GNU sed, but this feature might not work with other forms of sed.</li> <li><code>\\w</code> matches any single character classified as a \u201cword\u201d character (alphanumeric or \u201c_\u201d)</li> <li><code>\\W</code> matches any non-\u201cword\u201d character</li> <li><code>\\s</code> matches any whitespace character (space, tab, newline)</li> <li><code>\\S</code> matches any non-whitespace character</li> <li><code>\\d</code> matches any digit character, equiv. to [0-9]</li> <li><code>\\D</code> matches any non-digit character</li> </ul>"},{"location":"operating_systems/ubuntu/top_process/","title":"Procesos","text":"<pre><code>top -b -n1 -c -o %MEM |head -n 20\n</code></pre> <pre><code>ps aux --sort -%mem\n</code></pre>"},{"location":"operating_systems/ubuntu/ubuntu_splash_screen/","title":"Disable splash screen","text":"<p>How to disable the boot splash screen, and only show kernel and boot text instead?</p> <p>Yes. Edit <code>/etc/default/grub</code> (using gksu <code>gedit /etc/default/grub</code>), and remove the <code>\"quiet splash\"</code> from the Linux command line:</p> <p>Here's what it looks like by default:</p> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"\n</code></pre> <p>Make it look like this:</p> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"\"\n</code></pre> <p>After this run <code>sudo update-grub2</code></p> <p>Also from the GRUB menu, if you want to do this temporarily, you can hit <code>E</code> on a line to edit it, then <code>Ctrl+X</code> to boot the kernel line.</p> <p>Make sure you don't have <code>plymouth-theme-ubuntu-text</code> package installed.</p>"},{"location":"operating_systems/windows/enable_version_selection_in_the_installer/","title":"Habilitar selecci\u00f3n de la versi\u00f3n de windows en el proceso de instalaci\u00f3n","text":"<p>A\u00f1adir un archivo llamado <code>\"ei.cfg\"</code> a la iso o USB creado con la herramienta de creaci\u00f3n de medios para que me permita elegir al inicio de la instalaci\u00f3n que versi\u00f3n quiero instalar.</p> <p>El archivo en concreto se llama <code>\"ei.cfg\"</code> y hay que copiarlo dentro de la carpeta <code>\"Source\"</code> que hay en la iso o USB creados con la herramienta de creaci\u00f3n de medios.</p> <p>Este archivo se puede crear f\u00e1cilmente. Simplemente hay que abrir un bloc de notas y copiar lo siguiente:</p> <pre><code>[Channel]\nRetail\n</code></pre> <p>Una vez copiado eso hay que guardar el archivo con el nombre <code>\"ei.cfg\"</code> fij\u00e1ndose que se queda con extensi\u00f3n CFG y que no se llama <code>\"ei.cfg.txt\"</code></p> <p>Una vez se tiene creado este archivo <code>\"ei.cfg\"</code> se copia en la carpeta source como dec\u00eda antes y cuando se inicie la instalaci\u00f3n limpia de Windows 10 te preguntar\u00e1 que versi\u00f3n quieres instalar.</p>"},{"location":"operating_systems/windows/install_net_framework/","title":"Install .NET Framework 3.5 via DISM","text":"<p>Para instalar el .net framework desde el iso de windows montar la imagen en una torre virtual o introducir el disco en la unidad \u00f3ptica, luego desde una terminal ejecutar el siguiente comando:</p> <pre><code>Dism /online /enable-feature /featurename:NetFX3 /All /Source:%setupdrv%:\\sources\\sxs /LimitAccess\n</code></pre> <p>Sustituyendo <code>%setupdrv%</code> por la letra de la unidad donde esta montada la imagen o unidad \u00f3ptica.</p> <p>Otra forma de realizarlo es copiando el siguiente c\u00f3digo en un fichero con la extenci\u00f3n cmd y ejecutarlo desde una terminal. Este se encarga de buscar una a una por cada una de las unidades disponibles hasta que encuentra donde se encuentra  la instalaci\u00f3n de windows y comienza a instalar el .net framework.</p> <pre><code>@echo off\nTitle .NET Framework 3.5 Offline Installer\nfor %%I in (D E F G H I J K L M N O P Q R S T U V W X Y Z) do if exist \"%%I:\\\\sources\\install.wim\" set setupdrv=%%I\nif defined setupdrv (\necho Found drive %setupdrv%\necho Installing .NET Framework 3.5...\nDism /online /enable-feature /featurename:NetFX3 /All /Source:%setupdrv%:\\sources\\sxs /LimitAccess\necho.\necho .NET Framework 3.5 should be installed\necho.\n) else (\necho No installation media found!\necho Insert DVD or USB flash drive and run this file once again. \necho.\n)\npause\n</code></pre>"},{"location":"programming/bash/30_bash_examples/","title":"Bash examples","text":"<p>Source https://linuxhint.com/30_bash_script_examples/</p>"},{"location":"programming/bash/30_bash_examples/#first-bash-program","title":"First BASH Program","text":"<p>You can run bash script from the terminal or by executing any bash file. Run the following command from the terminal to execute a very simple bash statement. The output of the command will be <code>\u2018Hello World\u2019</code>.</p> <pre><code>$ echo \"Hello World\"\n</code></pre> <p>Open any editor to create a bash file. Here, nano editor is used to create the file and filename is set as <code>\u2018First.sh\u2019</code>.</p> <pre><code>$ nano First.sh\n</code></pre> <p>Add the following bash script to the file and save the file.</p> <pre><code>#!/bin/bash\necho \"Hello World\"\n</code></pre> <p>You can run bash file by two ways. One way is by using bash command and another is by setting execute permission to bash file and run the file. Both ways are shown here.</p> <pre><code>$ bash First.sh\n</code></pre> <p>Or,</p> <pre><code>$ chmod a+x First.sh\n$ ./First.sh\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#echo-command","title":"echo command","text":"<p>You can use echo command with various options. Some useful options are mentioned in the following example. When you use <code>\u2018echo\u2019</code> command without any option then a newline is added by default. <code>\u2018-n\u2019</code> option is used to print any text without new line and <code>\u2018-e\u2019</code> option is used to remove backslash characters from the output. Create a new bash file with a name, <code>\u2018echo_example.sh\u2019</code> and add the following script.</p> <pre><code>#!/bin/bash\necho \"Printing text with newline\"\necho -n \"Printing text without newline\"\necho -e \"\\nRemoving \\t backslash \\t characters\\n\"\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#comment","title":"comment","text":"<p><code>\u2018#\u2019</code> symbol is used to add single line comment in bash script. Create a new file named <code>\u2018comment_example.sh\u2019</code> and add  the following script with single line comment.</p> <pre><code>#!/bin/bash\n\n# Add two numeric value\n((sum=25+35))\n\n#Print the result\necho $sum\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#multi-line-comment","title":"Multi-line comment","text":"<p>You can use multi line comment in bash in various ways. A simple way is shown in the following example. Create a new bash named, <code>\u2018multiline-comment.sh\u2019</code> and add the following script. Here, <code>\u2018:\u2019</code> and <code>\u201c \u2019 \u201d</code> symbols are used to add multiline  comment in bash script. This following script will calculate the square of 5.</p> <pre><code>#!/bin/bash\n: '\nThe following script calculates\nthe square value of the number, 5.\n'\n((area=5*5))\necho $area\n</code></pre> <p>You can check the following link to know more about the use of bash comment.</p> <p>https://linuxhint.com/bash_comments/</p>"},{"location":"programming/bash/30_bash_examples/#while-loop","title":"While Loop","text":"<p>Create a bash file with the name, \u2018while_example.sh\u2019, to know the use of while loop. In the example, while loop will iterate for 5 times. The value of count variable will increment by 1 in each step. When the value of count variable will 5 then the while loop will terminate.</p> <pre><code>#!/bin/bash\nvalid=true\ncount=1\nwhile [ $valid ]\ndo\necho $count\nif [ $count -eq 5 ];\nthen\nbreak\nfi\n((count++))\ndone\n</code></pre> <p>You can check the following link to know more about the use of while loop.</p> <p>https://linuxhint.com/bash-while-loop-examples/</p>"},{"location":"programming/bash/30_bash_examples/#for-loop","title":"For Loop","text":"<p>The basic <code>for</code> loop declaration is shown in the following example. Create a file named <code>\u2018for_example.sh\u2019</code> and add the following script using <code>for</code> loop. Here, <code>for</code> loop will iterate for 10 times and print all values of the variable, counter in single line.</p> <pre><code>#!/bin/bash\nfor (( counter=10; counter&gt;0; counter-- ))\ndo\necho -n \"$counter \"\ndone\nprintf \"\\n\"\n</code></pre> <p>You can use for loop for different purposes and ways in your bash script. You can check the following link to know more about the use of for loop.</p> <p>https://linuxhint.com/bash-for-loop-examples/</p>"},{"location":"programming/bash/30_bash_examples/#user-input","title":"User Input","text":"<p><code>\u2018read\u2019</code> command is used to take input from user in bash. Create a file named <code>\u2018user_input.sh\u2019</code> and add the following script for taking input from the user. Here, one string value will be taken from the user and display the value by combining other string value.</p> <pre><code>#!/bin/bash\necho \"Enter Your Name\"\nread name\necho \"Welcome $name to LinuxHint\"\n</code></pre> <p>You can check the following link to know more about the use of user input.</p> <p>https://linuxhint.com/bash-script-user-input/</p>"},{"location":"programming/bash/30_bash_examples/#if-statement","title":"if statement","text":"<p>You can use if condition with single or multiple conditions. Starting and ending block of this statement is define by <code>\u2018if\u2019</code> and <code>\u2018fi\u2019</code>. Create a file named <code>\u2018simple_if.sh\u2019</code> with the following script to know the use if statement in bash. Here, <code>10</code> is assigned to the variable, <code>n</code>. if the value of <code>$n</code> is less than <code>10</code> then the output will be <code>\u201cIt is a one digit number\u201d</code>, otherwise the output will be <code>\u201cIt is a two digit number\u201d</code>. For comparison, <code>\u2018-lt\u2019</code> is used here. For comparison, you can also use <code>\u2018-eq\u2019</code> for <code>equality</code>, <code>\u2018-ne\u2019</code> for <code>not equality</code> and <code>\u2018-gt\u2019</code> for <code>greater than</code> in bash script.</p> <pre><code>#!/bin/bash\nn=10\nif [ $n -lt 10 ];\nthen\necho \"It is a one digit number\"\nelse\necho \"It is a two digit number\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#if-statement-with-and-logic","title":"if statement with AND logic","text":"<p>Different types of logical conditions can be used in if statement with two or more conditions. How you can define multiple conditions in if statement using <code>AND</code> logic is shown in the following example. <code>\u2018&amp;&amp;\u2019</code> is used to apply <code>AND</code> logic of <code>if</code> statement. Create a file named <code>\u2018if_with_AND.sh\u2019</code> to check the following code. Here, the value of username and password variables will be taken from the user and compared with <code>\u2018admin\u2019</code> and <code>\u2018secret\u2019</code>. If both values match then the output will be <code>\u201cvalid user\u201d</code>, otherwise the output will be <code>\u201cinvalid user\u201d</code>.</p> <pre><code>!/bin/bash\n\necho \"Enter username\"\nread username\necho \"Enter password\"\nread password\n\nif [[ ( $username == \"admin\" &amp;&amp; $password == \"secret\" ) ]]; then\necho \"valid user\"\nelse\necho \"invalid user\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#if-statement-with-or-logic","title":"if statement with OR logic","text":"<p><code>\u2018||\u2019</code> is used to define <code>OR</code> logic in <code>if</code> condition. Create a file named <code>\u2018if_with_OR.sh\u2019</code> with the following code to check the use of <code>OR</code> logic of <code>if</code> statement. Here, the value of <code>n</code> will be taken from the user. If the value is equal to <code>15</code> or <code>45</code> then the output will be <code>\u201cYou won the game\u201d</code>, otherwise the output will be <code>\u201cYou lost the game\u201d</code>.</p> <pre><code>#!/bin/bash\n\necho \"Enter any number\"\nread n\n\nif [[ ( $n -eq 15 || $n  -eq 45 ) ]]\nthen\necho \"You won the game\"\nelse\necho \"You lost the game\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#else-if-statement","title":"else if statement","text":"<p>The use of <code>else if</code> condition is little different in bash than other programming language. <code>\u2018elif\u2019</code> is used to define <code>else if</code> condition in bash. Create a file named, <code>\u2018elseif_example.sh\u2019</code> and add the following script to check how <code>else if</code> is defined in bash script.</p> <pre><code>#!/bin/bash\n\necho \"Enter your lucky number\"\nread n\n\nif [ $n -eq 101 ];\nthen\necho \"You got 1st prize\"\nelif [ $n -eq 510 ];\nthen\necho \"You got 2nd prize\"\nelif [ $n -eq 999 ];\nthen\necho \"You got 3rd prize\"\n\nelse\necho \"Sorry, try for the next time\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#case-statement","title":"Case Statement","text":"<p><code>Case</code> statement is used as the alternative of <code>if-elseif-else</code> statement. The starting and ending block of this statement is defined by <code>\u2018case\u2019</code> and <code>\u2018esac\u2019</code>. Create a new file named, <code>\u2018case_example.sh\u2019</code> and add the following script. The output of the following script will be same to the previous <code>else if</code> example.</p> <pre><code>#!/bin/bash\n\necho \"Enter your lucky number\"\nread n\ncase $n in\n101)\necho echo \"You got 1st prize\" ;;\n510)\necho \"You got 2nd prize\" ;;\n999)\necho \"You got 3rd prize\" ;;\n*)\necho \"Sorry, try for the next time\" ;;\nesac\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#arguments-from-command-line","title":"Arguments from Command Line","text":"<p>Bash script can read input from command line argument like other programming language. For example, <code>$1</code> and <code>$2</code> variable are used to read first and second command line arguments. Create a file named <code>\u201ccommand_line.sh\u201d</code> and add the following script. Two argument values read by the following script and prints the total number of arguments and the argument values as output.</p> <pre><code>#!/bin/bash\necho \"Total arguments : $#\"\necho \"1st Argument = $1\"\necho \"2nd argument = $2\"\n</code></pre> <p>You can check the following link to know more about the use of command line argument.</p> <p>https://linuxhint.com/command_line_arguments_bash_script/</p>"},{"location":"programming/bash/30_bash_examples/#arguments-from-command-line-with-names","title":"arguments from command line with names","text":"<p>How you can read command line arguments with names is shown in the following script. Create a file named, <code>\u2018command_line_names.sh\u2019</code> and add the following code. Here, two arguments, <code>X</code> and <code>Y</code> are read by this script and print the sum of X and Y.</p> <pre><code>#!/bin/bash\nfor arg in \"$@\"\ndo\nindex=$(echo $arg | cut -f1 -d=)\nval=$(echo $arg | cut -f2 -d=)\ncase $index in\nX) x=$val;;\n\nY) y=$val;;\n\n*)\nesac\ndone\n((result=x+y))\necho \"X+Y=$result\"\n</code></pre> <p>Run the file with bash command and with two command line arguments.</p> <pre><code>$ bash command_line_names X=45 Y=30\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#combine-string-variables","title":"Combine String variables","text":"<p>You can easily combine string variables in bash. Create a file named <code>\u201cstring_combine.sh\u201d</code> and add the following script to check how you can combine string variables in bash by placing variables together or using <code>\u2018+\u2019</code> operator.</p> <pre><code>#!/bin/bash\n\nstring1=\"Linux\"\nstring2=\"Hint\"\necho \"$string1$string2\"\nstring3=$string1+$string2\nstring3+=\" is a good tutorial blog site\"\necho $string3\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#get-substring-of-string","title":"Get substring of String","text":"<p>Like other programming language, bash has no built-in function to cut value from any string data. But you can do the task of substring in another way in bash that is shown in the following script. To test the script, create a file named <code>\u2018substring_example.sh\u2019</code> with the following code. Here, the value, <code>6</code> indicates the starting point from where the substring will start and <code>5</code> indicates the length of the substring.</p> <pre><code>#!/bin/bash\nStr=\"Learn Linux from LinuxHint\"\nsubStr=${Str:6:5}\necho $subStr\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#add-two-numbers","title":"Add Two Numbers","text":"<p>You can do the arithmetical operations in bash in different ways. How you can add two integer numbers in bash using double brackets is shown in the following script. Create a file named <code>\u2018add_numbers.sh\u2019</code> with the following code. Two integer values will be taken from the user and printed the result of addition.</p> <pre><code>#!/bin/bash\necho \"Enter first number\"\nread x\necho \"Enter second number\"\nread y\n(( sum=x+y ))\necho \"The result of addition=$sum\"\n</code></pre> <p>You can check the following link to know more about bash arithmetic.</p> <p>https://linuxhint.com/bash_arithmetic_operations/</p>"},{"location":"programming/bash/30_bash_examples/#create-function","title":"Create Function:","text":"<p>How you can create a simple function and call the function is shown in the following script. Create a file named <code>\u2018function_example.sh\u2019</code> and add the following code. You can call any function by name only without using any bracket in bash script.</p> <pre><code>#!/bin/bash\nfunction F1()\n{\necho 'I like bash programming'\n}\n\nF1\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#create-function-with-parameters","title":"Create function with Parameters","text":"<p>Bash can\u2019t declare function parameter or arguments at the time of function declaration. But you can use parameters in function by using other variable. If two values are passed at the time of function calling then <code>$1</code> and <code>$2</code> variable are used for reading the values. Create a file named <code>\u2018function|_parameter.sh\u2019</code> and add the following code. Here, the function, <code>\u2018Rectangle_Area\u2019</code> will calculate the area of a rectangle based on the parameter values.</p> <pre><code>#!/bin/bash\n\nRectangle_Area() {\narea=$(($1 * $2))\necho \"Area is : $area\"\n}\n\nRectangle_Area 10 20\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#pass-return-value-from-function","title":"Pass Return Value from Function","text":"<p>Bash function can pass both numeric and string values. How you can pass a string value from the function is shown in the following example. Create a file named, <code>\u2018function_return.sh\u2019</code> and add the following code. The function, <code>greeting()</code> returns a string value into the variable, <code>val</code> which prints later by combining with other string.</p> <pre><code>#!/bin/bash\nfunction greeting() {\n\nstr=\"Hello, $name\"\necho $str\n\n}\n\necho \"Enter your name\"\nread name\n\nval=$(greeting)\necho \"Return value of the function is $val\"\n</code></pre> <p>You can check the following link to know more about the use of bash function.</p> <p>https://linuxhint.com/return-string-bash-functions/</p>"},{"location":"programming/bash/30_bash_examples/#make-directory","title":"Make Directory","text":"<p>Bash uses <code>\u2018mkdir\u2019</code> command to create a new directory. Create a file named <code>\u2018make_directory.sh\u2019</code> and add the following code to take a new directory name from the user. If the directory name is not exist in the current location then it will create the directory, otherwise the program will display error.</p> <pre><code>#!/bin/bash\necho \"Enter directory name\"\nread newdir\n`mkdir $newdir`\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#make-directory-by-checking-existence","title":"Make directory by checking existence","text":"<p>If you want to check the existence of directory in the current location before executing the <code>\u2018mkdir\u2019</code> command then you can use the following code. <code>\u2018-d\u2019</code> option is used to test a particular directory is exist or not. Create a file named, <code>\u2018directory_exist.sh\u2019</code> and add the following code to create a directory by checking existence.</p> <pre><code>#!/bin/bash\necho \"Enter directory name\"\nread ndir\nif [ -d \"$ndir\" ]\nthen\necho \"Directory exist\"\nelse\n`mkdir $ndir`\necho \"Directory created\"\nfi\n</code></pre> <p>You can check the following link to know more about directory creation.</p> <p>https://linuxhint.com/bash_mkdir_not_existent_path/</p>"},{"location":"programming/bash/30_bash_examples/#read-a-file","title":"Read a File","text":"<p>You can read any file line by line in bash by using loop. Create a file named, <code>\u2018read_file.sh\u2019</code> and add the following code to read an existing file named, <code>\u2018book.txt\u2019</code>.</p> <pre><code>#!/bin/bash\nfile='book.txt'\nwhile read line; do\necho $line\ndone &lt; $file\n</code></pre> <p>You can check the following link to know the different ways to read file.</p> <p>https://linuxhint.com/read_file_line_by_line_bash/</p>"},{"location":"programming/bash/30_bash_examples/#delete-a-file","title":"Delete a File","text":"<p><code>\u2018rm\u2019</code> command is used in bash to remove any file. Create a file named <code>\u2018delete_file.sh\u2019</code> with the following code to take the filename from the user and remove. Here, <code>\u2018-i\u2019</code> option is used to get permission from the user before removing the file.</p> <pre><code>#!/bin/bash\necho \"Enter filename to remove\"\nread fn\nrm -i $fn\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#append-to-file","title":"Append to File","text":"<p>New data can be added into any existing file by using <code>\u2018&gt;&gt;\u2019</code> operator in bash. Create a file named <code>\u2018append_file.sh\u2019</code> and add the following code to add new content at the end of the file. Here, <code>\u2018Learning Laravel 5\u2019</code> will be added at the of <code>\u2018book.txt\u2019</code> file after executing the script.</p> <pre><code>#!/bin/bash\n\necho \"Before appending the file\"\ncat book.txt\n\necho \"Learning Laravel 5\"&gt;&gt; book.txt\necho \"After appending the file\"\ncat book.txt\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#test-if-file-exist","title":"Test if File Exist","text":"<p>You can check the existence of file in bash by using <code>\u2018-e\u2019</code> or <code>\u2018-f\u2019</code> option. <code>\u2018-f\u2019</code> option is used in the following script to test the file existence. Create a file named, <code>\u2018file_exist.sh\u2019</code> and add the following code. Here, the filename will pass from the command line.</p> <pre><code>#!/bin/bash\nfilename=$1\nif [ -f \"$filename\" ]; then\necho \"File exists\"\nelse\necho \"File does not exist\"\nfi\n</code></pre> <p>Run the following commands to check the existence of the file. Here, book.txt file exists and  book2.txt is not exist in the current location.</p> <pre><code>$ ls\n$ bash file_exist.sh book.txt\n$ bash file_exist.sh book2.txt\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#send-email","title":"Send Email","text":"<p>You can send email by using <code>\u2018mail\u2019</code> or <code>\u2018sendmail\u2019</code> command. Before using these commands, you have to install all necessary packages. Create a file named, <code>\u2018mail_example.sh\u2019</code> and add the following code to send the email.</p> <pre><code>#!/bin/bash\nRecipient=\u201dadmin@example.com\u201d\nSubject=\u201dGreeting\u201d\nMessage=\u201dWelcome to our site\u201d\n`mail -s $Subject $Recipient &lt;&lt;&lt; $Message`\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#parse-current-date","title":"Parse Current Date","text":"<p>You can get the current system date and time value using <code>date</code> command. Every part of date and time value can be parsed using <code>\u2018Y\u2019</code>, <code>\u2018m\u2019</code>, <code>\u2018d\u2019</code>, <code>\u2018H\u2019</code>, <code>\u2018M\u2019</code> and <code>\u2018S\u2019</code>. Create a new file named <code>\u2018date_parse.sh\u2019</code> and add the following code to separate day, month, year, hour, minute and second values.</p> <pre><code>#!/bin/bash\nYear=`date +%Y`\nMonth=`date +%m`\nDay=`date +%d`\nHour=`date +%H`\nMinute=`date +%M`\nSecond=`date +%S`\necho `date`\necho \"Current Date is: $Day-$Month-$Year\"\necho \"Current Time is: $Hour:$Minute:$Second\"\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#wait-command","title":"Wait Command","text":"<p><code>wait</code> is a built-in command of Linux that waits for completing any running process. <code>wait</code> command is used with a particular process id or job id. If no process id or job id is given with wait command then it will wait for all current child processes to complete and returns exit status. Create a file named <code>\u2018wait_example.sh\u2019</code> and add the following script.</p> <pre><code>#!/bin/bash\necho \"Wait command\" &amp;\nprocess_id=$!\nwait $process_id\necho \"Exited with status $?\"\n</code></pre> <p>See more https://linuxhint.com/wait_command_linux/</p>"},{"location":"programming/bash/30_bash_examples/#sleep-command","title":"Sleep Command","text":"<p>When you want to pause the execution of any command for specific period of time then you can use <code>sleep</code> command. You can set the delay amount by seconds <code>(s)</code>, minutes <code>(m)</code>, hours <code>(h)</code> and days <code>(d)</code>. Create a file named <code>\u2018sleep_example.sh\u2019</code> and add the following script. This script will wait for 5 seconds after running.</p> <pre><code>#!/bin/bash\n\necho \u201cWait for 5 seconds\u201d\nsleep 5\necho \u201cCompleted\u201d\n</code></pre> <p>You can check the following link to know more about sleep command.</p> <p>https://linuxhint.com/sleep_command_linux/</p>"},{"location":"programming/bash/30_bash_examples/#_1","title":"bash examples","text":""},{"location":"programming/composer/composer/","title":"Composer","text":""},{"location":"programming/composer/composer/#ejecutar-composer-con-instancia-de-php-que-no-sea-la-por-defecto-del-sistema","title":"Ejecutar composer con instancia de php que no sea la por defecto del sistema","text":"<pre><code>/usr/bin/php7.4 /usr/local/bin/composer install\n</code></pre>"},{"location":"programming/html/text_tags/","title":"Text tags","text":"<pre><code>&lt;p&gt;Esto es texto regular&lt;/p&gt;\n\n&lt;p&gt;&lt;b&gt;Texto en negrita&lt;/b&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;i&gt;Texto en cursiva&lt;/i&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;small&gt;Texto peque\u00f1o&lt;/small&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Texto fuerte&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Normal &lt;sub&gt;Texto subindice&lt;/sub&gt;&lt;/p&gt;\n\n&lt;p&gt;Normal &lt;sup&gt;Texto superindice&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;ins&gt;Texto insertado&lt;/ins&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;del&gt;Texto borrado&lt;/del&gt;&lt;/p&gt;\n</code></pre>"},{"location":"programming/javascript/map/","title":"Map","text":"<p>Map is a collection of keyed data items, just like an Object. But the main difference is that Map allows keys of any type.</p> <p>Methods and properties are:</p> <ul> <li><code>new Map()</code> \u2013 creates the map.</li> <li><code>map.set(key, value)</code> \u2013 stores the value by the key.</li> <li><code>map.get(key)</code> \u2013 returns the value by the key, undefined if key doesn\u2019t exist in map.</li> <li><code>map.has(key)</code> \u2013 returns true if the key exists, false otherwise.</li> <li><code>map.delete(key)</code> \u2013 removes the value by the key.</li> <li><code>map.clear()</code> \u2013 removes everything from the map.</li> <li><code>map.size()</code> \u2013 returns the current element count.</li> </ul> <p>For instance:</p> <pre><code>let map = new Map();\nmap.set('1', 'str1');   // a string key\nmap.set(1, 'num1');     // a numeric key\nmap.set(true, 'bool1'); // a boolean key\n\n// remember the regular Object? it would convert keys to string\n// Map keeps the type, so these two are different:\nalert( map.get(1)   ); // 'num1'\nalert( map.get('1') ); // 'str1'\n\nalert( map.size ); // 3\n</code></pre> <p>As we can see, unlike objects, keys are not converted to strings. Any type of key is possible.</p> <p>Map can also use objects as keys.</p> <p>For instance:</p> <pre><code>let john = { name: \"John\" };\n\n// for every user, let's store their visits count\nlet visitsCountMap = new Map();\n\n// john is the key for the map\nvisitsCountMap.set(john, 123);\n\nalert( visitsCountMap.get(john) ); // 123\n</code></pre> <p>Using objects as keys is one of the most notable and important Map features. The same does not count for Object. String as a key in Object is fine, but we can\u2019t use another Object as a key in Object.</p> <p>Let\u2019s try:</p> <pre><code>let john = { name: \"John\" };\nlet ben = { name: \"Ben\" };\n\nlet visitsCountObj = {}; // try to use an object\n\nvisitsCountObj[ben] = 234; // try to use ben object as the key\nvisitsCountObj[john] = 123; // try to use john object as the key, ben object will get replaced\n\n// That's what got written!\nalert( visitsCountObj[\"[object Object]\"] ); // 123\n</code></pre> <p>As visitsCountObj is an object, it converts all Object keys, such as john and ben above, to same string \"[object Object]\". Definitely not what we want.</p> <p>Every map.set call returns the map itself, so we can \u201cchain\u201d the calls:</p> <pre><code>map.set('1', 'str1')\n  .set(1, 'num1')\n  .set(true, 'bool1');\n</code></pre>"},{"location":"programming/javascript/map/#iteration-over-map","title":"Iteration over Map","text":"<p>For looping over a map, there are 3 methods:</p> <ul> <li><code>map.keys()</code> \u2013 returns an iterable for keys,</li> <li><code>map.values()</code> \u2013 returns an iterable for values,</li> <li><code>map.entries()</code> \u2013 returns an iterable for entries [key, value], it\u2019s used by default in for..of.</li> </ul> <p>For instance:</p> <pre><code>let recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\n\n// iterate over keys (vegetables)\nfor (let vegetable of recipeMap.keys()) {\n  alert(vegetable); // cucumber, tomatoes, onion\n}\n\n// iterate over values (amounts)\nfor (let amount of recipeMap.values()) {\n  alert(amount); // 500, 350, 50\n}\n\n// iterate over [key, value] entries\nfor (let entry of recipeMap) { // the same as of recipeMap.entries()\n  alert(entry); // cucumber,500 (and so on)\n}\n</code></pre> <p>The iteration goes in the same order as the values were inserted. Map preserves this order, unlike a regular Object.</p> <p>Besides that, Map has a built-in forEach method, similar to Array:</p> <pre><code>// runs the function for each (key, value) pair\nrecipeMap.forEach( (value, key, map) =&gt; {\n  alert(`${key}: ${value}`); // cucumber: 500 etc\n});\n</code></pre>"},{"location":"programming/javascript/map/#objectentries-map-from-object","title":"Object.entries: Map from Object","text":"<p>When a Map is created, we can pass an array (or another iterable) with key/value pairs for initialization, like this:</p> <pre><code>// array of [key, value] pairs\nlet map = new Map([\n  ['1',  'str1'],\n  [1,    'num1'],\n  [true, 'bool1']\n]);\n\nalert( map.get('1') ); // str1\n</code></pre> <p>If we have a plain object, and we\u2019d like to create a Map from it, then we can use built-in method Object.entries(obj) that returns an array of key/value pairs for an object exactly in that format.</p> <p>So we can create a map from an object like this:</p> <pre><code>let obj = {\n  name: \"John\",\n  age: 30\n};\n\nlet map = new Map(Object.entries(obj));\n\nalert( map.get('name') ); // John\n</code></pre> <p>Here, Object.entries returns the array of key/value pairs: [ [\"name\",\"John\"], [\"age\", 30] ]. That\u2019s what Map needs.</p>"},{"location":"programming/javascript/map/#objectfromentries-object-from-map","title":"Object.fromEntries: Object from Map","text":"<p>We\u2019ve just seen how to create Map from a plain object with Object.entries(obj).</p> <p>There\u2019s Object.fromEntries method that does the reverse: given an array of [key, value] pairs, it creates an object from them:</p> <pre><code>let prices = Object.fromEntries([\n  ['banana', 1],\n  ['orange', 2],\n  ['meat', 4]\n]);\n\n// now prices = { banana: 1, orange: 2, meat: 4 }\n\nalert(prices.orange); // 2\n</code></pre> <p>We can use Object.fromEntries to get a plain object from Map.</p> <p>E.g. we store the data in a Map, but we need to pass it to a 3rd-party code that expects a plain object.</p> <p>Here we go:</p> <pre><code>let map = new Map();\nmap.set('banana', 1);\nmap.set('orange', 2);\nmap.set('meat', 4);\n\nlet obj = Object.fromEntries(map.entries()); // make a plain object (*)\n\n// done!\n// obj = { banana: 1, orange: 2, meat: 4 }\n\nalert(obj.orange); // 2\n</code></pre> <p>A call to map.entries() returns an iterable of key/value pairs, exactly in the right format for Object.fromEntries.</p> <p>We could also make line (*) shorter:</p> <pre><code>let obj = Object.fromEntries(map); // omit .entries()\n</code></pre> <p>That\u2019s the same, because Object.fromEntries expects an iterable object as the argument. Not necessarily an array. And the standard iteration for map returns same key/value pairs as map.entries(). So we get a plain object with same key/values as the map.</p>"},{"location":"programming/javascript/set/","title":"Set","text":"<p>A Set is a special type collection \u2013 \u201cset of values\u201d (without keys), where each value may occur only once.</p> <p>Its main methods are:</p> <ul> <li><code>new Set(iterable)</code> \u2013 creates the set, and if an iterable object is provided (usually an array), copies values from it into the set.</li> <li><code>set.add(value)</code> \u2013 adds a value, returns the set itself.</li> <li><code>set.delete(value)</code> \u2013 removes the value, returns true if value existed at the moment of the call, otherwise false.</li> <li><code>set.has(value)</code> \u2013 returns true if the value exists in the set, otherwise false.</li> <li><code>set.clear()</code> \u2013 removes everything from the set.</li> <li><code>set.size</code> \u2013 is the elements count.</li> </ul> <p>The main feature is that repeated calls of set.add(value) with the same value don\u2019t do anything. That\u2019s the reason why each value appears in a Set only once.</p> <p>For example, we have visitors coming, and we\u2019d like to remember everyone. But repeated visits should not lead to duplicates. A visitor must be \u201ccounted\u201d only once.</p> <p>Set is just the right thing for that:</p> <pre><code>let set = new Set();\n\nlet john = { name: \"John\" };\nlet pete = { name: \"Pete\" };\nlet mary = { name: \"Mary\" };\n\n// visits, some users come multiple times\nset.add(john);\nset.add(pete);\nset.add(mary);\nset.add(john);\nset.add(mary);\n\n// set keeps only unique values\nalert( set.size ); // 3\n\nfor (let user of set) {\n  alert(user.name); // John (then Pete and Mary)\n}\n</code></pre> <p>The alternative to Set could be an array of users, and the code to check for duplicates on every insertion using arr.find. But the performance would be much worse, because this method walks through the whole array checking every element. Set is much better optimized internally for uniqueness checks.</p>"},{"location":"programming/javascript/set/#iteration-over-set","title":"Iteration over Set","text":"<p>We can loop over a set either with for..of or using forEach:</p> <pre><code>let set = new Set([\"oranges\", \"apples\", \"bananas\"]);\n\nfor (let value of set) alert(value);\n\n// the same with forEach:\nset.forEach((value, valueAgain, set) =&gt; {\n  alert(value);\n});\n</code></pre> <p>Note the funny thing. The callback function passed in forEach has 3 arguments: a value, then the same value valueAgain, and then the target object. Indeed, the same value appears in the arguments twice.</p> <p>That\u2019s for compatibility with Map where the callback passed forEach has three arguments. Looks a bit strange, for sure. But may help to replace Map with Set in certain cases with ease, and vice versa.</p> <p>The same methods Map has for iterators are also supported:</p> <ul> <li><code>set.keys()</code> \u2013 returns an iterable object for values,</li> <li><code>set.values()</code> \u2013 same as set.keys(), for compatibility with Map,</li> <li><code>set.entries()</code> \u2013 returns an iterable object for entries [value, value], exists for compatibility with Map.</li> </ul>"},{"location":"programming/node/generating_optimized_image_formats_with_node/","title":"Generating Optimized Image Formats with Node.js","text":""},{"location":"programming/node/generating_optimized_image_formats_with_node/#introduction","title":"Introduction","text":"<p>Images are an important part of any web application, but they can also be a major source of performance issues if not optimized properly. In this article, we'll cover how to use Node.js and React to automatically generate optimized image formats and display them in the best format for the user's browser.</p>"},{"location":"programming/node/generating_optimized_image_formats_with_node/#setting-up","title":"Setting up","text":"<p>First we need a library that handle image processing for us, and <code>sharp</code> is what I chose  </p> <pre><code>npm i sharp\n\n</code></pre> <p>Sharp is a high-performance Node.js library for image processing and manipulation. It is designed to be fast and memory-efficient, making it ideal for processing large images and generating multiple image formats.</p>"},{"location":"programming/node/generating_optimized_image_formats_with_node/#generation-script","title":"Generation Script","text":"<p>The first step in optimizing images for the web is to generate multiple formats of each image, each with its own advantages and disadvantages. Some formats, such as JPEG, are good for complex images with many colors, while others, such as WebP, are better for simpler images with fewer colors.</p> <p>To generate different image formats, we can use Node.js and the Sharp image processing library. Here's an example script that generates avif and webp formats for each image in the images folder:  </p> <pre><code>const sharp = require('sharp');\nconst fs = require('fs');\n\nconst inputFolder = 'images';\nconst outputFolder = 'output';\n\nconst formats = ['avif', 'webp'];\n\nif (!fs.existsSync(outputFolder)) {\n  fs.mkdirSync(outputFolder);\n}\n\nfs.readdir(inputFolder, (err, files) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  files.forEach(file =&gt; {\n    if (file.endsWith('.jpg') || file.endsWith('.jpeg') || file.endsWith('.png')) {\n      const inputPath = `${inputFolder}/${file}`;\n      const name = file.substring(0, file.lastIndexOf('.'));\n\n      formats.forEach(format =&gt; {\n        const outputPath = `${outputFolder}/${name}.${format}`;\n\n        if (!fs.existsSync(outputPath)) {\n          sharp(inputPath)\n            .toFormat(format, { quality: 80 })\n            .toFile(outputPath, (err) =&gt; {\n              if (err) {\n                console.error(err);\n              } else {\n                console.log(`${name}.${format} saved`);\n              }\n            });\n        }\n      });\n    }\n  });\n});\n\n</code></pre> <p>*Explanation: * </p> <pre><code>const sharp = require('sharp');\nconst fs = require('fs');\n\nconst inputFolder = 'images';\nconst outputFolder = 'output';\n\nconst formats = ['avif', 'webp'];\n\n</code></pre> <p>In these lines, the script imports the <code>sharp</code> and <code>fs</code> libraries, sets the input folder to <code>images</code>, the output folder to <code>output</code>, and defines the formats to be generated as <code>avif</code> and <code>webp</code>.  </p> <pre><code>if (!fs.existsSync(outputFolder)) {\n  fs.mkdirSync(outputFolder);\n}\n\n</code></pre> <p>Here, the script checks if the <code>outputFolder</code> exists, and if it doesn't, creates it using <code>fs.mkdirSync()</code>. This ensures that the output folder exists before generating any images.  </p> <pre><code>fs.readdir(inputFolder, (err, files) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n</code></pre> <p>This code reads the contents of the <code>inputFolder</code> using <code>fs.readdir()</code>. If there is an error, it logs the error to the console and returns.  </p> <pre><code>files.forEach(file =&gt; {\n    if (file.endsWith('.jpg') || file.endsWith('.jpeg') || file.endsWith('.png')) {\n\n</code></pre> <p>This code loops through each file in the <code>inputFolder</code> using <code>files.forEach()</code>. If the file name ends with <code>.jpg</code>, <code>.jpeg</code>, or <code>.png</code>, it proceeds to generate the corresponding <code>avif</code> and <code>webp</code> files.  </p> <pre><code>const inputPath = `${inputFolder}/${file}`;\n      const name = file.substring(0, file.lastIndexOf('.'));\n\n</code></pre> <p>Here, the script defines the input file path as <code>inputPath</code>, and extracts the file name without the extension to be used as the output file name.  </p> <pre><code>formats.forEach(format =&gt; {\n        const outputPath = `${outputFolder}/${name}.${format}`;\n\n        if (!fs.existsSync(outputPath)) {\n          sharp(inputPath)\n            .toFormat(format, { quality: 80 })\n            .toFile(outputPath, (err) =&gt; {\n              if (err) {\n                console.error(err);\n              } else {\n                console.log(`${name}.${format} saved`);\n              }\n            });\n        }\n      });\n\n</code></pre> <p>Here, the script loops through each format (i.e. <code>avif</code> and <code>webp</code>) using <code>formats.forEach()</code>. For each format, it defines the output file path as <code>outputPath</code>.</p> <p>If the output file does not already exist, it uses Sharp's <code>toFormat()</code> function to generate the corresponding image in the specified format with a quality of 80. It then saves the output file using <code>toFile()</code>, and logs a message to the console indicating that the file has been saved.</p>"},{"location":"programming/node/generating_optimized_image_formats_with_node/#display-optimized-images-in-react","title":"Display Optimized Images in React","text":"<p>Once we have generated multiple optimized image formats for each input image, we can display them in our React application. To do this, we can use the HTML <code>&lt;picture&gt;</code> and <code>&lt;source&gt;</code> elements to specify the different image sources for different formats. Here's an example React component that takes an image name as a prop and displays the image in the best format for the user's browser:  </p> <pre><code>import React from 'react';\n\nconst Image = ({ name }) =&gt; {\n  const avifSrc = `/images/${name}.avif`;\n  const webpSrc = `/images/${name}.webp`;\n  const jpgSrc = `/images/${name}.jpg`;\n\n  return (\n    &lt;picture&gt;\n      &lt;source srcSet={avifSrc} type=\"image/avif\" /&gt;\n      &lt;source srcSet={webpSrc} type=\"image/webp\" /&gt;\n      &lt;img src={jpgSrc} alt={name} /&gt;\n    &lt;/picture&gt;\n  );\n};\n\nexport default Image;\n\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p>This code defines three different image source URLs based on the <code>name</code> prop passed in:</p> <ul> <li><code>avifSrc</code> corresponds to the <code>avif</code> format of the image.</li> <li><code>webpSrc</code> corresponds to the <code>webp</code> format of the image.</li> <li><code>jpgSrc</code> corresponds to the standard <code>jpg</code> format of the image, which will be used as a fallback for browsers that do not support <code>avif</code> or <code>webp</code>.</li> </ul> <pre><code>  return (\n    &lt;picture&gt;\n      &lt;source srcSet={avifSrc} type=\"image/avif\" /&gt;\n      &lt;source srcSet={webpSrc} type=\"image/webp\" /&gt;\n      &lt;img src={jpgSrc} alt={name} /&gt;\n    &lt;/picture&gt;\n  );\n};\n\n</code></pre> <p>Here, the script returns a <code>&lt;picture&gt;</code> element that displays the image in the best format for the user's browser, based on the available formats. Inside the <code>&lt;picture&gt;</code> element, there are two <code>&lt;source&gt;</code> elements, one for <code>avif</code> and one for <code>webp</code>. These elements specify the different image sources for different formats using the <code>srcSet</code> attribute and the <code>type</code> attribute to indicate the MIME type of each format.</p> <p>Finally, there is a fallback <code>&lt;img&gt;</code> element that displays the image in the standard <code>jpg</code> format for browsers that do not support <code>avif</code> or <code>webp</code>. This element uses the <code>src</code> attribute to specify the image source and the <code>alt</code> attribute to provide alternate text for the image.</p>"},{"location":"programming/node/generating_optimized_image_formats_with_node/#conclusion","title":"Conclusion","text":"<p>Images on websites can be slow to load and don't always look good on different devices. It's important to make them load faster and look better so people can enjoy your website more. We learned how to use special tools like Sharp and HTML's <code>&lt;picture&gt;</code> and <code>&lt;source&gt;</code> to make different versions of the same image and show the best one for each device. By doing this, our website will be faster and look better for everyone who uses it!</p>"},{"location":"programming/npm/concurrently/","title":"Concurrently","text":"<p>Run multiple commands concurrently. Like npm run watch-js &amp; npm run watch-less but better. docs</p>"},{"location":"programming/npm/concurrently/#installation","title":"Installation","text":"<p>concurrently can be installed in the global scope (if you'd like to have it available and use it on the whole system) or locally for a specific package (for example if you'd like to use it in the scripts section of your package):</p> npm Yarn pnpm Bun Global npm i -g concurrently yarn global add concurrently pnpm add -g concurrently bun add -g concurrently Local* npm i -D concurrently yarn add -D concurrently pnpm add -D concurrently bun add -d concurrently <p>*It's recommended to add concurrently to devDependencies as it's usually used for developing purposes. Please adjust the command if this doesn't apply in your case.</p>"},{"location":"programming/npm/concurrently/#how-to-use","title":"How to use","text":"<ul> <li>Initialize a npm project <code>npm init --y</code> for use through <code>npm run</code> and less verbosability with commands</li> <li>Install the package concurrently</li> <li>Create scripts in <code>package.json</code> to start each project individually see example below</li> <li>Create general script with concurrently to execute all the previous at the same time</li> <li>Run your project</li> </ul>"},{"location":"programming/npm/concurrently/#example","title":"Example","text":"<p>With this folder structure</p> <ul> <li>source</li> <li>admin (react admin application created with <code>create-react-app</code>)</li> <li>app (next application to show some specific data created with <code>create-next-app</code>)</li> <li> <p>api (nest backend api)</p> </li> <li> <p>Each folder have it's own .env file with it's own values, but for example the admin application need to define excecution port to avoid error and becouse react and next use the same port (3000) by default </p> </li> </ul> <p>In <code>admin/.env</code> file define <code>PORT=3001</code> and react will use this one instead of default one.</p> <ul> <li>Execute <code>npm init --y</code> this create the <code>package.json</code> file</li> </ul> <pre><code>{\n  \"name\": \"source\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre> <ul> <li>Install concurrently dependency  <code>npm install -D concurrently</code></li> <li>Modify <code>scripts</code> section as follow</li> </ul> <pre><code>  \"start:api\": \"npm --prefix ./api/ run start:dev\",\n  \"start:app\": \"npm --prefix ./app/ run dev\",\n  \"start:admin\": \"npm --prefix ./admin/ run start\"\n</code></pre> <p><code>\"start:api\"</code> start the nest api</p> <p><code>\"start:app\"</code> start the next app</p> <p><code>\"start:admin\"</code> start the react app</p> <ul> <li>Add the new one to run all with concurrently</li> </ul> <p><code>\"dev\": \"concurrently -c \\\"npm run start:api\\\" \\\"npm run start:app\\\" \\\"npm run start:admin\\\"\"</code></p> <p>With which we can run all environments at the same time, remmember that each one has to be wrapped in quotes. In this way, the log of each one identified with numbers <code>[0]</code>, <code>[1]</code> and <code>[2]</code>. To assign a name to each one you can use the <code>--name</code> parameter, for example: <code>--names \\\"API,APP,ADMIN\\\"</code>. This will help visually to identify logs.</p> <p>There is some other options for colorize or use shorthands read the docs for know more about it.</p> <p>In my case this was the final <code>package.json</code></p> <pre><code>{\n  \"name\": \"source\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start:api\": \"npm --prefix ./api/ run start:dev\",\n    \"start:app\": \"npm --prefix ./app/ run dev\",\n    \"start:admin\": \"npm --prefix ./admin/ run start\",\n    \"dev\": \"concurrently -c \\\"blue.bold,magenta.bold,yellow.bold\\\" \\\"npm run start:*\\\"\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"concurrently\": \"^8.2.0\"\n  }\n}\n</code></pre>"},{"location":"programming/npm/dependency_cruiser/","title":"Dependency cruiser","text":"<p>Easily visualize a project's dependency graph with dependency-cruiser</p> <p>You can install <code>dependency-cruiser</code> globally with <code>npm i -g dependency-cruiser</code>. Then, in the folder of any project you care about, you can run:</p> <pre><code>depcruise --exclude \"^node_modules\" --output-type dot src | dot -T svg &gt; dependencygraph.svg\n</code></pre> <p>assuming the core of your code lives in the <code>src</code> sub folder</p>"},{"location":"programming/php/constants/","title":"Constants","text":""},{"location":"programming/php/constants/#question","title":"Question","text":"<p>Const access from outside a class contained in string</p> <p>With this code:</p> <pre><code>class Constants{\n   const ONE = 1;\n   const TWO = 2;\n   const THREE = 3;\n}\n\n$input = \"ONE\";\n\necho Constants::$input;\n</code></pre> <p>I want to access to the constants inside the class having the name in a variable.</p> <p>I'ts that posible.</p>"},{"location":"programming/php/constants/#answer","title":"Answer","text":"<p>Constant function will return value of a constant by its name:</p> <pre><code>class Contants{\n   const ONE = 1;\n   const TWO = 2;\n   const THREE = 3;\n}\n\n$input = \"ONE\";\n\necho constant(Contants::class . '::' . $input);\n</code></pre>"},{"location":"programming/php/dates/","title":"Dates","text":""},{"location":"programming/php/dates/#compare-two-24-hour-time","title":"Compare two 24 hour time","text":"<p>Use the built-in function strtotime():</p> <pre><code>$time=\"00:05:00\"; //5 minutes\nif(strtotime($time) &lt;= strtotime('00:03:00')) {\n    //do some work\n} else {\n    //do something\n}\n</code></pre>"},{"location":"programming/php/global_dates/","title":"Mostrar fechas de acuerdo a uso horario","text":"<p>Problema de fecha utilizada en varios lugares del mundo (diferentes UTC). Se tiene como problema una aplicaci\u00f3n utilizada en diversas partes del mundo en donde se utiliza la misma fecha para mostrarse a diferentes usuarios que pueden estar utilizando el APP en cualquier parte del mundo.</p> <p>Para resolver este problema se utilizo el siguiente comando que se ejecuto en la base de datos:</p> <pre><code>SET time_zone = \"+00: 00\";\n</code></pre> <p>El mismo setea la zona horaria (<code>UTC-0</code>) por defecto en caso de que tu base de datos utilice <code>timestamp</code> automatizados para el update y creacion de datos.</p> <p>Luego dentro del proyecto de servicios, por ejemplo <code>Lumen</code> con <code>PHP</code>, necesitamos setear la siguiente linea en el archivo de configuraci\u00f3n <code>.env</code>:</p> <pre><code>APP_TIMEZONE = UTC\n</code></pre>"},{"location":"programming/php/pretty/","title":"Pretty format arrays and objects","text":"<pre><code>class Persona{\n    public $nombre;\n    public $apellidos;\n    public $sexo;\n\n    function __construct($nombre, $apellidos, $sexo){\n        $this-&gt;nombre = $nombre;\n        $this-&gt;apellidos = $apellidos;\n        $this-&gt;sexo = $sexo;\n    }\n}\n\n\nfunction pretty($var)\n{\n    return gettype($var) . ' ' . json_encode(\n        $var,\n        JSON_UNESCAPED_SLASHES |\n            JSON_UNESCAPED_UNICODE |\n            JSON_PRETTY_PRINT |\n            JSON_PARTIAL_OUTPUT_ON_ERROR |\n            JSON_INVALID_UTF8_SUBSTITUTE\n    );\n}\n\n$oPersona = new Persona(\"Jonh\", \"Doe\", \"Masculino\");\n\necho '&lt;pre&gt;';\necho pretty($oPersona);\necho '&lt;/pre&gt;';\n\n\n// output\n/**\nobject {\n    \"nombre\": \"Jonh\",\n    \"apellidos\": \"Doe\",\n    \"sexo\": \"Masculino\"\n}\n*/\n</code></pre>"},{"location":"programming/python/diccionarios/","title":"Diccionarios","text":""},{"location":"programming/python/diccionarios/#crear","title":"Crear","text":"<pre><code>diccionario = {\n    \"nombre\": \"Jonh\",\n    \"sexo\": \"Masculino\",\n    \"edad\": 35\n}\n</code></pre> <p>Adem\u00e1s se puede crear usando el constructor dict</p> <pre><code>persona = dict(nombre=\"Jonh Doe\", sexo=\"Masculino\")\n</code></pre>"},{"location":"programming/python/diccionarios/#acceder-a-un-elemento","title":"Acceder a un elemento","text":"<pre><code>diccionario[\"nombre\"]\n# o\ndiccionario.get('nombre')\n</code></pre>"},{"location":"programming/python/diccionarios/#modificando-valores","title":"Modificando valores","text":"<pre><code>diccionario[\"nombre\"] = \"Myke\"\n</code></pre>"},{"location":"programming/python/diccionarios/#longitud-len","title":"Longitud (len)","text":"<pre><code>len(diccionario)\n</code></pre>"},{"location":"programming/python/diccionarios/#agregar-valores","title":"Agregar valores","text":"<pre><code>diccionario[\"direccion\"] = \"Time scuare 1256\"\n</code></pre>"},{"location":"programming/python/diccionarios/#eliminar-obteniendo-el-valor-pop","title":"Eliminar obteniendo el valor (pop)","text":"<pre><code>edad = diccionario.pop('edad')\n</code></pre>"},{"location":"programming/python/diccionarios/#eliminar-ultimo-valor-agregado-popitem","title":"Eliminar \u00faltimo valor agregado (popitem)","text":"<pre><code>diccionario.popitem()\n</code></pre> <p>Remueve el \u00faltimo elemento que fue insertado en el diccionario. El valor de retorno es el item eliminado en forma de tupla.</p>"},{"location":"programming/python/diccionarios/#eliminar-del","title":"Eliminar (del)","text":"<pre><code>del diccionario[\"edad\"]\n</code></pre>"},{"location":"programming/python/diccionarios/#crear-copia-copydict","title":"Crear copia (copy)(dict)","text":"<pre><code>diccionario2 = diccionario.copy()\n</code></pre> <p>Otra forma de hacerlo es usando <code>dict</code></p> <pre><code>diccionario2 = dict(diccionario)\n</code></pre>"},{"location":"programming/python/diccionarios/#eliminar-todos-los-elementos-clear","title":"Eliminar todos los elementos (clear)","text":"<pre><code>diccionario.clear()\n</code></pre>"},{"location":"programming/python/listas/","title":"Listas","text":""},{"location":"programming/python/listas/#creacion","title":"Creaci\u00f3n","text":"<pre><code>lista = [1, 2, 3]\n</code></pre>"},{"location":"programming/python/listas/#copiar-o-duplicar-una-lista-copy","title":"Copiar o duplicar una lista (copy)","text":"<pre><code>lista2 = lista.copy()\n</code></pre>"},{"location":"programming/python/listas/#agregar-append","title":"Agregar (append)","text":"<pre><code>lista.append(4)\n</code></pre>"},{"location":"programming/python/listas/#vaciar-elementos-de-una-lista-clear","title":"Vaciar elementos de una lista (clear)","text":"<pre><code>lista.clear()\n</code></pre>"},{"location":"programming/python/listas/#contar-ocurrencias-de-un-elemento-count","title":"Contar ocurrencias de un elemento (count)","text":"<pre><code>lista.count(2)\n</code></pre>"},{"location":"programming/python/listas/#contar-elementos-len","title":"Contar elementos (len)","text":"<pre><code>len(lista)\n</code></pre>"},{"location":"programming/python/listas/#accediendo-a-elemento-por-posicion","title":"Accediendo a elemento por posici\u00f3n","text":"<pre><code>lista[2]  # accede al tercer elemento de la lista\n</code></pre>"},{"location":"programming/python/listas/#eliminar-elemento-devolviendolo-a-una-variable-pop","title":"Eliminar elemento devolviendolo a una variable (pop)","text":"<pre><code>ultimo = lista.pop()\n</code></pre>"},{"location":"programming/python/listas/#eliminar-elemento-que-no-sea-el-ultimo-remove","title":"Eliminar elemento que no sea el ultimo (remove)","text":"<pre><code>lista.remove(2)\n</code></pre>"},{"location":"programming/python/listas/#ordenar-sort","title":"Ordenar (sort)","text":"<p>Para poder ordenar con el m\u00e9todo sort todos los elementos de la lista tienen que ser del mismo tipo</p> <pre><code>lista.sort() \n</code></pre>"},{"location":"programming/python/listas/#revertir-elementos-reverse","title":"Revertir elementos (reverse)","text":"<pre><code>lista.reverse()\n</code></pre>"},{"location":"programming/python/rangos/","title":"Rangos","text":"<pre><code>rango = range(6)\nprint(rango)\n\n# range(0, 6)\n</code></pre>"},{"location":"programming/python/tuplas/","title":"tuplas","text":"<p>Al igual que con las cadenas, las componentes de las tuplas no pueden ser modificadas.</p> <pre><code>tupla = ('hola', 'mundo')\n</code></pre>"},{"location":"programming/python/tuplas/#contar-ocurrencia-de-elemento-count","title":"Contar ocurrencia de elemento (count)","text":"<pre><code>tupla.count('hola') # 1\n</code></pre>"},{"location":"programming/python/tuplas/#buscar-el-indice-de-un-elemento-index","title":"Buscar el indice de un elemento (index)","text":"<pre><code>tupla.index('mundo')\n</code></pre>"},{"location":"programming/python/tuplas/#transformar-de-tupla-a-lista-list","title":"Transformar de tupla a lista (list)","text":"<pre><code>listaDeTupla = list(tupla)\n</code></pre>"},{"location":"programming/react/github_pages/","title":"Deploy react app to github pages","text":""},{"location":"programming/react/github_pages/#prerequisitos","title":"Prerequisitos","text":"<ul> <li>Cuenta en Github</li> <li>Git instalado y configurado en la pc</li> <li>Node y npm (min v8.10)</li> <li>Tener instalado create-react-app para crear aplicaci\u00f3n react</li> </ul>"},{"location":"programming/react/github_pages/#procedimiento","title":"Procedimiento","text":"<ul> <li>Crear un repositorio en Github, para que funcione la p\u00e1gina si no es una cuenta de pago el repositorio debe ser p\u00fablico. </li> <li>Crear aplicaci\u00f3n react <code>npx create-react-app app-name</code>, al hacer esto el comando inicializar\u00e1 adem\u00e1s en el proyecto el repositorio git</li> <li>Luego instalar el m\u00f3dulo github-pages como dependencia de desarollo</li> </ul> <pre><code>cd app-name\nnpm install gh-pages --save-dev\n</code></pre> <ul> <li>Agregar la propiedad <code>homepage</code> en la parte superior del fichero <code>package.json</code> como string con el valor <code>https://{username}.github.io/{repo-name}</code> donde el <code>{username}</code> es su nombre de usuario en Github y el <code>{repo-name}</code> el nombre del repositorio, quedando de la siguiente forma: </li> </ul> <pre><code>\"homepage\": \"https://{username}.github.io/{repo-name}\"\n</code></pre> <ul> <li>En la secci\u00f3n de <code>scripts</code> necesitamos agregar 2 nuevos</li> </ul> <pre><code>\"scripts\": {\n    ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  },\n</code></pre> <ul> <li>Agregar el repositorio remoto al proyecto</li> </ul> <pre><code>git remote add origin git@github.com:{username}/{repo-name}.git\n</code></pre> <ul> <li>Ahora a desplegar a las p\u00e1ginas de GitHub ejecutando el siguiente comando</li> </ul> <pre><code>npm run deploy\n</code></pre> <p>Este comando crear\u00e1 una rama con el nombre <code>gh-pages</code> en github que tendr\u00e1 hosteada la app en la url definida en la propiedad <code>homepage</code> definida en el <code>package.json</code> - Haga commit y actualice la rama master de su repositorio remoto (opcional)</p> <pre><code>git add .\ngit commit -m \"Your awesome message\"\ngit push origin master\n</code></pre> <p>Nota: En caso de no visualizar el sitio en la url <code>https://{username}.github.io/{repo-name}</code> podr\u00edas chequear en la configuraci\u00f3n del repositorio <code>Settings</code> secci\u00f3n <code>GitHub Pages</code> y seleccionar la rama <code>gh-pages</code> y <code>/root</code> para redirigir correctamente al proyecto compilado.</p>"},{"location":"programming/react/newline_to_break/","title":"Newline to break (nl2br)","text":"<p>Source https://kevinsimper.medium.com/react-newline-to-break-nl2br-a1c240ba746</p> <p>Because you know that everything in React is functions, you can't really do this</p> <pre><code>this.state.text.replace(/(?:\\r\\n|\\r|\\n)/g, '&lt;br /&gt;')\n</code></pre> <p>Since that would return a string with DOM nodes inside, that is not allowed either, because has to be only a string.</p> <p>You then can try do something like this:</p> <pre><code>{this.props.text.split('\\n').map(function(item, key) {\n  return (\n    &lt;span key={key}&gt;\n      {item}\n      &lt;br/&gt;\n    &lt;/span&gt;\n  )\n})};\n</code></pre> <p>That is not allowed either because again React is pure functions and two functions can be next to each other.</p>"},{"location":"programming/react/newline_to_break/#tldr-solution","title":"tldr. Solution","text":"<pre><code>{this.props.text.split('\\n').map(function(item, key) {\n  return (\n    &lt;span key={key}&gt;\n      {item}\n      &lt;br/&gt;\n    &lt;/span&gt;\n  )\n})};\n</code></pre> <p>Now we're wrapping each line-break in a span, and that works fine because span\u2019s has display inline. Now we got a working nl2br line-break solution.</p> <p>And ES6 version</p> <pre><code>{this.props.text.split('\\n').map((item, key) =&gt; {\n  return &lt;span key={key}&gt;{item}&lt;br/&gt;&lt;/span&gt;\n})};\n</code></pre> <p>And with React Fragments</p> <pre><code>{this.props.text.split('\\n').map((item, key) =&gt; {\n  return &lt;Fragment key={key}&gt;{item}&lt;br/&gt;&lt;/Fragment&gt;\n})};\n</code></pre>"},{"location":"programming/typescript/style_guide/","title":"TypeScript Style Guide","text":"<p>TypeScript Style Guide provides a concise set of conventions and best practices used to create consistent, maintainable code.</p>"},{"location":"programming/typescript/style_guide/#introduction","title":"Introduction","text":"<p>TypeScript Style Guide provides a concise set of conventions and best practices used to create consistent, maintainable code.</p> <p>As projects grow in size and complexity, maintaining code quality and ensuring consistent practices becomes increasingly challenging. Defining and following a standard way to write TypeScript applications brings consistent codebase and faster development cycles.</p>"},{"location":"programming/typescript/style_guide/#table-of-contents","title":"Table of Contents","text":""},{"location":"programming/typescript/style_guide/#about-guide","title":"About Guide","text":"<p>As any code style guide is opinionated, this is no different as it tries to set conventions (sometimes arbitrary) that govern our code.</p> <p>Since \"consistency is the key\", style guide strives to enforce majority of the rules by using automated tooling as ESLint, TypeScript, Prettier, etc. Still certain design and architectural decisions must be followed which are described with conventions bellow.</p> <p>Style Guide requires you to use:</p> <ul> <li>TypeScript v5</li> <li>typescript-eslint v6 with <code>strict-type-checked</code>,   <code>stylistic-type-checked</code> configurations enabled.</li> </ul> <p>Style Guide assumes using, but is not limited to:</p> <ul> <li>React as UI library for frontend conventions.</li> <li>Jest and Testing Library for testing conventions.</li> </ul>"},{"location":"programming/typescript/style_guide/#tldr","title":"TLDR","text":"<ul> <li>Strive for data immutability. \u2b63</li> <li>Embrace const assertions. \u2b63</li> <li>Avoid type assertions. \u2b63</li> <li>Strive for functions to be pure, stateless and have single responsibility. \u2b63</li> <li>Majority of function arguments should be required (use optional sparingly). \u2b63</li> <li>Strong emphasis to keep naming conventions consistent and readable. \u2b63</li> <li>Use named exports. \u2b63</li> <li>Code is organized and grouped by feature. Collocate code as close as possible to where it's relevant. \u2b63</li> <li>UI components must only show derived state and send events, nothing more (no business logic). \u2b63</li> <li>Test business logic, not implementation details. \u2b63</li> </ul>"},{"location":"programming/typescript/style_guide/#data-immutability","title":"Data Immutability","text":"<p>Majority of the data should be immutable (use <code>Readonly</code>, <code>ReadonlyArray</code>, always return new array, object etc). To keep cognitive load for future developers low, try to keep data objects small. As an exception mutations should be used sparingly in cases where truly necessary: complex objects, performance reasoning etc.</p>"},{"location":"programming/typescript/style_guide/#types","title":"Types","text":""},{"location":"programming/typescript/style_guide/#type-definition","title":"Type Definition","text":"<p>TypeScript offers two options for type definitions - <code>type</code> and <code>interface</code>. As they come with some functional differences, we try to limit syntax difference and pick one for consistency.</p> <p>All types must be defined with <code>type</code> alias (eslint rule).</p> <p>   Consider using interfaces if developing package that can be further extended, team is more comfortable working with   interfaces etc. In such case disable lint rule where needed e.g. using type unions (type Status = 'loading' | 'error')   etc. </p> <pre><code>// \u274c Avoid interface definitions\ninterface UserRole = 'admin' | 'guest'; // invalid - interface can't define (commonly used) type unions\n\ninterface UserInfo {\n  name: string;\n  role: 'admin' | 'guest';\n}\n\n// \u2705 Use type definition\ntype UserRole = 'admin' | 'guest';\n\ntype UserInfo = {\n  name: string;\n  role: UserRole;\n};\n\n</code></pre> <p>In case of declaration merging (e.g. extending third-party library types) use <code>interface</code> and disable lint rule.</p> <pre><code>// types.ts\ndeclare namespace NodeJS {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-definitions\n  export interface ProcessEnv {\n    NODE_ENV: 'development' | 'production';\n    PORT: string;\n    CUSTOM_ENV_VAR: string;\n  }\n}\n\n// server.ts\napp.listen(process.env.PORT, () =&gt; {...}\n</code></pre>"},{"location":"programming/typescript/style_guide/#type-non-nullability-assertions","title":"Type &amp; Non-nullability Assertions","text":"<p>Type assertions <code>user as User</code> and non-nullability assertions <code>user!.name</code> are unsafe. Both only silence TypeScript compiler and increase the risk of crashing application at runtime.  They can only be used as last resort exceptions (e.g. third party library types mismatch etc.) with strong rational why being introduced into codebase.</p> <pre><code>// \u274c Avoid type &amp; non-nullability assertions\ntype User = { id: string; username: string; avatar: string | null };\nconst user = { name: 'Nika' } as User;\nrenderUserAvatar(user!.avatar);\n</code></pre>"},{"location":"programming/typescript/style_guide/#type-any","title":"Type any","text":"<p><code>any</code> data type must not be used as it represents literally \u201cany\u201d value that TypeScript defaults to and skips type checking since it cannot infer the type. As such, any is dangerous, it can mask severe programming errors.  If error truly cannot be resolved as safer option use type <code>unknown</code> since it does not allow dereferencing all properties or as last resort use <code>@ts-expect-error</code> (Type Error).</p>"},{"location":"programming/typescript/style_guide/#type-inference","title":"Type Inference","text":"<p>   As rule of thumb, explicitly declare a type when it help narrows it.        Just because you don't need to add types, doesn't mean you shouldn't. In some cases explicit type declaration can     increase code readability and intent.    </p> <pre><code>// \u274c Avoid\n// Type can be inferred\nconst userRole: string = 'admin'; // Type 'string'\nconst employees = new Map&lt;string, number&gt;([['gabriel', 32]]);\nconst [isActive, setIsActive] = useState&lt;boolean&gt;(false);\n\n// Type can be narrowed\nconst employees = new Map(); // Type 'Map&lt;any, any&gt;'\ntype UserRole = 'admin' | 'guest';\nconst [userRole, setUserRole] = useState('admin'); // Type 'string'\n\n// \u2705 Use\nconst USER_ROLE = 'admin'; // Type 'admin'\nconst employees = new Map([['gabriel', 32]]); // Type 'Map&lt;string, number&gt;'\nconst [isActive, setIsActive] = useState(false); // Type 'boolean'\n\nconst employees = new Map&lt;string, number&gt;(); // Type 'Map&lt;string, number&gt;'\nemployees.set('gabriel', 32);\ntype UserRole = 'admin' | 'guest';\nconst [userRole, setUserRole] = useState&lt;UserRole&gt;('admin'); // Type 'UserRole'\n\n</code></pre>"},{"location":"programming/typescript/style_guide/#return-types","title":"Return Types","text":"<p>Including return type annotations is highly encouraged, altought not required (eslint rule).</p> <p>Consider benefits when explicitly typing the return value of a function:</p> <ul> <li>Return values makes it clear and easy to understand to any calling code what type is returned.</li> <li>In the case where there is no return value, the calling code doesn't try to use the undefined value when it shouldn't.</li> <li>Surface potential type errors faster in the future if there are code changes that change the return type of the function.</li> <li>Easier to refactor, since it ensures that the return value is assigned to a variable of the correct type.</li> <li>Similar to writing tests before implementation (TDD), defining function arguments and return type, gives you the opportunity to discuss the feature functionality and its interface ahead of implementation.</li> <li>Although type inference is very convenient, adding return types can save TypeScript compiler a lot of work.</li> </ul>"},{"location":"programming/typescript/style_guide/#type-error","title":"Type Error","text":"<p>If TypeScript error can't be mitigated, as last resort use <code>@ts-expect-error</code> to suppress it (eslint rule). If at any future point suppressed line becomes error-free, TypeScript compiler will indicate it. <code>@ts-ignore</code> is not allowed, while <code>@ts-expect-error</code> can be used with provided description (eslint rule).</p> <pre><code>// \u274c Avoid @ts-ignore\n// @ts-ignore\nconst result = doSomething('hello');\n\n// \u2705 Use @ts-expect-error with description\n// @ts-expect-error: the library definition is wrong\nconst result = doSomething('hello');\n</code></pre>"},{"location":"programming/typescript/style_guide/#array-types","title":"Array Types","text":"<p>Array types must be defined with generic syntax (eslint rule).</p> <p>   As there is no functional difference between 'generic' and 'array' definition, feel free to set the one your team   finds most readable to work with. </p> <pre><code>// \u274c Avoid\nconst x: string[] = ['foo', 'bar'];\nconst y: readonly string[] = ['foo', 'bar'];\n\n// \u2705 Use\nconst x: Array&lt;string&gt; = ['foo', 'bar'];\nconst y: ReadonlyArray&lt;string&gt; = ['foo', 'bar'];\n</code></pre>"},{"location":"programming/typescript/style_guide/#functions","title":"Functions","text":"<p>Function conventions should be followed as much as possible (some of them derives from functional programming basic concepts):</p>"},{"location":"programming/typescript/style_guide/#general","title":"General","text":"<p>Function:</p> <ul> <li>should have single responsibility.</li> <li>should be stateless where the same input arguments return same value every single time.</li> <li>should accept at least one argument and return data.</li> <li>should not have side effects, but be pure. It's implementation should not modify or access variable value outside its local environment (global state, fetching etc.).</li> </ul>"},{"location":"programming/typescript/style_guide/#single-object-arg","title":"Single Object Arg","text":"<p>To keep function readable and easily extensible for the future (adding/removing args), strive to have single object as the function arg, instead of multiple args.  As exception this not applies when having only one primitive single arg (e.g. simple functions isNumber(value), implementing currying etc.).</p> <pre><code>// \u274c Avoid having multiple arguments\ntransformUserInput('client', false, 60, 120, null, true, 2000);\n\n// \u2705 Use options object as argument\ntransformUserInput({\n  method: 'client',\n  isValidated: false,\n  minLines: 60,\n  maxLines: 120,\n  defaultInput: null,\n  shouldLog: true,\n  timeout: 2000,\n});\n</code></pre>"},{"location":"programming/typescript/style_guide/#required-optional-args","title":"Required &amp; Optional Args","text":"<p>Strive to have majority of args required and use optional sparingly.  If function becomes to complex it probably should be broken into smaller pieces.  An exaggerated example where implementing 10 functions with 5 required args each, is better then implementing one \"can do it all\" function that accepts 50 optional args.</p>"},{"location":"programming/typescript/style_guide/#args-as-discriminated-union","title":"Args as Discriminated Union","text":"<p>When applicable use discriminated union type to eliminate optional args, which will decrease complexity on function API and only necessary/required args will be passed depending on its use case.</p> <pre><code>// \u274c Avoid optional args as they increase complexity of function API\ntype StatusParams = {\n  data?: Products;\n  title?: string;\n  time?: number;\n  error?: string;\n};\n\n// \u2705 Strive to have majority of args required, if that's not possible,\n// use discriminated union for clear intent on function usage\ntype StatusParamsSuccess = {\n  status: 'success';\n  data: Products;\n  title: string;\n};\n\ntype StatusParamsLoading = {\n  status: 'loading';\n  time: number;\n};\n\ntype StatusParamsError = {\n  status: 'error';\n  error: string;\n};\n\ntype StatusParams = StatusSuccess | StatusLoading | StatusError;\n\nexport const parseStatus = (params: StatusParams) =&gt; {...\n</code></pre>"},{"location":"programming/typescript/style_guide/#variables","title":"Variables","text":""},{"location":"programming/typescript/style_guide/#const-assertion","title":"Const Assertion","text":"<p>Strive to use const assertion (<code>as const</code>):</p> <ul> <li>type is narrowed</li> <li>object gets <code>readonly</code> properties</li> <li>array becomes <code>readonly</code> tuple</li> </ul> <p>```ts   // \u274c Avoid declaring constants without const assertion   const BASE_LOCATION = { x: 50, y: 130 }; // Type { x: number; y: number; }   BASE_LOCATION.x = 10;   const BASE_LOCATION = [50, 130]; // Type number[]   BASE_LOCATION.push(10);</p> <p>// \u2705 Use const assertion   const BASE_LOCATION = { x: 50, y: 130 } as const; // Type '{ readonly x: 50; readonly y: 130; }'   const BASE_LOCATION = [50, 130] as const; // Type 'readonly [10, 20]'   ```</p>"},{"location":"programming/typescript/style_guide/#enums-const-assertion","title":"Enums &amp; Const Assertion","text":"<p>Const assertion must be used over enum.</p> <p>While enums can still cover use cases as const assertion would, we tend to avoid it. Some of the reasonings as mentioned in TypeScript documentation - Const enum pitfalls, Objects vs Enums, Reverse mappings...</p> <pre><code>// \u274c Avoid using enums\nenum UserRole {\n  GUEST,\n  MODERATOR,\n  ADMINISTRATOR,\n}\n\nenum Color {\n  PRIMARY = '#B33930',\n  SECONDARY = '#113A5C',\n  BRAND = '#9C0E7D',\n}\n\n// \u2705 Use const assertion\nconst USER_ROLES = ['guest', 'moderator', 'administrator'] as const;\ntype UserRole = (typeof USER_ROLES)[number]; // Type \"guest\" | \"moderator\" | \"administrator\"\n\n// Use satisfies if UserRole type is already defined - e.g. database schema model\ntype UserRoleDB = ReadonlyArray&lt;'guest' | 'moderator' | 'administrator'&gt;;\nconst AVAILABLE_ROLES = ['guest', 'moderator'] as const satisfies UserRoleDB;\n\nconst COLOR = {\n  primary: '#B33930',\n  secondary: '#113A5C',\n  brand: '#9C0E7D',\n} as const;\ntype Color = typeof COLOR;\ntype ColorKey = keyof Color; // Type \"PRIMARY\" | \"SECONDARY\" | \"BRAND\"\ntype ColorValue = Color[ColorKey]; // Type \"#B33930\" | \"#113A5C\" | \"#9C0E7D\"\n</code></pre>"},{"location":"programming/typescript/style_guide/#null-undefined","title":"Null &amp; Undefined","text":"<p>In TypeScript types <code>null</code> and <code>undefined</code> many times can be used interchangeably. For consistency strive to:</p> <ul> <li>Use <code>null</code> to explicitly state it has no value - assignment, return function type etc.</li> <li>Use <code>undefined</code> assignment when trying to exclude fields. E.g. in form fields, request payload, querying database (Prisma differentiation)...</li> </ul>"},{"location":"programming/typescript/style_guide/#naming","title":"Naming","text":"<p>Setting aside convention on cache invalidation, but for the second hardest thing, clear naming with important context should be provided.</p> <p>Strive to keep naming conventions consistent and readable, because another person will maintain the code you have written.</p>"},{"location":"programming/typescript/style_guide/#named-export","title":"Named Export","text":"<p>Named exports must be used to ensure that all imports follow a uniform pattern (eslint rule). This keeps variables, functions... names consistent across the entire codebase. Named exports have the benefit of erroring when import statements try to import something that hasn't been declared.</p> <p>In case of exceptions e.g. Next.js pages, disable rule:</p> <pre><code>// .eslintrc.js\noverrides: [\n  {\n    files: [\"src/pages/**/*\"],\n    rules: { \"import/no-default-export\": \"off\" },\n  },\n],\n</code></pre>"},{"location":"programming/typescript/style_guide/#naming-conventions","title":"Naming Conventions","text":"<p>While it's often hard to find the best name, try optimize code for consistency and future reader by following conventions:</p>"},{"location":"programming/typescript/style_guide/#abbreviations-acronyms","title":"Abbreviations &amp; Acronyms","text":"<p>Treat acronyms as whole words, with capitalized first letter only.</p> <pre><code>// \u274c Avoid\nconst FAQList = ['qa-1', 'qa-2'];\nconst generateUserURL(params) =&gt; {...}\n\n// \u2705 Use\nconst FaqList = ['qa-1', 'qa-2'];\nconst generateUserUrl(params) =&gt; {...}\n</code></pre> <p>In favor of readability, strive to avoid abbreviations, unless they are widely accepted and necessary.</p> <pre><code>// \u274c Avoid\nconst GetWin(params) =&gt; {...}\n\n// \u2705 Use\nconst GetWindow(params) =&gt; {...}\n</code></pre>"},{"location":"programming/typescript/style_guide/#variables_1","title":"Variables","text":"<ul> <li>Locals   Camel case <code>products</code>, <code>productsFiltered</code></li> <li>Booleans   Prefixed with <code>is</code>, <code>has</code> etc. <code>isDisabled</code>, <code>hasProduct</code></li> <li>Constants   Capitalized <code>PRODUCT_ID</code></li> <li>Object constants</li> </ul> <p>Singular, capitalized with const assertion and optionally satisfies type (if there is one).</p> <p><code>ts   const ORDER_STATUS = {     pending: 'pending',     fulfilled: 'fulfilled',     error: 'error',   } as const satisfies OrderStatus;</code></p>"},{"location":"programming/typescript/style_guide/#functions_1","title":"Functions","text":"<p>Camel case <code>filterProductsByType</code>, <code>formatCurrency</code></p>"},{"location":"programming/typescript/style_guide/#generics","title":"Generics","text":"<p>A name starts with the capital letter T <code>TRequest</code>, <code>TFooBar</code> (similar to .Net internal implementation or Google style guide).  Avoid (popular convention) naming generics with one character <code>T</code>, <code>K</code> etc., the more variables we introduce, the easier it is to mistake them.</p> <pre><code>// \u274c Avoid naming generics with one character\nconst createPair = &lt;T, K extends string&gt;(first: T, second: K): [T, K] =&gt; {\n  return [first, second];\n};\nconst pair = createPair(1, 'a');\n\n// \u2705 Name starts with the capital letter T\nconst createPair = &lt;TFirst, TSecond extends string&gt;(first: TFirst, second: TSecond): [TFirst, TSecond] =&gt; {\n  return [first, second];\n};\nconst pair = createPair(1, 'a');\n</code></pre> <p>Eslint rule implements:</p> <pre><code>// .eslintrc.js\n'@typescript-eslint/naming-convention': [\n  'error',\n  {\n    selector: 'typeParameter',\n    format: ['PascalCase'],\n    custom: { regex: '^T[A-Z]', match: true },\n  },\n],\n</code></pre>"},{"location":"programming/typescript/style_guide/#react-components","title":"React Components","text":"<p>Pascal case <code>ProductItem</code>, <code>ProductsPage</code></p>"},{"location":"programming/typescript/style_guide/#prop-types","title":"Prop Types","text":"<p>React component name following \"Props\" postfix <code>[ComponentName]Props</code> - <code>ProductItemProps</code>, <code>ProductsPageProps</code></p>"},{"location":"programming/typescript/style_guide/#callback-props","title":"Callback Props","text":"<p>Event handler (callback) props are prefixed as <code>on*</code> - e.g. <code>onClick</code>.  Event handler implementation functions are prefixed as <code>handle*</code> - e.g. <code>handleClick</code> (eslint rule).</p> <pre><code>// \u274c Avoid inconsistent callback prop naming\n&lt;Button click={actionClick} /&gt;\n&lt;MyComponent userSelectedOccurred={triggerUser} /&gt;\n\n// \u2705 Use prop prefix 'on*' and handler prefix 'handle*'\n&lt;Button onClick={handleClick} /&gt;\n&lt;MyComponent onUserSelected={handleUserSelected} /&gt;\n</code></pre>"},{"location":"programming/typescript/style_guide/#react-hooks","title":"React Hooks","text":"<p>Camel case, prefixed as 'use' (eslint rule), symmetrically convention as <code>[value, setValue] = useState()</code> (eslint rule)</p> <pre><code>// \u274c Avoid inconsistent useState hook naming\nconst [userName, setUser] = useState();\nconst [color, updateColor] = useState();\nconst [visible, setVisible] = useState();\n\n// \u2705 Use\nconst [name, setName] = useState();\nconst [color, setColor] = useState();\nconst [isActive, setIsActive] = useState();\n</code></pre> <p>Custom hook must always return an object:</p> <pre><code>// \u274c Avoid\nconst [products, errors] = useGetProducts();\nconst [fontSizes] = useTheme();\n\n// \u2705 Use\nconst { products, errors } = useGetProducts();\nconst { fontSizes } = useTheme();\n</code></pre>"},{"location":"programming/typescript/style_guide/#comments","title":"Comments","text":"<p>Comments in general should be avoided. Try to write expressive code and name things what they are before adding comments.</p> <p>As an exception use comments only when you need to add context or explain choices that cannot be expressed through code. Comments should always be complete sentences. As rule of a thumb try to explain <code>why</code> in comments, not <code>how</code> and <code>what</code>.</p> <pre><code>// \u274c Avoid\n// convert to minutes\nconst m = s * 60;\n// avg users per minute\nconst myAvg = u / m;\n\n// \u2705 Use\nconst SECONDS_IN_MINUTE = 60;\nconst minutes = seconds * SECONDS_IN_MINUTE;\nconst averageUsersPerMinute = noOfUsers / minutes;\n\n// TODO: Filtering should be moved to the backend once API changes are released.\n// Issue/PR - https://github.com/foo/repo/pulls/55124\nconst filteredUsers = frontendFiltering(selectedUsernames);\n\n// Use Fourier transformation to minimize information loss - https://github.com/dntj/jsfft#usage\nconst frequencies = signal.FFT();\n</code></pre>"},{"location":"programming/typescript/style_guide/#source-organization","title":"Source Organization","text":""},{"location":"programming/typescript/style_guide/#code-collocation","title":"Code Collocation","text":"<ul> <li>Every application or package in monorepo has project files/folders organized and grouped by feature.</li> <li>Collocate code as close as possible to where it's relevant.</li> <li>Deep folder nesting should not represent an issue.</li> </ul>"},{"location":"programming/typescript/style_guide/#imports","title":"Imports","text":"<p>Import paths can be relative, starting with <code>./</code> or <code>../</code>, or they can be absolute <code>@common/utils</code>.</p> <p>To make import statements more readable and easier to understand:</p> <ul> <li>Relative imports <code>./sortItems</code> must be used when importing files within the same feature, that are 'close' to each other, which also allows moving feature around the codebase without introducing changes in these imports.</li> <li>Absolute imports <code>@common/utils</code> must be used in all other cases.</li> <li>All imports must be auto sorted by tooling e.g. prettier-plugin-sort-imports, eslint-plugin-import...</li> </ul> <pre><code>// \u274c Avoid\nimport { bar, foo } from '../../../../../../distant-folder';\n\n// \u2705 Use\nimport { locationApi } from '@api/locationApi';\n\nimport { foo } from '../../foo';\nimport { bar } from '../bar';\nimport { baz } from './baz';\n</code></pre>"},{"location":"programming/typescript/style_guide/#project-structure","title":"Project Structure","text":"<p>Example frontend monorepo project, where every application has following file/folder structure:</p> <pre><code>apps/\n\u251c\u2500 product-manager/\n\u2502  \u251c\u2500 common/\n\u2502  \u2502  \u251c\u2500 components/\n\u2502  \u2502  \u2502  \u251c\u2500 Button/\n\u2502  \u2502  \u2502  \u251c\u2500 ProductTitle/\n\u2502  \u2502  \u2502  \u251c\u2500 ...\n\u2502  \u2502  \u2502  \u2514\u2500 index.tsx\n\u2502  \u2502  \u251c\u2500 consts/\n\u2502  \u2502  \u2502  \u251c\u2500 paths.ts\n\u2502  \u2502  \u2502  \u2514\u2500 ...\n\u2502  \u2502  \u251c\u2500 hooks/\n\u2502  \u2502  \u2514\u2500 types/\n\u2502  \u251c\u2500 modules/\n\u2502  \u2502  \u251c\u2500 HomePage/\n\u2502  \u2502  \u251c\u2500 ProductAddPage/\n\u2502  \u2502  \u251c\u2500 ProductPage/\n\u2502  \u2502  \u251c\u2500 ProductsPage/\n\u2502  \u2502  \u2502  \u251c\u2500 api/\n\u2502  \u2502  \u2502  \u2502  \u2514\u2500 useGetProducts/\n\u2502  \u2502  \u2502  \u251c\u2500 components/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 ProductItem/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 ProductsStatistics/\n\u2502  \u2502  \u2502  \u2502  \u2514\u2500 ...\n\u2502  \u2502  \u2502  \u251c\u2500 utils/\n\u2502  \u2502  \u2502  \u2502  \u2514\u2500 filterProductsByType/\n\u2502  \u2502  \u2502  \u2514\u2500 index.tsx\n\u2502  \u2502  \u251c\u2500 ...\n\u2502  \u2502  \u2514\u2500 index.tsx\n\u2502  \u251c\u2500 eslintrc.js\n\u2502  \u251c\u2500 package.json\n\u2502  \u2514\u2500 tsconfig.json\n\u251c\u2500 warehouse/\n\u251c\u2500 admin-dashboard/\n\u2514\u2500 ...\n</code></pre> <ul> <li><code>modules</code> folder is responsible for implementation of each individual page, where all custom features for that page are being implemented (components, hooks, utils functions etc.).</li> <li><code>common</code> folder is responsible for implementations that are truly used across application. Since its a \"global folder\" it should be used sparingly.   If same component e.g. <code>common/components/ProductTitle</code> starts being used on more the one page, it shall be moved to common folder.</li> </ul> <p>In case file-system based router (e.g. Nextjs) is being used as frontend framework, <code>pages</code> folder serves only as a router, where its responsibility is to define routes (no business logic implementation).</p>"},{"location":"programming/typescript/style_guide/#appendix-react","title":"Appendix - React","text":"<p>Since React components and hooks are also functions, respective function conventions applies.</p>"},{"location":"programming/typescript/style_guide/#props-type","title":"Props Type","text":"<pre><code>// \u274c Avoid using React.FC type\ntype FooProps = {\n  name: string;\n  score: number;\n};\n\nexport const Foo: React.FC&lt;FooProps&gt; = ({ name, score }) =&gt; {\n\n// \u2705 Use props argument with type\ntype FooProps = Readonly&lt;{\n  name: string;\n  score: number;\n}&gt;;\n\nexport const Foo = ({ name, score }: FooProps) =&gt; {...\n</code></pre>"},{"location":"programming/typescript/style_guide/#props-required-optional","title":"Props - Required &amp; Optional","text":"<p>Strive to have majority of props required and use optional sparingly.</p> <p>Especially when creating new component for first/single use case majority of props should be required. When component starts covering more use cases, introduce optional props. There are potential exceptions, where component API needs to implement optional props from the start (e.g. shared components covering multiple use cases, UI design system components - button <code>isDisabled</code> etc.)</p> <p>As mentioned in function example - implementing 10 React components with 5 required props each, is better then implementing one \"can do it all\" function that accepts 50 optional props. If component becomes to complex it probably should be broken into smaller pieces.</p> <p>Use Discriminated Type</p> <p>When applicable use discriminated type to eliminate optional props, which will decrease complexity on component API and only necessary/required props will be passed depending on its use case.</p> <pre><code>// \u274c Avoid optional props as they increase complexity of component API\ntype StatusProps = {\n  data?: Products;\n  title?: string;\n  time?: number;\n  error?: string;\n};\n\n// \u2705 Strive to have majority of props required, if that's not possible,\n// use discriminated union for clear intent on component usage\ntype StatusSuccess = {\n  status: 'success';\n  data: Products;\n  title: string;\n};\n\ntype StatusLoading = {\n  status: 'loading';\n  time: number;\n};\n\ntype StatusError = {\n  status: 'error';\n  error: string;\n};\n\ntype StatusProps = StatusSuccess | StatusLoading | StatusError;\n\nexport const Status = (status: StatusProps) =&gt; {...\n</code></pre>"},{"location":"programming/typescript/style_guide/#component-types","title":"Component Types","text":""},{"location":"programming/typescript/style_guide/#container","title":"Container","text":"<ul> <li>All container components have postfix \"Container\" or \"Page\" <code>[ComponentName]Container|Page</code>. Use \"Page\" postfix to indicate component it's an actual web page.</li> <li>Each feature has a container component (<code>AddUserContainer.tsx</code>, <code>EditProductContainer.tsx</code>, <code>ProductsPage.tsx</code> etc.)</li> <li>Includes business logic.</li> <li>API integration.</li> <li>Structure:   <code>ProductsPage/   \u251c\u2500 api/   \u2502  \u2514\u2500 useGetProducts/   \u251c\u2500 components/   \u2502  \u2514\u2500 ProductItem/   \u251c\u2500 utils/   \u2502  \u2514\u2500 filterProductsByType/   \u2514\u2500 index.tsx</code></li> </ul>"},{"location":"programming/typescript/style_guide/#ui-feature","title":"UI - Feature","text":"<ul> <li>Representational components that are designed to fulfill feature requirements.</li> <li>Nested inside container component folder.</li> <li>Should follow functions conventions as much as possible.</li> <li>No API integration.</li> <li>Structure:   <code>ProductItem/   \u251c\u2500 index.tsx   \u251c\u2500 ProductItem.stories.tsx   \u2514\u2500 ProductItem.test.tsx</code></li> </ul>"},{"location":"programming/typescript/style_guide/#ui-design-system","title":"UI - Design system","text":"<ul> <li>Global Reusable/shared components used throughout whole codebase.</li> <li>Structure:   <code>Button/   \u251c\u2500 index.tsx   \u251c\u2500 Button.stories.tsx   \u2514\u2500 Button.test.tsx</code></li> </ul>"},{"location":"programming/typescript/style_guide/#store-pass-data","title":"Store &amp; Pass Data","text":"<ul> <li>Utilize storing state in the URL, especially for filtering, sorting etc.</li> <li>Don't sync URL state with local state.</li> <li>Consider passing data simply through props, using the URL, or composing children. Use global state (Zustand, Context) as a last resort.</li> <li>Use React compound components when components should belong and work together: <code>menu</code>, <code>accordion</code>,<code>navigation</code>, <code>tabs</code>, <code>list</code>,...   Always export compound components as:</li> </ul> <p>```tsx   // PriceList.tsx   const PriceListRoot = ({ children }) =&gt; <ul>{children}</ul>;   const PriceListItem = ({ title, amount }) =&gt; <li>Name: {name} - Amount: {amount}<li></li>; <p>// \u274c   export const PriceList = {     Container: PriceListRoot,     Item: PriceListItem,   };   // \u274c   PriceList.Item = Item;   export default PriceList;</p> <p>// \u2705   export const PriceList = PriceListRoot as typeof PriceListRoot &amp; {     Item: typeof PriceListItem;   };   PriceList.Item = PriceListItem;</p> <p>// App.tsx   import { PriceList } from \"./PriceList\";</p> <p> ;   ```</p> <ul> <li>UI components should show derived state and send events, nothing more.</li> <li>As in many programming languages functions args can be passed to the next function and on to the next etc.   Rect components are no different, where prop drilling should not become an issue.   If with app scaling prop drilling truly becomes an issue, try to refactor render method, local states in parent components, using composition etc.</li> <li>Data fetching is only allowed in container components.</li> <li>Use of server-state library is encouraged (react-query, apollo client...).</li> <li>use of client-state library for global state is discouraged.   Reconsider if something should be truly global across application, e.g. <code>themeMode</code>, <code>Permissions</code> or even that can be put in server-state (e.g. user settings - <code>/me</code> endpoint). If still truly needed use Zustand or Context (not Redux, Mobx etc.).</li> </ul>"},{"location":"programming/typescript/style_guide/#appendix-tests-unit-integration","title":"Appendix - Tests (Unit &amp; Integration)","text":""},{"location":"programming/typescript/style_guide/#what-how-to-test","title":"What &amp; How To Test","text":"<p>Automated test comes with benefits that helps us write better code and makes it easy to refactor, while bugs are caught earlier in the process.  Consider trade-offs of what and how to test to achieve confidence application is working as intended, while writing and maintaining tests doesn't slow the team down.</p> <p>\u2705 Do:</p> <ul> <li>Implement test to be short, simple, and pleasant to work with. Intent of a test should be immediately visible.</li> <li>Strive to write tests in a way your app/package is used by a user, meaning test business logic.   E.g. given some user input, they receive the expected output for a process.</li> <li>All tests must be setup and implemented to run as standalone in isolation, where they don't depend on other tests order of execution.</li> <li>Tests should be resilient to changes.   Query HTML elements based on attributes that are unlikely to change. Order of priority must be followed as specified in Testing Library - role, label, placeholder, text contents, display value, alt text, title, test ID.</li> </ul> <p>\u274c Don't:</p> <ul> <li>Don't test implementation details. When refactoring code, tests shouldn't change.</li> <li>Don't re-test the library/framework.</li> <li>Don't mandate 100% code coverage for applications.</li> <li>Don't test just to test.</li> </ul> <p><code>ts   // \u274c Avoid   it('should render user list', () =&gt; {     render(&lt;UserList /&gt;);     expect(screen.getByText('Users List')).toBeInTheDocument();   });</code></p>"},{"location":"programming/typescript/style_guide/#test-description","title":"Test Description","text":"<p>All test descriptions must follow naming convention as <code>it('should ... when ...')</code>. Eslint rule implements regex:</p> <pre><code>// .eslintrc.js\n'jest/valid-title': [\n  'error',\n  {\n    mustMatch: { it: [/should.*when/u.source, \"Test title must include 'should' and 'when'\"] },\n  },\n],\n</code></pre> <pre><code>// \u274c Avoid\nit('accepts ISO date format where date is parsed and formatted as YYYY-MM');\nit('after title is confirmed user description is rendered');\n\n// \u2705 Name test description as it('should ... when ...')\nit('should return parsed date as YYYY-MM when input is in ISO date format');\nit('should render user description when title is confirmed');\n</code></pre>"},{"location":"programming/typescript/style_guide/#tooling-extension","title":"Tooling Extension","text":"<p>Test can be run through npm scripts, but to improve development experience it's highly encouraged to use Jest Runner VS code extension so any single test can be run instantly, especially if testing app/package in larger codebase (monorepo).</p> <pre><code>code --install-extension firsttris.vscode-jest-runner\n</code></pre>"},{"location":"programming/typescript/style_guide/#snapshot","title":"Snapshot","text":"<p>Snapshot tests are discouraged in order to avoid fragility, which leads to \"just update it\" turn of mind, to achieve all the tests pass.  Exceptions can be made, with strong rational behind it, where test output has short and clear intent, whats actually being tested (e.g. design system library critical elements that shouldn't deviate).</p>"},{"location":"programming/typescript/the_concise_typeScript_book/","title":"The Concise TypeScript Book","text":"<p>The Concise TypeScript Book provides a comprehensive and succinct overview of TypeScript's capabilities. It offers clear explanations covering all aspects found in the latest version of the language, from its powerful type system to advanced features. Whether you're a beginner or an experienced developer, this book is an invaluable resource to enhance your understanding and proficiency in TypeScript.</p> <p>This book is completely Free and Open Source.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#downloads","title":"Downloads","text":"<p>You can also download the Epub version here:</p> <p>https://github.com/gibbok/typescript-book/tree/main/downloads</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#table-of-content","title":"Table of content","text":"<ul> <li>The Concise TypeScript Book</li> <li>Downloads</li> <li>Table of content</li> <li>Introduction</li> <li>About the author</li> <li>TypeScript an introduction<ul> <li>What is TypeScript?</li> <li>Why TypeScript?</li> <li>TypeScript and JavaScript</li> <li>TypeScript code generation</li> <li>Modern JavaScript Now (Downleveling)</li> </ul> </li> <li>Getting Started With TypeScript<ul> <li>Installation</li> <li>Configuration</li> <li>TypeScript configuration file \u200b\u200btsconfig.json</li> <li>target</li> <li>lib</li> <li>strict</li> <li>module</li> <li>moduleResolution</li> <li>esModuleInterop</li> <li>jsx</li> <li>skipLibCheck</li> <li>files</li> <li>include</li> <li>exclude</li> <li>Migration to TypeScript Advice</li> </ul> </li> <li>Exploring the Type System<ul> <li>The TypeScript language service</li> <li>Structural Typing</li> <li>TypeScript Fundamental Comparison Rules</li> <li>Types as sets</li> <li>Assign a type: Type Declarations and Type Assertions</li> <li>Type Declaration</li> <li>Type Assertion</li> <li>Non-null assertion</li> <li>Ambient Declarations</li> <li>Property Checking and Excess Property Checking</li> <li>Weak Types</li> <li>Strict Object Literal Checking (Freshness)</li> <li>Type Inference</li> <li>More advanced inferences</li> <li>Type Widening</li> <li>Const</li> <li>const modifier on type parameters</li> <li>Explicit Type Annotation</li> <li>Const assertion</li> <li>Type Narrowing</li> <li>Conditions</li> <li>Throwing or returning</li> <li>Discriminated union</li> <li>User-defined type guards</li> </ul> </li> <li>Primitive Types<ul> <li>string</li> <li>boolean</li> <li>number</li> <li>bigInt</li> <li>symbol</li> <li>null and undefined</li> <li>Array</li> <li>any</li> </ul> </li> <li>Type Annotations</li> <li>Optional Properties</li> <li>Readonly Properties</li> <li>Index Signatures</li> <li>Extending Types</li> <li>Literal Types</li> <li>Literal Inference</li> <li>strictNullChecks</li> <li>Non-null Assertion Operator (Postfix !)</li> <li>Enums<ul> <li>Numeric enums</li> <li>String enums</li> <li>Constant enums</li> <li>Reverse mapping</li> <li>Ambient enums</li> <li>Computed and constant members</li> </ul> </li> <li>Narrowing<ul> <li>typeof type guards</li> <li>Truthiness narrowing</li> <li>Equality narrowing</li> <li>In operator narrowing</li> <li>instanceof narrowing</li> </ul> </li> <li>Assignments</li> <li>Control flow analysis</li> <li>type predicates</li> <li>Discriminated unions</li> <li>The never type</li> <li>Exhaustiveness checking</li> <li>Object Types</li> <li>Tuple Type</li> <li>Fixed length tuple</li> <li>Union Type</li> <li>Intersection Types</li> <li>Type Indexing</li> <li>Type from Value</li> <li>Type from Func Return</li> <li>Type from Module</li> <li>Mapped types</li> <li>Conditional Types</li> <li>Distributive conditional types</li> <li>\u201cinfer\u201d Type inference in conditional types</li> <li>Predefined conditional types</li> <li>Template Union Types</li> <li>Any type</li> <li>Unknown type</li> <li>Void type</li> <li>Never type</li> <li>Interface and Type<ul> <li>Common Syntax</li> <li>Basic types</li> <li>Objects and interfaces</li> <li>Union and intersection types</li> </ul> </li> <li>Built-in Type Primitives</li> <li>Common Built-in JS Objects</li> <li>Overloads</li> <li>Get \\&amp; Set</li> <li>Merging and Extension</li> <li>Differences between Type and Interface</li> <li>Class<ul> <li>Class Common Syntax</li> <li>Constructor</li> <li>Private and Protected Constructors</li> <li>Access modifiers</li> <li>Auto-Accessors in Classes</li> <li>this</li> <li>Parameter Properties</li> <li>Abstract Classes</li> <li>With Generics</li> <li>Decorators</li> <li>Class decorators</li> <li>Property Decorator</li> <li>Method Decorator</li> <li>Getter and Setter Decorators</li> <li>Inheritance</li> <li>Statics</li> <li>Property initialization</li> <li>Method overloading</li> </ul> </li> <li>Generics<ul> <li>Generic Type</li> <li>Generic Classes</li> <li>Generic Constraints</li> <li>Generic contextual narrowing</li> </ul> </li> <li>Erased Structural Types</li> <li>Namespacing</li> <li>Symbols</li> <li>Triple-Slash Directives</li> <li>Type Manipulation<ul> <li>Creating Types from Types</li> <li>Indexed Access Types</li> <li>Utility Types</li> <li>Awaited\\&lt;T&gt;</li> <li>Partial\\&lt;T&gt;</li> <li>Required\\&lt;T&gt;</li> <li>Readonly\\&lt;T&gt;</li> <li>Record\\&lt;K, T&gt;</li> <li>Pick\\&lt;T, K&gt;</li> <li>Omit\\&lt;T, K&gt;</li> <li>Exclude\\&lt;T, U&gt;</li> <li>Extract\\&lt;T, U&gt;</li> <li>NonNullable\\&lt;T&gt;</li> <li>Parameters\\&lt;T&gt;</li> <li>ConstructorParameters\\&lt;T&gt;</li> <li>ReturnType\\&lt;T&gt;</li> <li>InstanceType\\&lt;T&gt;</li> <li>ThisParameterType\\&lt;T&gt;</li> <li>OmitThisParameter\\&lt;T&gt;</li> <li>ThisType\\&lt;T&gt;</li> <li>Uppercase\\&lt;T&gt;</li> <li>Lowercase\\&lt;T&gt;</li> <li>Capitalize\\&lt;T&gt;</li> <li>Uncapitalize\\&lt;T&gt;</li> </ul> </li> <li>Others<ul> <li>Errors and Exception Handling</li> <li>Asynchronous Language Features</li> <li>Iterators and Generators</li> <li>TsDocs JSDoc Reference</li> <li>@types</li> <li>JSX</li> <li>ES6 Modules</li> <li>ES7 exponentiation operator</li> <li>The for-await-of Statement</li> <li>New.target</li> <li>Dynamic Import Expressions</li> <li>\u201ctsc \u2013watch\u201d</li> <li>Definite Assignment Assertions (!)</li> <li>Defaulted declarations</li> <li>\u201cconst\u201c assertions</li> <li>Optional Chaining</li> <li>Nullish coalescing operator (??)</li> <li>Template Literal Types</li> <li>Function overloading</li> <li>Recursive Conditional Types</li> <li>ECMAScript Module Support in Node.js</li> <li>Assertion Functions</li> <li>Variadic Tuple Types</li> <li>Boxed types</li> <li>Key Remapping in Mapped Types</li> <li>Covariance and Contravariance in TypeScript</li> <li>Optional Variance Annotations for Type Parameters</li> <li>Symbol and Template String Pattern Index Signatures</li> <li>The satisfies Operator</li> </ul> </li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#introduction","title":"Introduction","text":"<p>Welcome to The Concise TypeScript Book! This guide equips you with essential knowledge and practical skills for effective TypeScript development. Discover key concepts and techniques to write clean, robust code. Whether you're a beginner or an experienced developer, this book serves as both a comprehensive guide and a handy reference for leveraging TypeScript's power in your projects.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#about-the-author","title":"About the author","text":"<p>Simone Poggiali is an experienced Senior Front-end Developer with a passion for writing professional-grade code since the 90s. Throughout his international career, he has contributed to numerous projects for a wide range of clients, from startups to large organizations. Notable companies such as HelloFresh, Siemens, O2, and Leroy Merlin have benefited from his expertise and dedication.</p> <p>You can reach Simone Poggiali on the following platforms:</p> <ul> <li>LinkedIn: https://www.linkedin.com/in/simone-poggiali</li> <li>GitHub: https://github.com/gibbok</li> <li>Twitter: https://twitter.com/gibbok_coding</li> <li>Email: gibbok.coding\ud83d\udce7gmail.com</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#typescript-an-introduction","title":"TypeScript an introduction","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#what-is-typescript","title":"What is TypeScript?","text":"<p>TypeScript is a strongly typed programming language that builds on JavaScript. It was originally designed by Anders Hejlsberg in 2012 and is currently developed and maintained by Microsoft as an open source project.</p> <p>TypeScript compiles to JavaScript and can be executed in any JavaScript engine (e.g., a browser or server Node.js).</p> <p>TypeScript supports multiple programming paradigms such as functional, generic, imperative, and object-oriented. TypeScript is neither an interpreted nor a compiled language.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#why-typescript","title":"Why TypeScript?","text":"<p>TypeScript is a strongly typed language that helps prevent common programming mistakes and avoid certain kinds of run-time errors before the program is executed.</p> <p>A strongly typed language allows the developer to specify various program constraints and behaviors in the data type definitions, facilitating the ability to verify the correctness of the software and prevent defects. This is especially valuable in large-scale applications.</p> <p>Some of the benefits of TypeScript:</p> <ul> <li>Static typing, optionally strongly typed</li> <li>Type Inference</li> <li>Access to ES6 and ES7 features</li> <li>Cross-Platform and Cross-browser Compatibility</li> <li>Tooling support with IntelliSense</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#typescript-and-javascript","title":"TypeScript and JavaScript","text":"<p>TypeScript is written in <code>.ts</code> or <code>.tsx</code> files, while JavaScript files are written in <code>.js</code> or <code>.jsx</code>.</p> <p>Files with the extension <code>.tsx</code> or <code>.jsx</code> can contain JavaScript Syntax Extension JSX, which is used in React for UI development.</p> <p>TypeScript is a typed superset of JavaScript (ECMAScript 2015) in terms of syntax. All JavaScript code is valid TypeScript code, but the reverse is not always true.</p> <p>For instance, consider a function in a JavaScript file with the <code>.js</code> extension, such as the following:</p> <pre><code>const sum = (a, b) =&gt; a + b;\n</code></pre> <p>The function can be converted and used in TypeScript by changing the file extension to <code>.ts</code>. However, if the same function is annotated with TypeScript types, it cannot be executed in any JavaScript engine without compilation. The following TypeScript code will produce a syntax error if it is not compiled:</p> <pre><code>const sum = (a: number, b: number): number =&gt; a + b;\n</code></pre> <p>TypeScript was designed to detect possible exceptions that can occur at runtime during compilation time by having the developer define the intent with type annotations. In addition, TypeScript can also catch issues if no type annotation is provided. For instance, the following code snippet does not specify any TypeScript types:</p> <pre><code>const items = [{ x: 1 }, { x: 2 }];\nconst result = items.filter(item =&gt; item.y);\n</code></pre> <p>In this case, TypeScript detects an error and reports:</p> <pre><code>Property 'y' does not exist on type '{ x: number; }'.\n</code></pre> <p>TypeScript's type system is largely influenced by the runtime behavior of JavaScript. For example, the addition operator (+), which in JavaScript can either perform string concatenation or numeric addition, is modeled in the same way in TypeScript:</p> <pre><code>const result = '1' + 1; // Result is of type string\n</code></pre> <p>The team behind TypeScript has made a deliberate decision to flag unusual usage of JavaScript as errors. For instance, consider the following valid JavaScript code:</p> <pre><code>const result = 1 + true; // In JavaScript, the result is equal 2\n</code></pre> <p>However, TypeScript throws an error:</p> <p>Operator '+' cannot be applied to types 'number' and 'boolean'.</p> <p>This error occurs because TypeScript strictly enforces type compatibility, and in this case, it identifies an invalid operation between a number and a boolean.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#typescript-code-generation","title":"TypeScript code generation","text":"<p>The TypeScript compiler has two main responsibilities: checking for type errors and compiling to JavaScript. These two processes are independent of each other. Types do not affect the execution of the code in a JavaScript engine, as they are completely erased during compilation. TypeScript can still output JavaScript even in the presence of type errors. Here is an example of TypeScript code with a type error:</p> <pre><code>const add = (a: number, b: number): number =&gt; a + b;\nconst result = add('x', 'y'); // Argument of type 'string' is not assignable to parameter of type 'number'.\n</code></pre> <p>However, it can still produce executable JavaScript output:</p> <pre><code>'use strict';\nconst add = (a, b) =&gt; a + b;\nconst result = add('x', 'y'); // xy\n</code></pre> <p>It is not possible to check TypeScript types at runtime. For example:</p> <pre><code>interface Animal {\n    name: string;\n}\ninterface Dog extends Animal {\n    bark: () =&gt; void;\n}\ninterface Cat extends Animal {\n    meow: () =&gt; void;\n}\nconst makeNoise = (animal: Animal) =&gt; {\n    if (animal instanceof Dog) {\n        // 'Dog' only refers to a type, but is being used as a value here.\n        // ...\n    }\n};\n</code></pre> <p>As the types are erased after compilation, there is no way to run this code in JavaScript. To recognize types at runtime, we need to use another mechanism. TypeScript provides several options, with a common one being \"tagged union\". For example:</p> <pre><code>interface Dog {\n    kind: 'dog'; // Tagged union\n    bark: () =&gt; void;\n}\ninterface Cat {\n    kind: 'cat'; // Tagged union\n    meow: () =&gt; void;\n}\ntype Animal = Dog | Cat;\n\nconst makeNoise = (animal: Animal) =&gt; {\n    if (animal.kind === 'dog') {\n        animal.bark();\n    } else {\n        animal.meow();\n    }\n};\n\nconst dog: Dog = {\n    kind: 'dog',\n    bark: () =&gt; console.log('bark'),\n};\nmakeNoise(dog);\n</code></pre> <p>The property \"kind\" is a value that can be used at runtime to distinguish between objects in JavaScript.</p> <p>It is also possible for a value at runtime to have a type different from the one declared in the type declaration. For instance, if the developer has misinterpreted an API type and annotated it incorrectly.</p> <p>TypeScript is a superset of JavaScript, so the \"class\" keyword can be used as a type and value at runtime.</p> <pre><code>class Animal {\n    constructor(public name: string) {}\n}\nclass Dog extends Animal {\n    constructor(public name: string, public bark: () =&gt; void) {\n        super(name);\n    }\n}\nclass Cat extends Animal {\n    constructor(public name: string, public meow: () =&gt; void) {\n        super(name);\n    }\n}\ntype Mammal = Dog | Cat;\n\nconst makeNoise = (mammal: Mammal) =&gt; {\n    if (mammal instanceof Dog) {\n        mammal.bark();\n    } else {\n        mammal.meow();\n    }\n};\n\nconst dog = new Dog('Fido', () =&gt; console.log('bark'));\nmakeNoise(dog);\n</code></pre> <p>In JavaScript, a \"class\" has a \"prototype\" property, and the \"instanceof\" operator can be used to test if the prototype property of a constructor appears anywhere in the prototype chain of an object.</p> <p>TypeScript has no effect on runtime performance, as all types will be erased. However, TypeScript does introduce some build time overhead.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#modern-javascript-now-downleveling","title":"Modern JavaScript Now (Downleveling)","text":"<p>TypeScript can compile code to any released version of JavaScript since ECMAScript 3 (1999). This means that TypeScript can transpile code from the latest JavaScript features to older versions, a process known as downleveling. This allows the usage of modern JavaScript while maintaining maximum compatibility with older runtime environments.</p> <p>It's important to note that during transpilation to an older version of JavaScript, TypeScript may generate code that could incur a performance overhead compared to native implementations.</p> <p>Here are some of the modern JavaScript features that can be used in TypeScript:</p> <ul> <li>ECMAScript modules instead of AMD-style \"define\" callbacks or CommonJS \"require\" statements.</li> <li>Classes instead of prototypes.</li> <li>Variables declaration using \"let\" or \"const\" instead of \"var\".</li> <li>\"for-of\" loop or \".forEach\" instead of the traditional \"for\" loop.</li> <li>Arrow functions instead of function expressions.</li> <li>Destructuring assignment.</li> <li>Shorthand property/method names and computed property names.</li> <li>Default function parameters.</li> </ul> <p>By leveraging these modern JavaScript features, developers can write more expressive and concise code in TypeScript.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#getting-started-with-typescript","title":"Getting Started With TypeScript","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#installation","title":"Installation","text":"<p>Visual Studio Code provides excellent support for the TypeScript language but does not include the TypeScript compiler. To install the TypeScript compiler, you can use a package manager like npm or yarn:</p> <pre><code>npm install typescript --save-dev\n</code></pre> <p>or</p> <pre><code>yarn add typescript --dev\n</code></pre> <p>Make sure to commit the generated lockfile to ensure that every team member uses the same version of TypeScript.</p> <p>To run the TypeScript compiler, you can use the following commands</p> <pre><code>npx tsc\n</code></pre> <p>or</p> <pre><code>yarn tsc\n</code></pre> <p>It is recommended to install TypeScript project-wise rather than globally, as it provides a more predictable build process. However, for one-off occasions, you can use the following command:</p> <pre><code>npx tsc\n</code></pre> <p>or installing it globally:</p> <pre><code>npm install -g typescript\n</code></pre> <p>If you are using Microsoft Visual Studio, you can obtain TypeScript as a package in NuGet for your MSBuild projects. In the NuGet Package Manager Console, run the following command:</p> <pre><code>Install-Package Microsoft.TypeScript.MSBuild\n</code></pre> <p>During the TypeScript installation, two executables are installed: \"tsc\" as the TypeScript compiler and \"tsserver\" as the TypeScript standalone server. The standalone server contains the compiler and language services that can be utilized by editors and IDEs to provide intelligent code completion.</p> <p>Additionally, there are several TypeScript-compatible transpilers available, such as Babel (via a plugin) or swc. These transpilers can be used to convert TypeScript code into other target languages or versions.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#configuration","title":"Configuration","text":"<p>TypeScript can be configured using the tsc CLI options or by utilizing a dedicated configuration file called tsconfig.json placed in the root of the project.</p> <p>To generate a tsconfig.json file prepopulated with recommended settings, you can use the following command:</p> <pre><code>tsc --init\n</code></pre> <p>When executing the <code>tsc</code> command locally, TypeScript will compile the code using the configuration specified in the nearest tsconfig.json file.</p> <p>Here are some examples of CLI commands that run with the default settings:</p> <pre><code>tsc main.ts // Compile a specific file (main.ts) to JavaScript\ntsc src/*.ts // Compile any .ts files under the 'src' folder to JavaScript\ntsc app.ts util.ts --outfile index.js // Compile two TypeScript files (app.ts and util.ts) into a single JavaScript file (index.js)\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#typescript-configuration-file-tsconfigjson","title":"TypeScript configuration file \u200b\u200btsconfig.json","text":"<p>A tsconfig.json file is used to configure the TypeScript Compiler (tsc). Usually, it is added to the root of the project, together with the <code>package.json</code> file.</p> <p>Notes:</p> <ul> <li>tsconfig.json accepts comments even if it is in json format.</li> <li>It is advisable to use this configuration file instead of the command-line options.</li> </ul> <p>At the following link you can find the complete documentation and its schema: https://www.typescriptlang.org/tsconfig http://json.schemastore.org/tsconfig</p> <p>The following represents a list of the common and useful configurations:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#target","title":"target","text":"<p>The \"target\" property is used to specify which version of JavaScript ECMAScript version your TypeScript should emit/compile into. For modern browsers ES6 is a good option, for older browsers, ES5 is recommended.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#lib","title":"lib","text":"<p>The \"lib\" property is used to specify which library files to include at compilation time. TypeScript automatically includes APIs for features specified in the \"target\" property, but it is possible to omit or pick specific libraries for particular needs. For instance, if you are working on a server project, you could exclude the \"DOM\" library, which is useful only in a browser environment.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#strict","title":"strict","text":"<p>The \"strict\" property enables stronger guarantees and enhances type safety. It is advisable to always include this property in your project's tsconfig.json file. Enabling the \"strict\" property allows TypeScript to:</p> <ul> <li>Emit code using \"use strict\" for each source file.</li> <li>Consider \"null\" and \"undefined\" in the type checking process.</li> <li>Disable the usage of the \"any\" type when no type annotations are present.</li> <li>Raise an error on the usage of the \"this\" expression, which would otherwise imply the \"any\" type.</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#module","title":"module","text":"<p>The \"module\" property sets the module system supported for the compiled program. During runtime, a module loader is used to locate and execute dependencies based on the specified module system.</p> <p>The most common module loaders used in JavaScript are Node.js CommonJS for server-side applications and RequireJS for AMD modules in browser-based web applications. TypeScript can emit code for various module systems, including UMD, System, ESNext, ES2015/ES6, and ES2020.</p> <p>Note: The module system should be chosen based on the target environment and the module loading mechanism available in that environment.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#moduleresolution","title":"moduleResolution","text":"<p>The \"moduleResolution\" property specifies the module resolution strategy. Use \u201cnode\u201d for modern TypeScript code, the \u201cclassic\u201d strategy is used only for old versions of TypeScript (before 1.6).</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#esmoduleinterop","title":"esModuleInterop","text":"<p>The \"esModuleInterop\" property allows import default from CommonJS modules that did not export using the \u201cdefault\u201d property, this property provides a shim to ensure compatibility in the emitted JavaScript. After enabling this option we can use \u201cimport MyLibrary from \u2018my-library\u2019\u201d instead of \u201cimport * as MyLibrary from \u2018my-library\u2019\u201d.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#jsx","title":"jsx","text":"<p>The \"jsx\" property applies only to .tsx files used in ReactJS and controls how JSX constructs are compiled into JavaScript. A common option is \u201cpreserve\u201d which will compile to a .jsx file keeping unchanged the JSX so it can be passed to different tools like Babel for further transformations.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#skiplibcheck","title":"skipLibCheck","text":"<p>The \"skipLibCheck'' property will prevent TypeScript from type-checking the entire imported third-party packages. This property will reduce the compile time of a project. TypeScript will still check your code against the type definitions provided by these packages.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#files","title":"files","text":"<p>The \"files\" property indicates to the compiler a list of files that must always be included in the program.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#include","title":"include","text":"<p>The \"include\" property indicates to the compiler a list of files that we would like to include. This property allows glob-like patterns, such as \"*\" for any subdirectory, \"\" for any file name, and \"?\" for optional characters.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#exclude","title":"exclude","text":"<p>The \"exclude\" property indicates to the compiler a list of files that should not be included in the compilation. This can include files such as \"node_modules\" or test files. Note: tsconfig.json allows comments.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#migration-to-typescript-advice","title":"Migration to TypeScript Advice","text":"<p>For large projects, it is recommended to adopt a gradual transition where TypeScript and JavaScript code will initially coexist. Only small projects can be migrated to TypeScript in one go.</p> <p>The first step of this transition is to introduce TypeScript into the build chain process. This can be done by using the \"allowJs\" compiler option, which permits .ts and .tsx files to coexist with existing JavaScript files. As TypeScript will fall back to a type of \"any\" for a variable when it cannot infer the type from JavaScript files, it is recommended to disable \"noImplicitAny\" in your compiler options at the beginning of the migration.</p> <p>The second step is to ensure that your JavaScript tests work alongside TypeScript files so that you can run tests as you convert each module. If you are using Jest, consider using <code>ts-jest</code>, which allows you to test TypeScript projects with Jest.</p> <p>The third step is to include type declarations for third-party libraries in your project. These declarations can be found either bundled or on DefinitelyTyped. You can search for them using https://www.typescriptlang.org/dt/search and install them using</p> <pre><code>npm install --save-dev @types/package-name or yarn add --dev @types/package-name.\n</code></pre> <p>The fourth step is to migrate module by module with a bottom-up approach, following your Dependency Graph starting with the leaves. The idea is to start converting Modules that do not depend on other Modules. To visualize the dependency graphs, you can use the <code>madge</code> tool.</p> <p>Good candidate modules for these initial conversions are utility functions and code related to external APIs or specifications. It is possible to automatically generate TypeScript type definitions from Swagger contracts, GraphQL or JSON schemas to be included in your project.</p> <p>When there are no specifications or official schemas available, you can generate types from raw data, such as JSON returned by a server. However, it is recommended to generate types from specifications instead of data to avoid missing edge cases.</p> <p>During the migration, refrain from code refactoring and focus only on adding types to your modules.</p> <p>The fifth step is to enable \"noImplicitAny,\" which will enforce that all types are known and defined, providing a better TypeScript experience for your project.</p> <p>During the migration, you can use the <code>@ts-check</code> directive, which enables TypeScript type checking in a JavaScript file. This directive provides a loose version of type checking and can be initially used to identify issues in JavaScript files. When <code>@ts-check</code> is included in a file, TypeScript will try to deduce definitions using JSDoc-style comments. However, consider using JSDoc annotations only at a very early stage of the migration.</p> <p>Consider keeping the default value of <code>noEmitOnError</code> in your tsconfig.json as false. This will allow you to output JavaScript source code even if errors are reported.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#exploring-the-type-system","title":"Exploring the Type System","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#the-typescript-language-service","title":"The TypeScript language service","text":"<p>The TypeScript language service, also known as tsserver, offers various features such as error reporting, diagnostics, compile-on-save, renaming, go to definition, completion lists, signature help, and more. It is primarily used by integrated development environments (IDEs) to provide IntelliSense support. It seamlessly integrates with Visual Studio Code and is utilized by tools like Conquer of Completion (Coc).</p> <p>Developers can leverage a dedicated API and create their own custom language service plugins to enhance the TypeScript editing experience. This can be particularly useful for implementing special linting features or enabling auto-completion for a custom templating language.</p> <p>An example of a real-world custom plugin is \"typescript-styled-plugin,\" which provides syntax error reporting and IntelliSense support for CSS properties in styled components.</p> <p>For more information and quick start guides, you can refer to the official TypeScript Wiki on GitHub: https://github.com/microsoft/TypeScript/wiki/</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#structural-typing","title":"Structural Typing","text":"<p>TypeScript is based on a structural type system. This means that the compatibility and equivalence of types are determined by the type's actual structure or definition, rather than its name or place of declaration, as in nominative type systems like C# or C.</p> <p>TypeScript's structural type system was designed based on how JavaScript's dynamic duck typing system works during runtime.</p> <p>The following example is valid TypeScript code. As you can observe, \"X\" and \"Y\" have the same member \"a,\" even though they have different declaration names. The types are determined by their structures, and in this case, since the structures are the same, they are compatible and valid.</p> <pre><code>type X = {\n    a: string;\n};\ntype Y = {\n    a: string;\n};\nconst x: X = { a: 'a' };\nconst y: Y = x; // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#typescript-fundamental-comparison-rules","title":"TypeScript Fundamental Comparison Rules","text":"<p>The TypeScript comparison process is recursive and executed on types nested at any level.</p> <p>A type 'X' is compatible with 'Y' if 'Y' has at least the same members as 'X'.</p> <pre><code>type X = {\n    a: string;\n};\nconst y = { a: 'A', b: 'B' }; // Valid, as it has at least the same members as X\nconst r: X = y;\n</code></pre> <p>Function parameters are compared by types, not by their names:</p> <pre><code>type X = (a: number) =&gt; void;\ntype Y = (a: number) =&gt; void;\nlet x: X = (j: number) =&gt; undefined;\nlet y: Y = (k: number) =&gt; undefined;\ny = x; // Valid\nx = y; // Valid\n</code></pre> <p>Function return types must be the same:</p> <pre><code>type X = (a: number) =&gt; undefined;\ntype Y = (a: number) =&gt; number;\nlet x: X = (a: number) =&gt; undefined;\nlet y: Y = (a: number) =&gt; 1;\ny = x; // Invalid\nx = y; // Invalid\n</code></pre> <p>The return type of a source function must be a subtype of the return type of a target function:</p> <pre><code>let x = () =&gt; ({ a: 'A' });\nlet y = () =&gt; ({ a: 'A', b: 'B' });\nx = y; // Valid\ny = x; // Invalid member b is missing\n</code></pre> <p>Discarding function parameters is allowed, as it is a common practice in JavaScript, for instance using Array.prototype.map():</p> <pre><code>[1, 2, 3].map((element, _index, _array) =&gt; element + 'x');\n</code></pre> <p>Therefore, the following type declarations are completely valid:</p> <pre><code>type X = (a: number) =&gt; undefined;\ntype Y = (a: number, b: number) =&gt; undefined;\nlet x: X = (a: number) =&gt; undefined;\nlet y: Y = (a: number) =&gt; undefined; // Missing b parameter\ny = x; // Valid\n</code></pre> <p>Any additional optional parameters of the source type are valid:</p> <pre><code>type X = (a: number, b?: number, c?: number) =&gt; undefined;\ntype Y = (a: number) =&gt; undefined;\nlet x: X = a =&gt; undefined;\nlet y: Y = a =&gt; undefined;\ny = x; // Valid\nx = y; //Valid\n</code></pre> <p>Any optional parameters of the target type without corresponding parameters in the source type are valid and not an error:</p> <pre><code>type X = (a: number) =&gt; undefined;\ntype Y = (a: number, b?: number) =&gt; undefined;\nlet x: X = a =&gt; undefined;\nlet y: Y = a =&gt; undefined;\ny = x; // Valid\nx = y; // Valid\n</code></pre> <p>The rest parameter is treated as an infinite series of optional parameters:</p> <pre><code>type X = (a: number, ...rest: number[]) =&gt; undefined;\nlet x: X = a =&gt; undefined; //valid\n</code></pre> <p>Functions with overloads are valid if the overload signature is compatible with its implementation signature:</p> <pre><code>function x(a: string): void;\nfunction x(a: string, b: number): void;\nfunction x(a: string, b?: number): void {\n    console.log(a, b);\n}\nx('a'); // Valid\nx('a', 1); // Valid\n\nfunction y(a: string): void; // Invalid, not compatible with implementation signature\nfunction y(a: string, b: number): void;\nfunction y(a: string, b: number): void {\n    console.log(a, b);\n}\ny('a');\ny('a', 1);\n</code></pre> <p>Function parameter comparison succeeds if the source and target parameters are assignable to supertypes or subtypes (bivariance).</p> <pre><code>// Supertype\nclass X {\n    a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\n// Subtype\nclass Y extends X {}\n// Subtype\nclass Z extends X {}\n\ntype GetA = (x: X) =&gt; string;\nconst getA: GetA = x =&gt; x.a;\n\n// Bivariance does accept supertypes\nconsole.log(getA(new X('x'))); // Valid\nconsole.log(getA(new Y('Y'))); // Valid\nconsole.log(getA(new Z('z'))); // Valid\n</code></pre> <p>Enums are comparable and valid with numbers and vice versa, but comparing Enum values from different Enum types is invalid.</p> <pre><code>enum X {\n    A,\n    B,\n}\nenum Y {\n    A,\n    B,\n    C,\n}\nconst xa: number = X.A; // Valid\nconst ya: Y = 0; // Valid\nX.A === Y.A; // Invalid\n</code></pre> <p>Instances of a class are subject to a compatibility check for their private and protected members:</p> <pre><code>class X {\n    public a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\n\nclass Y {\n    private a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\n\nlet x: X = new Y('y'); // Invalid\n</code></pre> <p>The comparison check does not take into consideration the different inheritance hierarchy, for instance:</p> <pre><code>class X {\n    public a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\nclass Y extends X {\n    public a: string;\n    constructor(value: string) {\n        super(value);\n        this.a = value;\n    }\n}\nclass Z {\n    public a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\nlet x: X = new X('x');\nlet y: Y = new Y('y');\nlet z: Z = new Z('z');\nx === y; // Valid\nx === z; // Valid even if z is from a different inheritance hierarchy\n</code></pre> <p>Generics are compared using their structures based on the resulting type after applying the generic parameter, only the final result is compared as a non-generic type.</p> <pre><code>interface X&lt;T&gt; {\n    a: T;\n}\nlet x: X&lt;number&gt; = { a: 1 };\nlet y: X&lt;string&gt; = { a: 'a' };\nx === y; // Invalid as the type argument is used in the final structure\n</code></pre> <pre><code>interface X&lt;T&gt; {}\nconst x: X&lt;number&gt; = 1;\nconst y: X&lt;string&gt; = 'a';\nx === y; // Valid as the type argument is not used in the final structure\n</code></pre> <p>When generics do not have their type argument specified, all the unspecified arguments are treated as types with \"any\":</p> <pre><code>type X = &lt;T&gt;(x: T) =&gt; T;\ntype Y = &lt;K&gt;(y: K) =&gt; K;\nlet x: X = x =&gt; x;\nlet y: Y = y =&gt; y;\nx = y; // Valid\n</code></pre> <p>Remember:</p> <pre><code>let a: number = 1;\nlet b: number = 2;\na = b; // Valid, everything is assignable to itself\n\nlet c: any;\nc = 1; // Valid, all types are assignable to any\n\nlet d: unknown;\nd = 1; // Valid, all types are assignable to unknown\n\nlet e: unknown;\nlet e1: unknown = e; // Valid, unknown is only assignable to itself and any\nlet e2: any = e; // Valid\nlet e3: number = e; // Invalid\n\nlet f: never;\nf = 1; // Invalid, nothing is assignable to never\n\nlet g: void;\nlet g1: any;\ng = 1; // Invalid, void is not assignable to or from anything expect any\ng = g1; // Valid\n</code></pre> <p>Please note that when \"strictNullChecks\" is enabled, \"null\" and \"undefined\" are treated similarly to \"void\"; otherwise, they are similar to \"never\".</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#types-as-sets","title":"Types as sets","text":"<p>In TypeScript, a type is a set of possible values. This set is also referred to as the domain of the type. Each value of a type can be viewed as an element in a set. A type establishes the constraints that every element in the set must satisfy to be considered a member of that set. The primary task of TypeScript is to check and verify whether one set is a subset of another.</p> <p>TypeScript supports various types of sets:</p> Set term TypeScript Notes Empty set never \u201cnever\u201d contains anything apart itself Single element set undefined / null / literal type Finite set boolean / union Infinite set string / number / object Universal set any / unknown Every element is a member of \u201cany\u201d and every set is a subset of it / \u201cunknown\u201d is a type-safe counterpart of \u201cany\u201d <p>Here few examples:</p> TypeScript Set term Example never \u2205 (empty set) const x: never = 'x'; // Error: Type 'string' is not assignable to type 'never' Literal type Single element set type X = 'X'; type Y = 7; Value assignable to T Value \u2208 T (member of) type XY = 'X' | 'Y'; const x: XY = 'X'; T1 assignable to T2 T1 \u2286 T2 (subset of) type XY = 'X' | 'Y'; const x: XY = 'X'; const j: XY = 'J'; // Type '\"J\"' is not assignable to type 'XY'. T1 extends T2 T1 \u2286 T2 (subset of) type X = 'X' extends string ? true : false; T1 | T2 T1 \u222a T2 (union) type XY = 'X' | 'Y'; type JK = 1 | 2; T1 &amp; T2 T1 \u2229 T2 (intersection) type X = { a: string } type Y = { b: string } type XY = X &amp; Y const x: XY = { a: 'a', b: 'b' } unknown Universal set const x: unknown = 1 <p>An union, (T1 | T2) creates a wider set (both):</p> <pre><code>type X = {\n    a: string;\n};\ntype Y = {\n    b: string;\n};\ntype XY = X | Y;\nconst r: XY = { a: 'a', b: 'x' }; // Valid\n</code></pre> <p>An intersection, (T1 &amp; T2) create a narrower set (only shared):</p> <pre><code>type X = {\n    a: string;\n};\ntype Y = {\n    a: string;\n    b: string;\n};\ntype XY = X &amp; Y;\nconst r: XY = { a: 'a' }; // Invalid\nconst j: XY = { a: 'a', b: 'b' }; // Valid\n</code></pre> <p>The <code>extends</code> keyword could be considered as a \u201csubset of\u201d in this context. It sets a constraint for a type. The extends used with a generic, take the generic as an infinite set and it will constrain it to a more specific type. Please note that <code>extends</code> has nothing to do with hierarchy in a OOP sense (there is no this concept in TypeScript). TypeScript works with sets and does not have a strict hierarchy, infact, as in the example below, two types could overlap without either being a subtype of the other type (TypeScript considers the structure, shape of the objects).</p> <pre><code>interface X {\n    a: string;\n}\ninterface Y extends X {\n    b: string;\n}\ninterface Z extends Y {\n    c: string;\n}\nconst z: Z = { a: 'a', b: 'b', c: 'c' };\ninterface X1 {\n    a: string;\n}\ninterface Y1 {\n    a: string;\n    b: string;\n}\ninterface Z1 {\n    a: string;\n    b: string;\n    c: string;\n}\nconst z1: Z1 = { a: 'a', b: 'b', c: 'c' };\n\nconst r: Z1 = z; // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#assign-a-type-type-declarations-and-type-assertions","title":"Assign a type: Type Declarations and Type Assertions","text":"<p>A type can be assigned in different ways in TypeScript:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-declaration","title":"Type Declaration","text":"<p>In the following example, we use x: X (\": Type\") to declare a type for the variable x.</p> <pre><code>type X = {\n    a: string;\n};\n\nconst x: X = {\n    // Type declaration\n    a: 'a',\n};\n</code></pre> <p>If the variable is not in the specified format, TypeScript will report an error. For instance:</p> <pre><code>type X = {\n    a: string;\n};\n\nconst x: X = {\n    a: 'a',\n    b: 'b', // Error: Object literal may only specify known properties\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-assertion","title":"Type Assertion","text":"<p>It is possible to add an assertion by using the <code>as</code> keyword. This tells the compiler that the developer has more information about a type and silences any errors that may occur.</p> <p>For example:</p> <pre><code>type X = {\n    a: string;\n};\nconst x = {\n    a: 'a',\n    b: 'b',\n} as X;\n</code></pre> <p>In the above example, the object x is asserted to have the type X using the as keyword. This informs the TypeScript compiler that the object conforms to the specified type, even though it has an additional property b not present in the type definition.</p> <p>Type assertions are useful in situations where a more specific type needs to be specified, especially when working with the DOM. For instance:</p> <pre><code>const myInput = document.getElementById('my_input') as HTMLInputElement;\n</code></pre> <p>Here, the type assertion as HTMLInputElement is used to tell TypeScript that the result of getElementById should be treated as an HTMLInputElement. Type assertions can also be used to remap keys, as shown in the example below with template literals:</p> <pre><code>type J&lt;Type&gt; = {\n    [Property in keyof Type as `prefix_${string &amp;\n        Property}`]: () =&gt; Type[Property];\n};\ntype X = {\n    a: string;\n    b: number;\n};\ntype Y = J&lt;X&gt;;\n</code></pre> <p>In this example, the type <code>J&lt;Type&gt;</code> uses a mapped type with a template literal to remap the keys of Type. It creates new properties with a prefix_ added to each key, and their corresponding values are functions returning the original property values.</p> <p>It is worth noting that when using a type assertion, TypeScript will not execute excess property checking. Therefore, it is generally preferable to use a Type Declaration when the structure of the object is known in advance.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#non-null-assertion","title":"Non-null assertion","text":"<p>This assertion is applied using a post-fix <code>!</code> expression operator, which tells TypeScript that a value cannot be null or undefined.</p> <pre><code>let x: null | number;\nlet y = x!; // number\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#ambient-declarations","title":"Ambient Declarations","text":"<p>Ambient declarations are files that describe types for JavaScript code, they have a file name format as <code>.d.ts.</code>. They are usually imported and used to annotate existing JavaScript libraries or to add types to existing JS files in your project.</p> <p>Many common libraries types can be found at: https://github.com/DefinitelyTyped/DefinitelyTyped/</p> <p>and can be installed using:</p> <pre><code>npm install --save-dev @types/library-name\n</code></pre> <p>For your defined Ambient Declarations, you can import using the \u201ctriple-slash\u201d reference:</p> <pre><code>/// &lt;reference path=\"./library-types.d.ts\" /&gt;\n</code></pre> <p>You can use Ambient Declarations even within JavaScript files using <code>// @ts-check</code>.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#property-checking-and-excess-property-checking","title":"Property Checking and Excess Property Checking","text":"<p>TypeScript is based on a structural type system but excess property checking is a property of TypeScript which allows it to check whether an object has the exact properties specified in the type.</p> <p>Excess Property Checking is performed when assigning object literals to variables or when passing them as arguments to the function's excess property, for instance.</p> <pre><code>type X = {\n    a: string;\n};\nconst y = { a: 'a', b: 'b' };\nconst x: X = y; // Valid because structural typing\nconst w: X = { a: 'a', b: 'b' }; // Invalid because excess property checking\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#weak-types","title":"Weak Types","text":"<p>A type is considered weak when it contains nothing but a set of all-optional properties:</p> <pre><code>type X = {\n    a?: string;\n    b?: string;\n};\n</code></pre> <p>TypeScript considers an error to assign anything to a weak type when there is no overlap, for instance, the following throws an error:</p> <pre><code>type Options = {\n    a?: string;\n    b?: string;\n};\n\nconst fn = (options: Options) =&gt; undefined;\n\nfn({ c: 'c' }); // Invalid\n</code></pre> <p>Although not recommended, if needed, it is possible to bypass this check by using type assertion:</p> <pre><code>type Options = {\n    a?: string;\n    b?: string;\n};\nconst fn = (options: Options) =&gt; undefined;\nfn({ c: 'c' } as Options); // Valid\n</code></pre> <p>Or by adding <code>unknown</code> to the index signature to the weak type:</p> <pre><code>type Options = {\n    [prop: string]: unknown;\n    a?: string;\n    b?: string;\n};\n\nconst fn = (options: Options) =&gt; undefined;\nfn({ c: 'c' }); // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#strict-object-literal-checking-freshness","title":"Strict Object Literal Checking (Freshness)","text":"<p>Strict object literal checking, sometimes referred to as freshness, is a feature in TypeScript that helps catch excess or misspelled properties that would otherwise go unnoticed in normal structural type checks.</p> <p>When creating an object literal, the TypeScript compiler considers it \"fresh.\" If the object literal is assigned to a variable or passed as a parameter, TypeScript will throw an error if the object literal specifies properties that do not exist in the target type.</p> <p>However, strict object literal checking does not apply when the type of an object literal is widened, meaning the object literal is structurally type compatible with a broader type. Here are some examples to illustrate:</p> <pre><code>type X = { a: string };\ntype Y = { a: string; b: string };\n\nlet x: X;\nx = { a: 'a', b: 'b' }; // Freshness check: Invalid assignment\nvar y: Y;\ny = { a: 'a', bx: 'bx' }; // Freshness check: Invalid assignment\n\nconst fn = (x: X) =&gt; console.log(x.a);\n\nfn(x);\nfn(y); // No errors, structurally type compatible\n\nfn({ a: 'a', bx: 'b' }); // Freshness check: Invalid argument\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-inference","title":"Type Inference","text":"<p>TypeScript can infer types when no annotation is provided during:</p> <ul> <li>Variable initialization.</li> <li>Member initialization.</li> <li>Setting defaults for parameters.</li> <li>Function return type.</li> </ul> <p>For example:</p> <pre><code>let x = 'x'; // The type inferred is string\n</code></pre> <p>The TypeScript compiler analyzes the value or expression and determines its type based on the available information.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#more-advanced-inferences","title":"More advanced inferences","text":"<p>When multiple expressions are used in type inference, TypeScript looks for the \"best common types.\" For instance:</p> <pre><code>let x = [1, 'x', 1, null]; // The type inferred is: (string | number | null)[]\n</code></pre> <p>If the compiler cannot find the best common types, it returns a union type. For example:</p> <pre><code>let x = [new RegExp('x'), new Date()]; // Type inferred is: (RegExp | Date)[]\n</code></pre> <p>TypeScript utilizes \"contextual typing\" based on the variable's location to infer types. In the following example, the compiler knows that <code>e</code> is of type <code>MouseEvent</code> because of the <code>click</code> event type defined in the lib.d.ts file, which contains ambient declarations for various common JavaScript constructs and the DOM:</p> <pre><code>window.addEventListener('click', function (e) {}); // e inferred type is MouseEvent\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-widening","title":"Type Widening","text":"<p>Type widening is the process in which TypeScript assigns a type to a variable initialized when no type annotation was provided. It allows narrow to wider types but not vice versa. In the following example:</p> <pre><code>let x = 'x'; // TypeScript infers as string, a wide type\nlet y: 'y' | 'x' = 'y'; // y types is a union of literal types\ny = x; // Invalid Type 'string' is not assignable to type '\"x\" | \"y\"'.\n</code></pre> <p>TypeScript assigns <code>string</code> to <code>x</code> based on the single value provided during initialization (<code>x</code>), this is an example of widening.</p> <p>TypeScript provides ways to have control of the widening process, for instance using:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#const","title":"Const","text":"<p>Using the <code>const</code> keyword when declaring a variable results in a narrower type inference in TypeScript.</p> <p>For example:</p> <pre><code>const x = 'x'; // TypeScript infers the type of x as 'x', a narrower type\nlet y: 'y' | 'x' = 'y';\ny = x; // Valid: The type of x is inferred as 'x'\n</code></pre> <p>By using <code>const</code> to declare the variable x, its type is narrowed to the specific literal value 'x'. Since the type of x is narrowed, it can be assigned to the variable y without any error. The reason the type can be inferred is because <code>const</code> variables cannot be reassigned, so their type can be narrowed down to a specific literal type, in this case, the literal type 'x'.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#const-modifier-on-type-parameters","title":"const modifier on type parameters","text":"<p>From version 5.0 of TypeScript, it is possible to specify the <code>const</code> attribute on a generic type parameter. This allows for inferring the most precise type possible. Let's see an example without using <code>const</code>:</p> <pre><code>function identity&lt;T&gt;(value: T) {\n    // No const here\n    return value;\n}\nconst values = identity({ a: 'a', b: 'b' }); // Type infered is: { a: string; b: string; }\n</code></pre> <p>As you can see, the properties <code>a</code> and <code>b</code> are inferred with a type of <code>string</code>   .</p> <p>Now, let's see the difference with the <code>const</code> version:</p> <pre><code>function identity&lt;const T&gt;(value: T) {\n    // Using const modifier on type parameters\n    return value;\n}\nconst values = identity({ a: 'a', b: 'b' }); // Type infered is: { a: \"a\"; b: \"b\"; }\n</code></pre> <p>Now we can see that the properties <code>a</code> and <code>b</code> are inferred as <code>const</code>, so <code>a</code> and <code>b</code> are treated as string literals rather than just <code>string</code> types.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#explicit-type-annotation","title":"Explicit Type Annotation","text":"<p>We can be specific and pass a type, in the following example property <code>x</code> is of type <code>number</code>:</p> <pre><code>const v = {\n    x: 1, // Inferred type: number (widening)\n};\nv.x = 3; // Valid\n</code></pre> <p>We can make the type annotation more specific by using a union of literal types:</p> <pre><code>const v: { x: 1 | 2 | 3 } = {\n    x: 1, // x is now a union of literal types: 1 | 2 | 3\n};\nv.x = 3; // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#const-assertion","title":"Const assertion","text":"<p>Const assertion allows us to be more specific by asserting a <code>const</code> type. It can be used on individual properties or on an entire object. Here are a few examples:</p> <p>On a single property:</p> <pre><code>const v = {\n    x: 3 as const,\n};\nv.x = 3;\n</code></pre> <p>On an entire object:</p> <pre><code>const v = {\n    x: 1,\n    y: 2,\n} as const;\n</code></pre> <p>This can be particularly useful when defining the type for a tuple:</p> <pre><code>const x = [1, 2, 3]; // number[]\nconst y = [1, 2, 3] as const; // Tuple of readonly [1, 2, 3]\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-narrowing","title":"Type Narrowing","text":"<p>Type Narrowing is the process in TypeScript where a general type is narrowed down to a more specific type. This occurs when TypeScript analyzes the code and determines that certain conditions or operations can refine the type information.</p> <p>Narrowing types can occur in different ways, including:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#conditions","title":"Conditions","text":"<p>By using conditional statements, such as <code>if</code> or <code>switch</code>, TypeScript can narrow down the type based on the outcome of the condition. For example:</p> <pre><code>let x: number | undefined = 10;\n\nif (x !== undefined) {\n    x += 100; // The type is number, which had been narrowed by the condition\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#throwing-or-returning","title":"Throwing or returning","text":"<p>Throwing an error or returning early from a branch can be used to help TypeScript narrow down a type. For example:</p> <pre><code>let x: number | undefined = 10;\n\nif (x === undefined) {\n    throw 'error';\n}\nx += 100;\n</code></pre> <p>Other ways to narrow down types in TypeScript include:</p> <ul> <li><code>instanceof</code> operator: Used to check if an object is an instance of a specific class.</li> <li><code>in</code> operator: Used to check if a property exists in an object.</li> <li><code>typeof</code> operator: Used to check the type of a value at runtime.</li> <li>Built-in functions like <code>Array.isArray()</code>: Used to check if a value is an array.</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#discriminated-union","title":"Discriminated union","text":"<p>Using a \"discriminated union\" is a pattern in TypeScript where an explicit \"tag\" is added to objects to distinguish between different types within a union. This pattern is also referred to as a \"tagged union.\" In the following example, the \"tag\" is represented by the property \"type\":</p> <pre><code>type A = { type: 'type_a'; value: number };\ntype B = { type: 'type_b'; value: string };\n\nconst x = (input: A | B): string | number =&gt; {\n    switch (input.type) {\n        case 'type_a':\n            return input.value + 100; // type is A\n        case 'type_b':\n            return input.value + 'extra'; // type is B\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#user-defined-type-guards","title":"User-defined type guards","text":"<p>In cases where TypeScript is unable to determine a type, it is possible to write a helper function known as a \"user-defined type guard.\" In the following example, we will utilize a Type Predicate to narrow down the type after applying certain filtering:</p> <pre><code>const data = ['a', null, 'c', 'd', null, 'f'];\n\nconst r1 = data.filter(x =&gt; x != null); // The type is (string | null)[], TypeScript was not able to infer the type properly\n\nconst isValid = (item: string | null): item is string =&gt; item !== null; // Custom type guard\n\nconst r2 = data.filter(isValid); // The type is fine now string[], by using the predicate type guard we were able to narrow the type\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#primitive-types","title":"Primitive Types","text":"<p>TypeScript supports 7 primitive types. A primitive data type refers to a type that is not an object and does not have any methods associated with it. In TypeScript, all primitive types are immutable, meaning their values cannot be changed once they are assigned.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#string","title":"string","text":"<p>The <code>string</code> primitive type stores textual data, and the value is always double or single-quoted.</p> <pre><code>const x: string = 'x';\nconst y: string = 'y';\n</code></pre> <p>Strings can span multiple lines if surrounded by the backtick (`) character:</p> <pre><code>let sentence: string = `xxx,\n   yyy`;\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#boolean","title":"boolean","text":"<p>The <code>boolean</code> data type in TypeScript stores a binary value, either <code>true</code> or <code>false</code>.</p> <pre><code>const isReady: boolean = true;\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#number","title":"number","text":"<p>A <code>number</code> data type in TypeScript is represented with a 64-bit floating point value. A <code>number</code> type can represent integers and fractions. TypeScript also supports hexadecimal, binary, and octal, for instance:</p> <pre><code>const decimal: number = 10;\nconst hexadecimal: number = 0xa00d; // Hexadecimal starts with 0x\nconst binary: number = 0b1010; // Binary starts with 0b\nconst octal: number = 0o633; // Octal starts with 0c\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#bigint","title":"bigInt","text":"<p>A <code>bigInt</code> represents numeric values that are very large (253 \u2013 1) and cannot be represented with a <code>number</code>.</p> <p>A <code>bigInt</code> can be created by calling the built-in function <code>BigInt()</code> or by adding <code>n</code> to the end of any integer numeric literal:</p> <pre><code>const x: bigint = BigInt(9007199254740991);\nconst y: bigint = 9007199254740991n;\n</code></pre> <p>Notes: <code>bigInt</code> values cannot be mixed with <code>number</code> and cannot be used with built-in <code>Math</code>, they must be coerced to the same type.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#symbol","title":"symbol","text":"<p>JavaScript has a primitive function, Symbol(), that creates a globally unique reference.</p> <pre><code>let sym = Symbol('x'); // Type symbol\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#null-and-undefined","title":"null and undefined","text":"<p><code>null</code> and <code>undefined</code> types both represent no value or the absence of any value.</p> <p>The <code>undefined</code> type means the value is not assigned or initialized or indicates an unintentional absence of value.</p> <p>The <code>null</code> type means that we know that the field does not have a value, so value is unavailable, it indicates an intentional absence of value.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#array","title":"Array","text":"<p>An <code>array</code> is a data type that can store multiple values of the same type or not. It can be defined using the following syntax:</p> <pre><code>const x: string[] = ['a', 'b'];\nconst y: Array&lt;string&gt; = ['a', 'b'];\nconst j: Array&lt;string | number&gt; = ['a', 1, 'b', 2]; // Union\n</code></pre> <p>TypeScript supports readonly arrays using the following syntax:</p> <pre><code>const x: readonly string[] = ['a', 'b']; // Readonly modifier\nconst y: ReadonlyArray&lt;string&gt; = ['a', 'b'];\nconst j: ReadonlyArray&lt;string | number&gt; = ['a', 1, 'b', 2];\nj.push('x'); // Invalid\n</code></pre> <p>TypeScript supports tuple and readonly tuple:</p> <pre><code>const x: [string, number] = ['a', 1];\nconst y: readonly [string, number] = ['a', 1];\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#any","title":"any","text":"<p>The <code>any</code> data type represents literally \u201cany\u201d value, it is the default value when TypeScript cannot infer the type or is not specified.</p> <p>When using <code>any</code> TypeScript compiler skips the type checking so there is no type safety when <code>any</code> is being used. Generally do not use <code>any</code> to silence the compiler when an error occurs, instead focus on fixing the error as with using <code>any</code>  it is possible to break contracts and we lose the benefits of TypeScript autocomplete.</p> <p>The <code>any</code> type could be useful during a gradual migration from JavaScript to TypeScript, as it can silence the compiler.</p> <p>For new projects use TypeScript configuration <code>noImplicitAny</code> which enables TypeScript to issue errors where <code>any</code> is used or inferred.</p> <p>The <code>any</code>type  is usually a source of errors which can mask real problems with your types. Avoid using it as much as possible.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-annotations","title":"Type Annotations","text":"<p>On variables declared using <code>var</code>, <code>let</code> and <code>const</code>, it is possible to optionally add a type:</p> <pre><code>const x: number = 1;\n</code></pre> <p>TypeScript does a good job of inferring types, especially when simple one, so these declarations in most cases are not necessary.</p> <p>On functions is possible to add type annotations to parameters:</p> <pre><code>function sum(a: number, b: number) {\n    return a + b;\n}\n</code></pre> <p>The following is an example using a anonymous functions (so called lambda function):</p> <pre><code>const sum = (a: number, b: number) =&gt; a + b;\n</code></pre> <p>These annotation can be avoided when a default value for a parameter is present:</p> <pre><code>const sum = (a = 10, b: number) =&gt; a + b;\n</code></pre> <p>Return type annotations can be added to functions:</p> <pre><code>const sum = (a = 10, b: number): number =&gt; a + b;\n</code></pre> <p>This is useful especially for  more complex functions as writing expliciting the return type before an implementation can help better think about the function.</p> <p>Generally consider annotating type signatures but not the body local variables and add types always to object literals.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#optional-properties","title":"Optional Properties","text":"<p>An object can specify Optional Properties by adding a question mark <code>?</code> to the end of the property name:</p> <pre><code>type X = {\n    a: number;\n    b?: number; // Optional\n};\n</code></pre> <p>It is possible to specify a default value when a property is optional\u201d</p> <pre><code>type X = {\n    a: number;\n    b?: number;\n};\nconst x = ({ a, b = 100 }: X) =&gt; a + b;\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#readonly-properties","title":"Readonly Properties","text":"<p>Is it possible to prevent writing on a property by using the modifier <code>readonly</code>which  makes sure that the property cannot be re-written but does not provide any guarantee of total immutability:</p> <pre><code>interface Y {\n    readonly a: number;\n}\n\ntype X = {\n    readonly a: number;\n};\n\ntype J = Readonly&lt;{\n    a: number;\n}&gt;;\n\ntype K = {\n    readonly [index: number]: string;\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#index-signatures","title":"Index Signatures","text":"<p>In TypeScript we can use as index signature <code>string</code>, <code>number</code>, and <code>symbol</code>:</p> <pre><code>type K = {\n    [name: string | number]: string;\n};\nconst k: K = { x: 'x', 1: 'b' };\nconsole.log(k['x']);\nconsole.log(k[1]);\nconsole.log(k['1']); // same result as k[1]\n</code></pre> <p>Please note that JavaScript automatically converts an index with <code>number</code> to an index with <code>string</code> so <code>k[1]</code> or k[\"1\"] return the same value.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#extending-types","title":"Extending Types","text":"<p>It is possible to extend an <code>interface</code> (copy members from another type):</p> <pre><code>interface X {\n    a: string;\n}\ninterface Y extends X {\n    b: string;\n}\n</code></pre> <p>It is also possible to extend from multiple types:</p> <pre><code>interface A {\n    a: string;\n}\ninterface B {\n    b: string;\n}\ninterface Y extends A, B {\n    y: string;\n}\n</code></pre> <p>The <code>extends</code> keyword works only on interfaces and classes, for types use an intersection:</p> <pre><code>type A = {\n    a: number;\n};\ntype B = {\n    b: number;\n};\ntype C = A &amp; B;\n</code></pre> <p>It is possible to extend a type using an inference but not vice versa:</p> <pre><code>type A = {\n    a: string;\n};\ninterface B extends A {\n    b: string;\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#literal-types","title":"Literal Types","text":"<p>A Literal Type is a single element set from a collective type, it defines a very exact value that is a JavaScript primitive.</p> <p>Literal Types in TypeScript are numbers, strings, and booleans.</p> <p>Example of literals:</p> <pre><code>const a = 'a'; // string literal type\nconst b = 1; // numeric literal type\nconst c = true; // boolean literal type\n</code></pre> <p>String, Numeric, and Boolean Literal Types are used in the union, type guard, and type aliases. In the following example you can see a type alias union, <code>O</code> can be the only value specified and not any other string:</p> <pre><code>type O = 'a' | 'b' | 'c';\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#literal-inference","title":"Literal Inference","text":"<p>Literal Inference is a feature in TypeScript that allows the type of a variable or parameter to be inferred based on its value.</p> <p>In the following example we can see that TypeScript considers <code>x</code> a literal type as the value cannot be changed any time later, when instead <code>y</code> is inferred as string as it can be modified any time later.</p> <pre><code>const x = 'x'; // literal type of x, because this value cannot be changed\nlet y = 'y'; // string, as we can change this value\n</code></pre> <p>In the following example we can see that <code>o.x</code> was inferred as a <code>string</code> (and not a literal of <code>a</code>) as TypeScript considers that the value can be changed any time later.</p> <pre><code>type X = 'a' | 'b';\n\nlet o = {\n    x: 'a', // this is a wider string\n};\n\nconst fn = (x: X) =&gt; `${x}-foo`;\n\nconsole.log(fn(o.x)); // Argument of type 'string' is not assignable to parameter of type 'X'\n</code></pre> <p>As you can see the code throws an error when passing <code>o.x</code> to <code>fn</code> as X is a narrower type.</p> <p>We can solve this issue by using type assertion using <code>const</code> or the <code>X</code> type:</p> <pre><code>let o = {\n    x: 'a' as const,\n};\n</code></pre> <p>or:</p> <pre><code>let o = {\n    x: 'a' as X,\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#strictnullchecks","title":"strictNullChecks","text":"<p><code>strictNullChecks</code> is a TypeScript compiler option that enforces strict null checking. When this option is enabled, variables and parameters can only be assigned <code>null</code> or <code>undefined</code> if they have been explicitly declared to be of that type using the union type <code>null</code> | <code>undefined</code>. If a variable or parameter is not explicitly declared as nullable, TypeScript will generate an error to prevent potential runtime errors.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#non-null-assertion-operator-postfix","title":"Non-null Assertion Operator (Postfix !)","text":"<p>The Non-null Assertion Operator (Postfix !) is a TypeScript feature that allows you to assert that a variable or property is not <code>null</code> or <code>undefined</code>, even if TypeScript's static type analysis suggests that it might be. With this feature it is possible to remove any explicit checking.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#enums","title":"Enums","text":"<p>In TypeScript, an enum is a set of named constant values.</p> <pre><code>enum Color {\n    Red = '#ff0000',\n    Green = '#00ff00',\n    Blue = '#0000ff',\n}\n</code></pre> <p>Enums can be defined in different ways:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#numeric-enums","title":"Numeric enums","text":"<p>In TypeScript, a numeric enum is an enum where each constant is assigned a numeric value, starting from 0 by default.</p> <pre><code>enum Size {\n    Small, // value starts from 0\n    Medium,\n    Large,\n}\n</code></pre> <p>It is possible to specify custom values by explicitly assigning them:</p> <pre><code>enum Size {\n    Small = 10,\n    Medium,\n    Large,\n}\nconsole.log(Size.Medium); // 11\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#string-enums","title":"String enums","text":"<p>In TypeScript, a string enum is an enum where each constant is assigned a string value.</p> <pre><code>enum Language {\n    English = 'EN',\n    Spanish = 'ES',\n}\n</code></pre> <p>Note: TypeScript allows the usage of heterogeneous enums where string and numeric members can coexist.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#constant-enums","title":"Constant enums","text":"<p>A constant enum in TypeScript is a special type of enum where all the values are known at compile time and are inlined wherever the enum is used, resulting in more efficient code.</p> <pre><code>const enum Language {\n    English = 'EN',\n    Spanish = 'ES',\n}\nconsole.log(Language.English);\n</code></pre> <p>Will be compiled into:</p> <pre><code>console.log('EN' /* Language.English */);\n</code></pre> <p>Notes: Const enums have hardcoded values, erasing the enum, which can be more efficient in self-contained libraries but is generally not desirable. Also, const enums cannot have computed members.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#reverse-mapping","title":"Reverse mapping","text":"<p>In TypeScript, reverse mappings in enums refer to the ability to retrieve the enum member name from its value. By default, enum members have forward mappings from name to value, but reverse mappings can be created by explicitly setting values for each member. Reverse mappings are useful when you need to look up an enum member by its value, or when you need to iterate over all the enum members. Note that only numeric enums members will generate reverse mappings, while string enum members do not get a reverse mapping generated at all.</p> <p>The following enum:</p> <pre><code>enum Grade {\n    A = 90,\n    B = 80,\n    C = 70,\n    F = 'fail',\n}\n</code></pre> <p>Compiles to:</p> <pre><code>'use strict';\nvar Grade;\n(function (Grade) {\n    Grade[(Grade['A'] = 90)] = 'A';\n    Grade[(Grade['B'] = 80)] = 'B';\n    Grade[(Grade['C'] = 70)] = 'C';\n    Grade['F'] = 'fail';\n})(Grade || (Grade = {}));\n</code></pre> <p>Therefore, mapping values to keys works for numeric enum members, but not for string enum members:</p> <pre><code>enum Grade {\n    A = 90,\n    B = 80,\n    C = 70,\n    F = 'fail',\n}\nconst myGrade = Grade.A;\nconsole.log(Grade[myGrade]); // A\nconsole.log(Grade[90]); // A\n\nconst failGrade = Grade.F;\nconsole.log(failGrade); // fail\nconsole.log(Grade[failGrade]); // Element implicitly has an 'any' type because index expression is not of type 'number'.\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#ambient-enums","title":"Ambient enums","text":"<p>An ambient enum in TypeScript is a type of enum that is defined in a declaration file (*.d.ts) without an associated implementation. It allows you to define a set of named constants that can be used in a type-safe way across different files without having to import the implementation details in each file.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#computed-and-constant-members","title":"Computed and constant members","text":"<p>In TypeScript, a computed member is a member of an enum that has a value calculated at runtime, while a constant member is a member whose value is set at compile-time and cannot be changed during runtime. Computed members are allowed in regular enums, while constant members are allowed in both regular and const enums.</p> <pre><code>// constant members\nenum Color {\n    Red = 1,\n    Green = 5,\n    Blue = Red + Green,\n}\nconsole.log(Color.Blue); // 6 generation at compilation time\n</code></pre> <pre><code>// computed members\nenum Color {\n    Red = 1,\n    Green = Math.pow(2, 2),\n    Blue = Math.floor(Math.random() * 3) + 1,\n}\nconsole.log(Color.Blue); // random number generated at run time\n</code></pre> <p>Enums are denoted by unions comprising their member types. The values of each member can be determined through constant or non-constant expressions, with members possessing constant values being assigned literal types. To illustrate, consider the declaration of type E and its subtypes E.A, E.B, and E.C. In this case, E represents the union E.A | E.B | E.C.</p> <pre><code>const identity = (value: number) =&gt; value;\n\nenum E {\n    A = 2 * 5, // Numeric literal\n    B = 'bar', // String literal\n    C = identity(42), // Opaque computed\n}\n\nconsole.log(E.C); //42\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#narrowing","title":"Narrowing","text":"<p>TypeScript narrowing is the process of refining the type of a variable within a conditional block. This is useful when working with union types, where a variable can have more than one type.</p> <p>TypeScript recognizes several ways to narrow the type:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#typeof-type-guards","title":"typeof type guards","text":"<p>The typeof type guard is one specific type guard in TypeScript that checks the type of a variable based on its built-in JavaScript type.</p> <pre><code>const fn = (x: number | string): number =&gt; {\n    if (typeof x === 'number') {\n        return x + 1; // x is number\n    }\n    return -1;\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#truthiness-narrowing","title":"Truthiness narrowing","text":"<p>Truthiness narrowing in TypeScript works by checking whether a variable is truthy or falsy to narrow its type accordingly.</p> <pre><code>const printName = (name: string | null | undefined) =&gt; {\n    if (name) {\n        console.log(name.toUpperCase());\n    } else {\n        console.log('No name specified');\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#equality-narrowing","title":"Equality narrowing","text":"<p>Equality narrowing in TypeScript works by checking whether a variable is equal to a specific value or not, to narrow its type accordingly.</p> <pre><code>const logMessage = (status: 'success' | 'error') =&gt; {\n    switch (status) {\n        case 'success':\n            console.log('Operation was successful!');\n            break;\n        case 'error':\n            console.log('An error occurred.');\n            break;\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#in-operator-narrowing","title":"In operator narrowing","text":"<p>The in operator narrowing in TypeScript is a way to narrow the type of a variable based on whether a property exists within the variable's type.</p> <pre><code>type Dog = {\n    name: string;\n    breed: string;\n};\n\ntype Cat = {\n    name: string;\n    likesCream: boolean;\n};\n\nconst printPet = (pet: Dog | Cat) =&gt; {\n    if ('breed' in pet) {\n        console.log(`This is a ${pet.breed} dog named ${pet.name}.`);\n    } else {\n        console.log(\n            `This is a cat named ${pet.name} that ${\n                pet.likesCream ? 'likes' : \"doesn't like\"\n            } cream.`\n        );\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#instanceof-narrowing","title":"instanceof narrowing","text":"<p>The instanceof operator narrowing in TypeScript is a way to narrow the type of a variable based on its constructor function, by checking if an object is an instance of a certain class or interface.</p> <pre><code>class Square {\n    constructor(public width: number) {}\n}\nclass Rectangle {\n    constructor(public width: number, public height: number) {}\n}\nfunction area(shape: Square | Rectangle) {\n    if (shape instanceof Square) {\n        return shape.width * shape.width;\n    } else {\n        return shape.width * shape.height;\n    }\n}\nconst square = new Square(5);\nconst rectangle = new Rectangle(5, 10);\nconsole.log(area(square)); // 25\nconsole.log(area(rectangle)); // 50\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#assignments","title":"Assignments","text":"<p>TypeScript narrowing using assignments is a way to narrow the type of a variable based on the value assigned to it. When a variable is assigned a value, TypeScript infers its type based on the assigned value, and it narrows the type of the variable to match the inferred type.</p> <pre><code>let value: string | number;\nvalue = 'hello';\nif (typeof value === 'string') {\n    console.log(value.toUpperCase());\n}\nvalue = 42;\nif (typeof value === 'number') {\n    console.log(value.toFixed(2));\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#control-flow-analysis","title":"Control flow analysis","text":"<p>Control flow analysis in TypeScript is a way to statically analyze the code flow to infer the types of variables, allowing the compiler to narrow the types of those variables as needed, based on the results of the analysis.</p> <p>Prior to TypeScript 4.4, code flow analysis would only be applied to code within an if statement, but from TypeScript 4.4, it can also be applied to conditional expressions and discriminant property accesses indirectly referenced through const variables.</p> <p>For example:</p> <pre><code>const f1 = (x: unknown) =&gt; {\n    const isString = typeof x === 'string';\n    if (isString) {\n        x.length;\n    }\n};\n\nconst f2 = (\n    obj: { kind: 'foo'; foo: string } | { kind: 'bar'; bar: number }\n) =&gt; {\n    const isFoo = obj.kind === 'foo';\n    if (isFoo) {\n        obj.foo;\n    } else {\n        obj.bar;\n    }\n};\n</code></pre> <p>Some examples where narrowing does not occur:</p> <pre><code>const f1 = (x: unknown) =&gt; {\n    let isString = typeof x === 'string';\n    if (isString) {\n        x.length; // error, no narrowing because isString it is not const\n    }\n};\n\nconst f6 = (\n    obj: { kind: 'foo'; foo: string } | { kind: 'bar'; bar: number }\n) =&gt; {\n    const isFoo = obj.kind === 'foo';\n    obj = obj;\n    if (isFoo) {\n        obj.foo; // Error, no narrowing because obj is assigned in function body\n    }\n};\n</code></pre> <p>Notes: Up to five levels of indirection are analyzed in conditional expressions.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-predicates","title":"type predicates","text":"<p>Type predicates in TypeScript are functions that return a boolean value and are used to narrow the type of a variable to a more specific type.</p> <pre><code>const isString = (value: unknown): value is string =&gt; typeof value === 'string';\n\nconst foo = (bar: unknown) =&gt; {\n    if (isString(bar)) {\n        console.log(bar.toUpperCase());\n    } else {\n        console.log('not a string');\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#discriminated-unions","title":"Discriminated unions","text":"<p>Discriminated unions in TypeScript are a type of union type that uses a common property, known as the discriminant, to narrow down the set of possible types for the union.</p> <pre><code>type Square = {\n    kind: 'square'; // Discriminant\n    size: number;\n};\n\ntype Circle = {\n    kind: 'circle'; // Discriminant\n    radius: number;\n};\n\ntype Shape = Square | Circle;\n\nconst area = (shape: Shape) =&gt; {\n    switch (shape.kind) {\n        case 'square':\n            return Math.pow(shape.size, 2);\n        case 'circle':\n            return Math.PI * Math.pow(shape.radius, 2);\n    }\n};\n\nconst square: Square = { kind: 'square', size: 5 };\nconst circle: Circle = { kind: 'circle', radius: 2 };\n\nconsole.log(area(square)); // 25\nconsole.log(area(circle)); // 12.566370614359172\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#the-never-type","title":"The never type","text":"<p>When a variable is narrowed to a type that cannot contain any values, the TypeScript compiler will infer that the variable must be of the <code>never</code> type. This is because the never type represents a value that can never be produced.</p> <pre><code>const printValue = (val: string | number) =&gt; {\n    if (typeof val === 'string') {\n        console.log(val.toUpperCase());\n    } else if (typeof val === 'number') {\n        console.log(val.toFixed(2));\n    } else {\n        // val has type never here because it can never be anything other than a string or a number\n        const neverVal: never = val;\n        console.log(`Unexpected value: ${neverVal}`);\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#exhaustiveness-checking","title":"Exhaustiveness checking","text":"<p>Exhaustiveness checking is a feature in TypeScript that ensures all possible cases of a discriminated union are handled in a switch statement or an if statement.</p> <pre><code>type Direction = 'up' | 'down';\n\nconst move = (direction: Direction) =&gt; {\n    switch (direction) {\n        case 'up':\n            console.log('Moving up');\n            break;\n        case 'down':\n            console.log('Moving down');\n            break;\n        default:\n            const exhaustiveCheck: never = direction;\n            console.log(exhaustiveCheck); // this line will never be executed\n    }\n};\n</code></pre> <p>The <code>never</code> type is used to ensure that the default case is exhaustive and that TypeScript will raise an error if a new value is added to the Direction type without being handled in the switch statement.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#object-types","title":"Object Types","text":"<p>In TypeScript, object types describe the shape of an object. They specify the names and types of the object's properties, as well as whether those properties are required or optional.</p> <p>In TypeScript, you can define object types in two primary ways:</p> <p>Interface which defines the shape of an object by specifying the names, types, and optionality of its properties.</p> <pre><code>interface User {\n    name: string;\n    age: number;\n    email?: string;\n}\n</code></pre> <p>Type alias, similar to an interface, defines the shape of an object. However, it can also create a new custom type that is based on an existing type or a combination of existing types. This includes defining union types, intersection types, and other complex types.</p> <pre><code>type Point = {\n    x: number;\n    y: number;\n};\n</code></pre> <p>It also possible to define a type anonymously:</p> <pre><code>const sum = (x: { a: number; b: number }) =&gt; x.a + x.b;\nconsole.log(sum({ a: 5, b: 1 }));\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#tuple-type","title":"Tuple Type","text":"<p>A Tuple Type is a type that represents an array with a fixed number of elements and their corresponding types. A tuple type enforces a specific number of elements and their respective types in a fixed order. Tuple types are useful when you want to represent a collection of values with specific types, where the position of each element in the array has a specific meaning.</p> <pre><code>type Point = [number, number];\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#fixed-length-tuple","title":"Fixed length tuple","text":"<p>A Fixed length tuple is a specific type of tuple that enforces a fixed number of elements of specific types, and disallows any modifications to the length of the tuple once it is defined.</p> <p>Fixed length tuples are useful when you need to represent a collection of values with a specific number of elements and specific types, and you want to ensure that the length and types of the tuple cannot be changed inadvertently.</p> <pre><code>const x = [10, 'hello'] as const;\nx.push(2); // Error\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#union-type","title":"Union Type","text":"<p>A Union Type is a type that represents a value that can be one of several types. Union Types are denoted using the | symbol between each possible type.</p> <pre><code>let x: string | number;\nx = 'hello'; // Valid\nx = 123; // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#intersection-types","title":"Intersection Types","text":"<p>An Intersection Type is a type that represents a value that has all the properties of two or more types. Intersection Types are denoted using the `&amp;`` symbol between each type.</p> <pre><code>type X = {\n    a: string;\n};\n\ntype Y = {\n    b: string;\n};\n\ntype J = X &amp; Y; // Intersection\n\nconst j: J = {\n    a: 'a',\n    b: 'b',\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-indexing","title":"Type Indexing","text":"<p>Type indexing refers to the ability to define types that can be indexed by a key that is not known in advance, using an index signature to specify the type for properties that are not explicitly declared.</p> <pre><code>type Dictionary&lt;T&gt; = {\n    [key: string]: T;\n};\nconst myDict: Dictionary&lt;string&gt; = { a: 'a', b: 'b' };\nconsole.log(myDict['a']); // return a\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-from-value","title":"Type from Value","text":"<p>\"Type from Value\" in TypeScript refers to the automatic inference of a type from a value or expression through type inference.</p> <pre><code>const x = 'x'; // TypeScript can automatically infer that the type of the message variable is string\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-from-func-return","title":"Type from Func Return","text":"<p>Type from Func Return refers to the ability to automatically infer the return type of a function based on its implementation. This allows TypeScript to determine the type of the value returned by the function without explicit type annotations.</p> <pre><code>const add = (x: number, y: number) =&gt; x + y; // TypeScript can infer that the return type of the function is a number\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-from-module","title":"Type from Module","text":"<p>Type from Module refers to the ability to use a module's exported values to automatically infer their types. When a module exports a value with a specific type, TypeScript can use that information to automatically infer the type of that value when it is imported into another module.</p> <pre><code>// calc.ts\nexport const add = (x: number, y: number) =&gt; x + y;\n// index.ts\nimport { add } from 'calc';\nconst r = add(1, 2); // r is number\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#mapped-types","title":"Mapped types","text":"<p>Mapped types in TypeScript allow you to create new types based on an existing type by transforming each property using a mapping function. By mapping existing types, you can create new types that represent the same information in a different format. To create a mapped type, you access the properties of an existing type using the <code>keyof</code> operator and then alter them to produce a new type. In the following example:</p> <pre><code>type MyMappedType&lt;T&gt; = {\n    [P in keyof T]: T[P][];\n};\ntype MyType = {\n    foo: string;\n    bar: number;\n};\ntype MyNewType = MyMappedType&lt;MyType&gt;;\nconst x: MyNewType = {\n    foo: ['hello', 'world'],\n    bar: [1, 2, 3],\n};\n</code></pre> <p>we define MyMappedType to map over T's properties, creating a new type with each property as an array of its original type. Using this, we create MyNewType to represent the same info as MyType, but with each property as an array.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#conditional-types","title":"Conditional Types","text":"<p>Conditional types are a way to create a type that depends on a condition, where the type to be created is determined based on the result of the condition. They are defined using the <code>extends</code> keyword and a ternary operator to conditionally choose between two types.</p> <pre><code>type IsArray&lt;T&gt; = T extends any[] ? true : false;\n\nconst myArray = [1, 2, 3];\nconst myNumber = 42;\n\ntype IsMyArrayAnArray = IsArray&lt;typeof myArray&gt;; // Type true\ntype IsMyNumberAnArray = IsArray&lt;typeof myNumber&gt;; // Type false\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#distributive-conditional-types","title":"Distributive conditional types","text":"<p>Distributive conditional types are a feature that allow a type to be distributed over a union of types, by applying a transformation to each member of the union individually. This can be especially useful when working with mapped types or higher-order types.</p> <pre><code>type Nullable&lt;T&gt; = T extends any ? T | null : never;\ntype NumberOrBool = number | boolean;\ntype NullableNumberOrBool = Nullable&lt;NumberOrBool&gt;; // number | boolean | null\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#infer-type-inference-in-conditional-types","title":"\u201cinfer\u201d Type inference in conditional types","text":"<p>The <code>infer</code>keyword is used in conditional types to infer (extract) the type of a generic parameter from a type that depends on it. This allows you to write more flexible and reusable type definitions.</p> <pre><code>type ElementType&lt;T&gt; = T extends (infer U)[] ? U : never;\ntype Numbers = ElementType&lt;number[]&gt;; // number\ntype Strings = ElementType&lt;string[]&gt;; // string\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#predefined-conditional-types","title":"Predefined conditional types","text":"<p>In TypeScript, predefined conditional types are built-in conditional types provided by the language. They are designed to perform common type transformations based on the characteristics of a given type.</p> <p><code>Exclude&lt;UnionType, ExcludedType&gt;</code>: This type removes all the types from Type that are assignable to ExcludedType.</p> <p><code>Extract&lt;Type, Union&gt;</code>: This type extracts all the types from Union that are assignable to Type.</p> <p><code>NonNullable&lt;Type&gt;</code>: This type removes null and undefined from Type.</p> <p><code>ReturnType&lt;Type&gt;</code>: This type extracts the return type of a function Type.</p> <p><code>Parameters&lt;Type&gt;</code>: This type extracts the parameter types of a function Type.</p> <p><code>Required&lt;Type&gt;</code>: This type makes all properties in Type required.</p> <p><code>Partial&lt;Type&gt;</code>: This type makes all properties in Type optional.</p> <p><code>Readonly&lt;Type&gt;</code>: This type makes all properties in Type readonly.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#template-union-types","title":"Template Union Types","text":"<p>Template union types can be used to merge and manipulate text inside the type system for instance:</p> <pre><code>type Status = 'active' | 'inactive';\ntype Products = 'p1' | 'p2';\ntype ProductId = `id-${Products}-${Status}`; // \"id-p1-active\" | \"id-p1-inactive\" | \"id-p2-active\" | \"id-p2-inactive\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#any-type","title":"Any type","text":"<p>The <code>any</code> type is a special type (universal supertype) that can be used to represent any type of value (primitives, objects, arrays, functions, errors, symbols). It is often used in situations where the type of a value is not known at compile time, or when working with values from external APIs or libraries that do not have TypeScript typings.</p> <p>By utilizing any type, you are indicating to the TypeScript compiler that values should be represented without any limitations. In order to maximizing type safety in your code consider the following:</p> <ul> <li>Limit the usage of any to specific cases where the type is truly unknown.</li> <li>Do not return <code>any</code> types from a function as you will lose type safety in the code using that function weakening your type safety.</li> <li>Instead of <code>any</code> use @ts-ignore` if you need to silence the compiler.</li> </ul> <pre><code>let value: any;\nvalue = true; // Valid\nvalue = 7; // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#unknown-type","title":"Unknown type","text":"<p>In TypeScript, the unknown type represents a value that is of an unknown type. Unlike <code>any</code> type, which allows for any type of value, unknown requires a type check or assertion before it can be used in a specific way so no operations are permitted on an <code>unknown</code> without first asserting or narrowing to a more specific type.</p> <p>The <code>unknown</code> type is only assignable to any type and the unknown type itself, it is a type-safe alternative to any.</p> <pre><code>let value: unknown;\n\nlet value1: unknown = value; // Valid\nlet value2: any = value; // Valid\nlet value3: boolean = value; // Invalid\nlet value4: number = value; // Invalid\n</code></pre> <pre><code>const add = (a: unknown, b: unknown): number | undefined =&gt;\n    typeof a === 'number' &amp;&amp; typeof b === 'number' ? a + b : undefined;\nconsole.log(add(1, 2)); // 3\nconsole.log(add('x', 2)); // undefined\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#void-type","title":"Void type","text":"<p>The <code>void</code> type is used to indicate that a function does not return a value.</p> <pre><code>const sayHello = (): void =&gt; {\n    console.log('Hello!');\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#never-type","title":"Never type","text":"<p>The <code>never</code> type represents values that never occur. It is used to denote functions or expressions that never return or throw an error.</p> <p>For instance an infinite loop:</p> <pre><code>const infiniteLoop = (): never =&gt; {\n    while (true) {\n        // do something\n    }\n};\n</code></pre> <p>Throwing an error:</p> <pre><code>const throwError = (message: string): never =&gt; {\n    throw new Error(message);\n};\n</code></pre> <p>The <code>never</code> type is useful in ensuring type safety and catching potential errors in your code. It helps TypeScript analyze and infer more precise types when used in combination with other types and control flow statements, for instance:</p> <pre><code>type Direction = 'up' | 'down';\nconst move = (direction: Direction): void =&gt; {\n    switch (direction) {\n        case 'up':\n            // move up\n            break;\n        case 'down':\n            // move down\n            break;\n        default:\n            const exhaustiveCheck: never = direction;\n            throw new Error(`Unhandled direction: ${exhaustiveCheck}`);\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#interface-and-type","title":"Interface and Type","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#common-syntax","title":"Common Syntax","text":"<p>In TypeScript, interfaces define the structure of objects, specifying the names and types of properties or methods that an object must have. The common syntax for defining an interface in TypeScript is as follows:</p> <pre><code>interface InterfaceName {\n    property1: Type1;\n    // ...\n    method1(arg1: ArgType1, arg2: ArgType2): ReturnType;\n    // ...\n}\n</code></pre> <p>Similarly for type definition:</p> <pre><code>type TypeName = {\n    property1: Type1;\n    // \u2026\n    method1(arg1: ArgType1, arg2: ArgType2): ReturnType;\n    // ...\n};\n</code></pre> <p><code>interface InterfaceName</code> or <code>type TypeName</code>: Defines the name of the interface. <code>property1</code>: <code>Type1</code>: Specifies the properties of the interface along with their corresponding types. Multiple properties can be defined, each separated by a semicolon. <code>method1(arg1: ArgType1, arg2: ArgType2): ReturnType;</code> method2(): void;: Specifies the methods of the interface. Methods are defined with their names, followed by a parameter list in parentheses and the return type. Multiple methods can be defined, each separated by a semicolon.</p> <p>Example interface:</p> <pre><code>interface Person {\n    name: string;\n    age: number;\n    greet(): void;\n}\n</code></pre> <p>Example of type:</p> <pre><code>type TypeName = {\n    property1: string;\n    method1(arg1: string, arg2: string): string;\n};\n</code></pre> <p>In TypeScript, types are used to define the shape of data and enforce type checking. There are several common syntaxes for defining types in TypeScript, depending on the specific use case. Here are some examples:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#basic-types","title":"Basic types","text":"<pre><code>let myNumber: number = 123; // number type\nlet myBoolean: boolean = true; // boolean type\nlet myArray: string[] = ['a', 'b']; // array of strings\nlet myTuple: [string, number] = ['a', 123]; // tuple\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#objects-and-interfaces","title":"Objects and interfaces","text":"<pre><code>const x: { name: string; age: number } = { name: 'Simon', age: 7 };\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#union-and-intersection-types","title":"Union and intersection types","text":"<pre><code>type MyType = string | number; // union type\nlet myUnion: MyType = 'hello'; // can be a string\nmyUnion = 123; // or a number\n\ntype TypeA = { name: string };\ntype TypeB = { age: number };\ntype CombinedType = TypeA &amp; TypeB; // intersection type\nlet myCombined: CombinedType = { name: 'John', age: 25 }; // object with both name and age properties\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#built-in-type-primitives","title":"Built-in Type Primitives","text":"<p>TypeScript has several built-in type primitives that can be used to define variables, function parameters, and return types:</p> <ul> <li><code>number</code>: Represents numeric values, including integers and floating-point numbers.</li> <li><code>string</code>: Represents textual data</li> <li><code>boolean</code>: Represents logical values, which can be either true or false.</li> <li><code>null</code>: Represents the absence of a value.</li> <li><code>undefined</code>: Represents a value that has not been assigned or has not been defined.</li> <li><code>symbol</code>: Represents a unique identifier. Symbols are typically used as keys for object properties.</li> <li><code>bigint</code>: Represents arbitrary-precision integers.</li> <li><code>any</code>: Represents a dynamic or unknown type. Variables of type any can hold values of any type, and they bypass type checking.</li> <li><code>void</code>: Represents the absence of any type. It is commonly used as the return type of functions that do not return a value.</li> <li><code>never</code>: Represents a type for values that never occur. It is typically used as the return type of functions that throw an error or enter an infinite loop.</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#common-built-in-js-objects","title":"Common Built-in JS Objects","text":"<p>TypeScript is a superset of JavaScript, it includes all the commonly used built-in JavaScript objects. You can find an extensive list of these objects on the Mozilla Developer Network (MDN) documentation website: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects</p> <p>Here is a list of some commonly used built-in JavaScript objects:</p> <ul> <li>Function</li> <li>Object</li> <li>Boolean</li> <li>Error</li> <li>Number</li> <li>BigInt</li> <li>Math</li> <li>Date</li> <li>String</li> <li>RegExp</li> <li>Array</li> <li>Map</li> <li>Set</li> <li>Promise</li> <li>Intl</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#overloads","title":"Overloads","text":"<p>Function overloads in TypeScript allow you to define multiple function signatures for a single function name, enabling you to define functions that can be called in multiple ways. Here's an example:</p> <pre><code>// Overloads\nfunction sayHi(name: string): string;\nfunction sayHi(names: string[]): string[];\n\n// Implementation\nfunction sayHi(name: unknown): unknown {\n    if (typeof name === 'string') {\n        return `Hi, ${name}!`;\n    } else if (Array.isArray(name)) {\n        return name.map(name =&gt; `Hi, ${name}!`);\n    }\n    throw new Error('Invalid value');\n}\n\nsayHi('xx'); // Valid\nsayHi(['aa', 'bb']); // Valid\n</code></pre> <p>Here's another example of using function overloads within a <code>class</code>:</p> <pre><code>class Greeter {\n    message: string;\n\n    constructor(message: string) {\n        this.message = message;\n    }\n\n    // overload\n    sayHi(name: string): string;\n    sayHi(names: string[]): ReadonlyArray&lt;string&gt;;\n\n    // implementation\n    sayHi(name: unknown): unknown {\n        if (typeof name === 'string') {\n            return `${this.message}, ${name}!`;\n        } else if (Array.isArray(name)) {\n            return name.map(name =&gt; `${this.message}, ${name}!`);\n        }\n        throw new Error('value is invalid');\n    }\n}\nconsole.log(new Greeter('Hello').sayHi('Simon'));\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#get-set","title":"Get &amp; Set","text":"<p>Getters and setters are special methods that allow you to define custom access and modification behavior for class properties. They enable you to encapsulate the internal state of an object and provide additional logic when getting or setting the values of properties. In TypeScript, getters and setters are defined using the <code>get</code> and <code>set</code> keywords respectively. Here's an example:</p> <pre><code>class MyClass {\n    private _myProperty: string;\n\n    constructor(value: string) {\n        this._myProperty = value;\n    }\n    get myProperty(): string {\n        return this._myProperty;\n    }\n    set myProperty(value: string) {\n        this._myProperty = value;\n    }\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#merging-and-extension","title":"Merging and Extension","text":"<p>Merging and extension refer to two different concepts related to working with types and interfaces.</p> <p>Merging allows you to combine multiple declarations of the same name into a single definition, for example, when you define an interface with the same name multiple times:</p> <pre><code>interface X {\n    a: string;\n}\n\ninterface X {\n    b: number;\n}\n\nconst person: X = {\n    a: 'a',\n    b: 7,\n};\n</code></pre> <p>Extension refers to the ability to extend or inherit from existing types or interfaces to create new ones. It is a mechanism to add additional properties or methods to an existing type without modifying its original definition. Example:</p> <pre><code>interface Animal {\n    name: string;\n    eat(): void;\n}\n\ninterface Bird extends Animal {\n    sing(): void;\n}\n\nconst dog: Bird = {\n    name: 'Bird 1',\n    eat() {\n        console.log('Eating');\n    },\n    sing() {\n        console.log('Singing');\n    },\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#differences-between-type-and-interface","title":"Differences between Type and Interface","text":"<p>Declaration merging (augmentation): Interfaces support declaration merging, which means that you can define multiple interfaces with the same name, and TypeScript will merge them into a single interface with the combined properties and methods. On the other hand, types do not support declaration merging. This can be helpful when you want to add extra functionality or customize existing types without modifying the original definitions or patching missing or incorrect types.</p> <pre><code>interface A {\n    x: string;\n}\ninterface A {\n    y: string;\n}\nconst j: A = {\n    x: 'xx',\n    y: 'yy',\n};\n</code></pre> <p>Extending other types/interfaces: Both types and interfaces can extend other types/interfaces, but the syntax is different. With interfaces, you use the <code>extends</code> keyword to inherit properties and methods from other interfaces. However, an interface cannot extend a complex type like a union type.</p> <pre><code>interface A {\n    x: string;\n    y: number;\n}\ninterface B extends A {\n    z: string;\n}\nconst car: B = {\n    x: 'x',\n    y: 123,\n    z: 'z',\n};\n</code></pre> <p>For types, you use the &amp; operator to combine multiple types into a single type (intersection).</p> <pre><code>interface A {\n    x: string;\n    y: number;\n}\n\ntype B = A &amp; {\n    j: string;\n};\n\nconst c: B = {\n    x: 'x',\n    y: 123,\n    j: 'j',\n};\n</code></pre> <p>Union and intersection types: Types are more flexible when it comes to defining union and intersection types. With the <code>type</code> keyword, you can easily create union types using the <code>|</code> operator and intersection types using the <code>&amp;</code> operator. While interfaces can also represent union types indirectly, they don't have built-in support for intersection types.</p> <pre><code>type Department = 'dep-x' | 'dep-y'; // Union\n\ntype Person = {\n    name: string;\n    age: number;\n};\n\ntype Employee = {\n    id: number;\n    department: Department;\n};\n\ntype EmployeeInfo = Person &amp; Employee; // Intersection\n</code></pre> <p>Example with interfaces:</p> <pre><code>interface A {\n    x: 'x';\n}\ninterface B {\n    y: 'y';\n}\n\ntype C = A | B; // Union of interfaces\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#class","title":"Class","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#class-common-syntax","title":"Class Common Syntax","text":"<p>The <code>class</code> keyword is used in TypeScript to define a class. Below, you can see an example:</p> <pre><code>class Person {\n    private name: string;\n    private age: number;\n    constructor(name: string, age: number) {\n        this.name = name;\n        this.age = age;\n    }\n    public sayHi(): void {\n        console.log(\n            `Hello, my name is ${this.name} and I am ${this.age} years old.`\n        );\n    }\n}\n</code></pre> <p>The <code>class</code> keyword is used to define a class named \"Person\".</p> <p>The class has two private properties: name of type <code>string</code> and age of type <code>number</code>.</p> <p>The constructor is defined using the <code>constructor</code> keyword. It takes name and age as parameters and assigns them to the corresponding properties.</p> <p>The class has a <code>public</code> method named sayHi that logs a greeting message.</p> <p>To create an instance of a class in TypeScript, you can use the <code>new</code> keyword followed by the class name, followed by parentheses (). For instance:</p> <pre><code>const myObject = new Person('John Doe', 25);\nmyObject.sayHi(); // output: Hello, my name is John Doe and I am 25 years old.\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#constructor","title":"Constructor","text":"<p>Constructors are special methods within a class that are used to initialize the object's properties when an instance of the class is created.</p> <pre><code>class Person {\n    public name: string;\n    public age: number;\n\n    constructor(name: string, age: number) {\n        this.name = name;\n        this.age = age;\n    }\n\n    sayHello() {\n        console.log(\n            `Hello, my name is ${this.name} and I'm ${this.age} years old.`\n        );\n    }\n}\n\nconst john = new Person('Simon', 17);\njohn.sayHello();\n</code></pre> <p>It is possible to overload a constructor using the following syntax:</p> <pre><code>type Sex = 'm' | 'f';\n\nclass Person {\n    name: string;\n    age: number;\n    sex: Sex;\n\n    constructor(name: string, age: number, sex?: Sex);\n    constructor(name: string, age: number, sex: Sex) {\n        this.name = name;\n        this.age = age;\n        this.sex = sex ?? 'm';\n    }\n}\n\nconst p1 = new Person('Simon', 17);\nconst p2 = new Person('Alice', 22, 'f');\n</code></pre> <p>In TypeScript, it is possible to define multiple constructor overloads, but you can have only one implementation that must be compatible with all the overloads, this can be achieved  by using an optional parameter.</p> <pre><code>class Person {\n    name: string;\n    age: number;\n\n    constructor();\n    constructor(name: string);\n    constructor(name: string, age: number);\n    constructor(name?: string, age?: number) {\n        this.name = name ?? 'Unknown';\n        this.age = age ?? 0;\n    }\n\n    displayInfo() {\n        console.log(`Name: ${this.name}, Age: ${this.age}`);\n    }\n}\n\nconst person1 = new Person();\nperson1.displayInfo(); // Name: Unknown, Age: 0\n\nconst person2 = new Person('John');\nperson2.displayInfo(); // Name: John, Age: 0\n\nconst person3 = new Person('Jane', 25);\nperson3.displayInfo(); // Name: Jane, Age: 25\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#private-and-protected-constructors","title":"Private and Protected Constructors","text":"<p>In TypeScript, constructors can be marked as private or protected, which restricts their accessibility and usage.</p> <p>Private Constructors: Can be called only within the class itself. Private constructors are often used in scenarios where you want to enforce a singleton pattern or restrict the creation of instances to a factory method within the class</p> <p>Protected Constructors: Protected constructors are useful when you want to create a base class that should not be instantiated directly but can be extended by subclasses.</p> <pre><code>class BaseClass {\n    protected constructor() {}\n}\n\nclass DerivedClass extends BaseClass {\n    private value: number;\n\n    constructor(value: number) {\n        super();\n        this.value = value;\n    }\n}\n\n// attempting to instantiate the base class directly will result in an error\n// const baseObj = new BaseClass(); // Error: Constructor of class 'BaseClass' is protected.\n\n// create an instance of the derived class\nconst derivedObj = new DerivedClass(10);\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#access-modifiers","title":"Access modifiers","text":"<p>Access modifiers <code>private</code>, <code>protected</code>, and <code>public</code> are used to control the visibility and accessibility of class members, such as properties and methods, in TypeScript classes. These modifiers are essential for enforcing encapsulation and establishing boundaries for accessing and modifying the internal state of a class.</p> <p>The <code>private</code> modifier restricts access to the class member only within the containing class.</p> <p>The <code>protected</code> modifier allows access to the class member within the containing class and its derived classes.</p> <p>The <code>public</code> modifier provides unrestricted access to the class member, allowing it to be accessed from anywhere.\"</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#auto-accessors-in-classes","title":"Auto-Accessors in Classes","text":"<p>TypeScript version 4.9 adds support for auto-accessors, a forthcoming ECMAScript feature. They resemble class properties but are declared with the \"accessor\" keyword.</p> <pre><code>class Animal {\n    accessor name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n</code></pre> <p>Auto-accessors are \"de-sugared\" into private <code>get</code> and <code>set</code> accessors, operating on an inaccessible property.</p> <pre><code>class Animal {\n    #__name: string;\n\n    get name() {\n        return this.#__name;\n    }\n    set name(value: string) {\n        this.#__name = name;\n    }\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#this","title":"this","text":"<p>In TypeScript, the <code>this</code> keyword refers to the current instance of a class within its methods or constructors. It allows you to access and modify the properties and methods of the class from within its own scope. It provides a way to access and manipulate the internal state of an object within its own methods.</p> <pre><code>class Person {\n    private name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n    public introduce(): void {\n        console.log(`Hello, my name is ${this.name}.`);\n    }\n}\n\nconst person1 = new Person('Alice');\nperson1.introduce(); // Hello, my name is Alice.\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#parameter-properties","title":"Parameter Properties","text":"<p>Parameter properties allow you to declare and initialize class properties directly within the constructor parameters avoiding boilerplate code, example:</p> <pre><code>class Person {\n    constructor(private name: string, public age: number) {\n        // the \"private\" and \"public\" keywords in the constructor\n        // automatically declare and initialize the corresponding class properties.\n    }\n    public introduce(): void {\n        console.log(\n            `Hello, my name is ${this.name} and I am ${this.age} years old.`\n        );\n    }\n}\nconst person = new Person('Alice', 25);\nperson.introduce();\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#abstract-classes","title":"Abstract Classes","text":"<p>Abstract Classes are used in TypeScript mainly for inheritance, they provide a way to define common properties and methods that can be inherited by subclasses. This is useful when you want to define common behavior and enforce that subclasses implement certain methods. They provide a way to create a hierarchy of classes where the abstract base class provides a shared interface and common functionality for the subclasses.</p> <pre><code>abstract class Animal {\n    protected name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    abstract makeSound(): void;\n}\n\nclass Cat extends Animal {\n    makeSound(): void {\n        console.log(`${this.name} meows.`);\n    }\n}\n\nconst cat = new Cat('Whiskers');\ncat.makeSound(); // Output: Whiskers meows.\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#with-generics","title":"With Generics","text":"<p>Classes with generics allow you to define reusable classes which can work with different types.</p> <pre><code>class Container&lt;T&gt; {\n    private item: T;\n\n    constructor(item: T) {\n        this.item = item;\n    }\n\n    getItem(): T {\n        return this.item;\n    }\n\n    setItem(item: T): void {\n        this.item = item;\n    }\n}\n\nconst container1 = new Container&lt;number&gt;(42);\nconsole.log(container1.getItem()); //  42\n\nconst container2 = new Container&lt;string&gt;('Hello');\ncontainer2.setItem('World');\nconsole.log(container2.getItem()); // World\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#decorators","title":"Decorators","text":"<p>Decorators provide a mechanism to add metadata, modify behavior, validate, or extend the functionality of the target element. They are functions that execute at runtime. Multiple decorators can be applied to a declaration.</p> <p>Decorators are experimental features, and the following examples are only compatible with TypeScript version 5 or above using ES6.</p> <p>For TypeScript versions prior to 5, they should be enabled using the <code>experimentalDecorators</code> property in your <code>tsconfig.json</code> or by using <code>--experimentalDecorators</code> in your command line (but the following example won't work).</p> <p>Some of the common use cases for decorators include:</p> <ul> <li>Watching property changes</li> <li>Watching method calls</li> <li>Adding extra properties or methods</li> <li>Runtime validation</li> <li>Automatic serialization and deserialization</li> <li>Logging</li> <li>Authorization and authentication</li> <li>Error guarding</li> </ul> <p>Note: Decorators for version 5 do not allow decorating parameters.</p> <p>Types of decorators:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#class-decorators","title":"Class decorators","text":"<p>Class decorators are useful for extending an existing class, such as adding properties or methods, or collecting instances of a class. In the following example, we add a <code>toString</code> method that converts the class into a string representation.</p> <pre><code>type Constructor&lt;T = {}&gt; = new (...args: any[]) =&gt; T;\n\nfunction toString&lt;Class extends Constructor&gt;(\n    Value: Class,\n    context: ClassDecoratorContext&lt;Class&gt;\n) {\n    return class extends Value {\n        constructor(...args: any[]) {\n            super(...args);\n            console.log(JSON.stringify(this));\n            console.log(JSON.stringify(context));\n        }\n    };\n}\n\n@toString\nclass Person {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    greet() {\n        return 'Hello, ' + this.name;\n    }\n}\nconst person = new Person('Simon');\n/* Logs:\n{\"name\":\"Simon\"}\n{\"kind\":\"class\",\"name\":\"Person\"}\n*/\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#property-decorator","title":"Property Decorator","text":"<p>Property decorators are useful for modifying the behavior of a property, such as changing the initialization values. In the following code, we have a script that sets a property to always be in uppercase:</p> <pre><code>function upperCase&lt;T&gt;(\n    target: undefined,\n    context: ClassFieldDecoratorContext&lt;T, string&gt;\n) {\n    return function (this: T, value: string) {\n        return value.toUpperCase();\n    };\n}\n\nclass MyClass {\n    @upperCase\n    prop1 = 'hello!';\n}\n\nconsole.log(new MyClass().prop1); // Logs: HELLO!\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#method-decorator","title":"Method Decorator","text":"<p>Method decorators allow you to change or enhance the behavior of methods. Below is an example of a simple logger:</p> <pre><code>function log&lt;This, Args extends any[], Return&gt;(\n    target: (this: This, ...args: Args) =&gt; Return,\n    context: ClassMethodDecoratorContext&lt;\n        This,\n        (this: This, ...args: Args) =&gt; Return\n    &gt;\n) {\n    const methodName = String(context.name);\n\n    function replacementMethod(this: This, ...args: Args): Return {\n        console.log(`LOG: Entering method '${methodName}'.`);\n        const result = target.call(this, ...args);\n        console.log(`LOG: Exiting method '${methodName}'.`);\n        return result;\n    }\n\n    return replacementMethod;\n}\n\nclass MyClass {\n    @log\n    sayHello() {\n        console.log('Hello!');\n    }\n}\n\nconsole.log(new MyClass().sayHello()); // Logs: Hello!\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#getter-and-setter-decorators","title":"Getter and Setter Decorators","text":"<p>Getter and setter decorators allow you to change or enhance the behavior of class accessors. They are useful, for instance, for validating property assignments. Here's a simple example for a getter decorator:</p> <pre><code>function range&lt;This, Return extends number&gt;(min: number, max: number) {\n    return function (\n        target: (this: This) =&gt; Return,\n        context: ClassGetterDecoratorContext&lt;This, Return&gt;\n    ) {\n        return function (this: This): Return {\n            const value = target.call(this);\n            if (value &lt; min || value &gt; max) {\n                throw 'Invalid';\n            }\n            Object.defineProperty(this, context.name, {\n                value,\n                enumerable: true,\n            });\n            return value;\n        };\n    };\n}\n\nclass MyClass {\n    private _value = 0;\n\n    constructor(value: number) {\n        this._value = value;\n    }\n    @range(1, 100)\n    get getValue(): number {\n        return this._value;\n    }\n}\n\nconst obj = new MyClass(10);\nconsole.log(obj.getValue); // Valid: 10\n\nconst obj2 = new MyClass(999);\nconsole.log(obj2.getValue); // Throw: Invalid!\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#inheritance","title":"Inheritance","text":"<p>Inheritance refers to the mechanism by which a class can inherit properties and methods from another class, known as the base class or superclass. The derived class, also called the child class or subclass, can extend and specialize the functionality of the base class by adding new properties and methods or overriding existing ones.</p> <pre><code>class Animal {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    speak(): void {\n        console.log('The animal makes a sound');\n    }\n}\n\nclass Dog extends Animal {\n    breed: string;\n\n    constructor(name: string, breed: string) {\n        super(name);\n        this.breed = breed;\n    }\n\n    speak(): void {\n        console.log('Woof! Woof!');\n    }\n}\n\n// create an instance of the base class\nconst animal = new Animal('Generic Animal');\nanimal.speak(); // The animal makes a sound\n\n// create an instance of the derived class\nconst dog = new Dog('Max', 'Labrador');\ndog.speak(); // Woof! Woof!\"\n</code></pre> <p>TypeScript does not support multiple inheritance in the traditional sense and instead allows inheritance from a single base class. TypeScript supports multiple interfaces. An interface can define a contract for the structure of an object, and a class can implement multiple interfaces. This allows a class to inherit behavior and structure from multiple sources.</p> <pre><code>interface Flyable {\n    fly(): void;\n}\n\ninterface Swimmable {\n    swim(): void;\n}\n\nclass FlyingFish implements Flyable, Swimmable {\n    fly() {\n        console.log('Flying...');\n    }\n\n    swim() {\n        console.log('Swimming...');\n    }\n}\n\nconst flyingFish = new FlyingFish();\nflyingFish.fly();\nflyingFish.swim();\n</code></pre> <p>The <code>class</code> keyword in TypeScript, similar to JavaScript, is often referred to as syntactic sugar. It was introduced in ECMAScript 2015 (ES6) to offer a more familiar syntax for creating and working with objects in a class-based manner. However, it's important to note that TypeScript, being a superset of JavaScript, ultimately compiles down to JavaScript, which remains prototype-based at its core.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#statics","title":"Statics","text":"<p>TypeScript has static members. To access the static members of a class, you can use the class name followed by a dot, without the need to create an object.</p> <pre><code>class OfficeWorker {\n    static memberCount: number = 0;\n\n    constructor(private name: string) {\n        OfficeWorker.memberCount++;\n    }\n}\n\nconst w1 = new OfficeWorker('James');\nconst w2 = new OfficeWorker('Simon');\nconst total = OfficeWorker.memberCount;\nconsole.log(total);\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#property-initialization","title":"Property initialization","text":"<p>There are several ways how you can initialize properties for a class in TypeScript:</p> <p>Inline:</p> <p>In the following example these initial values will be used when an instance of the class is created.</p> <pre><code>class MyClass {\n    property1: string = 'default value';\n    property2: number = 42;\n}\n</code></pre> <p>In the constructor:</p> <pre><code>class MyClass {\n    property1: string;\n    property2: number;\n\n    constructor() {\n        this.property1 = 'default value';\n        this.property2 = 42;\n    }\n}\n</code></pre> <p>Using constructor parameters:</p> <pre><code>class MyClass {\n    constructor(\n        private property1: string = 'default value',\n        public property2: number = 42\n    ) {\n        // there is no need to assign the values to the properties explicitly.\n    }\n    log() {\n        console.log(this.property2);\n    }\n}\nconst x = new MyClass();\nx.log();\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#method-overloading","title":"Method overloading","text":"<p>Method overloading allows a class to have multiple methods with the same name but different parameter types or a different number of parameters. This allows us to call a method in different ways based on the arguments passed.</p> <pre><code>class MyClass {\n    add(a: number, b: number): number; // Overload signature 1\n    add(a: string, b: string): string; // Overload signature 2\n\n    add(a: number | string, b: number | string): number | string {\n        if (typeof a === 'number' &amp;&amp; typeof b === 'number') {\n            return a + b;\n        }\n        if (typeof a === 'string' &amp;&amp; typeof b === 'string') {\n            return a.concat(b);\n        }\n        throw new Error('Invalid arguments');\n    }\n}\n\nconst r = new MyClass();\nconsole.log(r.add(10, 5));\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#generics","title":"Generics","text":"<p>Generics allow you to create reusable components and functions that can work with multiple types. With generics, you can parameterize types, functions, and interfaces, allowing them to operate on different types without explicitly specifying them beforehand.</p> <p>Generics allow you to make code more flexible and reusable.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#generic-type","title":"Generic Type","text":"<p>To define a generic type, you use angle brackets (&lt;&gt;) to specify the type parameters, for instance:</p> <pre><code>function identity&lt;T&gt;(arg: T): T {\n    return arg;\n}\nconst a = identity('x');\nconst b = identity(123);\n\nconst getLen = &lt;T&gt;(data: ReadonlyArray&lt;T&gt;) =&gt; data.length;\nconst len = getLen([1, 2, 3]);\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#generic-classes","title":"Generic Classes","text":"<p>Generics can be applied also to classes, in this way they can work with multiple types by using type parameters. This is useful to create reusable class definitions that can operate on different data types while maintaining type safety.</p> <pre><code>class Container&lt;T&gt; {\n    private item: T;\n\n    constructor(item: T) {\n        this.item = item;\n    }\n\n    getItem(): T {\n        return this.item;\n    }\n}\n\nconst numberContainer = new Container&lt;number&gt;(123);\nconsole.log(numberContainer.getItem()); // 123\n\nconst stringContainer = new Container&lt;string&gt;('hello');\nconsole.log(stringContainer.getItem()); // hello\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#generic-constraints","title":"Generic Constraints","text":"<p>Generic parameters can be constrained using the <code>extends</code> keyword followed by a type or interface that the type parameter must satisfy.</p> <p>In the following example T it is must containing a properly <code>length</code> in order to be valid:</p> <pre><code>const printLen = &lt;T extends { length: number }&gt;(value: T): void =&gt; {\n    console.log(value.length);\n};\n\nprintLen('Hello'); // 5\nprintLen([1, 2, 3]); // 3\nprintLen({ length: 10 }); // 10\nprintLen(123); // Invalid\n</code></pre> <p>An interesting feature of generic introduced in version 3.4 RC is Higher order function type inference which introduced  propagated generic type arguments:</p> <pre><code>declare function pipe&lt;A extends any[], B, C&gt;(\n    ab: (...args: A) =&gt; B,\n    bc: (b: B) =&gt; C\n): (...args: A) =&gt; C;\n\ndeclare function list&lt;T&gt;(a: T): T[];\ndeclare function box&lt;V&gt;(x: V): { value: V };\n\nconst listBox = pipe(list, box); // &lt;T&gt;(a: T) =&gt; { value: T[] }\nconst boxList = pipe(box, list); // &lt;V&gt;(x: V) =&gt; { value: V }[]\n</code></pre> <p>This functionality allows more easily typed safe pointfree style programming which is common in functional programming.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#generic-contextual-narrowing","title":"Generic contextual narrowing","text":"<p>Contextual narrowing for generics is the mechanism in TypeScript that allows the compiler to narrow down the type of a generic parameter based on the context in which it is used, it is useful when working with generic types in conditional statements:</p> <pre><code>function process&lt;T&gt;(value: T): void {\n    if (typeof value === 'string') {\n        // Value is narrowed down to type 'string'\n        console.log(value.length);\n    } else if (typeof value === 'number') {\n        // Value is narrowed down to type 'number'\n        console.log(value.toFixed(2));\n    }\n}\n\nprocess('hello'); // 5\nprocess(3.14159); // 3.14\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#erased-structural-types","title":"Erased Structural Types","text":"<p>In TypeScript, objects do not have to match a specific, exact type. For instance, if we create an object that fulfills an interface's requirements, we can utilize that object in places where that interface is required, even if there was no explicit connection between them. Example:</p> <pre><code>type NameProp1 = {\n    prop1: string;\n};\n\nfunction log(x: NameProp1) {\n    console.log(x.prop1);\n}\n\nconst obj = {\n    prop2: 123,\n    prop1: 'Origin',\n};\n\nlog(obj); // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#namespacing","title":"Namespacing","text":"<p>In TypeScript, namespaces are used to organize code into logical containers, preventing naming collisions and providing a way to group related code together. The usage of the <code>export</code> keywords allows access to the namespace in \u201coutside\u201d modules.</p> <pre><code>export namespace MyNamespace {\n    export interface MyInterface1 {\n        prop1: boolean;\n    }\n    export interface MyInterface2 {\n        prop2: string;\n    }\n}\n\nconst a: MyNamespace.MyInterface1 = {\n    prop1: true,\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#symbols","title":"Symbols","text":"<p>Symbols are a primitive data type that represents an immutable value which is guaranteed to be globally unique throughout the lifetime of the program.</p> <p>Symbols can be used as keys for object properties and provide a way to create non-enumerable properties.</p> <pre><code>const key1: symbol = Symbol('key1');\nconst key2: symbol = Symbol('key2');\n\nconst obj = {\n    [key1]: 'value 1',\n    [key2]: 'value 2',\n};\n\nconsole.log(obj[key1]); // value 1\nconsole.log(obj[key2]); // value 2\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#triple-slash-directives","title":"Triple-Slash Directives","text":"<p>Triple-slash directives are special comments that provide instructions to the compiler about how to process a file. These directives begin with three consecutive slashes (///) and are typically placed at the top of a TypeScript file and have no effects on the runtime behavior.</p> <p>Triple-slash directives are used to reference external dependencies, specify module loading behavior, enable/disable certain compiler features, and more. Few examples:</p> <p>Referencing a declaration file:</p> <pre><code>/// &lt;reference path=\"path/to/declaration/file.d.ts\" /&gt;\n</code></pre> <p>Indicate the module format:</p> <pre><code>/// &lt;amd|commonjs|system|umd|es6|es2015|none&gt;\n</code></pre> <p>Enable compiler options, in the following example strict mode:</p> <pre><code>/// &lt;strict|noImplicitAny|noUnusedLocals|noUnusedParameters&gt;\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-manipulation","title":"Type Manipulation","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#creating-types-from-types","title":"Creating Types from Types","text":"<p>Is it possible to create new types composing, manipulating or transforming existing types.</p> <p>Intersection Types (<code>&amp;</code>):</p> <p>Allow you to combine multiple types into a single  type:</p> <pre><code>type A = { foo: number };\ntype B = { bar: string };\ntype C = A &amp; B; // Intersection of A and B\nconst obj: C = { foo: 42, bar: 'hello' };\n</code></pre> <p>Union Types (<code>|</code>):</p> <p>Allow you to define a type that can be one of several types:</p> <pre><code>type Result = string | number;\nconst value1: Result = 'hello';\nconst value2: Result = 42;\n</code></pre> <p>Mapped Types:</p> <p>Allow you to transform the properties of an existing type to create new type:</p> <pre><code>type Mutable&lt;T&gt; = {\n    readonly [P in keyof T]: T[P];\n};\ntype Person = {\n    name: string;\n    age: number;\n};\ntype ImmutablePerson = Mutable&lt;Person&gt;; // properties become read-only\n</code></pre> <p>Conditional types:</p> <p>Allow you to create types based on some conditions:</p> <pre><code>type ExtractParam&lt;T&gt; = T extends (param: infer P) =&gt; any ? P : never;\ntype MyFunction = (name: string) =&gt; number;\ntype ParamType = ExtractParam&lt;MyFunction&gt;; // string\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#indexed-access-types","title":"Indexed Access Types","text":"<p>In TypeScript is it possible to access and manipulate  the types of properties within another type using an index, <code>Type[Key]</code>.</p> <pre><code>type Person = {\n    name: string;\n    age: number;\n};\n\ntype AgeType = Person['age']; // number\n</code></pre> <pre><code>type MyTuple = [string, number, boolean];\ntype MyType = MyTuple[2]; // boolean\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#utility-types","title":"Utility Types","text":"<p>Several built-in utility types can be used to manipulate types, below a list of the most common used:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#awaitedt","title":"Awaited\\&lt;T&gt;","text":"<p>Constructs a type recursively unwrap Promises.</p> <pre><code>type A = Awaited&lt;Promise&lt;string&gt;&gt;; // string\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#partialt","title":"Partial\\&lt;T&gt;","text":"<p>Constructs a type with all properties of T set to optional.</p> <pre><code>type Person = {\n    name: string;\n    age: number;\n};\n\ntype A = Partial&lt;Person&gt;; // { name?: string | undefined; age?: number | undefined; }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#requiredt","title":"Required\\&lt;T&gt;","text":"<p>Constructs a type with all properties of T set to required.</p> <pre><code>type Person = {\n    name?: string;\n    age?: number;\n};\n\ntype A = Required&lt;Person&gt;; // { name: string; age: number; }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#readonlyt","title":"Readonly\\&lt;T&gt;","text":"<p>Constructs a type with all properties of T set to readonly.</p> <pre><code>type Person = {\n    name: string;\n    age: number;\n};\n\ntype A = Readonly&lt;Person&gt;;\n\nconst a: A = { name: 'Simon', age: 17 };\na.name = 'John'; // Invalid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#recordk-t","title":"Record\\&lt;K, T&gt;","text":"<p>Constructs a type with a set of properties K of type T.</p> <pre><code>type Product = {\n    name: string;\n    price: number;\n};\n\nconst products: Record&lt;string, Product&gt; = {\n    apple: { name: 'Apple', price: 0.5 },\n    banana: { name: 'Banana', price: 0.25 },\n};\n\nconsole.log(products.apple); // { name: 'Apple', price: 0.5 }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#pickt-k","title":"Pick\\&lt;T, K&gt;","text":"<p>Constructs a type by picking the specified properties K from T.</p> <pre><code>type Product = {\n    name: string;\n    price: number;\n};\n\ntype Price = Pick&lt;Product, 'price'&gt;; // { price: number; }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#omitt-k","title":"Omit\\&lt;T, K&gt;","text":"<p>Constructs a type by omitting the specified properties K from T.</p> <pre><code>type Product = {\n    name: string;\n    price: number;\n};\n\ntype Name = Omit&lt;Product, 'price'&gt;; // { name: string; }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#excludet-u","title":"Exclude\\&lt;T, U&gt;","text":"<p>Constructs a type by excluding all values of type U from T.</p> <pre><code>type Union = 'a' | 'b' | 'c';\ntype MyType = Exclude&lt;Union, 'a' | 'c'&gt;; // b\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#extractt-u","title":"Extract\\&lt;T, U&gt;","text":"<p>Constructs a type by extracting all values of type U from T.</p> <pre><code>type Union = 'a' | 'b' | 'c';\ntype MyType = Extract&lt;Union, 'a' | 'c'&gt;; // a | c\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#nonnullablet","title":"NonNullable\\&lt;T&gt;","text":"<p>Constructs a type by excluding null and undefined from T.</p> <pre><code>type Union = 'a' | null | undefined | 'b';\ntype MyType = NonNullable&lt;Union&gt;; // 'a' | 'b'\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#parameterst","title":"Parameters\\&lt;T&gt;","text":"<p>Extracts the parameter types of a function type T.</p> <pre><code>type Func = (a: string, b: number) =&gt; void;\ntype MyType = Parameters&lt;Func&gt;; // [a: string, b: number]\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#constructorparameterst","title":"ConstructorParameters\\&lt;T&gt;","text":"<p>Extracts the parameter types of a constructor function type T.</p> <pre><code>class Person {\n    constructor(public name: string, public age: number) {}\n}\ntype PersonConstructorParams = ConstructorParameters&lt;typeof Person&gt;; // [name: string, age: number]\nconst params: PersonConstructorParams = ['John', 30];\nconst person = new Person(...params);\nconsole.log(person); // Person { name: 'John', age: 30 }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#returntypet","title":"ReturnType\\&lt;T&gt;","text":"<p>Extracts the return type of a function type T.</p> <pre><code>type Func = (name: string) =&gt; number;\ntype MyType = ReturnType&lt;Func&gt;; // number\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#instancetypet","title":"InstanceType\\&lt;T&gt;","text":"<p>Extracts the instance type of a class type T.</p> <pre><code>class Person {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    sayHello() {\n        console.log(`Hello, my name is ${this.name}!`);\n    }\n}\n\ntype PersonInstance = InstanceType&lt;typeof Person&gt;;\n\nconst person: PersonInstance = new Person('John');\n\nperson.sayHello(); // Hello, my name is John!\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#thisparametertypet","title":"ThisParameterType\\&lt;T&gt;","text":"<p>Extracts the type of 'this' parameter from a function type T.</p> <pre><code>interface Person {\n    name: string;\n    greet(this: Person): void;\n}\ntype PersonThisType = ThisParameterType&lt;Person['greet']&gt;; // Person\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#omitthisparametert","title":"OmitThisParameter\\&lt;T&gt;","text":"<p>Removes the 'this' parameter from a function type T.</p> <pre><code>function capitalize(this: String) {\n    return this[0].toUpperCase + this.substring(1).toLowerCase();\n}\n\ntype CapitalizeType = OmitThisParameter&lt;typeof capitalize&gt;; // () =&gt; string\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#thistypet","title":"ThisType\\&lt;T&gt;","text":"<p>Servers as a market for a contextual <code>this</code> type.</p> <pre><code>type Logger = {\n    log: (error: string) =&gt; void;\n};\n\nlet helperFunctions: { [name: string]: Function } &amp; ThisType&lt;Logger&gt; = {\n    hello: function () {\n        this.log('some error'); // Valid as \"log\" is a part of \"this\".\n        this.update(); // Invalid\n    },\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#uppercaset","title":"Uppercase\\&lt;T&gt;","text":"<p>Make uppercase the name of the input type T.</p> <pre><code>type MyType = Uppercase&lt;'abc'&gt;; // \"ABC\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#lowercaset","title":"Lowercase\\&lt;T&gt;","text":"<p>Make lowercase the name of the input type T.</p> <pre><code>type MyType = Lowercase&lt;'ABC'&gt;; // \"abc\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#capitalizet","title":"Capitalize\\&lt;T&gt;","text":"<p>Capitalize the name of the input type T.</p> <pre><code>type MyType = Capitalize&lt;'abc'&gt;; // \"Abc\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#uncapitalizet","title":"Uncapitalize\\&lt;T&gt;","text":"<p>Uncapitalize the name of the input type T.</p> <pre><code>type MyType = Uncapitalize&lt;'Abc'&gt;; // \"abc\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#others","title":"Others","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#errors-and-exception-handling","title":"Errors and Exception Handling","text":"<p>TypeScript allows you to catch and handle errors using standard JavaScript error handling mechanisms:</p> <p>Try-Catch-Finally Blocks:</p> <pre><code>try {\n    // code that might throw an error\n} catch (error) {\n    // handle the error\n} finally {\n    // code that always executes, finally is optional\n}\n</code></pre> <p>You can also handle different types of error:</p> <pre><code>try {\n    // code that might throw different types of errors\n} catch (error) {\n    if (error instanceof TypeError) {\n        // handle TypeError\n    } else if (error instanceof RangeError) {\n        // handle RangeError\n    } else {\n        // handle other errors\n    }\n}\n</code></pre> <p>Custom Error Types:</p> <p>It is possible to specify more specific error by extending on the Error <code>class</code>:</p> <pre><code>class CustomError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'CustomError';\n    }\n}\n\nthrow new CustomError('This is a custom error.');\n</code></pre> <p>Mixin classes allow you to combine and compose behavior from multiple classes into a single class. They provide a way to reuse and extend functionality without the need for deep inheritance chains.</p> <pre><code>abstract class Identifiable {\n    name: string = '';\n    logId() {\n        console.log('id:', this.name);\n    }\n}\nabstract class Selectable {\n    selected: boolean = false;\n    select() {\n        this.selected = true;\n        console.log('Select');\n    }\n    deselect() {\n        this.selected = false;\n        console.log('Deselect');\n    }\n}\nclass MyClass {\n    constructor() {}\n}\n\n// extend MyClass to include the behavior of Identifiable and Selectable\ninterface MyClass extends Identifiable, Selectable {}\n\n// function to apply mixins to a class\nfunction applyMixins(source: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor =&gt; {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name =&gt; {\n            let descriptor = Object.getOwnPropertyDescriptor(\n                baseCtor.prototype,\n                name\n            );\n            if (descriptor) {\n                Object.defineProperty(source.prototype, name, descriptor);\n            }\n        });\n    });\n}\n\n// apply the mixins to MyClass\napplyMixins(MyClass, [Identifiable, Selectable]);\nlet o = new MyClass();\no.name = 'abc';\no.logId();\no.select();\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#asynchronous-language-features","title":"Asynchronous Language Features","text":"<p>As TypeScript is a superset of JavaScript, it has built-in asynchronous language features of JavaScript as:</p> <p>Promises: Promises are a way to handle asynchronous operations and their results using methods like <code>.then()</code> and <code>.catch()</code> to handle success and error conditions.</p> <p>To learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</p> <p>Async/await: Async/await keywords are a way to provide a more synchronous-looking syntax for working with Promises. The <code>async</code> keyword is used to define an asynchronous function, and the <code>await</code> keyword is used within an async function to pause execution until a Promise is resolved or rejected.</p> <p>To learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</p> <p>The following API are well supported in TypeScript:</p> <p>Fetch API https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API</p> <p>Web Workers https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API</p> <p>Shared Workers https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker</p> <p>WebSocket https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#iterators-and-generators","title":"Iterators and Generators","text":"<p>Both Interators and Generators are well supported in TypeScript.</p> <p>Iterators are objects that implement the iterator protocol, providing a way to access elements of a collection or sequence one by one. It is a structure that contains a pointer to the next element in the iteration. They have a <code>next()</code> method that returns the next value in the sequence along with a boolean indicating if the sequence is <code>done</code>.</p> <pre><code>class NumberIterator implements Iterable&lt;number&gt; {\n    private current: number;\n\n    constructor(private start: number, private end: number) {\n        this.current = start;\n    }\n\n    public next(): IteratorResult&lt;number&gt; {\n        if (this.current &lt;= this.end) {\n            const value = this.current;\n            this.current++;\n            return { value, done: false };\n        } else {\n            return { value: undefined, done: true };\n        }\n    }\n\n    [Symbol.iterator](): Iterator&lt;number&gt; {\n        return this;\n    }\n}\n\nconst iterator = new NumberIterator(1, 3);\n\nfor (const num of iterator) {\n    console.log(num);\n}\n</code></pre> <p>Generators are special functions defined using the <code>function*</code> syntax that simplifies the creation of iterators. They use the <code>yield</code> keyword to define the sequence of values and automatically pause and resume execution when values are requested.</p> <p>Generators make it easier to create iterators and are especially useful for working with large or infinite sequences.</p> <p>Example:</p> <pre><code>function* numberGenerator(start: number, end: number): Generator&lt;number&gt; {\n    for (let i = start; i &lt;= end; i++) {\n        yield i;\n    }\n}\n\nconst generator = numberGenerator(1, 5);\n\nfor (const num of generator) {\n    console.log(num);\n}\n</code></pre> <p>TypeScript also supports async iterators and async Generators.</p> <p>To learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#tsdocs-jsdoc-reference","title":"TsDocs JSDoc Reference","text":"<p>When working with a JavaScript code base, it is possible to help TypeScript to infer the right Type by using JSDoc comments with additional annotation to provide type information.</p> <p>Example:</p> <pre><code>/**\n * Computes the power of a given number\n * @constructor\n * @param {number} base \u2013 The base value of the expression\n * @param {number} exponent \u2013 The exponent value of the expression\n */\nfunction power(base: number, exponent: number) {\n    return Math.pow(base, exponent);\n}\npower(10, 2); // function power(base: number, exponent: number): number\n</code></pre> <p>Full documentation is provided to this link: https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html</p> <p>From version 3.7 it is possible to generate .d.ts type definitions from JavaScript JSDoc syntax. More information can be found here: https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#types","title":"@types","text":"<p>Packages under the @types organization are special package naming conventions used to provide type definitions for existing JavaScript libraries or modules. For instance using:</p> <pre><code>npm install --save-dev @types/lodash\n</code></pre> <p>Will install the type definitions of <code>lodash</code> in your current project.</p> <p>To contribute to the type definitions of @types package, please submit a pull request to https://github.com/DefinitelyTyped/DefinitelyTyped.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#jsx_1","title":"JSX","text":"<p>JSX (JavaScript XML) is an extension to the JavaScript language syntax that allows you to write HTML-like code within your JavaScript or TypeScript files. It is commonly used in React to define the HTML structure.</p> <p>TypeScript extends the capabilities of JSX by providing type checking and static analysis.</p> <p>To use JSX you need to set the <code>jsx</code> compiler option in your <code>tsconfig.json</code> file. Two common configuration options:</p> <ul> <li>\"preserve\": emit .jsx files with the JSX unchanged. This option tells TypeScript to keep the JSX syntax as-is and not transform it during the compilation process. You can use this option if you have a separate tool, like Babel, that handles the transformation.</li> <li>\"react\": enables TypeScript's built-in JSX transformation. React.createElement will be used.</li> </ul> <p>All options are available here: https://www.typescriptlang.org/tsconfig#jsx</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#es6-modules","title":"ES6 Modules","text":"<p>TypeScript does support ES6 (ECMAScript 2015) and many subsequent versions. This means you can use ES6 syntax, such as arrow functions, template literals, classes, modules, destructuring, and more.</p> <p>To enable ES6 features in your project, you can specify the <code>target</code> property in the tsconfig.json.</p> <p>A configuration example:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"es6\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"outDir\": \"dist\"\n  },\n  \"include\": [\"src\"]\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#es7-exponentiation-operator","title":"ES7 exponentiation operator","text":"<p>The exponentiation (**) operator computes the value obtained by raising the first operand to the power of the second operand. It functions similarly to Math.pow(), but with the added capability of accepting BigInts as operands. TypeScript fully supports this operator using as <code>target</code> in your tsconfig.json file <code>es2016</code> or larger version.</p> <pre><code>console.log(2 ** (2 ** 2)); // 16\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#the-for-await-of-statement","title":"The for-await-of Statement","text":"<p>This is a JavaScript feature fully supported in TypeScript which allows you to iterate over asynchronous iterable objects from target version es2018.</p> <pre><code>async function* asyncNumbers(): AsyncIterableIterator&lt;number&gt; {\n    yield Promise.resolve(1);\n    yield Promise.resolve(2);\n    yield Promise.resolve(3);\n}\n\n(async () =&gt; {\n    for await (const num of asyncNumbers()) {\n        console.log(num);\n    }\n})();\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#newtarget","title":"New.target","text":"<p>You can use in TypeScript the <code>new.target</code> meta-property which enables you to determine if a function or constructor was invoked using the new operator. It allows you to detect whether an object was created as a result of a constructor call.</p> <pre><code>class Parent {\n    constructor() {\n        debugger;\n        console.log(new.target); // logs the constructor function used to create an instance\n    }\n}\n\nclass Child extends Parent {\n    constructor() {\n        super();\n    }\n}\n\nconst parentX = new Parent(); // [Function: Parent]\nconst child = new Child(); // [Function: Child]\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#dynamic-import-expressions","title":"Dynamic Import Expressions","text":"<p>It is possible to conditionally load modules or lazy load them on-demand using the ECMAScript proposal for dynamic import which is supported in TypeScript.</p> <p>The syntax for dynamic import expressions in TypeScript is as follows:</p> <pre><code>async function renderWidget() {\n    const container = document.getElementById('widget');\n    if (container !== null) {\n        const widget = await import('./widget'); // dynamic import\n        widget.render(container);\n    }\n}\n\nrenderWidget();\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#tsc-watch","title":"\u201ctsc \u2013watch\u201d","text":"<p>This command starts a TypeScript compiler with --watch parameter, with the ability to automatically recompile TypeScript files whenever they are modified.</p> <pre><code>tsc --watch\n</code></pre> <p>Starting from TypeScript version 4.9, file monitoring primarily relies on file system events, automatically resorting to polling if an event-based watcher cannot be established.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#definite-assignment-assertions","title":"Definite Assignment Assertions (!)","text":"<p>The Definite Assignment Assertions or also called non-null assertion operator tells the TypeScript compiler that a value typed cannot be null or undefined which is a way to override the compiler's analysis and inform it that a variable will be assigned a value before it is used.</p> <pre><code>type Person = {\n    name: string;\n};\n\nconst printName = (person?: Person) =&gt; {\n    console.log(`Name is ${person!.name}`);\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#defaulted-declarations","title":"Defaulted declarations","text":"<p>Defaulted declarations are used when a variable or parameter is assigned a default value. This means that if no value is provided for that variable or parameter, the default value will be used instead.</p> <pre><code>function greet(name: string = 'Anonymous'): void {\n    console.log(`Hello, ${name}!`);\n}\ngreet(); // Hello, Anonymous!\ngreet('John'); // Hello, John!\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#const-assertions","title":"\u201cconst\u201c assertions","text":"<p>Const assertions are a feature that allows you to declare a variable with a more specific literal type based on its initialization value. It is a way to state to the compiler that the value has to be treated as an immutable literal.</p> <pre><code>let arr = [1, 2, 3] as const; // readonly [1, 2, 3]\narr.push(4); // Invalid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#optional-chaining","title":"Optional Chaining","text":"<p>The optional chaining operator ?. works like the regular dot operator (.) for accessing properties or methods. However, it gracefully handles null or undefined values by terminating the expression and returning undefined, instead of throwing an error.</p> <pre><code>type Person = {\n    name: string;\n    age?: number;\n    address?: {\n        street?: string;\n        city?: string;\n    };\n};\n\nconst person: Person = {\n    name: 'John',\n};\n\nconsole.log(person.address?.city); // undefined\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#nullish-coalescing-operator","title":"Nullish coalescing operator (??)","text":"<p>The nullish coalescing operator <code>??</code> returns the right-hand side value if the left-hand side is <code>null</code> or <code>undefined</code>; otherwise, it returns the left-hand side value.</p> <pre><code>const foo = null ?? 'foo';\nconsole.log(foo); // foo\n\nconst baz = 1 ?? 'baz';\nconst baz2 = 0 ?? 'baz';\nconsole.log(baz); // 1\nconsole.log(baz2); // 0\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#template-literal-types","title":"Template Literal Types","text":"<p>Template Literal Types allow to manipulate string value at type level and generate new string types based on existing ones. They are useful to create more expressive and precise types from string-based operations.</p> <pre><code>type Department = 'engineering' | 'hr';\ntype Language = 'english' | 'spanish';\ntype Id = `${Department}-${Language}-id`; // \"engineering-english-id\" | \"engineering-spanish-id\" | \"hr-english-id\" | \"hr-spanish-id\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#function-overloading","title":"Function overloading","text":"<p>Function overloading allows you to define multiple function signatures for the same function name, each with different parameter types and return type. When you call an overloaded function, TypeScript uses the provided arguments to determine the correct function signature:</p> <pre><code>function makeGreeting(name: string): string;\nfunction makeGreeting(names: string[]): string[];\n\nfunction makeGreeting(person: unknown): unknown {\n    if (typeof person === 'string') {\n        return `Hi ${person}!`;\n    } else if (Array.isArray(person)) {\n        return person.map(name =&gt; `Hi, ${name}!`);\n    }\n    throw new Error('Unable to greet');\n}\n\nmakeGreeting('Simon');\nmakeGreeting(['Simone', 'John']);\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#recursive-conditional-types","title":"Recursive Conditional Types","text":"<p>It is possible to define complex type relationships using logic and recursion in TypeScript. Let\u2019s break it down in simple terms:</p> <p>Conditional Types: allows you to define types based on boolean conditions:</p> <pre><code>type CheckNumber&lt;T&gt; = T extends number ? 'Number' : 'Not a number';\ntype A = CheckNumber&lt;123&gt;; // 'Number'\ntype B = CheckNumber&lt;'abc'&gt;; // 'Not a number'\n</code></pre> <p>Recursion: means a type definition that refers to itself within its own definition:</p> <pre><code>type Json = string | number | boolean | null | Json[] | { [key: string]: Json };\n\nconst data: Json = {\n    prop1: true,\n    prop2: 'prop2',\n    prop3: {\n        prop4: [],\n    },\n};\n</code></pre> <p>Recursive Conditional Types combine both conditional logic and recursion. It means that a type definition can depend on itself through conditional logic, creating complex and flexible type relationships.</p> <pre><code>type Flatten&lt;T&gt; = T extends Array&lt;infer U&gt; ? Flatten&lt;U&gt; : T;\n\ntype NestedArray = [1, [2, [3, 4], 5], 6];\ntype FlattenedArray = Flatten&lt;NestedArray&gt;; // 2 | 3 | 4 | 5 | 1 | 6\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#ecmascript-module-support-in-nodejs","title":"ECMAScript Module Support in Node.js","text":"<p>Node.js added support for ECMAScript Modules starting from version 15.3.0, and TypeScript has had ECMAScript Module Support for Node.js since version 4.7. This support can be enabled by using the <code>module</code> property with the value <code>nodenext</code> in the tsconfig.json file. Here's an example:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"module\": \"nodenext\",\n    \"outDir\": \"./lib\",\n    \"declaration\": true\n  }\n}\n</code></pre> <p>Node.js supports two file extensions for modules: <code>.mjs</code> for ES modules and <code>.cjs</code> for CommonJS modules. The equivalent file extensions in TypeScript are <code>.mts</code> for ES modules and <code>.cts</code> for CommonJS modules. When the TypeScript compiler transpiles these files to JavaScript, it will create <code>.mjs</code> and <code>.cjs</code> files.</p> <p>If you want to use ES modules in your project, you can set the <code>type</code> property to \"module\" in your package.json file. This instructs Node.js to treat the project as an ES module project.</p> <p>Additionally, TypeScript also supports type declarations in .d.ts files. These declaration files provide type information for libraries or modules written in TypeScript, allowing other developers to utilize them with TypeScript's type checking and auto-completion features.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#assertion-functions","title":"Assertion Functions","text":"<p>In TypeScript, assertion functions are functions that indicate the verification of a specific condition based on their return value. In their simplest form, an assert function examines a provided predicate and raises an error when the predicate evaluates to false.</p> <pre><code>function isNumber(value: unknown): asserts value is number {\n    if (typeof value !== 'number') {\n        throw new Error('Not a number');\n    }\n}\n</code></pre> <p>Or can be declared as function expression:</p> <pre><code>type AssertIsNumber = (value: unknown) =&gt; asserts value is number;\nconst isNumber: AssertIsNumber = value =&gt; {\n    if (typeof value !== 'number') {\n        throw new Error('Not a number');\n    }\n};\n</code></pre> <p>Assertion functions share similarities with type guards. Type guards were initially introduced to perform runtime checks and ensure the type of a value within a specific scope. Specifically, a type guard is a function that evaluates a type predicate and returns a boolean value indicating whether the predicate is true or false. This differs slightly from assertion functions,where the intention is to throw an error rather than returning false when the predicate is not satisfied.</p> <p>Example of type guard:</p> <pre><code>const isNumber = (value: unknown): value is number =&gt; typeof value === 'number';\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#variadic-tuple-types","title":"Variadic Tuple Types","text":"<p>Variadic Tuple Types are a features introduces in TypeScript version 4.0, let\u2019s start to learn them by revise what is a tuple:</p> <p>A tuple type is an array which has a defined length, and were the type of each element is known:</p> <pre><code>type Student = [string, number];\nconst [name, age]: Student = ['Simone', 20];\n</code></pre> <p>The term \u201cvariadic\u201d means indefinite arity (accept a variable number of arguments).</p> <p>A variadic tuple is a tuple type which has all the property as before but the exact shape is not defined yet:</p> <pre><code>type Bar&lt;T extends unknown[]&gt; = [boolean, ...T, number];\n\ntype A = Bar&lt;[boolean]&gt;; // [boolean, boolean, number]\ntype B = Bar&lt;['a', 'b']&gt;; // [boolean, 'a', 'b', number]\ntype C = Bar&lt;[]&gt;; // [boolean, number]\n</code></pre> <p>In the previous code we can see that the tuple shape is defined by the <code>T</code> generic passed in.</p> <p>Variadic tuples can accept multiple generics make them very flexible:</p> <pre><code>type Bar&lt;T extends unknown[], G extends unknown[]&gt; = [...T, boolean, ...G];\n\ntype A = Bar&lt;[number], [string]&gt;; // [number, boolean, string]\ntype B = Bar&lt;['a', 'b'], [boolean]&gt;; // [\"a\", \"b\", boolean, boolean]\n</code></pre> <p>With the new variadic tuples we can use:</p> <ul> <li>The spreads in tuple type syntax can now be generic, so we can represent higher-order operation on tuples and arrays even when we do not know the actual types we are operating over.</li> <li>The rest elements can occur anywhere in a tuple.</li> </ul> <p>Example:</p> <pre><code>type Items = readonly unknown[];\n\nfunction concat&lt;T extends Items, U extends Items&gt;(\n    arr1: T,\n    arr2: U\n): [...T, ...U] {\n    return [...arr1, ...arr2];\n}\n\nconcat([1, 2, 3], ['4', '5', '6']); // [1, 2, 3, \"4\", \"5\", \"6\"]\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#boxed-types","title":"Boxed types","text":"<p>Boxed types refer to the wrapper objects that are used to represent primitive types as objects. These wrapper objects provide additional functionality and methods that are not available directly on the primitive values.</p> <p>When you access a method like <code>charAt</code> or <code>normalize</code> on a <code>string</code> primitive, JavaScript wraps it in a <code>String</code> object, calls the method, and then throws the object away.</p> <p>Demonstration:</p> <pre><code>const originalNormalize = String.prototype.normalize;\nString.prototype.normalize = function () {\n    console.log(this, typeof this);\n    return originalNormalize.call(this);\n};\nconsole.log('\\u0041'.normalize());\n</code></pre> <p>TypeScript represents this differentiation by providing separate types for the primitives and their corresponding object wrappers:</p> <p>string =&gt; String number =&gt; Number boolean =&gt; Boolean symbol =&gt; Symbol bigint =&gt; BigInt</p> <p>The boxed types are usually not needed. Avoid using boxed types and instead use type for the primitives,  for instance <code>string</code> instead of <code>String</code>.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#key-remapping-in-mapped-types","title":"Key Remapping in Mapped Types","text":"<p>Mapped types allow you to create new types by transforming the properties of an existing type. Using the <code>keyof</code> and <code>in</code> keywords, you can iterate over the properties of a type and define modifications, such as making them optional or readonly. Here an example:</p> <pre><code>type Person = {\n    name: string;\n    age: number;\n    email: string;\n};\n\ntype PartialPerson = {\n    [K in keyof Person]?: Person[K]; // This will make all properties are optional\n};\n\nconst partialPerson: PartialPerson = {\n    name: 'John',\n    age: 30,\n};\n\npartialPerson.email = 'john@example.com';\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#covariance-and-contravariance-in-typescript","title":"Covariance and Contravariance in TypeScript","text":"<p>Covariance and Contravariance are used to describe how relationships work when dealing with inheritance or assignment of types.</p> <p>Covariance means that a type relationship preserves the direction of inheritance or assignment, so if a type A is a subtype of type B, then an array of type A is also considered a subtype of an array of type B. The important thing to note here is that the subtype relationship is maintained this means that Covariance accept subtype but doesn't accept supertype.</p> <p>Contravariance means that a type relationship reverses the direction of inheritance or assignment, so if a type A is a subtype of type B, then an array of type B is considered a subtype of an array of type A. The subtype relationship is reversed this means that Contravariance accept supertype but doesn't accept subtype.</p> <p>Notes: Bivariance means accept both supertype &amp; subtype.</p> <p>Example: Let's say we have a space for all animals and a separate space just for dogs.</p> <p>In Covariance, you can put all the dogs in the animals space because dogs are a type of animal. But you cannot put all the animals in the dog space because there might be other animals mixed in.</p> <p>In Contravariance, you cannot put all the animals in the dogs space because the animals space might contain other animals as well. However, you can put all the dogs in the animal space because all dogs are also animals.</p> <pre><code>// Covariance example\nclass Animal {\n    name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    breed: string;\n    constructor(name: string, breed: string) {\n        super(name);\n        this.breed = breed;\n    }\n}\n\nlet animals: Animal[] = [];\nlet dogs: Dog[] = [];\n\n// Covariance allows assigning subtype (Dog) array to supertype (Animal) array\nanimals = dogs;\ndogs = animals; // Invalid: Type 'Animal[]' is not assignable to type 'Dog[]'\n\n// Contravariance example\ntype Feed&lt;in T&gt; = (animal: T) =&gt; void;\n\nlet feedAnimal: Feed&lt;Animal&gt; = (animal: Animal) =&gt; {\n    console.log(`Animal name: ${animal.name}`);\n};\n\nlet feedDog: Feed&lt;Dog&gt; = (dog: Dog) =&gt; {\n    console.log(`Dog name: ${dog.name}, Breed: ${dog.breed}`);\n};\n\n// Contravariance allows assigning supertype (Animal) callback to subtype (Dog) callback\nfeedDog = feedAnimal;\nfeedAnimal = feedDog; // Invalid: Type 'Feed&lt;Dog&gt;' is not assignable to type 'Feed&lt;Animal&gt;'.\n</code></pre> <p>In TypeScript, type relationships for arrays are covariant, while type relationships for function parameters are contravariant. This means that TypeScript exhibits both covariance and contravariance, depending on the context.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#optional-variance-annotations-for-type-parameters","title":"Optional Variance Annotations for Type Parameters","text":"<p>As of TypeScript 4.7.0, we can use the <code>out</code> and <code>in</code> keywords to be specific about Variance annotation.</p> <p>For Covariant, use the <code>out</code> keyword:</p> <pre><code>type AnimalCallback&lt;out T&gt; = () =&gt; T; // T is Covariant here\n</code></pre> <p>And for Contravariant, use the <code>in</code> keyword:</p> <pre><code>type AnimalCallback&lt;in T&gt; = (value: T) =&gt; void; // T is Contravariance here\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#symbol-and-template-string-pattern-index-signatures","title":"Symbol and Template String Pattern Index Signatures","text":"<p>Symbols are unique identifiers that can be used as property keys in objects to prevent naming conflicts.</p> <p>Template string pattern index signatures allow us to define flexible index signatures using template string patterns. This feature enables us to create objects that can be indexed with specific patterns of string keys, providing more control and specificity when accessing and manipulating properties.</p> <p>TypeScript from version 4.4 allows index signatures for symbols and template string patterns.</p> <pre><code>type Obj = {\n    [sym: symbol]: number;\n};\n\nconst a = Symbol('a');\nconst b = Symbol('b');\n\nlet obj: Obj = {};\n\nobj[b] = 123;\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#the-satisfies-operator","title":"The satisfies Operator","text":"<p>The <code>satisfies</code>  allows you to check if a given type satisfies a specific interface or condition. In other words, it ensures that a type has all the required properties and methods of a specific interface. It is a way to ensure a variable fits into a definition of a type Here is an example:</p> <pre><code>type Columns = 'name' | 'nickName' | 'attributes';\n\ntype User = Record&lt;Columns, string | string[] | undefined&gt;;\n\n// Type Annotation using `User`\nconst user: User = {\n    name: 'Simone',\n    nickName: undefined,\n    attributes: ['dev', 'admin'],\n};\n\n// In the following lines, TypeScript won't be able to infer properly\nuser.attributes?.map(console.log); // Property 'map' does not exist on type 'string | string[]'. Property 'map' does not exist on type 'string'.\nuser.nickName; // string | string[] | undefined\n\n// Type assertion using `as`\nconst user2 = {\n    name: 'Simon',\n    nickName: undefined,\n    attributes: ['dev', 'admin'],\n} as User;\n\n// Here too, TypeScript won't be able to infer properly\nuser2.attributes?.map(console.log); // Property 'map' does not exist on type 'string | string[]'. Property 'map' does not exist on type 'string'.\nuser2.nickName; // string | string[] | undefined\n\n// Using `satisfies` operators we can properly infer the types now\nconst user3 = {\n    name: 'Simon',\n    nickName: undefined,\n    attributes: ['dev', 'admin'],\n} satisfies User;\n\nuser3.attributes?.map(console.log); // TypeScript infers correctly: string[]\nuser3.nickName; // TypeScript infers correctly: undefined\n</code></pre>"},{"location":"programs/flameshot/","title":"Flameshot","text":"<p>https://flameshot.org/key-bindings/</p>"},{"location":"programs/flameshot/#install","title":"Install","text":"<pre><code>sudo apt install flameshot\n</code></pre> <p>You can easily configure your <code>'print'</code> keyboard shortcut to be assigned to Flameshot. Below an example to open Flameshot in GUI mode:</p> <ul> <li>Open <code>Settings \u2192 Devices \u2192 Keyboard \u2192 Shortcuts</code>.</li> <li>Search for <code>'print'</code>, and unbind the screen capture function by selecting it, and clicking <code>backspace</code>.</li> <li>Scroll down and click on the <code>'+'</code>.</li> <li>On <code>'Name'</code>, name it <code>'Flameshot'</code> or <code>'PrintScreen'</code>.</li> <li>Define the command as <code>'flameshot gui'</code>.</li> <li>Select <code>'Define shortcut...'</code> and click your keyboard <code>Prt Sc key</code>.</li> </ul> <p>Now you can use your default keyboard key to launch Flameshot.</p> <p>For defining multiple shortcuts you can repeat the process above, and just change the command.</p> <p>Some examples of commands are:</p> <pre><code># Capture a region using the GUI, and have it automatically saved to your pictures folder when clicking the save button in GUI\nflameshot gui -p /home/user/Pictures\n# Capture the active monitor and save it automatically to your pictures folder\nflameshot screen -p /home/user/Pictures\n# Capture the full desktop (all monitors) and save it automatically to your pictures folder\nflameshot full -p /home/user/Pictures\n</code></pre>"},{"location":"programs/flameshot/#usage","title":"Usage","text":"<p>Example commands: - capture with GUI:</p> <pre><code>flameshot gui\n</code></pre> <p>Capture with GUI with custom save path:</p> <pre><code>flameshot gui -p ~/myStuff/captures\n</code></pre> <p>Open GUI with a delay of 2 seconds:</p> <pre><code>flameshot gui -d 2000\n</code></pre> <p>Fullscreen capture (asking savepath):</p> <pre><code>flameshot full\n</code></pre> <p>Fullscreen capture with custom save path (no GUI) and delayed:</p> <pre><code>flameshot full -p ~/myStuff/captures -d 5000\n</code></pre> <p>Fullscreen capture with custom save path copying to clipboard:</p> <pre><code>flameshot full -c -p ~/myStuff/captures\n</code></pre> <p>In case of doubt choose the first or the second command as shortcut in your favorite desktop environment.</p> <p>A systray icon will be in your system's panel while Flameshot is running. Do a right click on the tray icon and you'll see some menu items to open the configuration window and the information window. Check out the information window to see all the available shortcuts in the graphical capture mode.</p>"},{"location":"programs/flameshot/#cli-configuration","title":"CLI configuration","text":"<p>You can use the graphical menu to configure Flameshot, but alternatively you can use your terminal or scripts to do so.</p> <p>Open the configuration menu:</p> <pre><code>flameshot config\n</code></pre> <p>Show the initial help message in the capture mode:</p> <pre><code>flameshot config --showhelp true\n</code></pre> <p>For more information about the available options use the help flag:</p> <pre><code>flameshot config -h\n</code></pre>"},{"location":"programs/phpmyadmin/","title":"phpmyadmin","text":""},{"location":"programs/phpmyadmin/#config","title":"Config","text":""},{"location":"programs/phpmyadmin/#enable-host-selection","title":"Enable host selection","text":"<p>In the root directory of phpmyadmin open <code>config.inc.php</code> file, if this file don't appear create it and inside define the next variable</p> <pre><code>$cfg['AllowArbitraryServer'] = true;\n</code></pre>"},{"location":"programs/apache/general/","title":"Apache","text":""},{"location":"programs/apache/general/#look-at-first-php-files","title":"Look at first php files","text":"<p>In most cases, you will want to modify the way that Apache serves files when a directory is requested.  After installation if a user requests a directory from the server, Apache will first look for a file called  <code>index.html</code>. We want to tell the web server to prefer PHP files over others, so make Apache look  for an <code>index.php</code> file first.</p> <p>To do this, type this command to open the <code>dir.conf</code> file in a text editor with root privileges:</p> <pre><code>sudo nano /etc/apache2/mods-enabled/dir.conf\n</code></pre> <p>It will look like this:</p> <pre><code>&lt;IfModule mod_dir.c&gt;\n    DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm\n&lt;/IfModule&gt;\n</code></pre> <p>Move the PHP index file (highlighted above) to the first position after the <code>DirectoryIndex</code> specification, like this:</p> <pre><code>&lt;IfModule mod_dir.c&gt;\n    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm\n&lt;/IfModule&gt;\n</code></pre> <p>When you are finished, save and close the file by pressing <code>CTRL+X</code>. Confirm the save by typing <code>Y</code> and then hit <code>ENTER</code> to verify the file save location.</p> <p>After this, restart the Apache web server in order for your changes to be recognized. Do this by typing this:</p> <pre><code>sudo systemctl restart apache2\n</code></pre> <p>You can also check on the status of the apache2 service using systemctl:</p> <pre><code>sudo systemctl status apache2\n</code></pre>"},{"location":"programs/apache/permits/","title":"Permisos de apache sobre el sistema de ficheros","text":"<p>Esto es en modo desarrollo y si tiene 1 solo usuario por lo que no deber\u00eda preocuparse por alguno m\u00e1s, tampoco por www-data.</p> <p>Abrir el fichero de configuraci\u00f3n de apache, el cual mayormente se ubica en:</p> <pre><code>/etc/apache2/apache2.conf\n</code></pre> <p>Buscar las l\u00edneas que definen el usuario y grupo que usa apache para trabajar</p> <pre><code>User ${APACHE_RUN_USER}\nGroup ${APACHE_RUN_GROUP}\n</code></pre> <p>y cambiar por</p> <pre><code>User username\nGroup usergroup\n</code></pre> <p>donde <code>username</code> y <code>usergroup</code> son los correspondietes al usuario admin</p>"},{"location":"technologies/ionic/ionic/","title":"ionic","text":"<p>Ejecutar aplicaci\u00f3n ionic en dispositivo f\u00edsico externo</p> <pre><code>ionic cordova run android -l --external -c\n</code></pre>"},{"location":"todo/films_to_watch/","title":"Films to watch","text":"<ul> <li>[ ] Free Guy 13 December 2021</li> <li>[ ] Ghostbusters 3 Afterlife</li> <li>[ ] Black Widow</li> <li>[ ] The Falcon and The Winter Soldier</li> <li>[ ] Bliss</li> <li>[ ] Loki</li> <li>[ ] CosmoBall</li> <li>[ ] Shadow in the Cloud</li> </ul>"}]}