{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to &lt;dev notes/&gt;","text":"<pre><code>'########::'########:'##::::'##:'##::: ##::'#######::'########:'########::'######::\n ##.... ##: ##.....:: ##:::: ##: ###:: ##:'##.... ##:... ##..:: ##.....::'##... ##:\n ##:::: ##: ##::::::: ##:::: ##: ####: ##: ##:::: ##:::: ##:::: ##::::::: ##:::..::\n ##:::: ##: ######::: ##:::: ##: ## ## ##: ##:::: ##:::: ##:::: ######:::. ######::\n ##:::: ##: ##...::::. ##:: ##:: ##. ####: ##:::: ##:::: ##:::: ##...:::::..... ##:\n ##:::: ##: ##::::::::. ## ##::: ##:. ###: ##:::: ##:::: ##:::: ##:::::::'##::: ##:\n ########:: ########:::. ###:::: ##::. ##:. #######::::: ##:::: ########:. ######::\n........:::........:::::...:::::..::::..:::.......::::::..:::::........:::......:::\n</code></pre>"},{"location":"about/about/","title":"Sobre","text":""},{"location":"about/about/#subtitulo-1","title":"Subtitulo 1","text":""},{"location":"about/about/#subtitulo-2","title":"Subtitulo 2","text":""},{"location":"about/authors/","title":"Authors","text":""},{"location":"about/authors/#autor","title":"Autor","text":""},{"location":"about/mkdocs/","title":"MkDocs basics","text":"<p>For full documentation visit mkdocs.org.</p> <ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs help</code> - Print this help message.</li> </ul>"},{"location":"about/mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"commands/dd/","title":"dd","text":"<p>sudo su -c 'dd if=/dev/zero | pv | dd of=/dev/sdc'</p>"},{"location":"commands/jq/","title":"jq - commandline JSON processor","text":"<p>Usage: <code>jq [options] &lt;jq filter&gt; [file...]</code></p> <p>jq is a tool for processing JSON inputs, applying the given filter to its JSON text inputs and producing the filter's results as JSON on standard output.</p> <p>The simplest filter is ., which is the identity filter, copying jq's input to its output unmodified (except for formatting).</p> <p>For more advanced filters see the jq(1) manpage (\"man jq\") and/or https://stedolan.github.io/jq</p> <p>Some of the options include:</p> <ul> <li><code>-c</code> compact instead of pretty-printed output;</li> <li><code>-n</code> use <code>null</code> as the single input value;</li> <li><code>-e</code> set the exit status code based on the output;</li> <li><code>-s</code> read (slurp) all inputs into an array; apply filter to it;</li> <li><code>-r</code> output raw strings, not JSON texts;</li> <li><code>-R</code> read raw strings, not JSON texts;</li> <li><code>-C</code> colorize JSON;</li> <li><code>-M</code> monochrome (don't colorize JSON);</li> <li><code>-S</code> sort keys of objects on output;</li> <li><code>--tab</code> use tabs for indentation;</li> <li><code>--arg</code> a <code>v</code> set variable <code>$a</code> to value <code>&lt;v&gt;</code>;</li> <li><code>--argjson</code> a <code>v</code> set variable <code>$a</code> to JSON value <code>&lt;v&gt;</code>;</li> <li><code>--slurpfile</code> a <code>f</code> set variable <code>$a</code> to an array of JSON texts read from <code>&lt;f&gt;</code>;</li> </ul>"},{"location":"commands/jq/#examples","title":"Examples","text":"<pre><code>jq -r '.version' #obtener el propiedad version de un json pasado como parametro \n</code></pre>"},{"location":"commands/mktemp/","title":"mktemp","text":"<p>Usage: <code>mktemp [OPTION]... [TEMPLATE]</code></p> <p>Create a temporary file or directory, safely, and print its name. <code>TEMPLATE</code> must contain at least 3 consecutive 'X's in last component. If TEMPLATE is not specified, use <code>tmp.XXXXXXXXXX</code>, and <code>--tmpdir</code> is implied. Files are created <code>u+rw</code>, and directories <code>u+rwx</code>, minus umask restrictions.</p> <ul> <li><code>-d, --directory</code>     create a directory, not a file</li> <li><code>-u, --dry-run</code>       do not create anything; merely print a name (unsafe)</li> <li><code>-q, --quiet</code>         suppress diagnostics about file/dir-creation failure</li> <li><code>--suffix=SUFF</code>   append <code>SUFF</code> to <code>TEMPLATE</code>; <code>SUFF</code> must not contain a slash.                         This option is implied if <code>TEMPLATE</code> does not end in X</li> <li><code>-p DIR, --tmpdir[=DIR]</code>  interpret <code>TEMPLATE</code> relative to <code>DIR</code>; if <code>DIR</code> is not                         specified, use <code>$TMPDIR</code> if set, else <code>/tmp</code>.  With                         this option, <code>TEMPLATE</code> must not be an absolute name;                         unlike with <code>-t</code>, <code>TEMPLATE</code> may contain slashes, but                         mktemp creates only the final component</li> <li><code>-t</code>                  interpret <code>TEMPLATE</code> as a single file name component,                         relative to a directory: <code>$TMPDIR</code>, if set; else the                         directory specified via <code>-p</code>; else <code>/tmp [deprecated]</code></li> <li><code>--help</code>     display this help and exit</li> <li><code>--version</code>  output version information and exit</li> </ul>"},{"location":"commands/mktemp/#example","title":"Example","text":"<p>By default create the directory in the <code>tmp</code> folder and return de path</p> <pre><code>mktemp -d\n/tmp/tmp.CxYovCveam  #output\n</code></pre> <p>If you want open the path in the same sentence</p> <pre><code>cd $(mktemp -d)\n</code></pre> <p>To create in the directory</p> <pre><code>mktemp -p .\n</code></pre>"},{"location":"commands/ncdu/","title":"ncdu","text":"<p>Sirve para saber el espacio ocupado por carpetas</p>"},{"location":"commands/ncdu/#instalar","title":"Instalar","text":"<pre><code>sudo apt install ncdu\n</code></pre>"},{"location":"commands/others/","title":"Others commands","text":""},{"location":"commands/others/#echo","title":"echo","text":"<p>Los comandos en linux tienen c\u00f3digos de retorno por convenci\u00f3n el 0 es que todo se ejecut\u00f3 de manera satisfactoria en caso de no ser 0 cada uno de los comandos tienen su propio significado para el c\u00f3digo de retorno.</p> <p>Una de las formas de saber que retorno un comando es luego de su ejecuci\u00f3n hacer la consulta con <code>echo $?</code> esto devolver\u00e1 el c\u00f3digo en cuesti\u00f3n.</p>"},{"location":"commands/others/#saber-el-nombre-de-tu-usuario","title":"Saber el nombre de tu usuario","text":"<pre><code>whoami\n</code></pre>"},{"location":"commands/pwgen/","title":"pwgen","text":""},{"location":"commands/pwgen/#generador-de-passwords-en-la-terminal","title":"Generador de passwords en la terminal","text":""},{"location":"commands/pwgen/#instalar","title":"Instalar","text":"<pre><code>sudo apt install pwgen\n</code></pre>"},{"location":"commands/pwgen/#optionssyntax","title":"Options/Syntax","text":"<p>Usage: pwgen [ OPTIONS ] [ pw_length ] [ num_pw ]</p> <p>Options supported by pwgen:</p> <ul> <li><code>-c</code> or <code>--capitalize</code> Include at least one capital letter in the password</li> <li><code>-A</code> or <code>--no-capitalize</code> Don't include capital letters in the password</li> <li><code>-n</code> or <code>--numerals</code> Include at least one number in the password</li> <li><code>-0</code> or <code>--no-numerals</code> Don't include numbers in the password</li> <li><code>-y</code> or <code>--symbols</code>   Include at least one special symbol in the password</li> <li><code>-r &lt;chars&gt;</code> or <code>--remove-chars=&lt;chars&gt;</code> Remove characters from the set of characters to generate passwords</li> <li><code>-s</code> or <code>--secure</code> Generate completely random passwords</li> <li><code>-B</code> or <code>--ambiguous</code> Don't include ambiguous characters in the password</li> <li><code>-h</code> or <code>--help</code> Print a help message</li> <li><code>-H</code> or <code>--sha1=path/to/file[#seed]</code> Use sha1 hash of given file as a (not so) random generator</li> <li><code>-C</code> Print the generated passwords in columns</li> <li><code>-1</code> Don't print the generated passwords in columns</li> <li><code>-v</code> or <code>--no-vowels</code> Do not use any vowels so as to avoid accidental nasty words</li> </ul>"},{"location":"commands/seq/","title":"seq","text":"<p>Generar secuencias de n\u00fameros en consola</p> <p>NAME        seq - print a sequence of numbers</p> <p>SYNOPSIS        seq [OPTION]... LAST        seq [OPTION]... FIRST LAST        seq [OPTION]... FIRST INCREMENT LAST</p> <p>DESCRIPTION        Print numbers from FIRST to LAST, in steps of INCREMENT.</p> <pre><code>   Mandatory arguments to long options are mandatory for short options too.\n\n   -f, --format=FORMAT\n          use printf style floating-point FORMAT\n\n   -s, --separator=STRING\n          use STRING to separate numbers (default: \\n)\n\n   -w, --equal-width\n          equalize width by padding with leading zeroes\n\n   --help display this help and exit\n\n   --version\n          output version information and exit\n\n   If  FIRST  or INCREMENT is omitted, it defaults to 1.  That is, an omitted INCREMENT defaults to 1 even when LAST is smaller than FIRST.  The sequence of numbers ends when the sum of the current number and INCRE\u2010\n   MENT would become greater than LAST.  FIRST, INCREMENT, and LAST are interpreted as floating point values.  INCREMENT is usually positive if FIRST is smaller than LAST, and INCREMENT is usually negative if  FIRST\n   is  greater  than LAST.  INCREMENT must not be 0; none of FIRST, INCREMENT and LAST may be NaN.  FORMAT must be suitable for printing one argument of type 'double'; it defaults to %.PRECf if FIRST, INCREMENT, and\n   LAST are all fixed point decimal numbers with maximum precision PREC, and to %g otherwise.\n</code></pre>"},{"location":"commands/tar/","title":"tar","text":"<p>Compres files</p> <p>Usage: <code>tar [OPTION...] [FILE]...</code></p> <ul> <li><code>-c, --create</code> create a new archive</li> <li><code>-u, --update</code> only append files newer than copy in archive</li> <li><code>-x, --extract, --get</code> extract files from an archive</li> <li><code>-f, --file=ARCHIVE</code> use archive file or device <code>ARCHIVE</code></li> <li><code>-a, --auto-compress</code> use archive suffix to determine the compression program</li> <li><code>-z, --gzip, --gunzip, --ungzip</code> filter the archive through gzip</li> <li><code>-v, --verbose</code> verbosely list files processed</li> <li><code>-t, --list</code> list the contents of an archive</li> </ul>"},{"location":"commands/tar/#ejemplos","title":"Ejemplos","text":""},{"location":"commands/tar/#crear-comprimido","title":"Crear comprimido","text":"<pre><code>tar -caf nombreFichero.tar.gz * # con el * comprime todo en el directorio donde se ejecuta el comando, sustituir por nombre de carpeta en case de querer solo una\n</code></pre>"},{"location":"commands/tar/#mostrar-el-contenido-de-un-fichero-comprimido","title":"Mostrar el contenido de un fichero comprimido","text":"<pre><code>tar -taf nombreFichero.tar.gz\n</code></pre>"},{"location":"commands/tar/#extraer-solo-una-de-las-carpetas-o-fichero-dentro-del-comprimido","title":"Extraer solo una de las carpetas o fichero dentro del comprimido","text":"<pre><code>tar -xaf nombreFichero.tar.gz carpetaInterna\n</code></pre>"},{"location":"commands/tmux/","title":"tmux","text":""},{"location":"commands/tmux/#sessions","title":"Sessions","text":"<ul> <li>Start a new session with a name:<ul> <li><code>tmux</code></li> <li><code>tmux new</code></li> <li><code>tmux new -s &lt;name&gt;</code></li> <li><code>:new</code></li> <li><code>:new -s &lt;name&gt;</code></li> </ul> </li> <li>List sessions:<ul> <li><code>tmux ls</code></li> <li><code>tmux list-sessions</code></li> <li><code>:ls</code></li> <li><code>:list-sessions</code></li> </ul> </li> <li>Attach to a session:<ul> <li><code>tmux a</code></li> <li><code>tmux a -t &lt;name&gt;</code></li> <li><code>tmux attach</code></li> <li><code>tmux attach -t &lt;name&gt;</code></li> <li><code>:a</code></li> <li><code>:a -t &lt;name&gt;</code></li> <li><code>:attach</code></li> <li><code>:attach -t &lt;name&gt;</code></li> </ul> </li> <li>Detach from a session:<ul> <li><code>tmux detach</code></li> <li><code>:detach</code></li> <li><code>ctrl-b</code> <code>d</code></li> </ul> </li> <li>Kill a session:<ul> <li><code>tmux kill-session</code></li> <li><code>tmux kill-session -t &lt;name&gt;</code></li> <li><code>:kill-session</code></li> <li><code>:kill-session -t &lt;name&gt;</code></li> </ul> </li> <li>Rename a session:<ul> <li><code>tmux rename-session -t &lt;old&gt; &lt;new&gt;</code></li> <li><code>:rename-session -t &lt;old&gt; &lt;new&gt;</code></li> <li><code>ctrl-b</code> <code>$</code></li> </ul> </li> <li>Kill/delete all session but mysession:<ul> <li><code>tmux kill-session -a -t mysession</code></li> <li><code>:kill-session -a -t mysession</code></li> </ul> </li> <li>Move to next session:<ul> <li><code>ctrl-b</code> <code>(</code></li> </ul> </li> <li>Move to previous session:<ul> <li><code>ctrl-b</code> <code>)</code></li> </ul> </li> <li>Move to last session:<ul> <li><code>ctrl-b</code> <code>l</code></li> </ul> </li> <li>Move to session by name:<ul> <li><code>ctrl-b</code> <code>s</code></li> </ul> </li> <li>Move to session by number:<ul> <li><code>ctrl-b</code> <code>w</code></li> </ul> </li> <li>Session and windows preview:<ul> <li><code>ctrl-b</code> <code>f</code></li> </ul> </li> </ul>"},{"location":"commands/tmux/#windows","title":"Windows","text":"<ul> <li>start a new session with the name mysession and window mywindow<ul> <li><code>tmux new -s mysession -n mywindow</code></li> </ul> </li> <li>Create window<ul> <li><code>ctrl+b</code> <code>c</code></li> </ul> </li> <li>Rename current window<ul> <li><code>Ctrl + b</code> <code>,</code></li> </ul> </li> <li>Close current window<ul> <li><code>Ctrl + b</code> <code>&amp;</code></li> </ul> </li> <li>List windows<ul> <li><code>Ctrl + b</code> <code>w</code></li> </ul> </li> <li>Previous window<ul> <li><code>Ctrl + b</code> <code>p</code></li> </ul> </li> <li>Next window<ul> <li><code>Ctrl + b</code> <code>n</code></li> </ul> </li> <li>Switch/select window by number<ul> <li><code>Ctrl + b</code> <code>0</code> ... <code>9</code></li> </ul> </li> <li>Toggle last active window<ul> <li><code>Ctrl + b</code> <code>l</code></li> </ul> </li> <li>Reorder window, swap window number 2(src) and 1(dst)<ul> <li><code>:swap-window -s 2 -t 1</code></li> </ul> </li> <li>Move current window to the left by one position<ul> <li><code>:swap-window -t -1</code></li> </ul> </li> </ul>"},{"location":"commands/tmux/#panes","title":"Panes","text":"<ul> <li>Toggle last active pane<ul> <li><code>Ctrl + b</code> <code>;</code></li> </ul> </li> <li>Split pane with horizontal layout<ul> <li><code>Ctrl + b</code> <code>%</code></li> </ul> </li> <li>Split pane with vertical layout<ul> <li><code>Ctrl + b</code> <code>\"</code></li> </ul> </li> <li>Move the current pane left<ul> <li><code>Ctrl + b</code> <code>{</code></li> </ul> </li> <li>Move the current pane right<ul> <li><code>Ctrl + b</code> <code>}</code></li> </ul> </li> <li>Switch to pane to the direction<ul> <li><code>Ctrl + b</code> <code>&lt;arrow-key&gt;</code></li> </ul> </li> <li>Show pane numbers<ul> <li><code>Ctrl + b</code> <code>q</code></li> </ul> </li> <li>Switch/select pane by number<ul> <li><code>Ctrl + b</code> <code>q</code> <code>0</code> ... <code>9</code></li> </ul> </li> <li>Toggle pane zoom<ul> <li><code>Ctrl + b</code> <code>z</code></li> </ul> </li> <li>Convert pane into a window<ul> <li><code>Ctrl + b</code> <code>!</code></li> </ul> </li> <li>Resize current pane height(holding second key is optional)<ul> <li><code>Ctrl + b + &lt;arrow-up-key&gt;</code></li> <li><code>Ctrl + b</code> <code>Ctrl + &lt;arrow-up-key&gt;</code></li> <li><code>Ctrl + b + &lt;arrow-down-key&gt;</code></li> <li><code>Ctrl + b</code> <code>Ctrl + &lt;arrow-down-key&gt;</code></li> </ul> </li> <li>Resize current pane width(holding second key is optional)<ul> <li><code>Ctrl + b + &lt;arrow-right-key&gt;</code></li> <li><code>Ctrl + b</code> <code>Ctrl + &lt;arrow-right-key&gt;</code></li> <li><code>Ctrl + b + &lt;arrow-left-key&gt;</code></li> <li><code>Ctrl + b</code> <code>Ctrl + &lt;arrow-left-key&gt;</code></li> </ul> </li> <li>Close current pane<ul> <li><code>Ctrl + b</code> <code>x</code></li> </ul> </li> <li>Toggle synchronize-panes(send command to all panes)<ul> <li><code>:setw synchronize-panes</code></li> </ul> </li> <li>Toggle between pane layouts<ul> <li><code>Ctrl + b</code> <code>Spacebar</code></li> </ul> </li> <li>Switch to next pane<ul> <li><code>Ctrl + b</code> <code>o</code></li> </ul> </li> </ul>"},{"location":"commands/tmux/#copy-mode","title":"Copy Mode","text":"<ul> <li>use vi keys in buffer<ul> <li><code>:setw -g mode-keys vi</code></li> </ul> </li> <li>Enter copy mode<ul> <li><code>Ctrl + b</code> <code>[</code></li> </ul> </li> <li>Enter copy mode and scroll one page up<ul> <li><code>Ctrl + b</code> <code>PgUp</code></li> </ul> </li> <li>Quit mode<ul> <li><code>q</code></li> </ul> </li> <li>Go to top line<ul> <li><code>g</code></li> </ul> </li> <li>Go to bottom line<ul> <li><code>G</code></li> </ul> </li> <li>Scroll down<ul> <li><code>&lt;arrow-down-key&gt;</code></li> </ul> </li> <li>Scroll up<ul> <li><code>&lt;arrow-up-key&gt;</code></li> </ul> </li> <li>Move cursor left<ul> <li><code>h</code></li> </ul> </li> <li>Move cursor down<ul> <li><code>j</code></li> </ul> </li> <li>Move cursor up<ul> <li><code>k</code></li> </ul> </li> <li>Move cursor right<ul> <li><code>l</code></li> </ul> </li> <li>Move cursor forward one word at a time<ul> <li><code>w</code></li> </ul> </li> <li>Move cursor backward one word at a time<ul> <li><code>b</code></li> </ul> </li> <li>Search forward<ul> <li><code>/</code></li> </ul> </li> <li>Search backward<ul> <li><code>?</code></li> </ul> </li> <li>Next keyword occurance<ul> <li><code>n</code></li> </ul> </li> <li>Previous keyword occurance<ul> <li><code>N</code></li> </ul> </li> <li>Start selection<ul> <li><code>Spacebar</code></li> </ul> </li> <li>Clear selection<ul> <li><code>Esc</code></li> </ul> </li> <li>Copy selection<ul> <li><code>Enter</code></li> </ul> </li> <li>Paste contents of buffer_0<ul> <li><code>Ctrl + b</code> <code>]</code></li> </ul> </li> <li>display buffer_0 contents<ul> <li><code>show-buffer</code></li> </ul> </li> <li>Copy entire visible contents of pane to a buffer<ul> <li><code>capture-pane</code></li> </ul> </li> <li>Show all buffers<ul> <li><code>list-buffers</code></li> </ul> </li> <li>Show all buffers and paste selected<ul> <li><code>choose-buffer</code></li> </ul> </li> <li>Save buffer contents to buf.txt<ul> <li><code>save-buffer buf.txt</code></li> </ul> </li> <li>Delete buffer_1<ul> <li><code>delete-buffer -b 1</code></li> </ul> </li> </ul>"},{"location":"commands/tmux/#misc","title":"Misc","text":"<ul> <li>Enter command mode<ul> <li><code>Ctrl + b</code> <code>:</code></li> </ul> </li> <li>Set OPTION for all sessions<ul> <li><code>:set -g OPTION</code></li> </ul> </li> <li>Set OPTION for all windows<ul> <li><code>:setw -g OPTION</code></li> </ul> </li> <li>Enable mouse mode<ul> <li><code>:set mouse on</code></li> </ul> </li> </ul>"},{"location":"commands/tmux/#help","title":"Help","text":"<ul> <li>List key bindings(shortcuts)<ul> <li><code>tmux list-keys</code></li> <li><code>list-keys</code></li> <li><code>Ctrl + b</code> <code>?</code></li> </ul> </li> <li>Show every session, window, pane, etc...<ul> <li><code>tmux info</code></li> </ul> </li> </ul>"},{"location":"commands/uniq/","title":"uniq","text":"<p>Reportar u omitir lineas repetidas</p> <p>Un caso de uso de este comando es cuando queremos obtener las lineas \u00fanicas de un fichero o una entrada.</p> <p>Supongamos que tenemos un fichero de texto <code>ficheroEjemplo.txt</code> y queremos obtener todas las entradas del fichero desechando las duplicadas, el fichero contiene:</p> <pre><code>item 1\nitem 1\nitem 2\nitem 2\nitem 3\nitem 4\nitem 5\nitem 6\n</code></pre> <p>En este caso el item 1 y 2 se repiten varias veces por lo que si ejecutamos:</p> <pre><code>cat ficheroEjemplo.txt | uniq\n</code></pre> <p>Devolver\u00e1</p> <pre><code>item 1\nitem 2\nitem 3\nitem 4\nitem 5\nitem 6\n</code></pre>"},{"location":"commands/uniq/#man-uniq","title":"man uniq","text":""},{"location":"commands/uniq/#name","title":"NAME","text":"<p><code>uniq</code> - report or omit repeated lines</p>"},{"location":"commands/uniq/#synopsis","title":"SYNOPSIS","text":"<p><code>uniq [OPTION]... [INPUT [OUTPUT]]</code></p>"},{"location":"commands/uniq/#description","title":"DESCRIPTION","text":"<p>Filter adjacent matching lines from <code>INPUT</code> (or standard input), writing to <code>OUTPUT</code> (or standard output).</p> <p>With no options, matching lines are merged to the first occurrence.</p> <p>Mandatory arguments to long options are mandatory for short options too.</p> <ul> <li><code>-c, --count</code> prefix lines by the number of occurrences</li> <li><code>-d, --repeated</code> only print duplicate lines, one for each group</li> <li><code>-D</code> print all duplicate lines</li> <li><code>--all-repeated[=METHOD]</code> like <code>-D</code>, but allow separating groups with an empty line; METHOD={none(default),prepend,separate}</li> <li><code>-f, --skip-fields=N</code> avoid comparing the first N fields</li> <li><code>--group[=METHOD]</code> show all items, separating groups with an empty line; METHOD={separate(default),prepend,append,both}</li> <li><code>-i, --ignore-case</code> ignore differences in case when comparing</li> <li><code>-s, --skip-chars=N</code> avoid comparing the first N characters</li> <li><code>-u, --unique</code> only print unique lines</li> <li><code>-z, --zero-terminated</code> line delimiter is NUL, not newline</li> <li><code>-w, --check-chars=N</code> compare no more than N characters in lines</li> <li><code>--help</code> display this help and exit</li> <li><code>--version</code> output version information and exit</li> </ul> <p>A field is a run of blanks (usually spaces and/or TABs), then non-blank characters.  Fields are skipped before chars.</p> <p>Note: <code>uniq</code> does not detect repeated lines unless they are adjacent.  You may want to sort the input first, or use <code>sort -u</code> without <code>uniq</code>.  Also, comparisons honor the rules specified by <code>LC_COLLATE</code>.</p>"},{"location":"commands/grep/directory_word_search/","title":"C\u00f3mo encontrar una cadena o palabra espec\u00edfica en archivos y directorios","text":"<p>El siguiente comando mostrar\u00e1 una lista de todos los archivos que contienen una l\u00ednea con el texto <code>\"check_root\"</code>, buscando de forma recursiva y agresiva el directorio <code>~/bin</code>.</p> <pre><code>grep -Rw ~/bin/ -e 'check_root'\n</code></pre> <p>Donde la opci\u00f3n <code>-R</code> le dice a <code>grep</code> que lea todos los archivos debajo de cada directorio, recursivamente, siguiendo los enlaces simb\u00f3licos solo si est\u00e1n en la l\u00ednea de comando y la opci\u00f3n <code>-w</code> le indica que seleccione solo las l\u00edneas que contienen coincidencias que forman palabras completas, y <code>-e</code> se utiliza para especificar la cadena (patr\u00f3n) a buscar.</p> <p>Debe usar el comando sudo cuando busque en determinados directorios o archivos que requieren permisos de root (a menos que est\u00e9 administrando su sistema con la cuenta de root).</p> <pre><code>sudo grep -Rw / -e 'check_root' \n</code></pre> <p>Para ignorar las distinciones de casos, utilice la opci\u00f3n <code>-i</code> como se muestra:</p> <pre><code>grep -Riw ~/bin/ -e 'check_root'\n</code></pre> <p>Si desea saber la l\u00ednea exacta donde existe la cadena de texto, incluya la opci\u00f3n <code>-n</code>.</p> <pre><code>grep -Rinw ~/bin/ -e 'check_root'\n</code></pre> <p>Suponiendo que hay varios tipos de archivos en un directorio en el que desea buscar, tambi\u00e9n puede especificar el tipo de archivos que se buscar\u00e1n, por su extensi\u00f3n, mediante la opci\u00f3n <code>--include</code>.</p> <p>Este ejemplo le indica a grep que solo mire todos los archivos <code>.sh</code>.</p> <pre><code>grep -Rnw --include=\\*.sh ~/bin/ -e 'check_root'\n</code></pre> <p>Adem\u00e1s, es posible buscar m\u00e1s de un patr\u00f3n, utilizando el siguiente comando.</p> <pre><code>grep -Rinw ~/bin/ -e 'check_root' -e 'netstat'\n</code></pre>"},{"location":"commands/ssh/copy_the_public_key/","title":"Copy the Public Key to Server","text":"<p>Fuente</p> <p>The quickest way to copy your public key to the Ubuntu host is to use a utility called <code>ssh-copy-id</code>. Due to its simplicity, this method is highly recommended if available. If you do not have <code>ssh-copy-id</code> available to you on your client machine, you may use one of the two alternate methods provided in this section (copying via password-based SSH, or manually copying the key).</p>"},{"location":"commands/ssh/copy_the_public_key/#copying-public-key-using-ssh-copy-id","title":"Copying Public Key Using ssh-copy-id","text":"<p>The <code>ssh-copy-id</code> tool is included by default in many operating systems, so you may have it available on your local system. For this method to work, you must already have password-based SSH access to your server.</p> <p>To use the utility, you simply need to specify the remote host that you would like to connect to and the user account that you have password SSH access to. This is the account to which your public SSH key will be copied.</p> <p>The syntax is:</p> <pre><code>ssh-copy-id username@remote_host\n</code></pre> <p>You may see the following message:</p> <pre><code>Output\nThe authenticity of host '203.0.113.1 (203.0.113.1)' can't be established.\nECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.\nAre you sure you want to continue connecting (yes/no)? yes\n</code></pre> <p>This means that your local computer does not recognize the remote host. This will happen the first time you connect to a new host. Type \u201cyes\u201d and press <code>ENTER</code> to continue.</p> <p>Next, the utility will scan your local account for the <code>id_rsa.pub</code> key that we created earlier. When it finds the key, it will prompt you for the password of the remote user\u2019s account:</p> <p>Type in the password (your typing will not be displayed for security purposes) and press <code>ENTER</code>. The utility will connect to the account on the remote host using the password you provided. It will then copy the contents of your <code>~/.ssh/id_rsa.pub</code> key into a file in the remote account\u2019s home <code>~/.ssh</code> directory called <code>authorized_keys</code>.</p> <p>You should see the following output:</p> <pre><code>Output\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh 'username@203.0.113.1'\"\nand check to make sure that only the key(s) you wanted were added.\n</code></pre>"},{"location":"commands/ssh/copy_the_public_key/#copying-public-key-using-ssh","title":"Copying Public Key Using SSH","text":"<p>If you do not have <code>ssh-copy-id</code> available, but you have password-based SSH access to an account on your server, you can upload your keys using a conventional SSH method.</p> <p>We can do this by using the <code>cat</code> command to read the contents of the public SSH key on our local computer and piping that through an SSH connection to the remote server.</p> <p>On the other side, we can make sure that the <code>~/.ssh</code> directory exists and has the correct permissions under the account we\u2019re using.</p> <p>We can then output the content we piped over into a file called <code>authorized_keys</code> within this directory. We\u2019ll use the <code>&gt;&gt;</code> redirect symbol to append the content instead of overwriting it. This will let us add keys without destroying previously added keys.</p> <p>The full command looks like this:</p> <pre><code>cat ~/.ssh/id_rsa.pub | ssh username@remote_host \"mkdir -p ~/.ssh &amp;&amp; touch ~/.ssh/authorized_keys &amp;&amp; chmod -R go= ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"\n</code></pre> <p>You may see the following message:</p> <pre><code>Output\nThe authenticity of host '203.0.113.1 (203.0.113.1)' can't be established.\nECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.\nAre you sure you want to continue connecting (yes/no)? yes\n</code></pre> <p>This means that your local computer does not recognize the remote host. This will happen the first time you connect to a new host. Type \u201cyes\u201d and press <code>ENTER</code> to continue.</p> <p>Afterwards, you should be prompted to enter the remote user account password:</p> <pre><code>Output\nusername@203.0.113.1's password:\n</code></pre> <p>After entering your password, the content of your <code>id_rsa.pub</code> key will be copied to the end of the <code>authorized_keys</code> file of the remote user\u2019s account. Continue on to Step 3 if this was successful.</p>"},{"location":"commands/ssh/copy_the_public_key/#copying-public-key-manually","title":"Copying Public Key Manually","text":"<p>If you do not have password-based SSH access to your server available, you will have to complete the above process manually.</p> <p>We will manually append the content of your <code>id_rsa.pub</code> file to the <code>~/.ssh/authorized_keys</code> file on your remote machine.</p> <p>To display the content of your <code>id_rsa.pub</code> key, type this into your local computer:</p> <pre><code>cat ~/.ssh/id_rsa.pub\n</code></pre> <p>You will see the key\u2019s content, which should look something like this:</p> <pre><code>Output\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqql6MzstZYh1TmWWv11q5O3pISj2ZFl9HgH1JLknLLx44+tXfJ7mIrKNxOOwxIxvcBF8PXSYvobFYEZjGIVCEAjrUzLiIxbyCoxVyle7Q+bqgZ8SeeM8wzytsY+dVGcBxF6N4JS+zVk5eMcV385gG3Y6ON3EG112n6d+SMXY0OEBIcO6x+PnUSGHrSgpBgX7Ks1r7xqFa7heJLLt2wWwkARptX7udSq05paBhcpB0pHtA1Rfz3K2B+ZVIpSDfki9UVKzT8JUmwW6NNzSgxUfQHGwnW7kj4jp4AT0VZk3ADw497M2G/12N0PPB5CnhHf7ovgy6nL1ikrygTKRFmNZISvAcywB9GVqNAVE+ZHDSCuURNsAInVzgYo9xgJDW8wUw2o8U77+xiFxgI5QSZX3Iq7YLMgeksaO4rBJEa54k8m5wEiEE1nUhLuJ0X/vh2xPff6SQ1BL/zkOhvJCACK6Vb15mDOeCSq54Cr7kvS46itMosi/uS66+PujOO+xt/2FWYepz6ZlN70bRly57Q06J+ZJoc9FfBCbCyYH7U/ASsmY095ywPsBo1XQ9PqhnN1/YOorJ068foQDNVpm146mUpILVxmq41Cj55YKHEazXGsdBIbXWhcrRf4G2fJLRcGUr9q8/lERo9oxRm5JFX6TCmj6kmiFqv+Ow9gI0x8GvaQ== demo@test\n</code></pre> <p>Access your remote host using whichever method you have available.</p> <p>Once you have access to your account on the remote server, you should make sure the ~/.ssh directory exists. This command will create the directory if necessary, or do nothing if it already exists:</p> <pre><code>mkdir -p ~/.ssh\n</code></pre> <p>Now, you can create or modify the <code>authorized_keys</code> file within this directory. You can add the contents of your <code>id_rsa.pub</code> file to the end of the <code>authorized_keys</code> file, creating it if necessary, using this command:</p> <pre><code>echo public_key_string &gt;&gt; ~/.ssh/authorized_keys\n</code></pre> <p>In the above command, substitute the <code>public_key_string</code> with the output from the <code>cat ~/.ssh/id_rsa.pub</code> command that you executed on your local system. It should start with <code>ssh-rsa AAAA....</code></p> <p>Finally, we\u2019ll ensure that the <code>~/.ssh</code> directory and <code>authorized_keys</code> file have the appropriate permissions set:</p> <pre><code>chmod -R go= ~/.ssh\n</code></pre> <p>This recursively removes all \u201cgroup\u201d and \u201cother\u201d permissions for the <code>~/.ssh/</code> directory.</p> <p>If you\u2019re using the <code>root</code> account to set up keys for a user account, it\u2019s also important that the <code>~/.ssh</code> directory belongs to the user and not to <code>root</code>:</p> <pre><code>chown -R sammy:sammy ~/.ssh\n</code></pre> <p>In this tutorial our user is named <code>sammy</code> but you should substitute the appropriate username into the above command.</p> <p>We can now attempt passwordless authentication with our Ubuntu server.</p>"},{"location":"commands/ssh/ssh/","title":"ssh","text":""},{"location":"commands/ssh/ssh/#create-ssh-key","title":"Create ssh key","text":"<p>Las herramientas para crear y usar SSH son est\u00e1ndar y est\u00e1n presentes en la mayor\u00eda de las distribuciones de Linux. Con los siguientes comandos, puede generar la key ssh.</p> <ul> <li>Corre: <code>ssh-keygen -t rsa</code>. Para una llave m\u00e1s segura de 4096-bit key, corra: <code>ssh-keygen -t rsa -b 4096</code></li> <li>Al dar enter se preguntar\u00e1 donde quiere guardar la clave que se va a generar, en caso de dar enter guardar\u00e1 la key en el lugar por defecto <code>/home/username/.ssh/id_rsa</code></li> <li>Luego se deber\u00e1 introducir una frase y su confirmaci\u00f3n.</li> <li>Como resultado se informa el lugar donde se guard\u00f3 la llave publica y privada adem\u00e1s del fingerprint.</li> </ul> <p>Nota: en caso de especificar el par\u00e1metro <code>-f ruta</code> se le dice donde quedar\u00e1 la nueva key generada por lo que se omite la pregunta de ubicaci\u00f3n ej: <code>ssh-keygen -t rsa -f /home/username/.ssh/new-key</code></p>"},{"location":"commands/ssh/ssh/#create-alias-for-ssh-command","title":"Create alias for ssh command","text":"<p>Standard ssh client reads the configuration files before any connection:</p> <pre><code>/etc/ssh/ssh_config   # system-wide\n~/.ssh/config         # per user\n</code></pre> <p>with the latter with more priority.</p> <p>Ideally you want to configure the systemwide config with parameters that please all users and the config in your homedir with options specific to you. Here's an expample of <code>~/.ssh/config</code></p> <pre><code>Host server1\n  HostName 10.12.152.200\n  User jonh\n\nHost server2\n  HostName 25.74.84.203\n  User root\n  Port 2022\n</code></pre> <p>Then to connect to server1:</p> <pre><code>ssh server1\n</code></pre> <p>Note: <code>~/.ssh/config</code> must have read/write permissions for the user, and not be accessible by others (<code>chmod 600 ~/.ssh/config</code>)</p> <p>All possible options are documented in ssh_config manual pages: man ssh_config</p>"},{"location":"commands/ssh/ssh/#use-multiple-ssh-private-keys-on-one-client","title":"Use multiple SSH private keys on one client","text":"<p>Suppose you have 2 keys</p> <pre><code>/home/username/.ssh/id_rsa #default key\n/home/username/some_directory/other-ssh-key\n</code></pre> <p>One way is using the -i param followed by the route to the key, example <code>ssh -i /home/username/some_directory/other-ssh-key hostuser@servername</code></p> <p>Other way is configure the alias on the ssh config file (default location) <code>/home/username/.ssh/config</code> the param <code>IdentityFile</code>, example:</p> <pre><code>Host serverAlias\n    HostName 12.25.36.175\n    IdentityFile ~/some_directory/other-ssh-key  # different private key to the default\n    User remoteusername\n\nHost serverAlias2\n    HostName server.organism.org\n    IdentityFile ~/.ssh/id_rsa  # default private key \n    User username\n</code></pre>"},{"location":"database/mongodb/","title":"MongoDB Shell Commands","text":"<ul> <li>Show databases</li> </ul> <pre><code>show dbs\n</code></pre> <p>This command will show all the databases in your MongoDB server.</p> <ul> <li>Use database</li> </ul> <pre><code>use &lt;database-name&gt;\n</code></pre> <p>This command will switch to the database you want to use.</p> <ul> <li>Show collections</li> </ul> <pre><code>show collections\n</code></pre> <p>This command will show all the collections in the database you are using.</p> <ul> <li>Drop database</li> </ul> <pre><code>db.dropDatabase()\n</code></pre> <p>This command will drop the database you are using.</p> <ul> <li>Create collection</li> </ul> <pre><code>db.createCollection(\"&lt;collection_name&gt;\")\n</code></pre> <p>This command will create a collection in the database you are using.</p> <ul> <li>Insert a Document</li> </ul> <pre><code>db.&lt;collection_name&gt;.insertOne({\n    &lt;key&gt;: &lt;value&gt;,\n    &lt;key&gt;: &lt;value&gt;,\n    ...\n})\n</code></pre> <p>This command will insert a document in the collection you are using.</p> <ul> <li>Insert Multiple Documents</li> </ul> <pre><code>db.&lt;collection_name&gt;.insertMany([\n    {\n        &lt;key&gt;: &lt;value&gt;,\n        &lt;key&gt;: &lt;value&gt;,\n        ...\n    },\n    {\n        &lt;key&gt;: &lt;value&gt;,\n        &lt;key&gt;: &lt;value&gt;,\n        ...\n    },\n    ...\n])\n</code></pre> <p>This command will insert multiple documents in the collection you are using.</p> <ul> <li>Find Documents</li> </ul> <pre><code>db.&lt;collection_name&gt;.find()\n</code></pre> <p>This command will find all the documents in the collection you are using.</p> <ul> <li>Find Documents with Query</li> </ul> <pre><code>db.&lt;collection_name&gt;.find({\n    &lt;key&gt;: &lt;value&gt;\n})\n</code></pre> <p>This command will find all the documents in the collection you are using that match the query.</p> <ul> <li>Count Documents</li> </ul> <pre><code>db.&lt;collection_name&gt;.find({\n    &lt;key&gt;: &lt;value&gt;\n    }).count()\n</code></pre> <p>This command will count all the documents in the collection you are using that match the query.</p> <ul> <li>Limit Documents</li> </ul> <pre><code>db.&lt;collection_name&gt;.find().limit(&lt;number&gt;)\n</code></pre> <p>This command will limit the number of documents returned by the find command.</p> <ul> <li>forEach()</li> </ul> <pre><code>db.&lt;collection_name&gt;.find().forEach(function(doc) {\n    print(\"Key: \" + doc.&lt;key&gt; + \" Value: \" + doc.&lt;value&gt;);\n})\n</code></pre> <p>This command will iterate through all the documents in the collection you are using and print the key and value of each document.</p> <ul> <li>Find One Document</li> </ul> <pre><code>db.&lt;collection_name&gt;.findOne({\n    &lt;key&gt;: &lt;value&gt;\n})\n</code></pre> <p>This command will find the first document in the collection you are using that matches the query.</p> <ul> <li>Update a Document</li> </ul> <pre><code>db.&lt;collection_name&gt;.updateOne({\n    &lt;key&gt;: &lt;value&gt;\n}, {\n    $set: {\n        &lt;key&gt;: &lt;value&gt;\n    }\n})\n</code></pre> <p>This command will update the first document in the collection you are using that matches the query. $set is used to update the document.</p> <ul> <li>Increment a Document</li> </ul> <pre><code>db.&lt;collection_name&gt;.updateOne({\n    &lt;key&gt;: &lt;value&gt;\n}, {\n    $inc: {\n        &lt;key&gt;: &lt;value&gt;\n    }\n})\n</code></pre> <p>This command will increment the value of the key in the first document in the collection you are using that matches the query. $inc is used to increment the value of the key.</p> <ul> <li>Delete a Document</li> </ul> <pre><code>db.&lt;collection_name&gt;.deleteOne({\n    &lt;key&gt;: &lt;value&gt;\n})\n</code></pre> <p>This command will delete the first document in the collection you are using that matches the query.</p> <ul> <li>Add new field to a Document</li> </ul> <pre><code>db.&lt;collection_name&gt;.updateOne({\n    &lt;key&gt;: &lt;value&gt;\n}, {\n    $set: {\n        &lt;new_key&gt;: &lt;new_value&gt;\n    }\n})\n</code></pre> <p>This command will add a new field to the first document in the collection you are using that matches the query.</p> <ul> <li>Greater than</li> </ul> <pre><code>db.&lt;collection_name&gt;.find({\n    &lt;key&gt;: {\n        $gt: &lt;value&gt;\n    }\n})\n</code></pre> <p>This command will find all the documents in the collection you are using that have a key greater than the value.</p> <ul> <li>Greater than or equal to</li> </ul> <pre><code>db.&lt;collection_name&gt;.find({\n    &lt;key&gt;: {\n        $gte: &lt;value&gt;\n    }\n})\n</code></pre> <p>This command will find all the documents in the collection you are using that have a key greater than or equal to the value.</p> <ul> <li>Less than</li> </ul> <pre><code>db.&lt;collection_name&gt;.find({\n    &lt;key&gt;: {\n        $lt: &lt;value&gt;\n    }\n})\n</code></pre> <p>This command will find all the documents in the collection you are using that have a key less than the value.</p> <ul> <li>Less than or equal to</li> </ul> <pre><code>db.&lt;collection_name&gt;.find({\n    &lt;key&gt;: {\n        $lte: &lt;value&gt;\n    }\n})\n</code></pre> <p>This command will find all the documents in the collection you are using that have a key less than or equal to the value.</p> <ul> <li>Not equal to</li> </ul> <pre><code>db.&lt;collection_name&gt;.find({\n    &lt;key&gt;: {\n        $ne: &lt;value&gt;\n    }\n})\n</code></pre> <p>This command will find all the documents in the collection you are using that have a key not equal to the value.</p> <ul> <li>And</li> </ul> <pre><code>db.&lt;collection_name&gt;.find({\n    $and: [\n        {\n            &lt;key&gt;: &lt;value&gt;\n        },\n        {\n            &lt;key&gt;: &lt;value&gt;\n        }\n    ]\n})\n</code></pre> <p>This command will find all the documents in the collection you are using that match the query.</p> <ul> <li>Or</li> </ul> <pre><code>db.&lt;collection_name&gt;.find({\n    $or: [\n        {\n            &lt;key&gt;: &lt;value&gt;\n        },\n        {\n            &lt;key&gt;: &lt;value&gt;\n        }\n    ]\n})\n</code></pre> <p>This command will find all the documents in the collection you are using that match the query.</p> <ul> <li>Sort</li> </ul> <pre><code>db.&lt;collection_name&gt;.find().sort({\n    &lt;key&gt;: &lt;value&gt;\n})\n</code></pre> <p>This command will sort all the documents in the collection you are using by the key.</p> <ul> <li>Sort Descending</li> </ul> <pre><code>db.&lt;collection_name&gt;.find().sort({\n    &lt;key&gt;: -1\n})\n</code></pre> <p>This command will sort all the documents in the collection you are using by the key in descending order.</p> <ul> <li>Drop Collection</li> </ul> <pre><code>db.&lt;collection_name&gt;.drop()\n</code></pre> <p>This command will drop the collection you are using.</p>"},{"location":"database/mysql/","title":"MySql","text":""},{"location":"database/mysql/#habilitar-el-acceso-a-mysql-con-el-usuario-root","title":"Habilitar el acceso a mysql con el usuario root","text":"<p>Entrar en la terminal y conecctarse a mysql mediante el comando</p> <pre><code>sudo -u mysql\n</code></pre> <p>Luego ejecutar los siguientes comandos:</p> <pre><code>use mysql;\n\nupdate user set plugin='mysql_native_password' where user='root';\n\nflush privileges;\n</code></pre>"},{"location":"database/mysql/#permitir-en-el-phpmyadmin-entrar-sin-password","title":"Permitir en el phpmyadmin entrar sin password","text":"<pre><code>// Ubicacion del fichero en el sistema (Ubuntu)\n/etc/phpyadmin/config.inc.php\n\n$cfg['Servers'][$i]['AllowNoPassword'] = TRUE;\n</code></pre> <p>Se descomenta en las 2 l\u00edneas que aparece y luego para que los cambios tengan efecto se debe reiniciar el apache</p>"},{"location":"database/mysql/#cambiar-la-collations-a-todas-las-tablas","title":"Cambiar la collations a todas las tablas","text":"<p>Cambiar dbase por el nombre de la bd luego ejecutar los script que da la consulta como resultado</p> <pre><code>SELECT CONCAT('ALTER TABLE `', \n        tbl.`TABLE_SCHEMA`, '`.`', \n        tbl.`TABLE_NAME`, \n        '` CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;') \nFROM `information_schema`.`TABLES` tbl \nWHERE tbl.`TABLE_SCHEMA` = 'dbase';\n</code></pre>"},{"location":"database/sql_server/","title":"SQL Server","text":""},{"location":"database/sql_server/#t-sql-listar-todos-los-procedimientos-almacenados","title":"T-SQL: Listar todos los Procedimientos Almacenados","text":"<pre><code>SELECT ROUTINE_NAME \nFROM INFORMATION_SCHEMA.ROUTINES \nWHERE ROUTINE_TYPE = 'PROCEDURE'\nORDER BY ROUTINE_NAME \n</code></pre>"},{"location":"database/sql_server/#desencriptando-procedimientos-almacenados","title":"Desencriptando Procedimientos almacenados","text":"<p>Para desencriptar procedimientos almacenados debemos hacer lo siguiente:</p> <p>Si tenemos un procedimiento encriptado como el siguiente:</p> <pre><code>CREATE PROCEDURE desencriptame\nWITH ENCRYPTION\nAS\nPRINT 'desencriptame porfavor'\nGO\n</code></pre> <p>y si luego quiesieramos visualizar el texto de este procedimiento nos apareceria lo siguiente:</p> <pre><code>exec sp_helptext desencriptame\n\nmensaje: Los comentarios de objeto han sido cifrados.\n</code></pre> <p>Para ver el c\u00f3digo desencriptado hagamos lo siguiente. Vamos a crear un procedimiento que desencripte esto. este procedimiento se llamar\u00e1 <code>DECRYPTSP2K</code> y su c\u00f3digo es el siguiente: compilenlo:</p> <pre><code>CREATE PROCEDURE [DBO].[DECRYPTSP2K](\n@objName VARCHAR(50))\nAS\nDECLARE @a NVARCHAR(4000),\n@b NVARCHAR(4000),\n@c NVARCHAR(4000),\n@d NVARCHAR(4000),\n@i INT,\n@t BIGINT\n--get encrypted data\nSET @a = (SELECT CTEXT\nFROM SYSCOMMENTS\nWHERE ID = OBJECT_ID(@objName))\nSET @b = 'ALTER PROCEDURE ' + @objName + ' WITH ENCRYPTION AS ' +\n\nREPLICATE('-',4000 - 62)\n\nEXECUTE( @b)\n--get encrypted bogus SP\nSET @c = (SELECT CTEXT\nFROM SYSCOMMENTS\nWHERE ID = OBJECT_ID(@objName))\nSET @b = 'CREATE PROCEDURE ' + @objName + ' WITH ENCRYPTION AS ' +\n\nREPLICATE('-',4000 - 62)\n--start counter\nSET @i = 1\n\n--fill temporary variable\n\nSET @d = REPLICATE(N'A',(DATALENGTH(@a) / 2))\n\n--loop\n\nWHILE @i &lt;= DATALENGTH(@a) / 2\n\nBEGIN\n\n--xor original+bogus+bogus encrypted\n\nSET @d = STUFF(@d,@i,1,NCHAR(UNICODE(SUBSTRING(@a,@i,1)) ^ (UNICODE(SUBSTRING(@b,@i,1)) ^ UNICODE(SUBSTRING(@c,@i,1)))))\n\nSET @i = @i + 1\n\nEND\n\n--drop original SP\n\nEXECUTE( 'drop PROCEDURE ' + @objName)\n\n--remove encryption\n\n--try to preserve case\n\nSET @d = REPLACE((@d),'WITH ENCRYPTION','')\n\nSET @d = REPLACE((@d),'With Encryption','')\n\nSET @d = REPLACE((@d),'with encryption','')\n\nIF CHARINDEX('WITH ENCRYPTION',UPPER(@d)) &gt; 0\n\nSET @d = REPLACE(UPPER(@d),'WITH ENCRYPTION','')\n\n--replace SP\n\nEXECUTE( @d)\n</code></pre> <p>Luego ejecutenlo de la siguiente manera:</p> <pre><code>exec DECRYPTSP2K 'desencriptame'\ngo\n</code></pre> <p>Luego vuelvan a ejecutar el sp_helptext y obtendr\u00e1n el c\u00f3digo desencriptado:</p> <pre><code>exec sp_helptext desencriptame\nmensaje:\nText\nCREATE PROCEDURE desencriptame\nAS\nPRINT 'desencriptame porfavor'\n</code></pre>"},{"location":"docker/docker_install/","title":"Instalar Docker","text":"<p>Config file <code>/lib/systemd/system/docker.service</code></p>"},{"location":"docker/docker_install/#centos","title":"CentOS","text":"<p>Utilidades</p> <pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre> <p>Agregar el repo de docker</p> <pre><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre> <p>Instalar docker</p> <pre><code>sudo yum install docker-ce -y\n</code></pre> <p>Iniciar el servicio</p> <pre><code>sudo systemctl start docker\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_install/#fedoras","title":"Fedoras","text":"<p>La instalaci\u00f3n es igual que en CentOS, solo deben modificar la url del repo, porque los pasos son id\u00e9nticos</p> <p>Utilidades</p> <pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre> <p>Agregar el repo de docker</p> <pre><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo\n</code></pre> <p>Instalar docker</p> <pre><code>sudo yum install docker-ce -y\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_install/#ubuntu","title":"Ubuntu","text":"<p>Actualiza los repos</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instala utilidades</p> <pre><code>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y\n</code></pre> <p>Agregar el gpg </p> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n</code></pre> <p>Agregar el repo</p> <pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n</code></pre> <p>Actualizar de nuevo</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instalar docker</p> <pre><code>sudo apt-get install docker-ce\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_install/#debian","title":"Debian","text":"<p>Actualiza los repos</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instala utilidades</p> <pre><code>sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y\n</code></pre> <p>Agregar el gpg</p> <pre><code>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -\n</code></pre> <p>Agregar el repo</p> <pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\"\n</code></pre> <p>Actualizar de nuevo</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instalar docker</p> <pre><code>sudo apt-get install docker-ce\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_notes/","title":"Notas","text":""},{"location":"docker/docker_notes/#hacer-cat-a-fichero-dentro-de-contenedor","title":"Hacer cat a fichero dentro de contenedor","text":"<p>Esto es util para cuando hace falta el contenido de un fichero dentro del container por ejemplo luego de una instalacion de jenkins </p> <pre><code>docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n</code></pre> <p>Descargar una imagen oficial</p> <pre><code>-docker pull &lt;nombreImagen&gt;:&lt;tag&gt;\n</code></pre> <p>Mostrar contenedores corriendo (<code>-a</code> los lista todos)</p> <pre><code>-docker ps\n</code></pre> <p>Mostrar la historia de las capas de una imagen <code>--no-trunc</code> no trunca la descripcion de salida</p> <pre><code>-docker history -H &lt;nombreImagen&gt; --no-trunc\n</code></pre> <p>Construir imagen de dockerfile <code>tag</code> no es requerido</p> <pre><code>-docker build -t &lt;nombreimagen&gt;:&lt;tag&gt; .\n</code></pre> <p>especificar un dockerfile con distinto nombre se suma la bandera <code>-f &lt;nombrefichero&gt;</code></p> <p>Ver las imagenes que tienes en la pc</p> <pre><code>-docker images\n</code></pre> <p>Para filtrar imagenes dangling</p> <pre><code>-docker images -f dangling=true\n</code></pre> <p>Eliminar imagenes</p> <pre><code>-docker rmi (&lt;id&gt; || &lt;nombreImagen&gt;:&lt;tag&gt;)\n</code></pre> <p>Eliminar todas las imagenes dangling</p> <pre><code>-docker images -f dangling=true -q | xargs docker rmi\n</code></pre> <p>Correr container en base a una imagen</p> <ul> <li><code>-p &lt;puertoMiMaquina&gt;:&lt;puertoContenedor&gt;</code> mapea el puerto del container al host</li> <li><code>-d</code> correr el contenedor en segundo plano</li> <li><code>-t</code> terminal</li> <li><code>-i</code> interactive</li> <li><code>--name &lt;nombreContainer&gt;</code> definir nombre al contenedor</li> <li><code>-e \"&lt;nombreVariableEntorno&gt;=&lt;valor&gt;\"</code>  definir variable de entorno</li> <li><code>-m | --memory \"xxxmb\" | \"xxxgb\"</code> limitar la memoria que tendra como limite el contenedor</li> <li><code>-cpuset-cpus 0-3</code> cantidad de cpu que podra usar el contenerdor ej: si son 2 sera 0-1</li> </ul> <pre><code>-docker run -d -p 80:80 &lt;nombreImagen&gt;:&lt;tag&gt; \n</code></pre> <p>Borrar contenedor corriendo <code>-f</code> fuerza el borrado</p> <pre><code>-docker rm -fv &lt;nombreContenedor&gt;\n</code></pre> <p>Borrar todos los contenedores</p> <pre><code>-docker rm -fv $(docker ps -aq)\n</code></pre> <p>Detener un contenedor</p> <pre><code>-docker stop (&lt;nombreContainer&gt; || &lt;idContainer&gt;)\n</code></pre> <p>Iniciar contenedor</p> <pre><code>-docker start (&lt;nombreContainer&gt; || &lt;idContainer&gt;)\n</code></pre> <p>Reiniciar contenedor</p> <pre><code>-docker restart (&lt;nombreContainer&gt; || &lt;idContainer&gt;)\n</code></pre> <p>Cambiar nombre a un container corriendo</p> <pre><code>-docker rename &lt;nombreViejo&gt; &lt;nombreNuevo&gt;\n</code></pre> <p>Entrar a un container</p> <ul> <li><code>-t</code> terminal</li> <li><code>-i</code> interactivo</li> <li><code>-u root</code> para entrar como otro usuario en este caso root</li> </ul> <pre><code>-docker exec -ti (&lt;nombreContainer&gt; || &lt;idContainer&gt;) bash\n</code></pre> <p>Ver detalles de contendor corriendo</p> <pre><code>-docker inspect &lt;nombreContainer&gt;\n</code></pre> <p>Saber cuantos recursos esta usando un contenedor</p> <pre><code>-docker stats &lt;nombreContainer&gt;\n</code></pre> <p>Copiar ficheros dentro de un contenedor</p> <pre><code>-docker cp fichero &lt;container&gt;:&lt;ruta&gt;\n</code></pre> <p>Copiar ficheros de un contenedor al host</p> <pre><code>-docker cp &lt;container&gt;:&lt;ruta&gt; &lt;destino&gt;\n</code></pre> <p>Para sobreescribir el CMD de una imagen se pasa el comando luego del nombre de la imagen al crear un contenerdor</p> <pre><code>-docker run -d -p 8080:8080 centos python -m SimpleHTTPServer 8080\n</code></pre> <p>Listas volumenes</p> <pre><code>-docker volume ls\n</code></pre> <p>Crear Volumen</p> <pre><code>-docker volume create &lt;nombre&gt;\n</code></pre> <p>Borrar volumen</p> <pre><code>-docker volume -rm &lt;nombre&gt;\n</code></pre> <p>Listar volumenes dangling</p> <pre><code>-docker volume ls -f dangling=true\n</code></pre> <p>Eliminar volumenes dangling</p> <pre><code>-docker volume ls -f dangling=true -q | xargs docker volume rm\n</code></pre> <p>Ejecutar comando desde fuera del container</p> <pre><code>-docker exec &lt;nombreContainer&gt; bash -c \"&lt;comando a ejecutar&gt;\"\n</code></pre>"},{"location":"docker/docker_notes/#redes","title":"Redes","text":"<p>Listar las redes de docker</p> <pre><code>-docker network ls\n</code></pre> <p>Inspeccionar la red (bridge) network por defecto de docker</p> <pre><code>-docker network inspect bridge\n</code></pre> <p>Crear red en docker</p> <pre><code>-docker network create &lt;nombre&gt;\n</code></pre> <p>Definir propiedades ej</p> <pre><code>-d # driver por defecto bridge\n-subnet 172.142.10.0/24 \n--gateway 172.124.10.1\n</code></pre> <p>Crear contenedor en una red distinta a la por defecto</p> <pre><code>-dcoker run --network &lt;nombreRed&gt; -d --name &lt;nombreContenedor&gt; &lt;nombreImagen&gt;\n</code></pre> <p>Conectar contenedores en distintas redes</p> <pre><code>-docker network conect &lt;nombreRed&gt; &lt;nombreContenedorOtraRed&gt;\n</code></pre> <p>Esto le poner al <code>&lt;nombreContenedorOtraRed&gt;</code> otra interfaz de red conectada a <code>&lt;nombreRed&gt;</code></p> <p>Desconectar contenedor de una red</p> <pre><code>-docker network disconnect &lt;nombreRed&gt; &lt;nombreContenedor&gt;\n</code></pre> <p>Eliminar redes, si da error es porque tiene contenedores conectados</p> <pre><code>-docker network rm &lt;nombreRed&gt;\n</code></pre> <p>Asignar ip a contenedor</p> <pre><code>-docker run --network &lt;nombreRed&gt; --ip &lt;ip&gt;  -d --name &lt;nombreContainer&gt; &lt;imagen&gt;\n</code></pre>"},{"location":"docker/docker_notes/#salvar-en-fichero-una-imagen","title":"Salvar en fichero una imagen","text":"<p>Util cuando se quiere compartir una imagen sin depender de docker hub o un repositorio alojado en la nube, se comprime la imagen y se comparte como un fichero</p> <pre><code>docker save myusername/myproject:latest | gzip -c &gt; myproject_img_bak20141103.tgz\n</code></pre> <p>Forma de cargarla en la pc destino </p> <pre><code>gunzip -c myproject_img_bak20141103.tgz | docker load\n</code></pre>"},{"location":"docker/docker_notes/#inspect-a-docker-images-content-without-starting-a-container","title":"Inspect a Docker Image's Content Without Starting a Container","text":"<p>Docker images can bundle arbitrary binaries and libraries into a single blob of data. Inspecting what's actually inside an image helps you assess its suitability and identify any security hazards.</p> <p>The easiest way to explore an image's content involves starting a container, getting a shell session, and then using regular terminal commands like <code>ls</code> and <code>cd</code> to view its directory structure from within. This isn't ideal in security-critical environments though - creating a container with an unknown image could expose you to a malicious entrypoint script.</p> <p>Here are techniques you can use to inspect an image's files without starting a container.</p>"},{"location":"docker/docker_notes/#creating-a-container-without-starting-it","title":"Creating a Container Without Starting It","text":"<p><code>docker create</code> is a lesser-known counterpart to docker run. It creates a new container atop a given image without starting it. You could launch it later on with the docker start command.</p> <p>Creating a new container isn't dangerous as it'll stay inert until it's run. You can roughly liken it to defining the config settings for a VM which you don't use. Even if it's set to boot from a tainted operating system ISO, you're not going to cause any damage to your environment.</p> <p><code>docker create --name suspect-container suspect-image:latest</code></p> <p>The command above creates a new container called suspect-container that will be based on the suspect-image:latest image.</p>"},{"location":"docker/docker_notes/#exporting-the-containers-filesystem","title":"Exporting the Container's Filesystem","text":"<p>Now you've got a valid but stopped container, you can export its filesystem using the docker export command. As the container's never been started, you can be sure the export accurately represents the filesystem defined by your image's layers.</p> <p><code>docker export suspect-container &gt; suspect-container.tar</code></p> <p>You'll end up with a tar archive in your working directory that contains everything inside your image. Open or extract this archive using your favorite software to browse the image's directories and list and view files.</p> <p>If you don't need to save or open the archive, instead preferring to get the file list in your terminal, modify the tar command:</p> <p><code>docker export suspect-container | tar t &gt; suspect-container-files.txt</code></p> <p><code>tar t</code> lists the contents of the input archive. You'll end up with a list of everything in your image inside <code>suspect-container-files.txt</code>.</p>"},{"location":"docker/docker_notes/#using-docker-image-save","title":"Using \"docker image save\"","text":"<p>A variation on this technique is using docker image save. This command directly saves an image's data to a tar archive.</p> <p><code>docker image save suspect-image:latest &gt; suspect-image.tar</code></p> <p>This method produces an archive that's focused on the image, not containers created from it. The tar will include a manifest.json file, describing the image's layers, and a set of directories containing the content of all the individual layers.</p> <p>This is helpful when you're evaluating each layer's role in building the image. However, creating and exporting a stopped container is a more accessible way to browse the image's final filesystem.</p>"},{"location":"docker/docker_notes/#listing-layers-with-docker-image-history","title":"Listing Layers With \"docker image history\"","text":"<p>Another way of inspecting an image's content is to view its layer list with the docker image history command.</p> <p><code>docker image history suspect-image:latest</code></p> <p>This exposes the Dockerfile instructions that composed the image's layers. It won't let you see individual files and directories in the image's filesystem but can more be effective at highlighting suspect behavior.</p> <p>Each line in the command's output represents a new layer in the image. The \"CREATED BY\" column shows the Dockerfile instruction that created the layer.</p> <p>Scanning the layer list helps you quickly identify suspicious actions that could indicate you're using a malicious image. Look for unknown binaries in RUN instructions, unexpected environment variable changes, and suspicious CMD and ENTRYPOINT statements.</p> <p>The latter two layers are arguably the most important to assess when inspecting an image's history. They tell you exactly what will launch when you docker run or docker start a container. If either instruction looks suspicious or unfamiliar, consider using the techniques above to fully inspect the referenced binaries or scripts.</p> <p>Accessing an image's filesystem provides a very granular view of its contents where malicious content can easily go unnoticed, even after manual inspection. The layer list exposed by docker image history can't help you find disguised filesystem items but is more effective at surfacing blatantly malicious operations such as furtive spyware downloads or environment variable overrides.</p>"},{"location":"docker/docker_notes_2/","title":"Notas 2","text":""},{"location":"docker/docker_notes_2/#notas","title":"Notas","text":""},{"location":"docker/docker_notes_2/#espacio-usado-por-docker","title":"Espacio usado por docker","text":"<p><code>docker system df</code></p> <p>para liberar espacio usar <code>docker system prune --all</code> borra los siguientes datos</p> <ul> <li>all stopped containers</li> <li>all networks not used by at least one container</li> <li>all images without at least one container associated to them</li> <li>all build cache</li> </ul>"},{"location":"docker/docker_notes_2/#conocer-sobre-los-recursos-utilizados-por-los-contenedores","title":"Conocer sobre los recursos utilizados por los contenedores","text":"<p><code>docker stats</code></p>"},{"location":"ghost_docs/ok/","title":"Gosth","text":"<p>asdasdasd</p>"},{"location":"git/alias/","title":"Alias","text":"<p>Git aliases are shortcuts or custom commands that you can create to make your Git workflow more efficient. While there are no universally \"popular\" Git aliases since they can vary depending on individual preferences and workflows, I can provide you with some commonly used Git aliases that are generally helpful:</p> <ol> <li> <p>Basic Aliases:</p> <ul> <li><code>co</code> for <code>checkout</code></li> <li><code>ci</code> for <code>commit</code></li> <li><code>br</code> for <code>branch</code></li> <li><code>st</code> for <code>status</code></li> <li><code>df</code> for <code>diff</code></li> <li><code>lg</code> for <code>log --oneline --decorate --all --graph</code></li> <li><code>pul</code> for <code>pull</code></li> <li><code>ps</code> for <code>push</code></li> </ul> </li> <li> <p>Custom Commands:</p> <ul> <li><code>unstage</code> to unstage changes: <code>git config --global alias.unstage 'reset HEAD --'</code></li> <li><code>last</code> to show the last commit: <code>git config --global alias.last 'log -1 HEAD'</code></li> <li><code>amend</code> to amend the last commit: <code>git config --global alias.amend 'commit --amend'</code></li> <li><code>undo</code> to undo the last commit: <code>git config --global alias.undo 'reset HEAD~1 --mixed'</code></li> </ul> </li> <li> <p>Listing Aliases:</p> <ul> <li><code>aliases</code> to list all aliases: <code>git config --get-regexp alias</code></li> </ul> </li> <li> <p>Shortcuts for Branching:</p> <ul> <li><code>b</code> to create and checkout a new branch: <code>git config --global alias.b 'checkout -b'</code></li> <li><code>bd</code> to delete a branch: <code>git config --global alias.bd 'branch -d'</code></li> </ul> </li> <li> <p>Clean Up:</p> <ul> <li><code>prune</code> to remove remote branches that no longer exist on the remote: <code>git config --global alias.prune 'fetch --prune'</code></li> <li><code>clean</code> to remove untracked files and directories: <code>git config --global alias.clean 'clean -df'</code></li> </ul> </li> <li> <p>Commit History:</p> <ul> <li><code>graph</code> to display a pretty Git history graph: <code>git config --global alias.graph 'log --oneline --graph --all --decorate'</code></li> </ul> </li> <li> <p>Interactive Rebase:</p> <ul> <li><code>ir</code> for interactive rebase: <code>git config --global alias.ir 'rebase -i'</code></li> </ul> </li> <li> <p>Show Diffs:</p> <ul> <li><code>wdiff</code> to see word-based diffs: <code>git config --global alias.wdiff 'diff --color-words'</code></li> </ul> </li> <li> <p>Show Branches with Last Commit Date:</p> <ul> <li><code>branches</code> to list branches with their last commit date: <code>git config --global alias.branches 'for-each-ref --sort=-committerdate --format='\"'\"'%(committerdate:short) %04h %d %s'\"'\"' refs/heads/'</code></li> </ul> </li> </ol> <p>To add these aliases globally, you can use the <code>git config --global alias.alias-name 'command'</code> syntax as shown above.</p> <pre><code># Basic Aliases\ngit config --global alias.co 'checkout'\ngit config --global alias.ci 'commit'\ngit config --global alias.br 'branch'\ngit config --global alias.st 'status'\ngit config --global alias.df 'diff'\ngit config --global alias.lg 'log --oneline --decorate --all --graph'\ngit config --global alias.pul 'pull'\ngit config --global alias.ps 'push'\n\n# Custom Commands\ngit config --global alias.unstage 'reset HEAD --'\ngit config --global alias.last 'log -1 HEAD'\ngit config --global alias.amend 'commit --amend'\ngit config --global alias.undo 'reset HEAD~1 --mixed'\n\n# Listing Aliases\ngit config --get-regexp alias\n\n# Shortcuts for Branching\ngit config --global alias.b 'checkout -b'\ngit config --global alias.bd 'branch -d'\n\n# Clean Up\ngit config --global alias.prune 'fetch --prune'\ngit config --global alias.clean 'clean -df'\n\n# Commit History\ngit config --global alias.graph 'log --oneline --graph --all --decorate'\n\n# Interactive Rebase\ngit config --global alias.ir 'rebase -i'\n\n# Show Diffs\ngit config --global alias.wdiff 'diff --color-words'\n\n# Show Branches with Last Commit Date\ngit config --global alias.branches 'for-each-ref --sort=-committerdate --format=\"%(committerdate:short) %04h %d %s\" refs/heads/'\n</code></pre>"},{"location":"git/awesome_git_addons/","title":"Awesome git addons","text":"<p>A curated list of add-ons that extend/enhance the git CLI.</p> <pre><code>$ git bla\nSomething awesome happens!\n</code></pre> <p>\u201cYou don\u2019t have to know everything. You simply need to know where to find it when necessary.\u201d (John Brunner)</p> <p>Note: Some of the commands may not work out of the box. You might need to run a post install script to add aliases or add them manually.</p>"},{"location":"git/awesome_git_addons/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Git Extras</li> <li>Git Flow</li> <li>Git Up</li> <li>Hub</li> <li>Git Deploy</li> <li>Git Cal</li> <li>Git Hooks</li> <li>Git Imerge</li> <li>Git Issue</li> <li>Git Large File Storage</li> <li>Git Now</li> <li>Git Plus</li> <li>Git Test</li> <li>Legit</li> <li>Git When Merged</li> <li>Git Playback</li> <li>Git Branch Status</li> <li>Git Open</li> <li>Git My</li> <li>Git Ink</li> <li>Recursive Blame</li> <li>Git Hyper Blame</li> <li>Git Word Blame</li> <li>Git Fire</li> <li>Git Town</li> <li>Git blame-someone-else</li> <li>Diff So Fancy</li> <li>Git Stats</li> <li>Git Secret</li> <li>Git Secrets</li> <li>git-fixup</li> <li>git-recent</li> <li>git-interactive-rebase-tool</li> <li>git-fiddle</li> <li>git-user</li> <li>gitsome</li> <li>Git Hound</li> <li>git-recall</li> <li>git-standup</li> <li>Commitizen</li> <li>git-fresh</li> <li>git-fs</li> <li>Git Url</li> <li>Git Signatures</li> <li>Git Profile</li> <li>git revise</li> <li>filter-repo</li> <li>git-jump</li> <li>git-project</li> <li>git-branchcut</li> <li>git-spend</li> </ul>"},{"location":"git/awesome_git_addons/#git-extras","title":"git-extras","text":""},{"location":"git/awesome_git_addons/#squash","title":"squash","text":"<pre><code>$ git squash fixed-cursor-styling \"Fixed cursor styling\"\n$ git squash 95b7c52\n$ git squash HEAD~3\n</code></pre>"},{"location":"git/awesome_git_addons/#summary","title":"summary","text":"<pre><code>$ git summary\n\n project  : git\n repo age : 10 years\n active   : 11868 days\n commits  : 40530\n files    : 2825\n authors  :\n 15401  Junio C Hamano                  38.0%\n  1844  Jeff King                       4.5%\n</code></pre>"},{"location":"git/awesome_git_addons/#line-summary","title":"line-summary","text":"<pre><code>$ git line-summary\n\n project  : gulp\n lines    : 3900\n authors  :\n 1040 Contra                    26.7%\n  828 Sindre Sorhus             21.2%\n</code></pre>"},{"location":"git/awesome_git_addons/#effort","title":"effort","text":"<pre><code>$ git effort\n\n  file                                          commits    active days\n\n  .gitattributes............................... 3          3\n  .gitignore................................... 265        226\n  .mailmap..................................... 47         40\n</code></pre>"},{"location":"git/awesome_git_addons/#authors","title":"authors","text":"<pre><code>$ git authors\nContra &lt;contra@maricopa.edu&gt;\nEric Schoffstall &lt;contra@wearefractal.com&gt;\nSindre Sorhus &lt;sindresorhus@gmail.com&gt;\n</code></pre>"},{"location":"git/awesome_git_addons/#changelog","title":"changelog","text":"<pre><code>$ git changelog\n## 3.9.0\n\n- add babel support\n- add transpiler fallback support\n- add support for some renamed transpilers (livescript, etc)\n- add JSCS\n- update dependecies (liftoff, interpret)\n- documentation tweaks\n\n## 3.8.11\n\n- fix node 0.12/iojs problems\n- add node 0.12 and iojs to travis\n- update dependencies (liftoff, v8flags)\n- documentation tweaks\n</code></pre>"},{"location":"git/awesome_git_addons/#commits-since","title":"commits-since","text":"<pre><code>$ git commits-since yesterday\n... changes since yesterday\nTJ Holowaychuk - Fixed readme\n</code></pre>"},{"location":"git/awesome_git_addons/#count","title":"count","text":"<pre><code>$ git count\ntotal 855\n</code></pre>"},{"location":"git/awesome_git_addons/#create-branch","title":"create-branch","text":"<pre><code>$ git create-branch development\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tj/git-extras.git\n * [new branch]      HEAD -&gt; development\nBranch development set up to track remote branch development from origin.\nSwitched to a new branch 'development'\n</code></pre>"},{"location":"git/awesome_git_addons/#delete-branch","title":"delete-branch","text":"<pre><code>$ git delete-branch integration\nDeleted branch integration (was bfb8522).\nDeleted remote-tracking branch remote/integration (was bfb8522).\nTo git@github.com:remote/gulp.git\n - [deleted]         integration\n</code></pre>"},{"location":"git/awesome_git_addons/#delete-submodule","title":"delete-submodule","text":"<pre><code>$ git delete-submodule lib/foo\n</code></pre>"},{"location":"git/awesome_git_addons/#delete-tag","title":"delete-tag","text":"<pre><code>$ git delete-tag v0.1.1\nDeleted tag 'v0.1.1' (was 9fde751)\nTo https://github.com/tj/git-extras.git\n - [deleted]         v0.1.1\n</code></pre>"},{"location":"git/awesome_git_addons/#delete-merged-branches","title":"delete-merged-branches","text":"<pre><code>$ git delete-merged-branches\nDeleted feature/themes (was c029ab3).\nDeleted feature/live_preview (was a81b002).\nDeleted feature/dashboard (was 923befa).\n</code></pre>"},{"location":"git/awesome_git_addons/#fresh-branch","title":"fresh-branch","text":"<pre><code>$ git fresh-branch docs\nRemoving .DS_Store\nRemoving .editorconfig\nRemoving .gitignore\n</code></pre>"},{"location":"git/awesome_git_addons/#guilt","title":"guilt","text":"<pre><code>$ git guilt `git log --until=\"3 weeks ago\" --format=\"%H\" -n 1` HEAD\nPaul Schreiber                +++++++++++++++++++++++++++++++++++++++++++++(349)\nspacewander                   +++++++++++++++++++++++++++++++++++++++++++++(113)\nMark Eissler                  ++++++++++++++++++++++++++\n</code></pre>"},{"location":"git/awesome_git_addons/#merge-into","title":"merge-into","text":"<pre><code>$ git merge-into master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\nUpdating 9fde751..e62edfa\nFast-forward\n 234 | 0\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 234\nSwitched to branch 'development'\n</code></pre>"},{"location":"git/awesome_git_addons/#graft","title":"graft","text":"<pre><code>$ git graft development\nYour branch is up-to-date with 'origin/master'.\nMerge made by the 'recursive' strategy.\n package.json | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\nDeleted branch development (was 64b3563).\n</code></pre>"},{"location":"git/awesome_git_addons/#alias","title":"alias","text":"<pre><code>$ git alias last \"cat-file commit HEAD\"\n$ git alias\nlast = cat-file commit HEAD\n</code></pre>"},{"location":"git/awesome_git_addons/#ignore","title":"ignore","text":"<pre><code>$ git ignore build \"*.o\" \"*.log\"\n... added 'build'\n... added '*.o'\n... added '*.log'\n</code></pre>"},{"location":"git/awesome_git_addons/#info","title":"info","text":"<pre><code>$ git info\n\n    ## Remote URLs:\n\n    origin              git@github.com:sampleAuthor/git-extras.git (fetch)\n    origin              git@github.com:sampleAuthor/git-extras.git (push)\n\n    ## Remote Branches:\n\n    origin/HEAD -&gt; origin/master\n    origin/myBranch\n\n    ## Local Branches:\n\n    myBranch\n    * master\n\n    ## Most Recent Commit:\n\n    commit e3952df2c172c6f3eb533d8d0b1a6c77250769a7\n    Author: Sample Author &lt;sampleAuthor@gmail.com&gt;\n\n    Added git-info command.\n\n    Type 'git log' for more commits, or 'git show &lt;commit id&gt;' for full commit details.\n\n    ## Configuration (.git/config):\n\n    color.diff=auto\n    color.status=auto\n</code></pre>"},{"location":"git/awesome_git_addons/#fork","title":"fork","text":"<pre><code>$ git fork LearnBoost/expect.js\n</code></pre>"},{"location":"git/awesome_git_addons/#release","title":"release","text":"<pre><code>$ git release 0.1.0\n... releasing 0.1.0\nOn branch development\nYour branch is up-to-date with 'origin/development'.\nnothing to commit, working directory clean\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/tj/git-extras.git\n   9fde751..e62edfa  master -&gt; master\nCounting objects: 1, done.\nWriting objects: 100% (1/1), 166 bytes | 0 bytes/s, done.\nTotal 1 (delta 0), reused 0 (delta 0)\nTo https://github.com/tj/git-extras.git\n * [new tag]         0.1.0 -&gt; 0.1.0\n... complete\n</code></pre>"},{"location":"git/awesome_git_addons/#contrib","title":"contrib","text":"<pre><code>$ git contrib visionmedia\nvisionmedia (18):\n  Export STATUS_CODES\n  Replaced several Array.prototype.slice.call() calls with Array.prototype.unshift.call()\n  Moved help msg to node-repl\n</code></pre>"},{"location":"git/awesome_git_addons/#repl","title":"repl","text":"<pre><code>$ git repl\n\ngit&gt; ls-files\nHistory.md\nMakefile\n</code></pre>"},{"location":"git/awesome_git_addons/#undo","title":"undo","text":"<pre><code>$ git undo\nUnstaged changes after reset:\nM   package.json\nM   readme.md\n</code></pre>"},{"location":"git/awesome_git_addons/#gh-pages","title":"gh-pages","text":"<pre><code>$ git gh-pages\n</code></pre>"},{"location":"git/awesome_git_addons/#scp","title":"scp","text":"<pre><code>$ git scp staging HEAD\n</code></pre>"},{"location":"git/awesome_git_addons/#setup","title":"setup","text":"<pre><code>$ git setup\nInitialized empty Git repository in /GitHub/test/gulp/.git/\n[master (root-commit) 9469797] Initial commit\n 69 files changed, 3900 insertions(+)\n create mode 100644 .editorconfig\n create mode 100644 .gitignore\n create mode 100644 .jscsrc\n</code></pre>"},{"location":"git/awesome_git_addons/#touch","title":"touch","text":"<pre><code>$ git touch index.js\n</code></pre>"},{"location":"git/awesome_git_addons/#obliterate","title":"obliterate","text":"<pre><code>$ git obliterate secrets.json\nRewrite 2357a4334051a6d1733037406ab7538255030d0b (1/981)rm 'secrets.json'\nRewrite b5f62b2746c23150917d346bd0c50c467f01eb03 (2/981)rm 'secrets.json'\nRewrite 3cd94f3395c2701848f6ff626a0a4f883d8a8433 (3/981)rm 'secrets.json'\n</code></pre>"},{"location":"git/awesome_git_addons/#featurerefactorbugchore","title":"feature|refactor|bug|chore","text":"<pre><code>$ git feature dependencies\n$ git feature finish dependencies\nAlready up-to-date.\nDeleted branch feature/dependencies (was f0fc4c7).\nDeleted remote-tracking branch origin/feature/dependencies (was f0fc4c7).\nTo git@github.com:stevemao/gulp.git\n - [deleted]         feature/dependencies\n</code></pre>"},{"location":"git/awesome_git_addons/#local-commits","title":"local-commits","text":"<pre><code>$ git local-commits\ncommit 5f00a3c1bb71876ebdca059fac96b7185dea5467\nMerge: 7ad3ef9 841af4e\nAuthor: Blaine Bublitz &lt;blaine@iceddev.com&gt;\nDate:   Thu Aug 20 11:35:15 2015 -0700\n\n    Merge pull request #1211 from JimiHFord/patch-1\n\n    Update guidelines.md\n\ncommit 841af4ee7aaf55b505354d0e86d7fb876d745e26\nAuthor: Jimi Ford &lt;JimiHFord@users.noreply.github.com&gt;\nDate:   Thu Aug 20 11:55:38 2015 -0400\n\n    Update guidelines.md\n\n    fixed typo\n</code></pre>"},{"location":"git/awesome_git_addons/#archive-file","title":"archive-file","text":"<pre><code>$ git archive-file\nBuilding archive on branch \"master\"\nSaved to \"gulp.v3.9.0-36-g47cb6b0.zip\" ( 60K)\n</code></pre>"},{"location":"git/awesome_git_addons/#missing","title":"missing","text":"<pre><code>$ git missing master\n&lt; d14b8f0 only on current checked out branch\n&gt; 97ef387 only on master\n</code></pre>"},{"location":"git/awesome_git_addons/#lock","title":"lock","text":"<pre><code>$ git lock config/database.yml\n</code></pre>"},{"location":"git/awesome_git_addons/#locked","title":"locked","text":"<pre><code>$ git locked\nconfig/database.yml\n</code></pre>"},{"location":"git/awesome_git_addons/#unlock","title":"unlock","text":"<pre><code>$ git unlock config/database.yml\n</code></pre>"},{"location":"git/awesome_git_addons/#reset-file","title":"reset-file","text":"<pre><code>$ git reset-file README.md HEAD^\nReset 'README.md' to HEAD^\n</code></pre>"},{"location":"git/awesome_git_addons/#pr","title":"pr","text":"<pre><code>$ git pr 226\nFrom https://github.com/tj/git-extras\n * [new ref]       refs/pulls/226/head -&gt; pr/226\nSwitched to branch 'pr/226'\n</code></pre>"},{"location":"git/awesome_git_addons/#root","title":"root","text":"<pre><code>$ git root\n/GitHub/git\n</code></pre>"},{"location":"git/awesome_git_addons/#delta","title":"delta","text":"<pre><code>$ git delta\nREADME.md\n</code></pre>"},{"location":"git/awesome_git_addons/#merge-repo","title":"merge-repo","text":"<pre><code>$ git merge-repo git@github.com:tj/git-extras.git master .\ngit fetch git@github.com:tj/git-extras.git master\nwarning: no common commits\nremote: Counting objects: 3507, done.\nremote: Compressing objects: 100% (5/5), done.\nremote: Total 3507 (delta 1), reused 0 (delta 0), pack-reused 3502\nReceiving objects: 100% (3507/3507), 821.12 KiB | 286.00 KiB/s, done.\nResolving deltas: 100% (1986/1986), done.\nFrom github.com:tj/git-extras\n * branch            master     -&gt; FETCH_HEAD\nAdded dir 'git-merge-repo.E95m0gj'\nNo local changes to save\n</code></pre>"},{"location":"git/awesome_git_addons/#psykorebase","title":"psykorebase","text":"<pre><code>$ git psykorebase master\n$ git psykorebase --continue\n$ git psykorebase master feature\n</code></pre>"},{"location":"git/awesome_git_addons/#gitflow-avh-edition","title":"gitflow (AVH Edition)","text":""},{"location":"git/awesome_git_addons/#flow-init","title":"flow init","text":"<pre><code>$ git flow init\n\nWhich branch should be used for bringing forth production releases?\n   - changelog\n   - master\nBranch name for production releases: [master]\n\nWhich branch should be used for integration of the \"next release\"?\n   - changelog\nBranch name for \"next release\" development: [master]\nProduction and integration branches should differ.\n</code></pre>"},{"location":"git/awesome_git_addons/#flow-feature","title":"flow feature","text":"<pre><code>$ git flow feature\n$ git flow feature start awesome-feature\n$ git flow feature finish awesome-feature\n$ git flow feature delete awesome-feature\n\n$ git flow feature publish awesome-feature\n$ git flow feature pull remote awesome-feature\n</code></pre>"},{"location":"git/awesome_git_addons/#flow-release","title":"flow release","text":"<pre><code>$ git flow release\n$ git flow release start awesome-release\n$ git flow release finish awesome-release\n$ git flow release delete awesome-release\n</code></pre>"},{"location":"git/awesome_git_addons/#flow-hotfix","title":"flow hotfix","text":"<pre><code>$ git flow hotfix\n$ git flow hotfix start awesome-release\n$ git flow hotfix finish awesome-release\n$ git flow hotfix delete awesome-release\n</code></pre>"},{"location":"git/awesome_git_addons/#flow-support","title":"flow support","text":"<pre><code>$ git flow support\n</code></pre>"},{"location":"git/awesome_git_addons/#git-up","title":"git-up","text":"<pre><code>$ git up\nFetching origin\n4.0       fast-forwarding...\nchangelog ahead of upstream\nmaster    fast-forwarding...\nreturning to 4.0\n</code></pre>"},{"location":"git/awesome_git_addons/#hub","title":"hub","text":""},{"location":"git/awesome_git_addons/#clone","title":"clone","text":"<pre><code>$ git clone schacon/ticgit\n&gt; git clone git://github.com/schacon/ticgit.git\n\n$ git clone -p schacon/ticgit\n&gt; git clone git@github.com:schacon/ticgit.git\n\n$ git clone resque\n&gt; git clone git@github.com/YOUR_USER/resque.git\n</code></pre>"},{"location":"git/awesome_git_addons/#remote-add","title":"remote add","text":"<pre><code>$ git remote add rtomayko\n&gt; git remote add rtomayko git://github.com/rtomayko/CURRENT_REPO.git\n\n$ git remote add -p rtomayko\n&gt; git remote add rtomayko git@github.com:rtomayko/CURRENT_REPO.git\n\n$ git remote add origin\n&gt; git remote add origin git://github.com/YOUR_USER/CURRENT_REPO.git\n</code></pre>"},{"location":"git/awesome_git_addons/#fetch","title":"fetch","text":"<pre><code>$ git fetch mislav\n&gt; git remote add mislav git://github.com/mislav/REPO.git\n&gt; git fetch mislav\n\n$ git fetch mislav,xoebus\n&gt; git remote add mislav ...\n&gt; git remote add xoebus ...\n&gt; git fetch --multiple mislav xoebus\n</code></pre>"},{"location":"git/awesome_git_addons/#cherry-pick","title":"cherry-pick","text":"<pre><code>$ git cherry-pick https://github.com/mislav/REPO/commit/SHA\n&gt; git remote add -f --no-tags mislav git://github.com/mislav/REPO.git\n&gt; git cherry-pick SHA\n\n$ git cherry-pick mislav@SHA\n&gt; git remote add -f --no-tags mislav git://github.com/mislav/CURRENT_REPO.git\n&gt; git cherry-pick SHA\n\n$ git cherry-pick mislav@SHA\n&gt; git fetch mislav\n&gt; git cherry-pick SHA\n</code></pre>"},{"location":"git/awesome_git_addons/#am","title":"am","text":"<pre><code>$ git am https://github.com/github/hub/pull/55\n[ downloads patch via API ]\n&gt; git am /tmp/55.patch\n\n$ git am --ignore-whitespace https://github.com/davidbalbert/hub/commit/fdb9921\n[ downloads patch via API ]\n&gt; git am --ignore-whitespace /tmp/fdb9921.patch\n</code></pre>"},{"location":"git/awesome_git_addons/#apply","title":"apply","text":"<pre><code>$ git apply https://gist.github.com/8da7fb575debd88c54cf\n[ downloads patch via API ]\n&gt; git apply /tmp/gist-8da7fb575debd88c54cf.txt\n</code></pre>"},{"location":"git/awesome_git_addons/#fork_1","title":"fork","text":"<pre><code>$ git fork\n[ repo forked on GitHub ]\n&gt; git remote add -f YOUR_USER git@github.com:YOUR_USER/CURRENT_REPO.git\n</code></pre>"},{"location":"git/awesome_git_addons/#pull-request","title":"pull-request","text":"<pre><code>$ git pull-request\n[ opens text editor to edit title &amp; body for the request ]\n[ opened pull request on GitHub for \"YOUR_USER:feature\" ]\n</code></pre>"},{"location":"git/awesome_git_addons/#checkout","title":"checkout","text":"<pre><code>$ git checkout https://github.com/github/hub/pull/73\n&gt; git remote add -f --no-tags -t feature mislav git://github.com/mislav/hub.git\n&gt; git checkout --track -B mislav-feature mislav/feature\n</code></pre>"},{"location":"git/awesome_git_addons/#merge","title":"merge","text":"<pre><code>$ git merge https://github.com/github/hub/pull/73\n&gt; git fetch git://github.com/mislav/hub.git +refs/heads/feature:refs/remotes/mislav/feature\n&gt; git merge mislav/feature --no-ff -m 'Merge pull request #73 from mislav/feature...'\n</code></pre>"},{"location":"git/awesome_git_addons/#create","title":"create","text":"<pre><code>$ git create\n[ repo created on GitHub ]\n&gt; git remote add origin git@github.com:YOUR_USER/CURRENT_REPO.git\n</code></pre>"},{"location":"git/awesome_git_addons/#init","title":"init","text":"<pre><code>$ git init -g\n&gt; git init\n&gt; git remote add origin git@github.com:YOUR_USER/REPO.git\n</code></pre>"},{"location":"git/awesome_git_addons/#push","title":"push","text":"<pre><code>$ git push origin,staging,qa bert_timeout\n&gt; git push origin bert_timeout\n&gt; git push staging bert_timeout\n&gt; git push qa bert_timeout\n</code></pre>"},{"location":"git/awesome_git_addons/#browse","title":"browse","text":"<pre><code>$ git browse\n&gt; open https://github.com/YOUR_USER/CURRENT_REPO\n</code></pre>"},{"location":"git/awesome_git_addons/#compare","title":"compare","text":"<pre><code>$ git compare refactor\n&gt; open https://github.com/CURRENT_REPO/compare/refactor\n</code></pre>"},{"location":"git/awesome_git_addons/#submodule","title":"submodule","text":"<pre><code>$ git submodule add wycats/bundler vendor/bundler\n&gt; git submodule add git://github.com/wycats/bundler.git vendor/bundler\n</code></pre>"},{"location":"git/awesome_git_addons/#ci-status","title":"ci-status","text":"<pre><code>$ git ci-status\nsuccess\n</code></pre>"},{"location":"git/awesome_git_addons/#git-deploy","title":"git-deploy","text":"<pre><code>$ git remote add production \"user@example.com:/apps/mynewapp\"\n$ git deploy setup -r \"production\"\n$ git deploy init\n$ git push production master\n</code></pre>"},{"location":"git/awesome_git_addons/#git-cal","title":"git-cal","text":""},{"location":"git/awesome_git_addons/#git-hooks","title":"git-hooks","text":"<pre><code>$ git hooks --install\n$ git hooks\nGit hooks ARE installed in this repository.\n\nListing User, Project, and Global hooks:\n---\n/Users/stevemao/.git_hooks:\n\n/GitHub/git-hooks/git_hooks:\ncommit-msg/signed-off-by    - Checks commit message for presence of Signed-off-by line.\npre-commit/bsd  - Check for the BSD license.\n\n/GitHub/git-hooks/.githooks:\n</code></pre>"},{"location":"git/awesome_git_addons/#git-imerge","title":"git-imerge","text":""},{"location":"git/awesome_git_addons/#imerge-start","title":"imerge start","text":"<pre><code>$ git imerge start --name=next --goal=merge --first-parent 4.0\nAttempting automerge of 1-1...success.\nAttempting automerge of 1-29...success.\nAttempting automerge of 1-44...success.\nAttempting automerge of 1-51...success.\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-merge","title":"imerge merge","text":"<pre><code>$ git imerge merge 4.0\nAttempting automerge of 1-1...success.\nAttempting automerge of 1-6...success.\nAttempting automerge of 1-9...success.\nAttempting automerge of 1-10...success.\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-rebase","title":"imerge rebase","text":"<pre><code>$ git imerge rebase 4.0\nThe following commits on the to-be-merged branch are merge commits:\n    8e4931ae15971a14897cf347ac50b7d7fe125ac4\n    d7c772142ce663a20210db73d9ad17cc8d59e0d6\n    856df83c77b33029d2ddfb8eecd08efedeadc027\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-continue","title":"imerge continue","text":"<pre><code>$ git add --all\n$ git commit\n[imerge/next e442618] imerge 'next': manual merge 10-26\n$ git imerge continue\nMerge has been recorded for merge 10-26.\nAttempting automerge of 10-27...success.\nAttempting automerge of 10-42...failure.\nAttempting automerge of 10-34...failure.\nAttempting automerge of 10-30...success.\nRecording autofilled block MergeState('next', tip1='master', tip2='4.0', goal='merge')[18:20,34:58].\nMerge is complete!\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-finish","title":"imerge finish","text":"<pre><code>$ git imerge finish\nPrevious HEAD position was fcbe161... imerge 'next': automatic merge 19-57\nSwitched to branch 'next'\n[next 23362e6] Merge 4.0 into master (using imerge)\n Date: Wed Sep 2 10:59:56 2015 +1000\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-diagram","title":"imerge diagram","text":"<pre><code>$ git imerge diagram\n********************\n*????????.?????????|\n*????????.?????????|\n*????????.?????????|\n*????????...-------+\n*????????.*|#???????\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-list","title":"imerge list","text":"<pre><code>$ git imerge list\n* next\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-init","title":"imerge init","text":"<pre><code>$ git imerge init --name=next --goal=merge --first-parent 4.0\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-record","title":"imerge record","text":"<pre><code>$ git imerge record\nMerge has been recorded for merge 10-26.\nAttempting automerge of 10-27...success.\nAttempting automerge of 10-42...failure.\nAttempting automerge of 10-34...failure.\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-autofill","title":"imerge autofill","text":"<pre><code>$ git imerge autofill\nAttempting automerge of 1-1...success.\nAttempting automerge of 1-29...success.\nAttempting automerge of 1-44...success.\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-simplify","title":"imerge simplify","text":"<pre><code>$ git imerge simplify\nPrevious HEAD position was 4d19598... imerge 'next': automatic merge 20-57\nSwitched to branch 'next'\n[next 6c308aa] Merge 4.0 into master (using imerge)\n Date: Wed Sep 2 13:37:31 2015 +1000\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-remove","title":"imerge remove","text":"<pre><code>$ git imerge remove\n</code></pre>"},{"location":"git/awesome_git_addons/#imerge-reparent","title":"imerge reparent","text":"<pre><code>$ git imerge reparent\n67ebc0e6517ac791de6699453b71d2c7fd81ffcd\n</code></pre>"},{"location":"git/awesome_git_addons/#git-issue","title":"git-issue","text":""},{"location":"git/awesome_git_addons/#initialize-issue-repository","title":"Initialize issue repository","text":"<pre><code>$ git issue init\nInitialized empty Issues repository in /home/dds/src/gi/.issues\n$ git issue new -s 'New issue entered from the command line'\nAdded issue e6a95c9\n</code></pre>"},{"location":"git/awesome_git_addons/#create-a-new-issue-opens-editor-window","title":"Create a new issue (opens editor window)","text":"<pre><code>$ git issue new\nAdded issue 7dfa5b7\n</code></pre>"},{"location":"git/awesome_git_addons/#list-open-issues","title":"List open issues","text":"<pre><code>$ git issue list\n7dfa5b7 An issue entered from the editor\ne6a95c9 New issue entered from the command line\n</code></pre>"},{"location":"git/awesome_git_addons/#add-an-issue-comment-opens-editor-window","title":"Add an issue comment (opens editor window)","text":"<pre><code>$ git issue comment e6a95c9\nAdded comment 8c0d5b3\n</code></pre>"},{"location":"git/awesome_git_addons/#add-tag-to-an-issue","title":"Add tag to an issue","text":"<pre><code>$ git issue tag e6a9 urgent\nAdded tag urgent\n</code></pre>"},{"location":"git/awesome_git_addons/#add-two-more-tags","title":"Add two more tags","text":"<pre><code>$ git issue tag e6a9 gui crash\nAdded tag gui\nAdded tag crash\n</code></pre>"},{"location":"git/awesome_git_addons/#remove-a-tag","title":"Remove a tag","text":"<pre><code>$ git issue tag -r e6a9 urgent\nRemoved tag urgent\n</code></pre>"},{"location":"git/awesome_git_addons/#assign-issue","title":"Assign issue","text":"<pre><code>$ git issue assign e6a9 joe@example.com\nAssigned to joe@example.com\n</code></pre>"},{"location":"git/awesome_git_addons/#add-issue-watcher","title":"Add issue watcher","text":"<pre><code>$ git issue watcher e6a9 jane@example.com\nAdded watcher jane@example.com\n</code></pre>"},{"location":"git/awesome_git_addons/#list-issues-tagged-as-gui","title":"List issues tagged as gui","text":"<pre><code>$ git issue list gui\ne6a95c9 New issue entered from the command line\n</code></pre>"},{"location":"git/awesome_git_addons/#push-issues-repository-to-a-server","title":"Push issues repository to a server","text":"<pre><code>$ git issue git remote add origin git@github.com:dspinellis/gi-example.git\n$ git issue git push -u origin master\nCounting objects: 60, done.\nCompressing objects: 100% (50/50), done.\nWriting objects: 100% (60/60), 5.35 KiB | 0 bytes/s, done.\nTotal 60 (delta 8), reused 0 (delta 0)\nTo git@github.com:dspinellis/gi-example.git\n * [new branch]      master -&gt; master\nBranch master set up to track remote branch master from origin.\n</code></pre>"},{"location":"git/awesome_git_addons/#clone-issues-repository-from-server","title":"Clone issues repository from server","text":"<pre><code>$ git issue clone git@github.com:dspinellis/gi-example.git my-issues\nCloning into '.issues'...\nremote: Counting objects: 60, done.\nremote: Compressing objects: 100% (42/42), done.\nremote: Total 60 (delta 8), reused 60 (delta 8), pack-reused 0\nReceiving objects: 100% (60/60), 5.35 KiB | 0 bytes/s, done.\nResolving deltas: 100% (8/8), done.\nChecking connectivity... done.\nCloned git@github.com:dspinellis/gi-example.git into my-issues\n</code></pre>"},{"location":"git/awesome_git_addons/#list-open-issues_1","title":"List open issues","text":"<pre><code>$ git issue list\n7dfa5b7 An issue entered from the editor\ne6a95c9 New issue entered from the command line\n</code></pre>"},{"location":"git/awesome_git_addons/#create-new-issue","title":"Create new issue","text":"<pre><code>$ git issue new -s 'Issue added on another host'\nAdded issue abc9adc\n</code></pre>"},{"location":"git/awesome_git_addons/#push-changes-to-server","title":"Push changes to server","text":"<pre><code>$ git issue push\nCounting objects: 7, done.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (7/7), 767 bytes | 0 bytes/s, done.\nTotal 7 (delta 0), reused 0 (delta 0)\nTo git@github.com:dspinellis/gi-example.git\n   d6be890..740f9a0  master -&gt; master\n</code></pre>"},{"location":"git/awesome_git_addons/#show-issue-added-on-the-other-host","title":"Show issue added on the other host","text":"<pre><code>$ git issue show 7dfa5b7\nissue 7dfa5b7f4591ecaa8323716f229b84ad40f5275b\nAuthor: Diomidis Spinellis &lt;dds@aueb.gr&gt;\nDate:   Fri, 29 Jan 2016 01:03:24 +0200\nTags:   open\n\n    An issue entered from the editor\n\n    Here is a longer description.\n</code></pre>"},{"location":"git/awesome_git_addons/#show-issue-and-comments","title":"Show issue and comments","text":"<pre><code>$ git issue show -c e6a95c9\nissue e6a95c91b31ded8fc229a41cc4bd7d281ce6e0f1\nAuthor: Diomidis Spinellis &lt;dds@aueb.gr&gt;\nDate:   Fri, 29 Jan 2016 01:03:20 +0200\nTags:   open urgent gui crash\nWatchers:       jane@example.com\nAssigned-to: joe@example.com\n\n    New issue entered from the command line\n\ncomment 8c0d5b3d77bf93b937cb11038b129f927d49e34a\nAuthor: Diomidis Spinellis &lt;dds@aueb.gr&gt;\nDate:   Fri, 29 Jan 2016 01:03:57 +0200\n\n    First comment regarding the issue.\n</code></pre>"},{"location":"git/awesome_git_addons/#pull-in-remote-changes-on-the-original-host","title":"Pull in remote changes (on the original host)","text":"<pre><code>$ git issue pull\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (6/6), done.\nremote: Total 7 (delta 0), reused 7 (delta 0), pack-reused 0\nUnpacking objects: 100% (7/7), done.\nFrom github.com:dspinellis/gi-example\n   d6be890..740f9a0  master     -&gt; origin/master\nUpdating d6be890..740f9a0\nFast-forward\n issues/ab/c9adc61025a3cb73b0c67470b65cefc133a8d0/description | 1 +\n issues/ab/c9adc61025a3cb73b0c67470b65cefc133a8d0/tags        | 1 +\n 2 files changed, 2 insertions(+)\n create mode 100644 issues/ab/c9adc61025a3cb73b0c67470b65cefc133a8d0/description\n create mode 100644 issues/ab/c9adc61025a3cb73b0c67470b65cefc133a8d0/tags\n</code></pre>"},{"location":"git/awesome_git_addons/#list-open-issues_2","title":"List open issues","text":"<pre><code>$ git issue list\n7dfa5b7 An issue entered from the editor\nabc9adc Issue added on another host\ne6a95c9 New issue entered from the command line\n</code></pre>"},{"location":"git/awesome_git_addons/#sub-command-auto-completion","title":"Sub-command auto-completion","text":"<pre><code>$ git issue [Tab]\nassign   clone    comment  git      init     log      pull     show     watcher\nattach   close    edit     help     list     new      push     tag\n</code></pre>"},{"location":"git/awesome_git_addons/#issue-sha-auto-completion","title":"Issue Sha auto-completion","text":"<pre><code>$ git issue show [Tab]\n7dfa5b7 - An issue entered from the editor\ne6a95c9 - New issue entered from the command line\n</code></pre>"},{"location":"git/awesome_git_addons/#git-lfs","title":"git-lfs","text":"<pre><code>$ git lfs track \"*.mp3\"\nTracking *.mp3\n\n$ git lfs track \"*.zip\"\nTracking *.zip\n\n$ git lfs track\nListing tracked paths\n    *.mp3 (.gitattributes)\n    *.zip (.gitattributes)\n\n$ git lfs untrack \"*.zip\"\nUntracking *.zip\n\n$ git lfs track\nListing tracked paths\n    *.mp3 (.gitattributes)\n</code></pre>"},{"location":"git/awesome_git_addons/#git-now","title":"git-now","text":"<pre><code>$ git now\n[master 1bd9ce8] [from now] 2015/08/27 10:39:10\n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git log\ncommit 1bd9ce878a76140f7db95afd9cfd4d7befbc7243\nAuthor: Steve Mao &lt;maochenyan@gmail.com&gt;\nDate:   Thu Aug 27 10:39:10 2015 +1000\n\n    [from now] 2015/08/27 10:39:10\n\n    diff --git a/package.json b/package.json\n    index 8768569..540523a 100644\n    --- a/package.json\n    +++ b/package.json\n    @@ -1,7 +1,7 @@\n     {\n       \"name\": \"gulp\",\n       \"description\": \"The streaming build system\",\n    -  \"version\": \"3.9.0\",\n    +  \"version\": \"3.10.0\",\n       \"homepage\": \"http://gulpjs.com\",\n       \"repository\": \"gulpjs/gulp\",\n       \"author\": \"Fractal &lt;contact@wearefractal.com&gt; (http://wearefractal.com/)\",\n</code></pre>"},{"location":"git/awesome_git_addons/#git-plus","title":"git-plus","text":""},{"location":"git/awesome_git_addons/#multi","title":"multi","text":"<pre><code>$ git multi\n--------------------------------------------------------------------------------\nExecuting git status -s\n--------------------------------------------------------------------------------\nchalk:\n     M package.json\n\ngulp:\n     D index.js\n</code></pre>"},{"location":"git/awesome_git_addons/#relation","title":"relation","text":"<pre><code>$ git relation origin/4.0\nHEAD and origin/4.0 DIVERGED, common point is 657213a52d5e9c19b85df6a42f76341a98c08ae8\n\nCommits from 657213a52d5e9c19b85df6a42f76341a98c08ae8 to HEAD:\nError retrieving log 657213a52d5e9c19b85df6a42f76341a98c08ae8..HEAD\n</code></pre>"},{"location":"git/awesome_git_addons/#old-branches","title":"old-branches","text":"<pre><code>$ git old-branches -d 10\nBranch 4.0 is older than 10 days (139.86)!\n</code></pre>"},{"location":"git/awesome_git_addons/#recent","title":"recent","text":"<pre><code>$ git recent\n      3.64 days: master\n     11.63 days: dev\n</code></pre>"},{"location":"git/awesome_git_addons/#git-test","title":"git-test","text":"<pre><code>$ git test -v\n4.0 ^origin/4.0 ^origin/master will test        2 commits\niter commit  tree    result\n0000 57af4b0 f5ef0d8 pass (cached)\n0001 10ed389 434370f pass\n</code></pre>"},{"location":"git/awesome_git_addons/#legit","title":"legit","text":""},{"location":"git/awesome_git_addons/#branches","title":"branches","text":"<pre><code>$ git branches\n   4.0                        (published)\n   development                (unpublished)\n   everything-is-not-awesome  (published)\n*  master                     (published)\n   old-master                 (published)\n</code></pre>"},{"location":"git/awesome_git_addons/#sync","title":"sync","text":"<pre><code>$ git sync\nPulling commits from the server.\nFirst, rewinding head to replay your work on top of it...\nFast-forwarded 4.0 to origin/4.0.\nPushing commits to the server.\n</code></pre>"},{"location":"git/awesome_git_addons/#switch","title":"switch","text":"<pre><code>$ git switch master\nSaving local changes.\nSaved working directory and index state On developement: Legit: stashing before switching branches.\nHEAD is now at f0fc4c7 Merge branch 'development'\nSwitching to master.\nYour branch is up-to-date with 'origin/master'.\nRestoring local changes.\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   package.json\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nDropped stash@{0} (86f5dc9066ff9f69c01c77e2f5a55643ad19f8f2)\n</code></pre>"},{"location":"git/awesome_git_addons/#publish","title":"publish","text":"<pre><code>$ git publish\n   4.0                        (published)\n   changelog                  (published)\n   everything-is-not-awesome  (published)\n*  master                     (unpublished)\nBranch None not found, using current branch master\nPublishing master.\nBranch master set up to track remote branch master from origin.\n</code></pre>"},{"location":"git/awesome_git_addons/#unpublish","title":"unpublish","text":"<pre><code>$ git unpublish master\nUnpublishing master.\n</code></pre>"},{"location":"git/awesome_git_addons/#git-when-merged","title":"git-when-merged","text":"<pre><code>$ git when-merged a2c9e695ecf3600f21fa731e705fd1a0503632d9\nrefs/heads/master                      5a2ec1b1a6633f830bd4a2b1daab578c062e6975\n$ git when-merged HEAD\nrefs/heads/master                      Commit is directly on this branch.\n</code></pre>"},{"location":"git/awesome_git_addons/#git-playback","title":"git-playback","text":"<pre><code>$ git playback README.md\n</code></pre>"},{"location":"git/awesome_git_addons/#git-branch-status","title":"git-branch-status","text":"<pre><code>$ git branch-status\n 4.0       [57 ahead and 38 behind master]    [up to date with origin/4.0]\n master    [current branch]                   [1 ahead of origin/master]\n</code></pre>"},{"location":"git/awesome_git_addons/#git-open","title":"git-open","text":"<pre><code>$ git open\n&gt; open https://github.com/REMOTE_ORIGIN_USER/CURRENT_REPO/tree/CURRENT_BRANCH\n\n$ git open upstream\n&gt; open https://github.com/REMOTE_UPSTREAM_USER/CURRENT_REPO/tree/CURRENT_BRANCH\n\n$ git open upstream master\n&gt; open https://github.com/REMOTE_UPSTREAM_USER/CURRENT_REPO/tree/master\n</code></pre>"},{"location":"git/awesome_git_addons/#git-my","title":"git-my","text":"<pre><code>$ git my\n\n+------------------------------------------------------------------------------+\n| your name's remote branches in git@repo:repopath/reponame.git                |\n+------------------------------------------------------------------------------+\n\n   local copy?  in master?  branch name\n  ................[merged]. EC-242\n  .....[local]....[merged]. commonjs-lazyload\n  .....[local]............. enqueue-gpt\n  ......................... defunct-ios-app-nag\n  .....[local]............. factor-bundles\n</code></pre>"},{"location":"git/awesome_git_addons/#git-ink","title":"git-ink","text":"<pre><code>$ git ink\n\n\u2022 enqueue-gpt ........................................... 2015-08-31\n\u2022 factor-bundles ........................................ 2015-10-14\n    - Pull out more modules into node_modules\n    - Works but does not provide any gains\n\u2022 hbsfy ................................................. 2015-10-21\n\u2713 master ................................................ 2015-10-22\n\u2022 nda-ads4 .............................................. 2015-10-22\n\u2022 remove-equalize_content_height ........................ 2015-10-21\n\u2022 remove-exorcise ....................................... 2015-10-21\n    - Need to DRY up exorcise function\n    - Does not map properly when uglified\n    - Need to undo postCSS mapping changes\n\u2022 rm-convert_dates-order ................................ 2015-10-22\n\u2022 sass-lint ............................................. 2015-10-14\n    - module does not work\n</code></pre>"},{"location":"git/awesome_git_addons/#recursive-blame","title":"recursive-blame","text":"<pre><code>$ git recursive-blame version package.json\n\nCommit: 247479d017f138c26be27c64a0ce27f5f21fc0af\nAuthor: Jeff Cross &lt;middlefloor@gmail.com&gt;\nDate:   Tue Oct 13 15:58:13 2015 -0700 (7 weeks ago)\nPath:   package.json\nMatch:  1 of 1\n\n    chore(release): bump angular version to alpha.42\n\n1) {\n2)   \"name\": \"angular\",\n3)   \"version\": \"2.0.0-alpha.42\",\n4)   \"branchPattern\": \"2.0.*\",\n5)   \"description\": \"Angular 2 - a web framework for modern web apps\",\n6)   \"homepage\": \"https://github.com/angular/angular\",\n7)   \"bugs\": \"https://github.com/angular/angular/issues\",\n\nNext action [r,n,p,c,d,q,?]? r\n\nCommit: bb9d299b3860f6d579192828451ccd7ace70e1d8\nAuthor: Igor Minar &lt;igor@angularjs.org&gt;\nDate:   Tue Oct 13 12:28:03 2015 -0700 (7 weeks ago)\nPath:   package.json\nMatch:  1 of 1\n\n    chore(release): bump angular version to alpha.41\n\n1) {\n2)   \"name\": \"angular\",\n3)   \"version\": \"2.0.0-alpha.41\",\n4)   \"branchPattern\": \"2.0.*\",\n5)   \"description\": \"Angular 2 - a web framework for modern web apps\",\n6)   \"homepage\": \"https://github.com/angular/angular\",\n7)   \"bugs\": \"https://github.com/angular/angular/issues\",\n</code></pre>"},{"location":"git/awesome_git_addons/#hyper-blame","title":"hyper-blame","text":"<pre><code>$ git hyper-blame -i 3ddda43c ipsum.txt\nc6eb3bfa (lorem 2014-08-11 23:15:57 +0000  1) LOREM IPSUM DOLOR SIT AMET, CONSECTETUR\n134200d1 (lorem 2014-04-10 08:54:46 +0000 2*) ADIPISCING ELIT, SED DO EIUSMOD TEMPOR\na34a1d0d (ipsum 2014-04-11 11:25:04 +0000 3*) INCIDIDUNT UT LABORE ET DOLORE MAGNA\n134200d1 (lorem 2014-04-10 08:54:46 +0000 4*) ALIQUA. UT ENIM AD MINIM VENIAM, QUIS\nc6eb3bfa (lorem 2014-08-11 23:15:57 +0000  5) NOSTRUD EXERCITATION ULLAMCO LABORIS\n0f0d17bd (dolor 2014-06-02 11:31:48 +0000 6*) NISI UT ALIQUIP EX EA COMMODO CONSEQUAT.\n</code></pre>"},{"location":"git/awesome_git_addons/#git-word-blame","title":"git-word-blame","text":"<pre><code>$ git word-blame README.md\nresults in /tmp/word-blame-output/\n - author_stats.tsv\n - commit_stats.tsv\n - word-blame-by-commit.html\n - word-blame-by-author.html\n - text-output\n</code></pre>"},{"location":"git/awesome_git_addons/#git-fire","title":"git-fire","text":"<pre><code>$ git fire\nSwitched to a new branch 'fire-master-maochenyan@gmail.com-1451379915'\nOn branch fire-master-maochenyan@gmail.com-1451379915\nnothing to commit, working directory clean\nCounting objects: 2, done.\nWriting objects: 100% (2/2), 168 bytes | 0 bytes/s, done.\nTotal 2 (delta 0), reused 0 (delta 0)\nTo git@bitbucket.org:maochenyan/fire.git\n * [new branch]      fire-master-maochenyan@gmail.com-1451379915 -&gt; fire-master-maochenyan@gmail.com-1451379915\nBranch fire-master-maochenyan@gmail.com-1451379915 set up to track remote branch fire-master-maochenyan@gmail.com-1451379915 from origin.\n\n\nLeave building!\n</code></pre>"},{"location":"git/awesome_git_addons/#git-town","title":"git-town","text":"<p>TBD - PR Welcome!</p>"},{"location":"git/awesome_git_addons/#git-blame-someone-else","title":"git-blame-someone-else","text":"<pre><code>$ git blame-someone-else 'Steve Mao &lt;maochenyan@gmail.com&gt;' 2efb4e3a061a2e8aaa58033e9c13c3e0e5fcde4b\nSteve Mao  is now the author of 2efb4e3. You're officially an asshole.\n</code></pre>"},{"location":"git/awesome_git_addons/#diff-so-fancy","title":"diff-so-fancy","text":"<pre><code>$ git dsf\n</code></pre>"},{"location":"git/awesome_git_addons/#git-stats","title":"git-stats","text":""},{"location":"git/awesome_git_addons/#git-secret","title":"git-secret","text":""},{"location":"git/awesome_git_addons/#git-secret-init","title":"git secret init","text":"<pre><code>$ git secret init\n'.gitsecret/' created.\n</code></pre>"},{"location":"git/awesome_git_addons/#git-secret-tell","title":"git secret tell","text":"<pre><code>$ git secret tell my@email.com\ndone. my@email.com added as a person who knows the secret.\ncleaning up...\n</code></pre>"},{"location":"git/awesome_git_addons/#git-secret-add","title":"git secret add","text":"<pre><code>$ git secret add hideme.txt\n1 items added.\n</code></pre>"},{"location":"git/awesome_git_addons/#git-secret-list","title":"git secret list","text":"<pre><code>$ git secret list\nhideme.txt\n</code></pre>"},{"location":"git/awesome_git_addons/#git-secret-hide","title":"git secret hide","text":"<pre><code>$ git secret hide\ndone. all 1 files are hidden.\n</code></pre>"},{"location":"git/awesome_git_addons/#git-secret-reveal","title":"git secret reveal","text":"<pre><code>$ git secret reveal\n\nYou need a passphrase to unlock the secret key for\nuser: \"Test User &lt;my@email.com&gt;\"\n2048-bit RSA key, ID #######, created 2015-01-01 (main key ID #######)\n\ngpg: gpg-agent is not available in this session\nFile `hideme.txt' exists. Overwrite? (y/N) y\ndone. all 1 files are revealed.\n</code></pre>"},{"location":"git/awesome_git_addons/#git-secrets","title":"git-secrets","text":"<p>Prevents you from committing passwords and other sensitive information to a git repository.</p> <p>TBD - PR Welcome!</p>"},{"location":"git/awesome_git_addons/#git-fixup","title":"git-fixup","text":"<pre><code>$ git diff --cached -U0\ndiff --git a/README.md b/README.md\nindex 0c700d1..7a57cef 100644\n--- a/README.md\n+++ b/README.md\n@@ -1330 +1330 @@ $ git secret hide\n-done. all 1 files are hidden.\n+done. all 3 files are hidden.\n$ git fixup 6d623f6525dd94b4aaea6f6ae2e7a59edc39bdb8\n24aa3d9c10cc02fe813dc83d1ac792cc2e7d705d [F] add screenshot of git-stats &lt;maochenyan@gmail.com&gt;\n6d623f6525dd94b4aaea6f6ae2e7a59edc39bdb8 [L] changed gif with text &lt;mail@sobolevn.me&gt;\n</code></pre>"},{"location":"git/awesome_git_addons/#git-recent","title":"git-recent","text":"<pre><code>$ git recent\n</code></pre>"},{"location":"git/awesome_git_addons/#git-interactive-rebase-tool","title":"git-interactive-rebase-tool","text":"<pre><code>$ git rebase -i master\n</code></pre>"},{"location":"git/awesome_git_addons/#git-fiddle","title":"git-fiddle","text":"<pre><code>$ git fiddle -h\ngit-fiddle\n\nEdit commit meta information during an *interactive* rebase.\n\n`git-fiddle(1)' is a lightweight wrapper around `git-rebase(1)' that\nannotates each commit with it's *author* date, the author name, as well\nas the commit message. Changes to any of these will then be applied\nusing an 'exec' script during the git-rebase sequence.\n\nUsage:\n  $SCRIPT [--[no-]-fiddle-messages] [args...]\n\nOptions:\n  --[no-]fiddle-messages Do not edit commit messages. Useful for quick edits\n                         to author or date. This value can also be set using\n                         `git config fiddle.messages`.\n  [args...]              These arguments are passed verbatim to git-rebase.\n</code></pre>"},{"location":"git/awesome_git_addons/#git-user","title":"git-user","text":"<pre><code># add a work profile for Henry\n$ git user add work \"Dr. Henry Jekyll\" henry@jekyll.com\nAdded profile 'work'\n\n# add a personal profile for Edward\n$ git user add home \"Edward Hyde\" hyde@night.com\nAdded profile 'home'\n\n# list out our saved profiles\n$ git user list\nGlobal Profile:\n  User: Henry &lt;hjekyll@gmail.com&gt;\n\nSaved Profiles:\n  home: Edward Hyde &lt;hyde@night.com&gt;\n  work: Dr. Henry Jekyll &lt;henry@jekyll.com&gt;\n\n# set the current git repository user to the home profile\n$ git user set home\nThe user for the 'project' repository has been set too 'Edward Hyde &lt;hyde@night.com&gt;'\n\n# list profiles again, notice how the current repository profile is now set\n$ git user\nProject Profile:\n  Path: /path/to/git/project\n  User: Edward Hyde &lt;hyde@night.com&gt;\n\nSaved Profiles:\n  home: Edward Hyde &lt;hyde@night.com&gt;\n  work: Dr. Henry Jekyll &lt;henry@jekyll.com&gt;\n</code></pre>"},{"location":"git/awesome_git_addons/#gitsome","title":"gitsome","text":"<p>TBD - PR Welcome!</p>"},{"location":"git/awesome_git_addons/#git-hound","title":"git-hound","text":"<p>TBD - PR Welcome!</p>"},{"location":"git/awesome_git_addons/#git-recall","title":"git-recall","text":"<pre><code>$ git recall\n# By default (without options), the command will display commits from yesterday and\n# for the current user.\n\n$ git recall -d 5 -a \"Doge\"\n# Show all Doge's commits from 5 days ago.\n\n$ git recall -d 5 -a \"all\"\n# Show commits of all contributors from 5 days ago.\n\n$ git recall -f\n# Fetch commits beforehand.\n</code></pre>"},{"location":"git/awesome_git_addons/#git-standup","title":"git-standup","text":"<pre><code>$ git standup\n2f50b39c - docs(commit messages): use commitizen to generate Conventional Commits (12 hours ago) &lt;Steve Mao&gt;\n9af3600e - fix tests (12 hours ago) &lt;Steve Mao&gt;\n7f17ba97 - docs: title case (12 hours ago) &lt;Steve Mao&gt;\na6d6203c - do not scroll when search is open (12 hours ago) &lt;Steve Mao&gt;\n53fe681a - chore(pkg): add repo url (12 hours ago) &lt;Steve Mao&gt;\n5e952ac0 - subtitle should be generic (13 hours ago) &lt;Steve Mao&gt;\nadbc5423 - add ci/cd to readme. (13 hours ago) &lt;Steve Mao&gt;\na1097116 - add versioning to readme (14 hours ago) &lt;Steve Mao&gt;\n6b6e7465 - add test coverage (15 hours ago) &lt;Steve Mao&gt;\n</code></pre>"},{"location":"git/awesome_git_addons/#commitizen","title":"commitizen","text":"<pre><code>$ git cz\ncz-cli@2.9.6, cz-conventional-changelog@1.2.0\n\n\nLine 1 will be cropped at 100 characters. All other lines will be wrapped after 100 characters.\n\n? Select the type of change that you're committing: (Use arrow keys)\n\u276f feat:     A new feature\n  fix:      A bug fix\n  docs:     Documentation only changes\n  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi\n-colons, etc)\n  refactor: A code change that neither fixes a bug nor adds a feature\n  perf:     A code change that improves performance\n  test:     Adding missing tests or correcting existing tests\n</code></pre>"},{"location":"git/awesome_git_addons/#git-fresh","title":"git-fresh","text":"<p>TBD - PR Welcome!</p>"},{"location":"git/awesome_git_addons/#git-fs","title":"git-fs","text":"<pre><code>$ git fs\nMounting readonly filesystem on ./git/fs\n</code></pre>"},{"location":"git/awesome_git_addons/#git-url","title":"git-url","text":""},{"location":"git/awesome_git_addons/#git-url_1","title":"git url","text":"<pre><code>$ cd ~/github/git-url.git\n$ git url\nEncoding... INPUT is next paragraph:\n\nProtocol:  https\nSite:      github.com\nRepo:      zdharma/git-url\nRevision:  master\n\ngitu://\u049dj\u0229M\u017cE\u00e4\u1e1d\u0403\u0223\u03df\u1e48\u04db\u0140\u0457\n\n$ git url -r v1.0\nEncoding... INPUT is next paragraph:\n\nProtocol:  https\nSite:      github.com\nRepo:      zdharma/git-url\nRevision:  v1.0\n\ngitu://\u016a\u012a\u0410\u03d4E\u00e4\u1e1d\u0403\u0223\u03df\u1e48\u04db\u0140\u0457\n\n$ git url -q -p lib/common.sh   # -q - quiet, -p - path\ngitu://e\u1e36\u0238\u1e4b0o\u01d7\u021f\u0417\u00dbj\u0229M\u017cE\u00e4\u1e1d\u0403\u0223\u03df\u1e48\u04db\u0140\u0457\n\n$ git url //e\u1e36\u0238\u1e4b0o\u01d7\u021f\u0417\u00dbj\u0229M\u017cE\u00e4\u1e1d\u0403\u0223\u03df\u1e48\u04db\u0140\u0457\nDecoding... OUTPUT is:\n\nProtocol:  https\nSite:      github.com\nRepo:      zdharma/git-url\nRevision:  master\nFile:      lib/common.sh\n\nhttps://github.com/zdharma/git-url\n</code></pre>"},{"location":"git/awesome_git_addons/#git-guclone","title":"git guclone","text":"<pre><code>$ git guclone \u016a\u012a\u0410\u03d4E\u00e4\u1e1d\u0403\u0223\u03df\u1e48\u04db\u0140\u0457\nCloning URL https://github.com/zdharma/git-url for revision v1.0\n\nCloning into 'git-url'...\nremote: Counting objects: 144, done.\nremote: Compressing objects: 100% (111/111), done.\nremote: Total 144 (delta 71), reused 102 (delta 32), pack-reused 0\nReceiving objects: 100% (144/144), 116.43 KiB | 125.00 KiB/s, done.\nResolving deltas: 100% (71/71), done.\n\nChecking out revision/reference v1.0... OK\nHEAD is at: 5d10a204, created directory git-url\n</code></pre>"},{"location":"git/awesome_git_addons/#git-signatures","title":"git-signatures","text":""},{"location":"git/awesome_git_addons/#signatures-add-push","title":"signatures add --push","text":"<pre><code>$ git signatures add --push v1.0.0\nUpdated tag 'v1.0.0' (was 4de5afd)\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 906 bytes | 906.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nTo git@github.com:jsmith/test-signatures\n   4b5300d..5b1f2cd  refs/notes/signatures -&gt; refs/notes/signatures\n + 4de5afd...5b1f2cd v1.0.0 -&gt; v1.0.0 (forced update)\n</code></pre>"},{"location":"git/awesome_git_addons/#signatures-verify","title":"signatures verify","text":"<pre><code>$ git signatures verify v1.0.0\n</code></pre>"},{"location":"git/awesome_git_addons/#signatures-verify-min-count-2","title":"signatures verify --min-count 2","text":"<pre><code>$ git signatures verify --min-count 2 v1.0.0\nFailed to find enough verified signatures to satisfy: min_count=2\n\nSignature verification could fail simply because your local gnupg\nkeychain and trustdb does not contain the required keys.\n\nFor detailed signature status run:\n\n&gt; git signatures show\n</code></pre>"},{"location":"git/awesome_git_addons/#signatures-show","title":"signatures show","text":"<pre><code>$ git signatures show v1.0.0\n Public Key ID    | Status     | Trust     | Date                         | Signer Name\n=======================================================================================================================\n01234567890ABCDEF | VALIDSIG   | ULTIMATE  | Sat Nov 10 13:16:10 EST 2018 | Steve Mao &lt;maochenyan@gmail.com&gt;\n ```\n\n## [git-profile](https://github.com/dm3ch/git-profile-manager)\n### add a work profile\n</code></pre> <p>$ git profile add work Name: Name Surname Email: name@work-domain.com Signing Key: Profile work added successfully</p> <pre><code>\n### add a personal profile\n</code></pre> <p>$ git profile add home -n \"Name Surname\" -e name@gmail.com Profile home added successfully</p> <pre><code>\n### list out our saved profiles\n</code></pre> <p>$ git profile list Existing profiles: work home</p> <pre><code>\n### set the current git repository user to the home profile\n</code></pre> <p>$ git profile use work</p> <pre><code>Currently there will be no output in case of success\n\n## [git-revise](https://github.com/mystor/git-revise)\n\nTBD - PR Welcome!\n\n## [filter-repo](https://github.com/newren/git-filter-repo)\n\nTBD - PR Welcome!\n\n## [git-jump](https://github.com/mykolaharmash/git-jump)\n\nInteractive UI and fuzzy-search for Git branches.\n\n![git-jump interface demo](https://raw.githubusercontent.com/mykolaharmash/git-jump/main/img/demo.gif)\n\n## [git-project](https://github.com/mms-gianni/git-projecto)\n</code></pre> <p>git project open shoppinglist</p> <pre><code></code></pre> <p>git project add shoppinglist milk</p> <pre><code></code></pre> <p>$ git project board</p> <p>Project: shoppinglist  +-----------+------+ |   OPEN    | DONE | +-----------+------+ | something | love | +-----------+------+ | coffee    |      | +-----------+      + | sugar     |      | +-----------+      + | milk      |      | +-----------+------+</p> <pre><code>\n</code></pre> <p>$ git project status</p> <p>Project: shoppinglist   0|  \u2b50  something   1|  \u2b50  coffee   2|  \u2b50  sugar   3|  \u2b50  milk   4|  \u2705  love</p> <pre><code>\n## [git-branchcut](https://github.com/dlsrb6342/git-branchcut)\n### Delete branches with string pattern \n</code></pre> <p>$ git branchcut execute -p \"feature/*\" Switched to branch 'main' Deleted branch feature/test (was 257725f). Deleted branch feature/impl (was 8120c0b).</p> <pre><code>\n### Delete branches with day-offset\n</code></pre> <p>$ git branchcut execute -o 7 Switched to branch 'main' Deleted branch bugfix/test (was e2afad6). Deleted branch too-old-branch (was 1d3f82d).</p> <pre><code>\n## [git-spend](https://github.com/Goutte/git-spend)\n\nCollect and sum the `/spend &lt;duration&gt;` directives found in commit messages.\n\n</code></pre> <p>$ git spend sum 3 weeks 2 days 1 hour 37 minutes</p> <pre><code>\n### Filter by author, range, and more\n\n</code></pre> <p>$ git spend sum --author stevemao --author antoine@goutenoir.com --since tags/v1.0.0 1 week 3 hours ```</p>"},{"location":"git/awesome_git_addons/#license","title":"License","text":"<p>To the extent possible under law, Steve Mao has waived all copyright and related or neighboring rights to this work.</p>"},{"location":"git/git/","title":"git","text":""},{"location":"git/git/#mostrar-grafica-de-commits-en-consola","title":"Mostrar grafica de commits en consola","text":"<pre><code>git log --branches --remotes --tags --graph --oneline --decorate\n</code></pre>"},{"location":"git/git/#cambios-locales-que-no-se-han-subido-al-server","title":"Cambios locales que no se han subido al server","text":"<pre><code>git log --branches --not --remotes=origin\n</code></pre> <p>por revisar</p> <pre><code>git log --reverse --pretty=format:'\"%h\":{%n \"parents\":\"%p\",%n \"message\":\"%s\",%n \"dat\":\"%cr\",%n \"name\":\"%an\"%n},'\n</code></pre>"},{"location":"git/git/#exportar-de-una-revision-a-otra-en-git","title":"Exportar de una revisi\u00f3n a otra en git","text":"<p>Este comando es sobre el cmd de windows</p> <pre><code>for /f \"usebackq tokens=*\" %A in (`git diff-tree -r --no-commit-id --name-only --diff-filter=ACMRT 441dc870f52ee04068a5aba6a2c4acd1d6840ffe HEAD`) do echo FA|xcopy \"%~fA\" \"C:\\git_changed_files\\%A\"\n</code></pre>"},{"location":"git/git/#guardar-credenciales","title":"Guardar credenciales","text":"<p>Se usa para que no las solicite cada vez que se realiza una operaci\u00f3n sobre los remotes, tener cuidado que se almacenan en texto plano en <code>/home/username/.git-credentials</code></p> <pre><code>git config --global credential.helper store\n</code></pre>"},{"location":"git/git/#definir-usuario-y-email-para-los-commits","title":"Definir usuario y email para los commits","text":"<p>Esta configuraci\u00f3n se alamcena en <code>/home/username/.gitconfig</code></p> <pre><code>git config --global user.email \"usuario@servidor.com\"\ngit config --global user.name \"Nombre Usuario\"\n</code></pre>"},{"location":"git/git/#cambiar-origen-de-repositorio-de-https-a-ssh","title":"Cambiar origen de repositorio de https a ssh","text":"<p>Para ver donde apuntan los origenes del repositorio se ejecuta el comando <code>git remote -v</code> el que tiene como salida algo como esto:</p> <pre><code>origin  https://usuario@servidor.org/url/del/repositorio.git (fetch)\norigin  https://usuario@servidor.org/url/del/repositorio.git (push)\n</code></pre> <p>Para cambiar la url de origen a <code>ssh</code> se realiza con el siguiente comando:</p> <pre><code>git remote set-url origin git@servidor.org:url/del/repositorio.git\n</code></pre> <p>Si volvieramos a ejecutar <code>git remote -v</code> veremos como nuestro origen a cambiado de <code>https</code> a <code>ssh</code></p> <pre><code>origin  git@servidor.org:url/del/repositorio.git (fetch)\norigin  git@servidor.org:url/del/repositorio.git (push)\n</code></pre> <p>Nota: en caso de querer cambiar de <code>ssh</code> a <code>https</code> ser\u00eda el mismo proceso pero cambiando la url</p>"},{"location":"git/git/#compare-changes-from-branch-xxx-against-master","title":"Compare changes from branch XXX against master","text":"<pre><code>git reset $(git merge-base master XXX)\n</code></pre>"},{"location":"git/git/#create-a-fake-commit-and-trigger-the-new-build","title":"Create a fake commit and trigger the new build","text":"<pre><code>git commit -a --amend --no-edit --no-verify; git push --force-with-lease\n</code></pre>"},{"location":"git/git/#create-an-empty-commit","title":"Create an empty commit","text":"<pre><code>git commit --allow-empty -m \"My empty commit with a message\"\n</code></pre>"},{"location":"git/git/#rename-git-branch-locally-and-remotely","title":"Rename git branch locally and remotely","text":"<pre><code>git branch -m old_branch new_branch         # Rename branch locally    \ngit push origin :old_branch                 # Delete the old branch    \ngit push --set-upstream origin new_branch   # Push the new branch, set local branch to track the new remote\n</code></pre>"},{"location":"git/git/#takes-a-patch-eg-the-output-of-git-diff-and-applies-it-to-the-working-directory","title":"Takes a patch (e.g. the output of git diff ) and applies it to the working directory","text":"<pre><code>git apply &lt;&lt; EOF\n... some diff here\nEOF\n</code></pre>"},{"location":"git/git/#attaches-a-pull-request-for-the-current-branch-to-the-existing-issue-number-x-using-hub","title":"Attaches a pull request for the current branch to the existing issue number x using hub","text":"<pre><code>hub pull-request -i x\n</code></pre>"},{"location":"git/git/#remove-all-your-local-git-branches-but-keep-master","title":"Remove all your local git branches but keep master","text":"<pre><code>git branch | grep -v \"master\" | xargs git branch -D\n</code></pre>"},{"location":"git/git/#pull-multiple-projects-automatically","title":"Pull multiple projects automatically","text":"<pre><code>find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull \\;\n</code></pre>"},{"location":"git/git/#remove-all-files-which-are-not-tracked-by-git","title":"Remove all files which are not tracked by git","text":"<pre><code>git clean -fxd\n</code></pre>"},{"location":"git/git/#move-branches-around","title":"Move branches around","text":"<p>Reassign a branch to a commit with the -f option. It moves (by force) the main branch to three parents behind HEAD.</p> <pre><code>git branch -f main HEAD~3\n</code></pre>"},{"location":"git/git/#shorthand-for-a-fetch-and-a-rebase","title":"Shorthand for a fetch and a rebase","text":"<pre><code>git pull --rebase\n</code></pre>"},{"location":"git/git/#show-any-action-performed-in-git","title":"Show any action performed in git","text":"<pre><code>git reflog\n</code></pre>"},{"location":"git/git/#print-the-sha1-hashes-given-a-revision","title":"Print the SHA1 hashes given a revision","text":"<pre><code>git rev-parse\n</code></pre>"},{"location":"git/git/#remove-all-branches-matching-a-pattern","title":"Remove all branches matching a pattern","text":"<pre><code>git branch | grep \"&lt;pattern&gt;\" | xargs git branch -D\n</code></pre>"},{"location":"git/git/#check-all-differences-between-two-branches-and-apply-to-a-new-branch","title":"Check all differences between two branches and apply to a new branch","text":"<pre><code>git checkout master\ngit diff master..your-branch &gt; mypatch.patch\ngit checkout -b new-branch\ngit apply mypatch.patch\n</code></pre>"},{"location":"git/git/#remove-all-untracked-files","title":"Remove all untracked files","text":"<p>To see which files will be deleted:</p> <pre><code>git clean -n\n</code></pre> <p>To remove all files:</p> <pre><code>git clean -f\n</code></pre>"},{"location":"git/git/#revert-latest-commit-which-was-pushed","title":"Revert latest commit which was pushed","text":"<p>Create a new commit that undoes the changes of a previous commit.</p> <pre><code>git revert HEAD\n</code></pre>"},{"location":"git/git/#create-a-path-file","title":"Create a path file","text":"<pre><code>git diff &gt; my_patch.patch\n</code></pre>"},{"location":"git/git/#apply-a-path-file","title":"Apply a path file","text":"<pre><code> git apply my_patch.patch\n</code></pre>"},{"location":"git/tips/","title":"Tips","text":"<p>https://firstaidgit.io/</p>"},{"location":"git/tips/#merge-my-local-changes-with-another-branch","title":"Merge my local changes with another branch","text":""},{"location":"git/tips/#modify-undo-commit-after-push-reset","title":"modify undo commit after push reset","text":"<p>This can be done while a regular <code>merge</code>, and you should keep your merge history by making sure to use <code>--no-ff</code>, which means no fast forward. </p> <p>Switch to the branch you're merging against, make sure it's up to date, and merge: </p> <p><code>git merge &lt;the-other-branch&gt; --no-ff</code> </p> <p>You should get a commit message with the <code>merge X into Y branch</code>, anthen you can safely push your merge.&gt;</p>"},{"location":"git/tips/#undo-commit-before-pushing-changes","title":"Undo commit before pushing changes","text":""},{"location":"git/tips/#modify-undo-commit-local-before-push-reset","title":"modify undo commit local before push reset","text":"<p>If you made a commit that you wish to modify or erase entirely, the git <code>reset</code> command can be of help here. </p> <p><code>git reset HEAD~1 # undo last commit, keep the changes</code> </p> <p><code>git reset --hard HEAD~1 #undo last commit, erase the changes</code> </p> <p>Naturally, be careful when using the last option as your local files will be discarded! </p> <p>To keep the samcommit message:</p> <p><code>git commit -a -c ORIG_HEAD</code></p> <p>You will be prompted with your last commit message. </p> <p>Tips from hrbonz </p>"},{"location":"git/tips/#recover-a-deleted-branch","title":"Recover a deleted branch","text":""},{"location":"git/tips/#recover-deleted-branch","title":"recover deleted branch\"","text":"<p>By typing <code>git reflog</code>, you can grab the commit hash (SHA1) at the top of your deleted branch. Copy this <code>sha</code>, then use: </p> <p><code>git checkout &lt;sha&gt;</code> </p> <p>Once you've done that, recover the branch by typing: </p> <p><code>git checkout -b &lt;branchname&gt;</code></p> <p>git reflog</p>"},{"location":"git/tips/#display-the-commits-that-have-deleted-files","title":"Display the commits that have deleted files","text":""},{"location":"git/tips/#display-show-deleted-files-history","title":"display show deleted files history","text":"<p>You can quickly check which commits included deleted files by using the following command: </p> <p><code>git log --diff-filter=D --summary</code> </p> <p>This will show you the commits in which files were removed.</p>"},{"location":"git/tips/#rebase-my-branch-with-master","title":"Rebase my branch with master","text":""},{"location":"git/tips/#rebase-branch-against-master-changes","title":"rebase branch against master changes","text":"<p>To catch-up with the latest changes from master (or any other branch you started from), you can and should rebase against it. Say you're working on the <code>foobar</code> branch: </p> <p><code>git checkout foobar</code> </p> <p>Followed by a rebase: </p> <p><code>git rebase master</code> </p> <p>This applies the <code>origin</code> commits on top of master. When you're done with solving conflicts, continuby using <code>git rebase --continue</code>. At this point you can continue to work on your branch or merge it against master. </p> <p>Learn more about rebases</p>"},{"location":"git/tips/#restore-a-deleted-file","title":"Restore a deleted file","text":""},{"location":"git/tips/#restore-recover-deleted-file","title":"restore recover deleted file","text":"<p>If you deleted a file by accident, you can get it back by checking it out again: </p> <p><code>git checkout myFile.txt</code> </p> <p>If you need to restore a file from a certain point in time in your commit history, grab the hash of that commit and run: </p> <p><code>git checkout $commit~1 myFile.txt</code></p>"},{"location":"git/tips/#discard-local-file-changes","title":"Discard local file changes","text":""},{"location":"git/tips/#revert-changes-reset-file-specific-version","title":"revert changes reset file specific version","text":"<p>The easiest way to get rid of unwanted changes is by resetting a file or a folder to the current commit state. To do so, you can use </p> <p><code>git checkout myFile.txt</code> </p> <p>You can also reset a specific path instead: </p> <p><code>git checkout -- myPath</code></p>"},{"location":"git/tips/#clear-all-stashed-states","title":"Clear all stashed states","text":""},{"location":"git/tips/#clear-stash","title":"clear stash","text":"<p>You can clear all stashed states by using: </p> <p><code>git stash clear</code></p>"},{"location":"git/tips/#remove-untracked-files-and-folders","title":"Remove untracked files and folders","text":""},{"location":"git/tips/#remove-clear-untracked-files","title":"remove clear untracked files\"","text":"<p>To remove all untracked files from your working copy: </p> <p><code>git clean -f</code> </p> <p>To remove all untracked files and folders: </p> <p><code>git clean -fd</code> </p> <p>Tip: If you'd like to see first which files will be untracked before actually removing them, you can do a safe clean test by running: </p> <p><code>git clean -n</code></p> <p>git clean</p>"},{"location":"git/tips/#undo-a-commit-message-before-pushing","title":"Undo a commit message before pushing","text":""},{"location":"git/tips/#undo-commit-message-before-pushing-amend","title":"undo commit message before pushing amend","text":"<p>You can amend your commit message by typing <code>git commit --amend</code>, which will open your editor and allow you to make changes to the most recent commit message. </p> <p>You can also modify the message directly, by using: </p> <p><code>git commit --amend -m \\\"My new awesome message\\\"</code></p>"},{"location":"git/tips/#display-commits-by-author","title":"Display commits by author","text":""},{"location":"git/tips/#display-show-commits-by-author-name","title":"display show commits by author name\"","text":"<p>You can filter the commit history by author by using: </p> <p><code>git log --author=\\\"AuthorName\\\"</code></p> <p>git log author</p>"},{"location":"git/tips/#search-for-a-specific-commit-message-in-all-commits","title":"Search for a specific commit message in all commits","text":""},{"location":"git/tips/#search-commit-message-regexp-log-find","title":"search commit message regexp log find","text":"<p>You can search for a specific commit log by matching it on a regular expression. Use: </p> <p><code>git log --grep &lt;your-query&gt;</code></p>"},{"location":"git/tips/#undo-a-commit-message-after-pushing","title":"Undo a commit message after pushing","text":""},{"location":"git/tips/#undo-commit-message-after-pushing-amend","title":"undo commit message after pushing amend","text":"<p>This is a two-step process. You need to amend your commit message by using <code>git commit --amend</code>, and then you re-write your branch commit history by force pushing the commit: <code>git push &lt;remote&gt; &lt;branch&gt; --force</code> </p> <p>Warning: by force pushing, you can lose the remote branch commits if your local branch is not up to date, so be careful.</p>"},{"location":"git/tips/#combine-two-or-more-commits","title":"Combine two or more commits","text":""},{"location":"git/tips/#combine-commits-join-rebase","title":"combine commits join rebase\"","text":"<p>You will need to use an interactive rebase. If you're rebasing against master, start the process by typing <code>git rebase -i master</code>. However, if you're not rebasing against a branch, you'll need to rebase against your <code>HEAD</code>.</p> <p>If you want to squash your last 2 commits, you can use: </p> <p><code>git rebase -i HEAD~2</code>.</p> <p>You will then be prompted to folloinstructions to pick commits. If you wish to combine all your commits with the oldest first commit, leave the first line with <code>pick</code> and change the letter to <code>f</code> on all other commits. Learn more about rebases </p> <p>git rebase</p>"},{"location":"git/tips/#remove-a-file-from-git-but-keep-the-local-file","title":"Remove a file from git but keep the local file","text":""},{"location":"git/tips/#remove-file-from-git-delete","title":"remove file from git delete","text":"<p>This will remove the file your your git tracking, but keep your local copy:</p> <p><code>git rm --cached myfile.txt</code></p>"},{"location":"git/tips/#compare-an-old-revision-of-a-file","title":"Compare an old revision of a file","text":""},{"location":"git/tips/#compare-old-revision-file","title":"compare old revision file\"","text":"<p>You can easily view the contents of a file at a specific point in time by using: </p> <p><code>git show commitHash:myFile.txt</code></p> <p>git show</p>"},{"location":"git/tips/#squash-feature-branch-commits-to-merge-into-the-release-branch","title":"Squash feature branch commits to merge into the release branch","text":""},{"location":"git/tips/#squash-combine-commits-feature-merge-update-release","title":"squash combine commits feature merge update release\"","text":"<p>If you decide to merge and squash your commits, this will create a new commit but only in the release branch, therefore the history of the feature branch will remain intact. </p> <p>Here's an example on how to achieve this: </p> <p><code>git fetch origin</code> </p> <p><code>git checkout [release-branch]</code> </p> <p><code>git rebase origin/[release-branch]</code> </p> <p><code>git merge \u2014squas\u2014no-commit [feature-branch]</code> </p> <p><code>git commit -m 'Merge X into Y'</code> </p> <p>You'll end up with one commit only in your release branch, while keeping the feature history intact. </p> <p>Learn more about feature branches</p> <p>git squash</p>"},{"location":"git/tips/#reset-to-a-certain-commit-in-history","title":"Reset to a certain commit in history","text":""},{"location":"git/tips/#revert-reset-commit-certain-history","title":"revert reset commit certain history","text":"<p>If you don't care about your local changes, you can reset back to one commit back in time by doing a hard reset: </p> <p><code>git reset --hard HEAD~1</code> </p> <p>This will set the HEAD back by one commit. You can also do this using the commit hash instead.</p>"},{"location":"git/tips/#untrack-files-that-already-exist","title":"Untrack files that already exist","text":""},{"location":"git/tips/#untrack-remove-files-already-exist-there","title":"untrack remove files already exist there","text":"<p>If you want to untrack a file that already exists in the repo but would still like to keep it locally, commit your changes and run: </p> <p><code>git rm -r --cached</code> </p> <p>This will remove changed files from the staging area. Afterwards, just run a normal: </p> <p><code>git add .</code> and commit your changes.</p>"},{"location":"git/tips/#recover-a-deleted-tag","title":"Recover a deleted tag","text":""},{"location":"git/tips/#recover-undo-deleted-tag-accident","title":"recover undo deleted tag accident","text":"<p>If you want to recover a tag deleted by accident, start by grabbing it: </p> <p><code>git fsck --unreachable | grep tag</code> </p> <p>Once you found it, you can restore it: </p> <p><code>git update-ref refs/tags/NAME KEY</code> </p> <p>Source</p>"},{"location":"git/tips/#move-uncommited-changes-to-a-new-branch","title":"Move uncommited changes to a new branch","text":""},{"location":"git/tips/#create-new-branch-keep-changes","title":"create new branch keep changes","text":"<p>Too often we start changing files on a branch to fix something, only then realising we didn't create a new branch before. Luckily, this is as simple as creating a new branch: </p> <p><code>git checkout -b my-new-branch-name</code> </p> <p>This will bring any files from your current branch into the new one, which you can commit then.</p>"},{"location":"git/tips/#push-locally-created-branch-to-remote","title":"Push locally created branch to remote","text":""},{"location":"git/tips/#push-local-branch-remote","title":"push local branch remote","text":"<p>If you've created a local branch but now want it to be tracked on the remote you can run: </p> <p><code>git push -u origin my-new-branch-name</code> </p> <p>Now everyone can checkout to your branch.</p>"},{"location":"git/tips/#recover-stashed-changes","title":"Recover stashed changes","text":""},{"location":"git/tips/#recover-stash-stash-changes-stashed","title":"recover stash stash@ changes stashed\"","text":"<p>If you still have your changes stashed, you can apply them onto your branch by using <code>git stash apply</code>. You can run <code>git diff</code> to compare the differences. To get rid of the stash afterwards run: </p> <p><code>git stash drop</code> </p> <p>If you have more than one stash, find the one you need by running: </p> <p><code>git stash list</code> and applying it by referencing its index</p> <p><code>git stash@{1}</code> </p> <p>Keep in mind that this is zero-based (<code>stash@{0}</code> is the first one) </p> <p>Read more about stashes</p> <p>git checkout stash</p>"},{"location":"git/tips/#rename-my-local-and-remote-branch","title":"Rename my local and remote branch","text":""},{"location":"git/tips/#rename-wrong-name-branch","title":"rename wrong name branch","text":"<p>Let\u2019s say you have a \u201cfix-bug25\u201d branch, and you want to rename it to \u201chotfix-users\u201d. First, change the local branch: </p> <p><code>git branch -m fix-bug25 hotfix-users</code> </p> <p>Now, the remote branch: you can\u2019t rename the branch directly, so you\u2019ll need to delete it and push it again with the new name. Make sure no one else within your team is working on itDelete the branch: <code>git push origin --delete fix-bug25</code> </p> <p>And now let's push the new one: <code>git push origin hotfix-users</code></p>"},{"location":"git/tips/#undo-a-commit-after-pushing-it-to-master","title":"Undo a commit after pushing it to master","text":""},{"location":"git/tips/#undo-revert-commit-pushed-after-push","title":"undo revert commit pushed after push\"","text":"<p>This will revert one or more commits that you want to erase from the remote branch. You can either specify one by hash: </p> <p><code>git revert b712c3c</code> </p> <p>Revert only the second to last commit: </p> <p><code>git revert HEAD^</code> </p> <p>Or undo the last commit without creating a revert commit: </p> <p><code>git revert -n HEAD</code> </p> <p>Tip: <code>HEAD~1</code> is a shortcut to <code>HEAD^</code>, themean the same thing. Learn more about git revert</p> <p>git revert</p>"},{"location":"git/tips/#unstage-a-file","title":"Unstage a file","text":""},{"location":"git/tips/#unstage-file-from-remove-commit","title":"unstage file from remove commit","text":"<p>To unstage a file added by mistake, the easiest option would be: </p> <p><code>git reset HEAD unlovedFile.txt</code></p>"},{"location":"git/tips/#committed-to-the-wrong-branc-commit-wrong-branch-master-accident","title":"Committed to the wrong branc### commit wrong branch master accident","text":"<p>Start by switching to the new branch you forgot to create, by typing </p> <p><code>git checkout -b &lt;new-branch&gt;</code>. </p> <p>Switch back to the original branch now: </p> <p><code>git checkout &lt;original-branch&gt;</code> </p> <p>...and reset to the last commit you want to keep. </p> <p>To do so, you can type <code>git log</code> and save the hash (SHA1) of the last commit that you want to keep. Let'say this is <code>a31a45c</code>. </p> <p>Now you have to reset it: <code>git reset --hard a31a45c</code> and push this last forced reset. </p> <p>Warning: Make sure no one has committed to that original branch in the meantime, or changes might be lost!</p>"},{"location":"git/tips/#delete-remote-branch","title":"Delete remote branch","text":""},{"location":"git/tips/#delete-remote-branch_1","title":"delete remote branch","text":"<p>If you are positive this branch can be deleted, type: </p> <p><code>git push origin --delete branch-name</code></p> <p>ssuming that you have no changes that you want to save, this can be done with two easy commands. </p> <p>First let's get a fresh fetch of the remote: </p> <p><code>git fetch &lt;remoteBranchName&gt;</code>. </p> <p>Then let's tell git that we want to reset our local to the head of our remote branch like so: </p> <p><code>git reset --hard origin/&lt;localBranchName&gt;</code>. </p> <p>If you do hav### you wish to keep, you should check out a new branch and make a commit before resetting: <code>git commit -m \\\"just in case\\\"</code> </p> <p><code>git branch my-new-branch-name</code>\"</p>"},{"location":"git/tips/#reset-local-branch-to-match-remote","title":"Reset local branch to match remote","text":"<p>reset local branch to match remote</p>"},{"location":"git/tips/#show-number-of-commits-from-each-contributor","title":"Show number of commits from each contributor","text":""},{"location":"git/tips/#show-number-commits","title":"show number commits","text":"<p>Want to see how many commits everyone in your team has made? </p> <p><code>git shortlog -s -n</code> </p> <p>This will order the authors in decending order by number of commits made.</p>"},{"location":"git/tips/#show-all-the-commits-to-one-file","title":"Show all the commits to one file","text":""},{"location":"git/tips/#show-all-commits-file","title":"show all commits file\"","text":"<p>Ever wanted to see all the commits made to a single file? </p> <p><code>git log --follow -p -- myfile</code> </p> <p>This will show all the commits made to a single file. The <code>--follow</code> argument ensures that we can see commits made to that file even if it was under a different file name at the time. </p> <p>Omit the <code>-p</code> to just see the commit messages and not the commicontent.</p> <p>git log follow</p>"},{"location":"git/tips/#use-command-aliass-in-your-cli","title":"Use command alias's in your CLI","text":""},{"location":"git/tips/#command-alias","title":"command alias","text":"<p>Getting fed up of typing <code>git status</code>? Well we can easily alias that command to something slightly quicker to type within git. </p> <p><code>git config --global alias.st status</code> </p> <p>Now all we have to type is <code>git st</code> </p> <p>We can take it a step further by aliasing more complicated commands to an alias: </p> <p><code>git config --global alias.logme 'log ---author=Rob'</code> </p> <p>Now we've aliased <code>git logme</code> to show all of our commits.</p>"},{"location":"git/tips/#mark-a-conflict-file-as-resolved","title":"Mark a conflict file as resolved","text":""},{"location":"git/tips/#conflict-mark-resolve-file","title":"conflict mark resolve file\"","text":"<p>To mark a file (or several) conflicted files as resolved so you can push the changes up, normally add these files: </p> <p><code>git add &lt;file&gt;</code> </p> <p>You can then type <code>git commit</code> to solve these conflicts and push the changes up. </p> <p>Suggested by Robert W\u00fcnsch.</p> <p>git add</p>"},{"location":"git/tips/#display-all-unpushed-commits","title":"Display all unpushed commits","text":""},{"location":"git/tips/#display-show-unpushed-commits","title":"display show unpushed commits\"","text":"<p>To view all the commits that are yet to be pushed to all branches, use the following command: </p> <p><code>git log --branches --not --remotes</code> </p> <p>Alternatively, you can also use: </p> <p><code>git log origin/master..HEAD</code></p> <p>git log</p>"},{"location":"git/tips/#rename-a-git-tag","title":"Rename a git tag","text":""},{"location":"git/tips/#rename-tag-name-change","title":"rename tag name change\"","text":"<p>To rename an existing tag: </p> <p><code>git tag &lt;newTag&gt; &lt;oldTag&gt;</code> </p> <p><code>git tag -d &lt;oldTag&gt;</code> </p> <p><code>git push origin :refs/tags/&lt;oldTag&gt;</code> </p> <p><code>git push --tags</code></p> <p>git tag</p>"},{"location":"git/tips/#remove-old-remote-git-branches","title":"Remove old remote git branches","text":""},{"location":"git/tips/#remove-old-prune-branch","title":"remove old prune branch\"","text":"<p>If a branch is removed on the remote, you can delete it from the local refs by using the <code>git-remote prune &lt;name&gt;</code> feature. </p> <p>This will delete the stale remote-tracking branch under , where the stale branch has already been removed from the remote repository referenced by , but are still locally available in <code>remotes/&lt;name&gt;</code>. <p>git remote prune"},{"location":"git/tips/#update-a-specific-submodule","title":"Update a specific submodule","text":""},{"location":"git/tips/#update-submodule","title":"update submodule\"","text":"<p>To update a specific submodule in your repository, you should append the path to your submodule: </p> <p><code>git submodule update --remote --merge &lt;path&gt;</code> </p> <p>Suggested by Wouter Peschier.</p> <p>git submodule remote merge</p>"},{"location":"git/tips/#stage-deleted-files","title":"Stage deleted files","text":""},{"location":"git/tips/#stage-commit-deleted-files-folders","title":"stage commit deleted files folders\"","text":"<p>To stage for commit files or folders that you have deleted locally, you can use: </p> <p><code>git add -u</code> </p> <p>If you only want to stage the current path you're in, use: </p> <p><code>git add -u .</code></p> <p>git add -u</p>"},{"location":"git/tips/#move-recent-commits-to-a-new-branch","title":"Move recent commits to a new branch","text":""},{"location":"git/tips/#move-recent-commits-to-new-branch-last","title":"move recent commits to new branch last\"","text":"<p>Say you want to move the last 2 commits into a new, separate branch. You can do this by creating the branch, rolling back 2 commits and checking out the branch. So: </p> <p><code>git branch &lt;branch-name&gt;</code> </p> <p><code>git reset --hard HEAD~2 # this rolls back 2 commits</code> </p> <p><code>git checkout &lt;branch-name&gt;</code> </p> <p>Note that by HARD resetting you will lose any uncommitework. So make sure that everything is committed!</p> <p>git reset branch</p>"},{"location":"git/tips/#show-all-remote-branches","title":"Show all remote branches","text":""},{"location":"git/tips/#show-branches-remote-display","title":"show branches remote display\"","text":"<p>To view a list of all tracked and untracked remote branches, use: </p> <p><code>git remote show origin</code></p> <p>git add -u</p>"},{"location":"git/tips/#list-all-files-changed-in-a-commit","title":"List all files changed in a commit","text":""},{"location":"git/tips/#show-branches-remote-display_1","title":"show branches remote display\"","text":"<p>To view just the file names, use: </p> <p><code>git show --name-only SHA1</code></p> <p>Also view the status:</p> <p><code>git show --name-status SHA1</code></p> <p>git show</p>"},{"location":"git/tips/#checkout-a-file-from-a-different-branch","title":"Checkout a file from a different branch","text":""},{"location":"git/tips/#checkout-file-different-branch","title":"checkout file different branch\"","text":"<p>You can checkout a single file from a different branch without switching to it. Use: </p> <p><code>git checkout &lt;branch_name&gt; -- &lt;file_path&gt;</code></p> <p>git checkout</p>"},{"location":"git/tips/#show-contents-of-a-file-at-a-specific-commit","title":"Show contents of a file at a specific commit","text":""},{"location":"git/tips/#show-contents-of-a-file-at-a-particular-commit","title":"Show contents of a file at a particular commit\"","text":"<p>You can get a file\u2019s contents out from a specific commit. Use: </p> <p><code>git show &lt;treeish&gt;:&lt;file&gt;</code> </p> <p>Source</p> <p>git show</p>"},{"location":"git/tips/#clone-a-repository-without-getting-the-entire-history","title":"Clone a repository without getting the entire history","text":""},{"location":"git/tips/#git-clone","title":"git clone\"","text":"<p>You're looking for a shallow clone. This will only fetch the latest history and not all the objects in the repository, which might take a long time while not necessary. </p> <p><code>git clone &lt;repository URL&gt; --depth 1</code> </p> <p>The <code>depth</code> parameter allows you to specify how deep you want to go: </p> <p><code>git clone &lt;repository URL&gt; --depth 5</code></p> <p>clone shallow depth</p>"},{"location":"git/tips/#add-a-remote-repository","title":"Add a remote repository","text":""},{"location":"git/tips/#remote-add-origin","title":"remote add origin\"","text":"<p>Before you can push to a remote, you first need to add one. When you clone a repository, git will automatically add the URL you cloned from as the <code>origin</code> remote. To add one yourself, use: </p> <p><code>git remote add &lt;remote eame&gt; &lt;repository URL&gt;</code> </p> <p>For example: </p> <p><code>git remote add upstream https://github.com/magalhini/firstaidgit.git</code></p> <p>git remote add</p>"},{"location":"git/tips/#list-all-remote-branches","title":"List all remote branches","text":""},{"location":"git/tips/#remote-branch-list-all","title":"remote branch list all\"","text":"<p>To list all remotes: </p> <p><code>git remote</code> </p> <p>This will only show the names of the remotes. To view more information, use <code>git remote show</code>.</p> <p>git remote</p>"},{"location":"git/tips/#show-information-about-a-remote-branch","title":"Show information about a remote branch","text":""},{"location":"git/tips/#remote-branch-show-information","title":"remote branch show information\"","text":"<p>To show information about a remote branch, such as fetch and push URLs, tracked branches and HEAD, use: </p> <p><code>git remote show origin</code> </p> <p>Where <code>origin</code> is your remote.</p> <p>git remote show</p>"},{"location":"git/tips/#delete-specified-tag","title":"Delete specified tag","text":""},{"location":"git/tips/#delete-tag-for-local-and-remote","title":"delete tag for local and remote\"","text":"<p>You can delete a specific tag locally using: </p> <p><code>git tag -d [tag name]</code> </p> <p>Remove tag from remote using: </p> <p><code>git push [remote name] :refs/tags/[tag name]</code> </p> <p>git tag</p> <p>## Rename a remote</p>"},{"location":"git/tips/#rename-a-remote","title":"rename a remote\"","text":"<p>To rename a remote: </p> <p><code>git remote rename &lt;oldRemote&gt; &lt;newRemote&gt;</code> </p> <p>You can verify your changes by listing the remotes: </p> <p><code>git remote</code> </p> <p>Source</p> <p>git remote rename  <p>{</p>"},{"location":"git/tips/#remove-a-submodule","title":"Remove a submodule","text":""},{"location":"git/tips/#remove-submodule-rm-delete","title":"remove submodule rm delete\"","text":"<p>To remove a submodule use: </p> <p><code>git rm &lt;submodule_path&gt;</code></p> <p>In case you later want to add a submodule with the same name, you will also need to use:</p> <p><code>rm -rf .git/modules/&lt;submodule_path&gt;</code></p> <p>git rm</p>"},{"location":"git/tips/#compare-commit-log-difference-between-2-branches","title":"Compare commit log difference between 2 branches","text":""},{"location":"git/tips/#commit-log-difference-between-2-branches","title":"commit log difference between 2 branches\"","text":"<p>You can compare difference in commit log between 2 branches by: </p> <p><code>git log [branch one]..[branch two]</code> </p> <p>Example to compare the staging and development branch logs: </p> <p><code>git log staging..development</code> </p> <p>git log</p>"},{"location":"git/tips/#list-untracked-files-within-untracked-directories","title":"List untracked files within untracked directories","text":""},{"location":"git/tips/#list-untracked-files-within-untracked-directories_1","title":"list untracked files within untracked directories\"","text":"<p>To list untracked files within untracked directories: </p> <p><code>git status -u</code> </p> <p>By default, git will not show files within directories that are untracked.</p> <p>git status</p>"},{"location":"links/api/","title":"api","text":"<ul> <li>https://unsplash.com/developers</li> </ul>"},{"location":"links/api/#directorio-de-apis","title":"Directorio de api's","text":"<ul> <li> <p>https://rapidapi.com/collection/stock-photo-api</p> </li> <li> <p>Api para probar frontend con datos reales https://reqres.in/</p> </li> </ul>"},{"location":"links/images/","title":"Images","text":"<ul> <li>Pexels</li> <li>Pixabay</li> <li>Unsplash</li> <li>Morguefile</li> <li>Foter</li> <li>123rf</li> <li>Wallhaven</li> <li>Undraw</li> <li>Flaticon</li> <li>Freepik</li> <li>svgporn</li> </ul>"},{"location":"links/others/","title":"Others links","text":"<ul> <li> <p>Zedge</p> </li> <li> <p>Linuxize</p> </li> <li> <p>https://tldr.sh/</p> </li> <li> <p>https://devhints.io/</p> </li> <li> <p>https://crontab.guru/</p> </li> <li> <p>Consultar IP p\u00fablica http://www.vermiip.es/</p> </li> <li> <p>Compartir ficheros https://pixeldrain.com/apps</p> </li> <li> <p>P\u00e1gina de art\u00edculos de linux https://es.linux-console.net/</p> </li> </ul>"},{"location":"operating_systems/linux/cdpath/","title":"CDPATH","text":"<p>CDPATH es una variable de entorno. Muy parecida a PATH que contiene muchas rutas diferentes concatenadas usando ':'</p>"},{"location":"operating_systems/linux/cdpath/#uso","title":"Uso","text":"<p>Digamos, por ejemplo, que el usuario accede con frecuencia a algunos directorios presentes en un directorio <code>\"X\"</code>. Cada vez que el usuario quiere llegar a cualquiera de estos directorios presentes en <code>\"X\"</code>, la mayor\u00eda de las veces lo atraviesa dando la ruta absoluta, lo que lleva poco tiempo si tiene que encontrarla. Qu\u00e9 bueno ser\u00eda si pudi\u00e9ramos hacer <code>\"cd\"</code> en el directorio en particular como si ese directorio que est\u00e1 buscando estuviera justo debajo de su directorio actual. Esto es lo que logra <code>CDPATH</code>.</p> <p>Normalmente, cuando se da el comando <code>cd</code>, verifica el nombre del directorio en el directorio actual y arroja un error si no se encuentra, de lo contrario, atraviesa el directorio. Si se establece el <code>CDPATH</code>, el comando <code>\"cd\"</code> comienza a buscar el directorio en la lista de directorios presentes en la variable <code>CDPATH</code> y luego hace que el directorio cambie de manera apropiada.</p>"},{"location":"operating_systems/linux/cdpath/#como-definir-la-varialbe-cdpath","title":"Como definir la varialbe CDPATH","text":"<p>Definir la variable <code>CDPATH</code> es exactamente igual que con la variable <code>PATH</code>, puedes agregar mas de un directorio de entrada separando las rutas por <code>:</code>, por ejemplo:</p> <pre><code>$ export CDPATH=\".:/home/guru:/usr\"\n</code></pre> <p>Para que tengas estos cambios cada vez que inicies sesi\u00f3n deberias ubicar la exportaci\u00f3n dentro de el fichero <code>~/.bash_profile</code> o <code>~/.profile</code></p>"},{"location":"operating_systems/linux/estructura_de_directorios/","title":"estructura-de-directorios","text":"<p>Fuente https://geekland.eu/estructura-de-directorios-en-linux/</p>"},{"location":"operating_systems/linux/bash/ps1/","title":"PS1","text":"<p>Cuando lo ejecutamos de forma interactiva, y cuando est\u00e1 preparado para leer un comando, bash nos muestra el indicador primario <code>PS1</code>. El indicador secundario <code>PS2</code> aparece cuando necesita m\u00e1s informaci\u00f3n para completar un comando.</p> <p>Bash nos permite personalizar las cadenas de mensajes, insertando barra invertida y caracteres especiales. En la siguiente tabla vemos como se decodifican los caracteres.</p> Car\u00e1cter Que mensaje insertan \\a an ASCII bell character (07) \\d the date in \"Weekday Month Date\" format (e.g., \"Tue May 26\") \\D the format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation. The braces are required \\e an ASCII escape character (033) \\h the hostname up to the first `.' \\H the hostname \\j the number of jobs currently managed by the shell \\l the basename of the shell's terminal device name \\n newline \\r carriage return \\s the name of the shell, the basename of $0 (the portion following the final slash) \\t the current time in 24-hour HH:MM:SS format \\T the current time in 12-hour HH:MM:SS format \\@ the current time in 12-hour am/pm format \\A the current time in 24-hour HH:MM format \\u the username of the current user \\v the version of bash (e.g., 4.3) \\V the release of bash, version + patch level (e.g., 4.3.48) \\w the current working directory, with $HOME abbreviated with a tilde (uses the value of the PROMPT_DIRTRIM variable) \\W the basename of the current working directory, with $HOME abbreviated with a tilde ! the history number of this command # the command number of this command \\$ if the effective UID is 0, a #, otherwise a $ \\nnn the character corresponding to the octal number nnn | \\ a backslash [ begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt"},{"location":"operating_systems/linux/gnome/extensions/","title":"Extensions","text":"<p>Weather In The Clock - GNOME Shell Extensions https://extensions.gnome.org/extension/1380/weather-in-the-clock/</p> <p>gTile - GNOME Shell Extensions https://extensions.gnome.org/extension/28/gtile/</p> <p>Random Wallpaper - GNOME Shell Extensions https://extensions.gnome.org/extension/1040/random-wallpaper/</p>"},{"location":"operating_systems/ubuntu/clipboard/","title":"Access Clipboard From Terminal In Ubuntu Using Xclip!","text":"<p>If You are going back and forth between terminal and any other application, accessing system clipboard contents from command line will be invaluable.</p> <p>If You are using mac, there are inbuilt commands pbcopy &amp; pbpaste. But in Ubuntu these are not available. You need to install a small utility called xclip. Go ahead and install it.</p> <pre><code>sudo apt-get install xclip\n</code></pre> <p>Now, You can copy any text ( or the output one command ) into the clipboard using xclip. To copy contents of fruits.txt to clipboard,</p> <pre><code>cat fruits.txt | xclip\n</code></pre> <p>If You want to see the contents of clipboard, You can use</p> <pre><code>xclip -o\n</code></pre> <p>This copy and paste will work only in the terminal, If You switch to another application and try to paste there, it wont work.</p> <p>If You want to paste in another application, You need to copy like this</p> <pre><code>cat fruits.txt | xclip -selection clipboard\n</code></pre> <p>Now, You can switch to any other application &amp; You can paste (CTRL + V) the contents.</p> <p>Tip: Instead of typing all of this everytime, You can setup alias in .bashrc file</p> <pre><code>alias c='xclip -selection clipboard'\nalias v='xclip -o'\n</code></pre> <p>Now You can easily copy the contents like this</p> <pre><code>cat fruits.txt | c\n</code></pre>"},{"location":"operating_systems/ubuntu/create_a_self_signed_ssl_certificate_for_apache/","title":"ssl","text":"<p>https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04-es</p>"},{"location":"operating_systems/ubuntu/lamp/","title":"lamp","text":"<p>https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-ubuntu-18-04</p>"},{"location":"operating_systems/ubuntu/my_config/","title":"Tools and config's","text":""},{"location":"operating_systems/ubuntu/my_config/#used-tools","title":"Used tools","text":"<ul> <li>Flameshot</li> <li>Tweaks</li> <li>Zoom</li> <li>Dbeaver Community</li> <li>VS Code</li> <li>Firefox Developer Edition</li> <li>Guake</li> <li>Google Chrome</li> <li>Ranger</li> <li>Synaptic</li> <li>Gparted</li> <li>xclip</li> <li>docker</li> <li>docker-compose</li> <li>nvm</li> <li>openssh-server</li> <li>apache2</li> <li>mysql-server</li> <li>git</li> <li>Fonts Fira Code (<code>sudo apt install fonts-firacode</code>)</li> </ul>"},{"location":"operating_systems/ubuntu/my_config/#extensions","title":"Extensions","text":"<ul> <li>[x] Clipboard indicator</li> <li>[x] Dash to panel</li> <li>[ ] Desktop icons</li> <li>[x] Refresh wifi connections</li> <li>[x] Resource monitor</li> <li>[ ] Ubuntu appindicators</li> <li>[ ] Ubuntu dock</li> <li>[x] User themes</li> <li>[ ] Vitals</li> </ul> <p>Revisar (instalaci\u00f3n de las extenciones seg\u00fan el n\u00famero en la web)</p> <p>wget -q -O gnome-shell-extension-installer \"https://github.com/brunelli/gnome-shell-extension-installer/raw/master/gnome-shell-extension-installer\" 1&gt;/dev/null chmod +x gnome-shell-extension-installer sudo cp gnome-shell-extension-installer /usr/local/bin/</p>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/","title":"Rename several files at once, in batch, from console","text":"<p>Muchas veces tenemos un mont\u00f3n de ficheros y queremos modificar en lote su nombre de archivo por alguna circunstancia, a\u00f1adir texto, suprimir texto, reemplazar alg\u00fan car\u00e1cter por otro... y nos llevar\u00eda mucho tiempo ir editando uno a uno cuando lo que queremos es hacer la misma edici\u00f3n para todos. Para ello podemos renombrar todos los archivos en lote, todos a la vez, usando desde una consola Linux el comando rename con expresiones regulares que nos permitan reemplazar lo que necesitemos. Mostraremos caracter\u00edsticas, algunos ejemplos y la explicaci\u00f3n de expresiones regulares para usar con rename:</p> <pre><code>Usage:\n\n    rename [ -h|-m|-V ] [ -v ] [ -n ] [ -f ] [ -e|-E *perlexpr*]*|*perlexpr* [ *files* ]\n</code></pre> <p>Please note that the rename command is part of the util-linux package and can be installed on a Debian or Ubuntu Linux, using the following syntax:</p> <pre><code>$ sudo apt-get install renameutils\n</code></pre>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/#caracteristicas","title":"Caracter\u00edsticas:","text":"<p>Par\u00e1metros del comando rename (poner a continuaci\u00f3n del nombre del comando):</p> <ul> <li><code>-v</code> (Verbose: modo detallado, nos saca en pantalla lo que se va haciendo en el proceso)</li> <li><code>-n</code> (No Action: no realiza la acci\u00f3n, solo nos muestra lo que har\u00eda, es importante poner este par\u00e1metro junto con <code>-v</code> la primera vez que ejecutamos para comprobar que el resultado que vamos a obtener es el que queremos)</li> <li><code>-f</code> (Force: sobrescribe los ficheros existentes)</li> <li><code>*.*</code> para que trate todos los archivos con extensi\u00f3n del directorio</li> <li><code>\\</code> Localiza caracteres especiales tipo <code>[ , {, (, -, _, \".\", \u2026</code></li> </ul>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/#ejemplos","title":"Ejemplos","text":"<p>1) A\u00f1adir algo tras una parte del nombre del archivo que es com\u00fan en todos los ficheros. Ejemplo:</p> <p><code>imagenXXXX.jpg</code> por <code>imagen_NEW_XXXX.jpg</code></p> <pre><code># rename -v -n 's/imagen/imagen_NEW_/' *.jpg\n</code></pre> <p>2) Renombrar un grupo de im\u00e1genes con nombres diferentes. Si tenemos un grupo de im\u00e1genes (por ejemplo PNG) a las que les queremos a\u00f1adir una informaci\u00f3n en la parte final del nombre de la imagen antes de la extensi\u00f3n. Ejemplo: <code>nombreimagen.png</code> por <code>nombreimagen_150x150.png</code></p> <pre><code># rename -v -n 's/\\.png/\\_150x150.png/' *.png\n</code></pre> <p>3) Vamos a suponer que queremos reemplazar los guiones bajos por guiones medios (\"_\" por \"-\") en los nombres de nuestros archivos de un directorio determinado.</p> <pre><code># rename -v -n 's/_/-/' *.jpg\n</code></pre> <p>Podemos ejecutar repetidamente por si hay varios guiones bajos en el nombre del archivo o utilizar expresiones regulares de repetici\u00f3n tipo {m} {n}...</p> <p>4) A\u00f1adir texto al inicio del nombre del fichero. Con el car\u00e1cter ^ le indicamos al comando rename que se sit\u00fae en el comienzo del nombre del fichero y ah\u00ed inserte o ejecute la segunda parte. Ejemplo:</p> <pre><code>leccion 1.doc,\nleccion 2.doc ...\n</code></pre> <p>por</p> <pre><code>tema - leccion 1.doc,\ntema - leccion 2.doc ...\n</code></pre> <pre><code># rename -v -n 's/^/tema \u2013 /' *.doc\n</code></pre> <p>5) Si queremos eliminar varios caracteres antes de un punto de corte determinado. Ejemplo:</p> <pre><code>texto1_abc_001_small.jpg,\ntexto2_abc_002_small.jpg,\ntexto3_abc_003_small.jpg\n</code></pre> <p>por</p> <pre><code>texto1_small.jpg,\ntexto2_small.jpg,\ntexto3_small.jpg\n</code></pre> <p>Utilizamos para el corte la cadena \"_small\" y le decimos que nos elimine los 8 caracteres (\\w) anteriores, o los reemplace por lo que indiquemos en la segunda parte del comando rename.</p> <pre><code># rename -v -n 's/\\w{8}\\_small/_small/' *.jpg\n</code></pre> <p>5b) Si queremos reemplazar desde un punto determinado de corte, pero respetando un n\u00famero concreto de caracteres num\u00e9ricos antes de la parte donde se produce el corte. Para este caso usamos el elemento \"$1\" en la cadena de la parte derecha, para que nos coja esa variable obtenida de la parte izquierda.  Viendo el ejemplo se entender\u00e1 mejor. Ejemplo:</p> <pre><code>texto1_uno001_small.jpg,\ntexto2_otro002_small.jpg,\ntexto3_cualquiera003_small.jpg ...\n</code></pre> <p>por</p> <pre><code>texto1_uno_ADD-001_small.jpg,\ntexto2_otro_ADD-002_small.jpg,\ntexto3_cualquiera_ADD-003_small.jpg ...\n</code></pre> <p>Utilizamos para el corte la cadena \"_small\" y le decimos que nos guarde los 3 caracteres num\u00e9ricos (\\d) anteriores (001, 002, 003...) utilizando el $1 en la segunda parte del comando (la expresi\u00f3n de la derecha) Nos a\u00f1adir\u00e1 o modificara lo indicado en la segunda parte del comando rename justo antes de esos 3 caracteres reservados antes del corte.</p> <pre><code># rename -v -n 's/(\\w{3})\\_small/_ADD\u2013$1_small/' *.jpg\n</code></pre> <p>6) Cambiar may\u00fasculas y min\u00fasculas. Ejemplo: <code>mi_fichero.txt</code> por <code>MI_FICHERO.TXT</code></p> <pre><code># rename -v -n 'y/a-z/A-Z/' *.txt\n</code></pre> <p>7) Eliminar del nombre del fichero caracteres especiales que no est\u00e1n entre la letra a y la z (a-z) . Dejando en el nombre del fichero solo caracteres alfanum\u00e9ricos. Ejemplo: <code>mi-fichero.txt</code> por <code>mifichero.txt</code></p> <pre><code># rename -v -n 'v/[^a-z]//' *.*\n</code></pre> <p>Para cambiar varios caracteres lo ejecutamos varias veces. Ejemplo: <code>mi-fichero-con-varios-caracteres.txt</code> por <code>mificheroconvarioscaracteres.txt</code> lo ejecutaremos 4 veces.</p>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/#expresiones-regulares","title":"Expresiones regulares","text":"<p>A continuaci\u00f3n dejo un listado explicando (en ingl\u00e9s) las expresiones regulares que se pueden utilizar con este comando rename:</p> <ul> <li><code>^</code> matches the beginning of the line</li> <li><code>$</code> matches the end of the line</li> <li><code>.</code> Matches any single character</li> <li><code>(character)*</code> match arbitrarily many occurences of (character)</li> <li><code>(character)?</code> Match 0 or 1 instance of (character)</li> <li><code>[abcdef]</code> Match any character enclosed in [] (in this instance, a b c d e or f) ranges of characters such as [a-z] are permitted. The behaviour of this deserves more description.</li> <li><code>[^abcdef]</code> Match any character NOT enclosed in [] (in this instance, any character other than a b c d e or f)</li> <li><code>(character){m,n}</code> Match m-n repetitions of (character)</li> <li><code>(character){m,}</code> Match m or more repetitions of (character)</li> <li><code>(character){,n}</code> Match n or less (possibly 0) repetitions of (character)</li> <li><code>(character){n}</code> Match exactly n repetitions of (character)</li> <li><code>(expression)</code> Group operator.</li> <li><code>expression1|expression2</code> Matches expression1 or expression 2. Works with GNU sed, but this feature might not work with other forms of sed.</li> <li><code>\\w</code> matches any single character classified as a \u201cword\u201d character (alphanumeric or \u201c_\u201d)</li> <li><code>\\W</code> matches any non-\u201cword\u201d character</li> <li><code>\\s</code> matches any whitespace character (space, tab, newline)</li> <li><code>\\S</code> matches any non-whitespace character</li> <li><code>\\d</code> matches any digit character, equiv. to [0-9]</li> <li><code>\\D</code> matches any non-digit character</li> </ul>"},{"location":"operating_systems/ubuntu/top_process/","title":"Procesos","text":"<pre><code>top -b -n1 -c -o %MEM |head -n 20\n</code></pre> <pre><code>ps aux --sort -%mem\n</code></pre>"},{"location":"operating_systems/ubuntu/ubuntu_splash_screen/","title":"Disable splash screen","text":"<p>How to disable the boot splash screen, and only show kernel and boot text instead?</p> <p>Yes. Edit <code>/etc/default/grub</code> (using gksu <code>gedit /etc/default/grub</code>), and remove the <code>\"quiet splash\"</code> from the Linux command line:</p> <p>Here's what it looks like by default:</p> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"\n</code></pre> <p>Make it look like this:</p> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"\"\n</code></pre> <p>After this run <code>sudo update-grub2</code></p> <p>Also from the GRUB menu, if you want to do this temporarily, you can hit <code>E</code> on a line to edit it, then <code>Ctrl+X</code> to boot the kernel line.</p> <p>Make sure you don't have <code>plymouth-theme-ubuntu-text</code> package installed.</p>"},{"location":"operating_systems/windows/enable_version_selection_in_the_installer/","title":"Habilitar selecci\u00f3n de la versi\u00f3n de windows en el proceso de instalaci\u00f3n","text":"<p>A\u00f1adir un archivo llamado <code>\"ei.cfg\"</code> a la iso o USB creado con la herramienta de creaci\u00f3n de medios para que me permita elegir al inicio de la instalaci\u00f3n que versi\u00f3n quiero instalar.</p> <p>El archivo en concreto se llama <code>\"ei.cfg\"</code> y hay que copiarlo dentro de la carpeta <code>\"Source\"</code> que hay en la iso o USB creados con la herramienta de creaci\u00f3n de medios.</p> <p>Este archivo se puede crear f\u00e1cilmente. Simplemente hay que abrir un bloc de notas y copiar lo siguiente:</p> <pre><code>[Channel]\nRetail\n</code></pre> <p>Una vez copiado eso hay que guardar el archivo con el nombre <code>\"ei.cfg\"</code> fij\u00e1ndose que se queda con extensi\u00f3n CFG y que no se llama <code>\"ei.cfg.txt\"</code></p> <p>Una vez se tiene creado este archivo <code>\"ei.cfg\"</code> se copia en la carpeta source como dec\u00eda antes y cuando se inicie la instalaci\u00f3n limpia de Windows 10 te preguntar\u00e1 que versi\u00f3n quieres instalar.</p>"},{"location":"operating_systems/windows/install_net_framework/","title":"Install .NET Framework 3.5 via DISM","text":"<p>Para instalar el .net framework desde el iso de windows montar la imagen en una torre virtual o introducir el disco en la unidad \u00f3ptica, luego desde una terminal ejecutar el siguiente comando:</p> <pre><code>Dism /online /enable-feature /featurename:NetFX3 /All /Source:%setupdrv%:\\sources\\sxs /LimitAccess\n</code></pre> <p>Sustituyendo <code>%setupdrv%</code> por la letra de la unidad donde esta montada la imagen o unidad \u00f3ptica.</p> <p>Otra forma de realizarlo es copiando el siguiente c\u00f3digo en un fichero con la extenci\u00f3n cmd y ejecutarlo desde una terminal. Este se encarga de buscar una a una por cada una de las unidades disponibles hasta que encuentra donde se encuentra  la instalaci\u00f3n de windows y comienza a instalar el .net framework.</p> <pre><code>@echo off\nTitle .NET Framework 3.5 Offline Installer\nfor %%I in (D E F G H I J K L M N O P Q R S T U V W X Y Z) do if exist \"%%I:\\\\sources\\install.wim\" set setupdrv=%%I\nif defined setupdrv (\necho Found drive %setupdrv%\necho Installing .NET Framework 3.5...\nDism /online /enable-feature /featurename:NetFX3 /All /Source:%setupdrv%:\\sources\\sxs /LimitAccess\necho.\necho .NET Framework 3.5 should be installed\necho.\n) else (\necho No installation media found!\necho Insert DVD or USB flash drive and run this file once again. \necho.\n)\npause\n</code></pre>"},{"location":"programming/bash/30_bash_examples/","title":"Bash examples","text":"<p>Source https://linuxhint.com/30_bash_script_examples/</p>"},{"location":"programming/bash/30_bash_examples/#first-bash-program","title":"First BASH Program","text":"<p>You can run bash script from the terminal or by executing any bash file. Run the following command from the terminal to execute a very simple bash statement. The output of the command will be <code>\u2018Hello World\u2019</code>.</p> <pre><code>$ echo \"Hello World\"\n</code></pre> <p>Open any editor to create a bash file. Here, nano editor is used to create the file and filename is set as <code>\u2018First.sh\u2019</code>.</p> <pre><code>$ nano First.sh\n</code></pre> <p>Add the following bash script to the file and save the file.</p> <pre><code>#!/bin/bash\necho \"Hello World\"\n</code></pre> <p>You can run bash file by two ways. One way is by using bash command and another is by setting execute permission to bash file and run the file. Both ways are shown here.</p> <pre><code>$ bash First.sh\n</code></pre> <p>Or,</p> <pre><code>$ chmod a+x First.sh\n$ ./First.sh\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#echo-command","title":"echo command","text":"<p>You can use echo command with various options. Some useful options are mentioned in the following example. When you use <code>\u2018echo\u2019</code> command without any option then a newline is added by default. <code>\u2018-n\u2019</code> option is used to print any text without new line and <code>\u2018-e\u2019</code> option is used to remove backslash characters from the output. Create a new bash file with a name, <code>\u2018echo_example.sh\u2019</code> and add the following script.</p> <pre><code>#!/bin/bash\necho \"Printing text with newline\"\necho -n \"Printing text without newline\"\necho -e \"\\nRemoving \\t backslash \\t characters\\n\"\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#comment","title":"comment","text":"<p><code>\u2018#\u2019</code> symbol is used to add single line comment in bash script. Create a new file named <code>\u2018comment_example.sh\u2019</code> and add  the following script with single line comment.</p> <pre><code>#!/bin/bash\n\n# Add two numeric value\n((sum=25+35))\n\n#Print the result\necho $sum\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#multi-line-comment","title":"Multi-line comment","text":"<p>You can use multi line comment in bash in various ways. A simple way is shown in the following example. Create a new bash named, <code>\u2018multiline-comment.sh\u2019</code> and add the following script. Here, <code>\u2018:\u2019</code> and <code>\u201c \u2019 \u201d</code> symbols are used to add multiline  comment in bash script. This following script will calculate the square of 5.</p> <pre><code>#!/bin/bash\n: '\nThe following script calculates\nthe square value of the number, 5.\n'\n((area=5*5))\necho $area\n</code></pre> <p>You can check the following link to know more about the use of bash comment.</p> <p>https://linuxhint.com/bash_comments/</p>"},{"location":"programming/bash/30_bash_examples/#while-loop","title":"While Loop","text":"<p>Create a bash file with the name, \u2018while_example.sh\u2019, to know the use of while loop. In the example, while loop will iterate for 5 times. The value of count variable will increment by 1 in each step. When the value of count variable will 5 then the while loop will terminate.</p> <pre><code>#!/bin/bash\nvalid=true\ncount=1\nwhile [ $valid ]\ndo\necho $count\nif [ $count -eq 5 ];\nthen\nbreak\nfi\n((count++))\ndone\n</code></pre> <p>You can check the following link to know more about the use of while loop.</p> <p>https://linuxhint.com/bash-while-loop-examples/</p>"},{"location":"programming/bash/30_bash_examples/#for-loop","title":"For Loop","text":"<p>The basic <code>for</code> loop declaration is shown in the following example. Create a file named <code>\u2018for_example.sh\u2019</code> and add the following script using <code>for</code> loop. Here, <code>for</code> loop will iterate for 10 times and print all values of the variable, counter in single line.</p> <pre><code>#!/bin/bash\nfor (( counter=10; counter&gt;0; counter-- ))\ndo\necho -n \"$counter \"\ndone\nprintf \"\\n\"\n</code></pre> <p>You can use for loop for different purposes and ways in your bash script. You can check the following link to know more about the use of for loop.</p> <p>https://linuxhint.com/bash-for-loop-examples/</p>"},{"location":"programming/bash/30_bash_examples/#user-input","title":"User Input","text":"<p><code>\u2018read\u2019</code> command is used to take input from user in bash. Create a file named <code>\u2018user_input.sh\u2019</code> and add the following script for taking input from the user. Here, one string value will be taken from the user and display the value by combining other string value.</p> <pre><code>#!/bin/bash\necho \"Enter Your Name\"\nread name\necho \"Welcome $name to LinuxHint\"\n</code></pre> <p>You can check the following link to know more about the use of user input.</p> <p>https://linuxhint.com/bash-script-user-input/</p>"},{"location":"programming/bash/30_bash_examples/#if-statement","title":"if statement","text":"<p>You can use if condition with single or multiple conditions. Starting and ending block of this statement is define by <code>\u2018if\u2019</code> and <code>\u2018fi\u2019</code>. Create a file named <code>\u2018simple_if.sh\u2019</code> with the following script to know the use if statement in bash. Here, <code>10</code> is assigned to the variable, <code>n</code>. if the value of <code>$n</code> is less than <code>10</code> then the output will be <code>\u201cIt is a one digit number\u201d</code>, otherwise the output will be <code>\u201cIt is a two digit number\u201d</code>. For comparison, <code>\u2018-lt\u2019</code> is used here. For comparison, you can also use <code>\u2018-eq\u2019</code> for <code>equality</code>, <code>\u2018-ne\u2019</code> for <code>not equality</code> and <code>\u2018-gt\u2019</code> for <code>greater than</code> in bash script.</p> <pre><code>#!/bin/bash\nn=10\nif [ $n -lt 10 ];\nthen\necho \"It is a one digit number\"\nelse\necho \"It is a two digit number\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#if-statement-with-and-logic","title":"if statement with AND logic","text":"<p>Different types of logical conditions can be used in if statement with two or more conditions. How you can define multiple conditions in if statement using <code>AND</code> logic is shown in the following example. <code>\u2018&amp;&amp;\u2019</code> is used to apply <code>AND</code> logic of <code>if</code> statement. Create a file named <code>\u2018if_with_AND.sh\u2019</code> to check the following code. Here, the value of username and password variables will be taken from the user and compared with <code>\u2018admin\u2019</code> and <code>\u2018secret\u2019</code>. If both values match then the output will be <code>\u201cvalid user\u201d</code>, otherwise the output will be <code>\u201cinvalid user\u201d</code>.</p> <pre><code>!/bin/bash\n\necho \"Enter username\"\nread username\necho \"Enter password\"\nread password\n\nif [[ ( $username == \"admin\" &amp;&amp; $password == \"secret\" ) ]]; then\necho \"valid user\"\nelse\necho \"invalid user\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#if-statement-with-or-logic","title":"if statement with OR logic","text":"<p><code>\u2018||\u2019</code> is used to define <code>OR</code> logic in <code>if</code> condition. Create a file named <code>\u2018if_with_OR.sh\u2019</code> with the following code to check the use of <code>OR</code> logic of <code>if</code> statement. Here, the value of <code>n</code> will be taken from the user. If the value is equal to <code>15</code> or <code>45</code> then the output will be <code>\u201cYou won the game\u201d</code>, otherwise the output will be <code>\u201cYou lost the game\u201d</code>.</p> <pre><code>#!/bin/bash\n\necho \"Enter any number\"\nread n\n\nif [[ ( $n -eq 15 || $n  -eq 45 ) ]]\nthen\necho \"You won the game\"\nelse\necho \"You lost the game\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#else-if-statement","title":"else if statement","text":"<p>The use of <code>else if</code> condition is little different in bash than other programming language. <code>\u2018elif\u2019</code> is used to define <code>else if</code> condition in bash. Create a file named, <code>\u2018elseif_example.sh\u2019</code> and add the following script to check how <code>else if</code> is defined in bash script.</p> <pre><code>#!/bin/bash\n\necho \"Enter your lucky number\"\nread n\n\nif [ $n -eq 101 ];\nthen\necho \"You got 1st prize\"\nelif [ $n -eq 510 ];\nthen\necho \"You got 2nd prize\"\nelif [ $n -eq 999 ];\nthen\necho \"You got 3rd prize\"\n\nelse\necho \"Sorry, try for the next time\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#case-statement","title":"Case Statement","text":"<p><code>Case</code> statement is used as the alternative of <code>if-elseif-else</code> statement. The starting and ending block of this statement is defined by <code>\u2018case\u2019</code> and <code>\u2018esac\u2019</code>. Create a new file named, <code>\u2018case_example.sh\u2019</code> and add the following script. The output of the following script will be same to the previous <code>else if</code> example.</p> <pre><code>#!/bin/bash\n\necho \"Enter your lucky number\"\nread n\ncase $n in\n101)\necho echo \"You got 1st prize\" ;;\n510)\necho \"You got 2nd prize\" ;;\n999)\necho \"You got 3rd prize\" ;;\n*)\necho \"Sorry, try for the next time\" ;;\nesac\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#arguments-from-command-line","title":"Arguments from Command Line","text":"<p>Bash script can read input from command line argument like other programming language. For example, <code>$1</code> and <code>$2</code> variable are used to read first and second command line arguments. Create a file named <code>\u201ccommand_line.sh\u201d</code> and add the following script. Two argument values read by the following script and prints the total number of arguments and the argument values as output.</p> <pre><code>#!/bin/bash\necho \"Total arguments : $#\"\necho \"1st Argument = $1\"\necho \"2nd argument = $2\"\n</code></pre> <p>You can check the following link to know more about the use of command line argument.</p> <p>https://linuxhint.com/command_line_arguments_bash_script/</p>"},{"location":"programming/bash/30_bash_examples/#arguments-from-command-line-with-names","title":"arguments from command line with names","text":"<p>How you can read command line arguments with names is shown in the following script. Create a file named, <code>\u2018command_line_names.sh\u2019</code> and add the following code. Here, two arguments, <code>X</code> and <code>Y</code> are read by this script and print the sum of X and Y.</p> <pre><code>#!/bin/bash\nfor arg in \"$@\"\ndo\nindex=$(echo $arg | cut -f1 -d=)\nval=$(echo $arg | cut -f2 -d=)\ncase $index in\nX) x=$val;;\n\nY) y=$val;;\n\n*)\nesac\ndone\n((result=x+y))\necho \"X+Y=$result\"\n</code></pre> <p>Run the file with bash command and with two command line arguments.</p> <pre><code>$ bash command_line_names X=45 Y=30\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#combine-string-variables","title":"Combine String variables","text":"<p>You can easily combine string variables in bash. Create a file named <code>\u201cstring_combine.sh\u201d</code> and add the following script to check how you can combine string variables in bash by placing variables together or using <code>\u2018+\u2019</code> operator.</p> <pre><code>#!/bin/bash\n\nstring1=\"Linux\"\nstring2=\"Hint\"\necho \"$string1$string2\"\nstring3=$string1+$string2\nstring3+=\" is a good tutorial blog site\"\necho $string3\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#get-substring-of-string","title":"Get substring of String","text":"<p>Like other programming language, bash has no built-in function to cut value from any string data. But you can do the task of substring in another way in bash that is shown in the following script. To test the script, create a file named <code>\u2018substring_example.sh\u2019</code> with the following code. Here, the value, <code>6</code> indicates the starting point from where the substring will start and <code>5</code> indicates the length of the substring.</p> <pre><code>#!/bin/bash\nStr=\"Learn Linux from LinuxHint\"\nsubStr=${Str:6:5}\necho $subStr\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#add-two-numbers","title":"Add Two Numbers","text":"<p>You can do the arithmetical operations in bash in different ways. How you can add two integer numbers in bash using double brackets is shown in the following script. Create a file named <code>\u2018add_numbers.sh\u2019</code> with the following code. Two integer values will be taken from the user and printed the result of addition.</p> <pre><code>#!/bin/bash\necho \"Enter first number\"\nread x\necho \"Enter second number\"\nread y\n(( sum=x+y ))\necho \"The result of addition=$sum\"\n</code></pre> <p>You can check the following link to know more about bash arithmetic.</p> <p>https://linuxhint.com/bash_arithmetic_operations/</p>"},{"location":"programming/bash/30_bash_examples/#create-function","title":"Create Function:","text":"<p>How you can create a simple function and call the function is shown in the following script. Create a file named <code>\u2018function_example.sh\u2019</code> and add the following code. You can call any function by name only without using any bracket in bash script.</p> <pre><code>#!/bin/bash\nfunction F1()\n{\necho 'I like bash programming'\n}\n\nF1\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#create-function-with-parameters","title":"Create function with Parameters","text":"<p>Bash can\u2019t declare function parameter or arguments at the time of function declaration. But you can use parameters in function by using other variable. If two values are passed at the time of function calling then <code>$1</code> and <code>$2</code> variable are used for reading the values. Create a file named <code>\u2018function|_parameter.sh\u2019</code> and add the following code. Here, the function, <code>\u2018Rectangle_Area\u2019</code> will calculate the area of a rectangle based on the parameter values.</p> <pre><code>#!/bin/bash\n\nRectangle_Area() {\narea=$(($1 * $2))\necho \"Area is : $area\"\n}\n\nRectangle_Area 10 20\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#pass-return-value-from-function","title":"Pass Return Value from Function","text":"<p>Bash function can pass both numeric and string values. How you can pass a string value from the function is shown in the following example. Create a file named, <code>\u2018function_return.sh\u2019</code> and add the following code. The function, <code>greeting()</code> returns a string value into the variable, <code>val</code> which prints later by combining with other string.</p> <pre><code>#!/bin/bash\nfunction greeting() {\n\nstr=\"Hello, $name\"\necho $str\n\n}\n\necho \"Enter your name\"\nread name\n\nval=$(greeting)\necho \"Return value of the function is $val\"\n</code></pre> <p>You can check the following link to know more about the use of bash function.</p> <p>https://linuxhint.com/return-string-bash-functions/</p>"},{"location":"programming/bash/30_bash_examples/#make-directory","title":"Make Directory","text":"<p>Bash uses <code>\u2018mkdir\u2019</code> command to create a new directory. Create a file named <code>\u2018make_directory.sh\u2019</code> and add the following code to take a new directory name from the user. If the directory name is not exist in the current location then it will create the directory, otherwise the program will display error.</p> <pre><code>#!/bin/bash\necho \"Enter directory name\"\nread newdir\n`mkdir $newdir`\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#make-directory-by-checking-existence","title":"Make directory by checking existence","text":"<p>If you want to check the existence of directory in the current location before executing the <code>\u2018mkdir\u2019</code> command then you can use the following code. <code>\u2018-d\u2019</code> option is used to test a particular directory is exist or not. Create a file named, <code>\u2018directory_exist.sh\u2019</code> and add the following code to create a directory by checking existence.</p> <pre><code>#!/bin/bash\necho \"Enter directory name\"\nread ndir\nif [ -d \"$ndir\" ]\nthen\necho \"Directory exist\"\nelse\n`mkdir $ndir`\necho \"Directory created\"\nfi\n</code></pre> <p>You can check the following link to know more about directory creation.</p> <p>https://linuxhint.com/bash_mkdir_not_existent_path/</p>"},{"location":"programming/bash/30_bash_examples/#read-a-file","title":"Read a File","text":"<p>You can read any file line by line in bash by using loop. Create a file named, <code>\u2018read_file.sh\u2019</code> and add the following code to read an existing file named, <code>\u2018book.txt\u2019</code>.</p> <pre><code>#!/bin/bash\nfile='book.txt'\nwhile read line; do\necho $line\ndone &lt; $file\n</code></pre> <p>You can check the following link to know the different ways to read file.</p> <p>https://linuxhint.com/read_file_line_by_line_bash/</p>"},{"location":"programming/bash/30_bash_examples/#delete-a-file","title":"Delete a File","text":"<p><code>\u2018rm\u2019</code> command is used in bash to remove any file. Create a file named <code>\u2018delete_file.sh\u2019</code> with the following code to take the filename from the user and remove. Here, <code>\u2018-i\u2019</code> option is used to get permission from the user before removing the file.</p> <pre><code>#!/bin/bash\necho \"Enter filename to remove\"\nread fn\nrm -i $fn\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#append-to-file","title":"Append to File","text":"<p>New data can be added into any existing file by using <code>\u2018&gt;&gt;\u2019</code> operator in bash. Create a file named <code>\u2018append_file.sh\u2019</code> and add the following code to add new content at the end of the file. Here, <code>\u2018Learning Laravel 5\u2019</code> will be added at the of <code>\u2018book.txt\u2019</code> file after executing the script.</p> <pre><code>#!/bin/bash\n\necho \"Before appending the file\"\ncat book.txt\n\necho \"Learning Laravel 5\"&gt;&gt; book.txt\necho \"After appending the file\"\ncat book.txt\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#test-if-file-exist","title":"Test if File Exist","text":"<p>You can check the existence of file in bash by using <code>\u2018-e\u2019</code> or <code>\u2018-f\u2019</code> option. <code>\u2018-f\u2019</code> option is used in the following script to test the file existence. Create a file named, <code>\u2018file_exist.sh\u2019</code> and add the following code. Here, the filename will pass from the command line.</p> <pre><code>#!/bin/bash\nfilename=$1\nif [ -f \"$filename\" ]; then\necho \"File exists\"\nelse\necho \"File does not exist\"\nfi\n</code></pre> <p>Run the following commands to check the existence of the file. Here, book.txt file exists and  book2.txt is not exist in the current location.</p> <pre><code>$ ls\n$ bash file_exist.sh book.txt\n$ bash file_exist.sh book2.txt\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#send-email","title":"Send Email","text":"<p>You can send email by using <code>\u2018mail\u2019</code> or <code>\u2018sendmail\u2019</code> command. Before using these commands, you have to install all necessary packages. Create a file named, <code>\u2018mail_example.sh\u2019</code> and add the following code to send the email.</p> <pre><code>#!/bin/bash\nRecipient=\u201dadmin@example.com\u201d\nSubject=\u201dGreeting\u201d\nMessage=\u201dWelcome to our site\u201d\n`mail -s $Subject $Recipient &lt;&lt;&lt; $Message`\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#parse-current-date","title":"Parse Current Date","text":"<p>You can get the current system date and time value using <code>date</code> command. Every part of date and time value can be parsed using <code>\u2018Y\u2019</code>, <code>\u2018m\u2019</code>, <code>\u2018d\u2019</code>, <code>\u2018H\u2019</code>, <code>\u2018M\u2019</code> and <code>\u2018S\u2019</code>. Create a new file named <code>\u2018date_parse.sh\u2019</code> and add the following code to separate day, month, year, hour, minute and second values.</p> <pre><code>#!/bin/bash\nYear=`date +%Y`\nMonth=`date +%m`\nDay=`date +%d`\nHour=`date +%H`\nMinute=`date +%M`\nSecond=`date +%S`\necho `date`\necho \"Current Date is: $Day-$Month-$Year\"\necho \"Current Time is: $Hour:$Minute:$Second\"\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#wait-command","title":"Wait Command","text":"<p><code>wait</code> is a built-in command of Linux that waits for completing any running process. <code>wait</code> command is used with a particular process id or job id. If no process id or job id is given with wait command then it will wait for all current child processes to complete and returns exit status. Create a file named <code>\u2018wait_example.sh\u2019</code> and add the following script.</p> <pre><code>#!/bin/bash\necho \"Wait command\" &amp;\nprocess_id=$!\nwait $process_id\necho \"Exited with status $?\"\n</code></pre> <p>See more https://linuxhint.com/wait_command_linux/</p>"},{"location":"programming/bash/30_bash_examples/#sleep-command","title":"Sleep Command","text":"<p>When you want to pause the execution of any command for specific period of time then you can use <code>sleep</code> command. You can set the delay amount by seconds <code>(s)</code>, minutes <code>(m)</code>, hours <code>(h)</code> and days <code>(d)</code>. Create a file named <code>\u2018sleep_example.sh\u2019</code> and add the following script. This script will wait for 5 seconds after running.</p> <pre><code>#!/bin/bash\n\necho \u201cWait for 5 seconds\u201d\nsleep 5\necho \u201cCompleted\u201d\n</code></pre> <p>You can check the following link to know more about sleep command.</p> <p>https://linuxhint.com/sleep_command_linux/</p>"},{"location":"programming/bash/30_bash_examples/#_1","title":"bash examples","text":""},{"location":"programming/bash/awesome_cli_apps/","title":"cli-apps","text":""},{"location":"programming/bash/awesome_cli_apps/#table-of-contents","title":"Table of Contents","text":"<ul> <li>cli-apps</li> <li>Table of Contents</li> <li>Entertainment<ul> <li>Music</li> <li>Social Media</li> <li>Video</li> <li>Movies</li> <li>Games</li> <li>Books</li> </ul> </li> <li>Development<ul> <li>Text Editors</li> <li>Frontend Development</li> <li>Mobile Development</li> <li>Database</li> <li>Devops</li> <li>Docker</li> <li>Release</li> <li>Npm</li> <li>Boilerplate</li> <li>HTTP Server</li> <li>HTTP Client</li> </ul> </li> <li>Productivity<ul> <li>Time Tracking</li> <li>Note Taking and Lists</li> <li>Finance</li> <li>Presentations</li> <li>Calendars</li> </ul> </li> <li>Utilities<ul> <li>macOS</li> <li>Terminal Sharing Utilities</li> <li>Network Utilities</li> <li>Theming and Customization</li> <li>Shell Utilities</li> <li>System Interaction Utilities</li> <li>Markdown</li> <li>Security</li> <li>Math</li> <li>Weather</li> <li>Browser Replacement</li> <li>Internet Speedtest</li> </ul> </li> <li>Command Line Learning</li> <li>Data Manipulation<ul> <li>Processors</li> <li>JSON</li> <li>YAML</li> <li>Columns</li> <li>Text</li> </ul> </li> <li>Files and Directories<ul> <li>File Managers</li> <li>Deleting, Copying, and Renaming</li> <li>Files</li> <li>File Sync/Sharing</li> <li>Directory Listing</li> <li>Directory Navigation</li> <li>Search</li> </ul> </li> <li>Version Control<ul> <li>Git</li> <li>GitHub</li> <li>Emoji</li> </ul> </li> <li>Images<ul> <li>Gif Creation</li> <li>Image Conversion</li> </ul> </li> <li>Screensavers</li> <li>Graphics</li> <li>Just for Fun<ul> <li>Emoji</li> </ul> </li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#entertainment","title":"Entertainment","text":"<ul> <li>football-cli - Get live scores, fixtures, standings of almost every football competition/league.</li> <li>pockyt - Read, Manage, and Automate your Pocket collection.</li> <li>newsboat - An extendable RSS feed reader for text terminals.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#music","title":"Music","text":"<ul> <li>cmus - Small, fast and powerful console music player.</li> <li>Instant-Music-Downloader - Instant music downloader.</li> <li>itunes-remote - Control iTunes via CLI.</li> <li>pianobar - Pandora client.</li> <li>somafm-cli - Listen to SomaFM in your terminal.</li> <li>mpd - Music Player Daemon.</li> <li>ncmpcpp - mpd client.</li> <li>moc - Console audio player for Linux/UNIX.</li> <li>musikcube - Cross-platform, terminal-based music player, audio engine, metadata indexer, and server.</li> <li>beets - Music library manager and tagger.</li> <li>spotify-tui - Spotify client.</li> <li>swaglyrics-for-spotify - Spotify lyrics.</li> <li>dzr - deezer.com player.</li> <li>radio-active - Internet radio player with 40k+ stations.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#social-media","title":"Social Media","text":"<ul> <li>facebook-cli - Facebook command line interface.</li> <li>Rainbowstream - A smart and nice Twitter client on the terminal.</li> <li>tuir - Reddit TUI.</li> <li>WeeChat - Fast, light and extensible chat client.</li> <li>irssi - IRC chat client.</li> <li>kirc - Tiny IRC client.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#video","title":"Video","text":"<ul> <li>youtube-dl - Download videos from YouTube.com and many other video sites.</li> <li>streamlink - Extract streams from various websites to a video player of your choosing.</li> <li>mps-youtube - Youtube player.</li> <li>mpv - Superior video player.</li> <li>editly - Declarative video editing.</li> <li>yt-dlp - A <code>youtube-dl</code> fork with additional features and fixes.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#movies","title":"Movies","text":"<ul> <li>moviemon - Everything about your movies.</li> <li>movie - Get movie info or compare movies.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#games","title":"Games","text":"<ul> <li>Dwarf Fortress - Roguelike construction and management simulation.</li> <li>Cataclysm-DDA - Turn-based survival game set in a post-apocalyptic world.</li> <li>pokete - Pokemon-like.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#books","title":"Books","text":"<ul> <li>epr - epub reader.</li> <li>Bible.Js CLI - Bible.</li> <li>SpeedRead - Spritz-alike speedreader.</li> <li>medium-cli - Read medium.com stories.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#development","title":"Development","text":"<ul> <li>legit - Generate Open Source licences as files or file headers.</li> <li>mklicense - Create a custom LICENSE file painlessly with customized info.</li> <li>rebound - Fetch Stack Overflow results on compiler error.</li> <li>foy - Lightweight general purpose task runner/build tool.</li> <li>just - Modern <code>make</code>-like command runner.</li> <li>bcal - Byte CALculator for storage conversions and calculations.</li> <li>bitwise - Base conversion and bit manipulation.</li> <li>cgasm - x86 assembly documentation.</li> <li>grex - Generate regular expressions from user-provided test cases.</li> <li>gdb-dashboard - Modular visual interface for GDB.</li> <li>iola - Socket client with REST API.</li> <li>add-gitignore - Interactively generate a .gitignore for your project based on your needs.</li> <li>is-up-cli - Check if a domain is up.</li> <li>reachable - Check if a domain is up.</li> <li>loadtest - Run load tests.</li> <li>diff2html-cli - Create pretty HTML from diffs.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#text-editors","title":"Text Editors","text":"<ul> <li>emacs - An extensible, customizable, free/libre text editor \u2014 and more.</li> <li>vim - Vim - the ubiquitous text editor.</li> <li>neovim - Modern vim.</li> <li>kakoune - Modal editor inspired by vim.</li> <li>micro - A simple and intuitive editor.</li> <li>o - Configuration-free text editor and IDE.</li> <li>helix -  Modal editor inspired by kakoune.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#frontend-development","title":"Frontend Development","text":"<ul> <li>caniuse-cmd - Search caniuse.com about browser support of features.</li> <li>strip-css-comments-cli - Strip comments from CSS.</li> <li>viewport-list-cli - Return a list of devices and their viewports.</li> <li>surge - Publish static websites for free.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#mobile-development","title":"Mobile Development","text":"<ul> <li>mobicon-cli - Mobile app icon generator.</li> <li>mobisplash-cli - Mobile app splash screen generator.</li> <li>deviceframe - Put device frames around your mobile/web/progressive app screenshots.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#database","title":"Database","text":"<ul> <li>mycli - MySQL client with autocompletion and syntax highlighting.</li> <li>pgcli - Postgres client with autocompletion and syntax highlighting.</li> <li>sqlline -  Shell for issuing SQL via JDBC.</li> <li>iredis - Redis client with autocompletion and syntax highlighting.</li> <li>usql - Universal SQL client with autocompletion and syntax highlighting.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#devops","title":"Devops","text":"<ul> <li>htconvert - Convert .htaccess redirects to nginx.conf redirects.</li> <li>SAWS - Supercharged AWS CLI.</li> <li>s3cmd - Fully-Featured S3 client.</li> <li>pm2 - Production Process Manager for Node.js.</li> <li>ops - Unikernel compilation and orchestration tool.</li> <li>flog - A fake log generator for log formats such as apache-common, apache error and RFC3164 syslog.</li> <li>k9s - Manage Kubernetes Clusters.</li> <li>PingMe - Send messages/alerts to multiple messaging platforms &amp; email.</li> <li>ipfs-deploy - Deploy static websites to IPFS.</li> <li>Discharge - Deploy static websites to Amazon S3.</li> <li>updatecli - A declarative dependency management tool.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#docker","title":"Docker","text":"<ul> <li>lstags - Synchronize images across registries.</li> <li>dockly - Interactively manage containers.</li> <li>lazydocker - Simple docker/docker-compose interface.</li> <li>docker-shell - Simple interactive docker interface.</li> <li>docker-pushrm - Push a readme to container registries.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#release","title":"Release","text":"<ul> <li>release-it - Automate releases for Git repositories and/or npm packages. Changelog generation, GitHub/GitLab releases, etc.</li> <li>clog - A conventional changelog for the rest of us.</li> <li>np - A better <code>npm publish</code>.</li> <li>release - Generate changelogs with a single command.</li> <li>semantic-release - Fully automated version management and package publishing.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#npm","title":"Npm","text":"<ul> <li>npm-name-cli - Check whether a package name is available on npm.</li> <li>npm-user-cli - Get user info of a npm user.</li> <li>npm-home - Open the npm page of the package in the current directory.</li> <li>pkg-dir-cli - Find the root directory of a npm package.</li> <li>npm-check-updates - Find newer versions of package dependencies than what your package.json allows.</li> <li>updates - Flexible npm dependency update tool.</li> <li>wipe-modules - Remove <code>node_modules</code> of inactive projects.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#boilerplate","title":"Boilerplate","text":"<ul> <li>yo - Scaffolding tool for running Yeoman generators.</li> <li>boilr - Create projects from boilerplate templates.</li> <li>cookiecutter - Create projects from templates.</li> <li>mevn-cli - Light speed setup for MEVN (Mongo Express Vue Node) Apps.</li> <li>scaffold-static - Scaffolding utility for vanilla JS.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#http-server","title":"HTTP Server","text":"<ul> <li>serve - Serve static files (https, CORS, GZIP compression, etc).</li> <li>simplehttp - Easily serve a local directory over HTTP.</li> <li>shell2http - Shell script based HTTP server.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#http-client","title":"HTTP Client","text":"<ul> <li>HTTPie - A user-friendly HTTP client.</li> <li>HTTP Prompt - Interactive HTTP client featuring autocomplete and syntax highlighting.</li> <li>ain - HTTP client with a simple format to organize API endpoints.</li> <li>curlie - A curl frontend with the ease of use of HTTPie.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#productivity","title":"Productivity","text":"<ul> <li>doing - Keep track of what you\u2019re doing and track what you\u2019ve done.</li> <li>ffscreencast - A ffmpeg screencast with video overlay and multi monitor support.</li> <li>meetup-cli - Meetup.com client.</li> <li>NeoMutt - Email client.</li> <li>terjira - Jira client.</li> <li>ipt - Pivotal Tracker client.</li> <li>uber-cli - Uber client.</li> <li>Buku - Browser-independent bookmark manager.</li> <li>papis - Extensible document and bibliography manager.</li> <li>pubs - Scientific bibliography manager.</li> <li>fjira - Fuzzy finder and TUI application for Jira.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#time-tracking","title":"Time Tracking","text":"<ul> <li>Timetrap - Simple timetracker.</li> <li>moro - Simple tool for tracking work hours.</li> <li>Timewarrior - Utility with simple stopwatch, calendar-based backfill and flexible reporting.</li> <li>Watson - Generate reports for clients and manage your time.</li> <li>utt - Simple time tracking tool.</li> <li>Bartib - Easy to use time tracking tool.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#note-taking-and-lists","title":"Note Taking and Lists","text":"<ul> <li>idea - A lightweight tool for keeping ideas in a safe place quick and easy.</li> <li>geeknote - Evernote client.</li> <li>Taskwarrior - Manage your TODO list.</li> <li>Terminal velocity - A fast note-taking app.</li> <li>eureka - Input and store your ideas.</li> <li>sncli - Simplenote client.</li> <li>td-cli - A TODO manager to organize and manage your TODO's across multiple projects.</li> <li>taskell - Interactive kanban board/task manager.</li> <li>taskbook - Tasks, boards &amp; notes for the command-line habitat.</li> <li>dnote - A interactive, multi-device notebook.</li> <li>nb - A note\u2011taking, bookmarking, archiving, and knowledge base application.</li> <li>obs - Interact with your Obsidian vault.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#finance","title":"Finance","text":"<p>See plaintextaccounting.org for a great overview of relevant tools.</p> <ul> <li>ledger - Powerful, double-entry accounting system.</li> <li>hledger - Robust, fast, intuitive plain text accounting tool with CLI, TUI and web interfaces.</li> <li>moeda - Foreign exchange rates and currency conversion.</li> <li>cash-cli - Convert Currency Rates.</li> <li>cointop - Track cryptocurrencies.</li> <li>ticker - Stock ticker.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#presentations","title":"Presentations","text":"<ul> <li>WOPR - A simple markup language for creating rich terminal reports, presentations and infographics.</li> <li>decktape - PDF exporter for HTML presentations.</li> <li>mdp - A markdown presentation tool.</li> <li>sent - Simple plaintext presentation tool.</li> <li>slides - A markdown presentation tool.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#calendars","title":"Calendars","text":"<ul> <li>calcurse - Calendar and scheduling.</li> <li>gcalcli - Google calendar client.</li> <li>khal - CalDAV ready CLI and TUI calendar.</li> <li>vdirsyncer - CalDAV sync.</li> <li>remind - A sophisticated calendar and alarm program.</li> <li>birthday - Know when a friend's birthday is coming.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#utilities","title":"Utilities","text":"<ul> <li>aria2 - HTTP, FTP, SFTP, BitTorrent and Metalink download utility.</li> <li>bitly-client - Bitly client.</li> <li>deadlink - Find dead links in files.</li> <li>crawley - Unix-way web crawler.</li> <li>kill-tabs - Kill all Chrome tabs.</li> <li>alex - Catch insensitive, inconsiderate writing.</li> <li>clevercli - Collection of ChatGPT powered utilities.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#macos","title":"macOS","text":"<ul> <li>open-pip-cli - Watch videos in picture-in-picture player.</li> <li>osx-wifi-cli - Manage wifi connections.</li> <li>active-win-cli - Get the title/id/etc of the active window.</li> <li>stronghold - Configure security settings from the terminal.</li> <li>dark-mode - Toggle dark mode.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#terminal-sharing-utilities","title":"Terminal Sharing Utilities","text":"<ul> <li>gotty - Share your terminal as a web application.</li> <li>localtunnel - Expose your localhost to the world for easy testing and sharing.</li> <li>mosh - Remote SSH client that allows roaming with intermittent connectivity.</li> <li>ngrok - Secure introspectable tunnels to localhost.</li> <li>tmate - Instant terminal (tmux) sharing.</li> <li>warp - Secure and simple terminal sharing.</li> <li>OverTime - Time-overlap tables for remote teams.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#network-utilities","title":"Network Utilities","text":"<ul> <li>get-port-cli - Get an available port.</li> <li>is-reachable-cli - Check if hostnames are reachable or not.</li> <li>acmetool - Automatic certificate acquisition for ACME (Let's Encrypt).</li> <li>certificate-ripper - Extract server certificates.</li> <li>neoss - User-friendly and detailed socket statistics.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#theming-and-customization","title":"Theming and Customization","text":"<ul> <li>splash-cli - Beautiful wallpapers from Unsplash.</li> <li>wallpaper-cli - Get or set the desktop wallpaper.</li> <li>themer - Generate personalized themes for your editor, terminal, wallpaper, Slack, and more.</li> <li>JackPaper - Set images from Unsplash as wallpaper.</li> <li>pywal - Generate and change color-schemes, then apply them system-wide to all of your favourite programs.</li> <li>QuickWall - Directly set wallpapers from Unsplash.</li> <li>oh-my-posh - Prompt theme engine.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#shell-utilities","title":"Shell Utilities","text":"<ul> <li>has - Checks for the presence of various commands and their versions on the path.</li> <li>Ultimate Plumber - Write Linux pipes with live previews.</li> <li>fkill-cli - Simple cross-platform process killer.</li> <li>task-spooler - Queue jobs for linear execution.</li> <li>undollar - Strip the '$' preceding copy-pasted terminal commands.</li> <li>pipe_exec - Run executables from stdin, pipes and ttys without creating a temporary file.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#system-interaction-utilities","title":"System Interaction Utilities","text":"<ul> <li>neofetch - System information tool.</li> <li>battery-level-cli - Get current battery level.</li> <li>brightness-cli - Change screen brightness (windows).</li> <li>yank - Yank terminal output to clipboard.</li> <li>screensaver - Start the screensaver.</li> <li>google-font-installer - Download and install Google Web Fonts on your local machine.</li> <li>glances - System monitoring tool.</li> <li>tiptop - System monitor.</li> <li>gzip-size-cli - Get the gzipped size of a file.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#markdown","title":"Markdown","text":"<ul> <li>DocToc - Generates table of contents for markdown files.</li> <li>grip - Preview markdown files as GitHub would render them.</li> <li>mdv - Styled terminal markdown viewer.</li> <li>glow - Styled markdown rendering.</li> <li>gtree - Use markdown to generate directory trees and the directories itself.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#security","title":"Security","text":"<ul> <li>pass - Password manager.</li> <li>gopass - Fully-featured password manager.</li> <li>xiringuito - SSH-based VPN.</li> <li>hasha-cli - Get the hash of text or stdin.</li> <li>ots - Share secrets with others via a one-time URL.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#math","title":"Math","text":"<ul> <li>mdlt - Do quick math right from the command line.</li> <li>Qalculate - Calculate non-trival math expressions. Unit conversions, symbolic calculations and more.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#weather","title":"Weather","text":"<ul> <li>wttr.in</li> <li>wego</li> <li>weather-cli</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#browser-replacement","title":"Browser Replacement","text":"<ul> <li>s - Open a web search in your terminal.</li> <li>hget - Render websites in plain text from your terminal.</li> <li>mapscii - Terminal Map Viewer.</li> <li>nasa-cli - Download NASA Picture of the Day.</li> <li>getnews.tech - Fetch news headlines from various news outlets.</li> <li>trino - Translation of words and phrases.</li> <li>translate-shell - Google Translate interface.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#internet-speedtest","title":"Internet Speedtest","text":"<ul> <li>speedtest-net - Test internet connection speed and ping using speedtest.net.</li> <li>speed-test - <code>speedtest-net</code> wrapper with different UI.</li> <li>speedtest-cli - Test internet bandwidth using speedtest.net.</li> <li>bandwhich - Track bandwidth utilization by process.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#command-line-learning","title":"Command Line Learning","text":"<ul> <li>cmdchallenge - Presents small shell challenge with user submitted solutions.</li> <li>explainshell - Type a snippet to see the help text for each argument.</li> <li>howdoi - Instant coding answers.</li> <li>how2 - Node.js implementation of howdoi.</li> <li>The Fuck - Magnificent app which corrects your previous console command.</li> <li>tldr - Simplified and community-driven man pages.</li> <li>Wat - Instant, central, community-built docs.</li> <li>teachcode - Guide for the earliest lessons of coding.</li> <li>navi - Interactive cheatsheet tool.</li> <li>yai - AI powered terminal assistant.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#data-manipulation","title":"Data Manipulation","text":"<ul> <li>visidata - Spreadsheet multitool for data discovery and arrangement.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#processors","title":"Processors","text":"<ul> <li>jq - JSON processor.</li> <li>yq - YAML processor.</li> <li>dasel - JSON/YAML/TOML/XML processor (like jq/yq).</li> <li>yaml-cli - Query/update YAML.</li> <li>ramda-cli - Process data with functional pipelines.</li> <li>xq - XML and HTML beautifier and content extractor.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#json","title":"JSON","text":"<ul> <li>jp - JSON parser.</li> <li>fx - Command-line JSON viewer.</li> <li>vj - Makes JSON human readable.</li> <li>underscore-cli - Utility-belt for hacking JSON and Javascript.</li> <li>strip-json-comments-cli - Strip comments from JSON.</li> <li>GROQ \u2013\u00a0JSON processor with queries and projections.</li> <li>gron - Make JSON greppable.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#yaml","title":"YAML","text":"<ul> <li>dyff - YAML diff tool.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#columns","title":"Columns","text":"<ul> <li>parse-columns-cli - Parse text columns to JSON.</li> <li>q - Execution of SQL-like queries on CSV/TSV/tabular text file.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#text","title":"Text","text":"<ul> <li>figlet - Creates large text out of ASCII characters.</li> <li>stegcloak - Hide secrets with invisible characters in plain text securely.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#files-and-directories","title":"Files and Directories","text":""},{"location":"programming/bash/awesome_cli_apps/#file-managers","title":"File Managers","text":"<ul> <li>ranger - A console file manager with VI key bindings.</li> <li>midnight-commander - A feature rich visual file manager.</li> <li>Vifm - VI influnced file manager.</li> <li>nnn - File browser and disk usage analyzer with excellent desktop integration.</li> <li>lf - Fast, extensively customizable file manager.</li> <li>fff - Fast, simple file manager.</li> <li>clifm - The command line file manager.</li> <li>far2l - Orthodox file manager.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#deleting-copying-and-renaming","title":"Deleting, Copying, and Renaming","text":"<ul> <li>trash-cli - Move files and directories to the trash.</li> <li>empty-trash-cli - Empty the trash.</li> <li>del-cli - Delete files and folders.</li> <li>cpy-cli - Copies files.</li> <li>rename-cli - Rename files quickly.</li> <li>renameutils - Mass renaming in your editor.</li> <li>diskonaut - Disk space navigator.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#files","title":"Files","text":"<ul> <li>chokidar-cli - CLI to watch file system changes.</li> <li>file-type-cli - Detect the file type of a file or stdin.</li> <li>bat - A cat clone with syntax highlighting.</li> <li>NCDu - A disk usage analyzer with an ncurses interface.</li> <li>unix-permissions - Swiss Army knife for Unix permissions.</li> <li>transmission-cli - Torrent client for your command line.</li> <li>webtorrent-cli \u2013 Streaming torrent client.</li> <li>entr - Run an arbitrary command when files change.</li> <li>organize-cli - Organize your files automatically.</li> <li>organize-rt - organize-cli in Rust with more customization.</li> <li>RecoverPy - Recover overwritten or deleted files.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#file-syncsharing","title":"File Sync/Sharing","text":"<ul> <li>rclone - Sync files with various cloud providers.</li> <li>ffsend - Quick file share.</li> <li>share-cli - Share files with your local network.</li> <li>google-drive-upload - Upload/sync with Google Drive.</li> <li>gdrive-downloader - Download files/folders from Google Drive.</li> <li>portal - Send files between computers.</li> <li>shbin - Turn a Github repo into a pastebin.</li> <li>sharing - Send and receive files on your mobile device.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#directory-listing","title":"Directory Listing","text":"<ul> <li>alder - Minimal <code>tree</code> with colors.</li> <li>exa - Improved version of <code>ls</code>.</li> <li>tre - <code>tree</code> with git awareness, editor aliasing, and more.</li> <li>ll - <code>ls</code> with git status.</li> <li>lsd - <code>ls</code> with many extra features.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#directory-navigation","title":"Directory Navigation","text":"<ul> <li>autojump - A cd command that learns - easily navigate directories from the command line.</li> <li>pm - The easy way to switch to your projects on the shell.</li> <li>z - z is the new j, yo.</li> <li>PathPicker - After parsing the output from a command, PathPicker presents you with a nice UI to select which files you're interested in.</li> <li>fz - Seamless fuzzy tab completion for z.</li> <li>goto - Directory aliases for the shell with autocomplete.</li> <li>z.lua - <code>cd</code> command that learns your habits.</li> <li>zoxide - Fast directory jumper in Rust.</li> <li>tere - A faster alternative to using cd and ls.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#search","title":"Search","text":"<ul> <li>happyfinder - (another) Fuzzy file finder for the command line.</li> <li>find-up-cli - Find a file by walking up parent directories.</li> <li>ripgrep - A line-oriented search tool that recursively searches your current directory for a regex pattern.</li> <li>fzf - A general purpose command-line fuzzy finder, can be used with any list: files/directories, command history, processes, hostnames, bookmarks, git commits, etc.</li> <li>fselect - Find files with SQL-like queries.</li> <li>fd - A simple, fast and user-friendly alternative to <code>find</code>.</li> <li>broot - Fuzzy finder similar to fzf, but with space usage visualization.</li> <li>rare - Real-time regex aggregation and analysis.</li> <li>skim - A general fuzzy finder written in rust, similar to fzf.</li> <li>ast-grep - A tool for code structrual search, linting and rewriting.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#version-control","title":"Version Control","text":"<ul> <li>SnowFS - A fast, scalable version control system for binaries.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#git","title":"Git","text":"<ul> <li>git commander - Interactive git tool.</li> <li>git-stats - A local GitHub-like contributions calendar.</li> <li>dev-time - Get the current local time of a GitHub user.</li> <li>tig - Text-mode interface for git.</li> <li>grv - Text-mode interface for git with customisable vi bindings.</li> <li>git-standup - Recall what you did on the last working day.</li> <li>git-secret - Store your private data inside a git repository.</li> <li>gitlab-cli - Create GitLab merge requests.</li> <li>git-extras - Git utilities.</li> <li>gita - Manage multiple git repos side by side.</li> <li>readme-md-generator - Interactively generate README.md files.</li> <li>semantic-git-commit-cli - Ensure semantic commits messages.</li> <li>import-github-labels-cli - Sync labels between Github repos.</li> <li>git-all-branches - Improved <code>git branch -a</code>.</li> <li>czg - Interactively generate standardized commit messages.</li> <li>shallow-backup - Git integrated backup tool.</li> <li>Lazygit - Simple TUI for git commands.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#github","title":"GitHub","text":"<ul> <li>CLI GitHub - Fancy GitHub client.</li> <li>hub - Make git easier to use with GitHub.</li> <li>git-labelmaker - Edit GitHub labels.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#emoji","title":"Emoji","text":"<ul> <li>gitmoji-cli - Use emoji in commit messages.</li> <li>gitmoji-changelog - Generate gitmoji changelogs.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#images","title":"Images","text":"<ul> <li>SVGO - Optimize SVG files.</li> <li>carbon-now-cli - Generate beautiful images of your code.</li> <li>imgur-uploader-cli - Upload images to imgur.</li> <li>pageres-cli - Capture website screenshots.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#gif-creation","title":"Gif Creation","text":"<ul> <li>gifgen - Simple high quality GIF encoding.</li> <li>gifsicle - Create, manipulate, and optimize GIF images and animations.</li> <li>ttygif - Convert terminal recordings to animated gifs.</li> <li>ttygif - ttyrec to gif.</li> <li>ttystudio - A terminal-to-gif recorder minus the headaches.</li> <li>asciinema - Terminal session recorder and companion app for asciinema.org.</li> <li>givegif - GIFs on the command line.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#image-conversion","title":"Image Conversion","text":"<ul> <li>imagemagick - Gold standard for anything images.</li> <li>imgp - Blazing fast batch image resizer and rotator.</li> <li>korkut - Quick and simple image processing.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#screensavers","title":"Screensavers","text":"<ul> <li>cmatrix - Scrolling 'Matrix'-like screen.</li> <li>pipes.sh - Random pipes that grow across the screen.</li> <li>YuleLog - Christmas Yule Log fireplace.</li> <li>cli-fireplace - Digital fireplace.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#graphics","title":"Graphics","text":"<ul> <li>cli-mandelbrot - Traverse the Mandelbrot fractal.</li> <li>sparkly-cli - Generate sparklines \u2581\u2582\u2583\u2585\u2582\u2587..</li> <li>pastel - Generate, analyze, convert and manipulate colors.</li> <li>lowcharts - Draw low-resolution graphs.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#just-for-fun","title":"Just for Fun","text":"<ul> <li>quote-cli - Get a random quote or the quote of the day in your CLI.</li> <li>fortune - Shows a random fortune.</li> <li>ponysay - Pony rewrite of cowsay.</li> <li>yosay - Like cowsay, but for yeoman.</li> <li>lolcat - Outputs text in rainbow colors.</li> <li>text-meme - Generate text memes.</li> <li>dankcli - Add text to meme image templates.</li> <li>ricksay - Quotes from Rick and Morty.</li> </ul>"},{"location":"programming/bash/awesome_cli_apps/#emoji_1","title":"Emoji","text":"<ul> <li>emoj - Find relevant emoji from text on the command-line.</li> <li>emoji-finder - Quickly find and copy emoji to the clipboard via the command-line.</li> <li>oji - Interactive text emoji maker.</li> </ul>"},{"location":"programming/bash/awesome_shell/","title":"Awesome Shell","text":"<pre><code> \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557    \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\n\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2554\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u255d\u255a\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2557\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551     \u2588\u2588\u2551\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2551\n\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2551\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre>"},{"location":"programming/bash/awesome_shell/#awesome-shell","title":"Awesome Shell","text":"<p>Source Repo</p> <p>A curated list of awesome command-line frameworks, toolkits, guides and gizmos. Inspired by awesome-php. This awesome collection is also available on Unix-Shell.ZEEF.com.</p>"},{"location":"programming/bash/awesome_shell/#shells","title":"Shells","text":"<p>Choose your base shell.</p> <ul> <li>bash - GNU Project's shell (Bourne Again SHell)</li> <li>elvish - Friendly, expressive shell features like anonymous functions and data structures</li> <li>es - The extensible shell, based on Plan 9's rc shell</li> <li>fish - Smart and user-friendly command line shell</li> <li>ion - A modern system shell that features a simple, yet powerful, syntax. It is written entirely in Rust.</li> <li>ksh93 - Korn Shell</li> <li>mksh - MirBSD Korn Shell</li> <li>ngs - Fully featured scripting language created specifically for Ops. REPL is being developed.</li> <li>nushell - A modern shell written in Rust</li> <li>oksh - Portable OpenBSD ksh</li> <li>osh - Bash compatible, with new/modern Unix shell language called Oil</li> <li>pdksh - Public domain Korn shell</li> <li>powershell a cross-platform task automation and configuration management framework, consisting of a command-line shell and scripting language</li> <li>shell++ - Friendly and modern functional and object oriented shell script language</li> <li>shenv - Simple shell version management</li> <li>tcsh - C shell with file name completion and command line editing</li> <li>xonsh - Python-ish, BASHwards-looking shell language and command prompt</li> <li>yash - A POSIX-compliant command line shell with built-in support for completion and prediction based on command history</li> <li>zsh - Powerful shell with scripting language</li> </ul>"},{"location":"programming/bash/awesome_shell/#command-line-productivity","title":"Command-Line Productivity","text":"<p>Search, bookmarks, multiplexing, and other tools that make your terminal experience more productive.</p> <ul> <li>AdvancedNewFile - Fast creation of files and directories in a recursive way. Inspired by the Vim plugin.</li> <li>ag - Super fast string search through a directory hierarchy</li> <li>aliases - Contextual, dynamic, organized aliases for bash</li> <li>arttime - Beauty of text art meets functionality of clock, timer, pomodoro++ time manager</li> <li>autoenv - Directory-based environments</li> <li>await - single binary that run list of commands in parallel and waits for their termination</li> <li>bartib - A simple timetracker for the command line. It saves a log of all tracked activities as a plaintext file and allows you to create flexible reports.</li> <li>bashhub - :cloud: Bash history in the cloud. Indexed and searchable.</li> <li>boilr - A blazingly fast CLI tool for creating projects from boilerplate templates.</li> <li>boom - Store links and snippets in the command line</li> <li>borg - A terminal based search engine for bash commands</li> <li>broot - A better way to navigate directories</li> <li>browsh - The modern text-based browser</li> <li>Buku - Powerful command-line bookmark manager</li> <li>byobu - Text-based window manager and terminal multiplexer</li> <li>cod \u2014 A completion daemon for shell that learns when you invoke <code>--help</code> commands</li> <li>CloudClip - Your own clipboard in the cloud, copy and paste text with gist between different systems</li> <li>ddgr - DuckDuckGo from the terminal</li> <li>desk - A lightweight workspace manager for the shell</li> <li>direnv - An environment switcher for the shell, compare with autoenv</li> <li>dnote - A simple command line notebook with multi-device sync and web interface</li> <li>eureka - :bulb: CLI tool to input and store your ideas without leaving the terminal</li> <li>fasd - Command-line productivity booster, offers quick access to files and directories</li> <li>fd - A simple, fast and user-friendly alternative to find.</li> <li>foxy - Plain text bookmarks for Firefox and surf browsers.</li> <li>fselect - Find files with SQL-like queries.</li> <li>funky - Extends functionality of shell functions making them more powerful and flexible.</li> <li>fz - Seamless fuzzy tab completion for z</li> <li>fzf - A command-line fuzzy finder</li> <li>gitmux - Show Git status in Tmux status bar</li> <li>googler - Google Search, Google Site Search, Google News from the terminal</li> <li>googlr - Command line tool that lets you search Google from your terminal.</li> <li>has - <code>has</code> helps you check presence of various command line tools and their versions on path</li> <li>how2 - <code>how2</code> finds the simplest way to do something in a unix shell. It's like <code>man</code>, but you can query it in natural language.</li> <li>navi - An interactive cheatsheet tool for the command-line</li> <li>hhighlighter - Colorize words in a command output</li> <li>hr - <code>&lt;hr /&gt;</code> for your terminal</li> <li>hss - An interactive parallel ssh client featuring autocomplete and asynchronous execution</li> <li>hstr - Bash History Suggest Box</li> <li>k - k is a Zsh script to make directory listings more readable, adding Git status, fileweight colors and rotting dates</li> <li>k alias - get kool aliases (and more) working with a simple one-liner</li> <li>lf - Terminal file manager written in Go, inspired by ranger</li> <li>lf.sh - Quickly search files with fewer typings and do many more (grepping, copying path to clipboard, etc)</li> <li>lowcharts - Draw low-resolution graphs in terminal</li> <li>Lmod - Lua-based Environment Modules that enhances Tcl-based modules while being backward compatible (compare to modules)</li> <li>loop - Write and control complex loops with as one-liners</li> <li>marker - Bookmark your shell commands</li> <li>mackup - Keep your application settings in sync (OS X/Linux)</li> <li>mcfly - Fly through your shell history. Great Scot!</li> <li>modules - Classical Tcl-based Environment Modules managing the shell environment (compare to Lmod, direnv, and autoenv)</li> <li>nnn - File browser and disk usage analyzer with excellent desktop integration</li> <li>parallel - Build and execute shell command lines from standard input in parallel</li> <li>pass - Manage passwords from the command line with GPG encryption and optional git integration.</li> <li>pathpicker - Accepts inputs like grep, searches, git etc; allows selecting files from the result of the input, which you can then open or provide as argument to a command.</li> <li>pdd - Tiny date, time diff calculator with timers</li> <li>percol - Adds flavor of interactive filtering to the traditional pipe concept of UNIX shell</li> <li>q - Vim like macro registers for your Bash and Zsh Shell</li> <li>qfc - File-completion widget for Bash and Zsh</li> <li>resh - Contextual shell history for Zsh and Bash</li> <li>rg - ripgrep is a line oriented search tool that combines the usability of The Silver Searcher with the raw speed of GNU grep</li> <li>screen - GNU terminal multiplexer</li> <li>shell-history - Visualize your shell usage with Highcharts</li> <li>SHML - Style framework for the terminal (Shell Markup Language)</li> <li>slugify - Command that converts filenames and directories to a web friendly format</li> <li>sman - :bug: A command-line snippet manager</li> <li>spark - \u2581\u2582\u2583\u2585\u2582\u2587 in your shell</li> <li>spark.fish - \u2581\u2582\u2583\u2585 Sparkline Generator</li> <li>sheet -  Text snippets for the command line</li> <li>spot - Tiny file search utility</li> <li>snips - Command line tool to manage snippets of code.</li> <li>sqlline - Shell for issuing SQL to relational databases via JDBC (multiline, completion, highlighting, dialect support)</li> <li>sshfs - A tool for mounting remote file systems over SSH</li> <li>sudocabulary - Learn English Vocabulary from your terminal</li> <li>surfraw - browse specific site and search the web from your terminal without browser.</li> <li>task-manager - Execute all your scripts with just two or three keystrokes.</li> <li>td-cli - A todo command line manager to organize and manage your todos across multiple projects.</li> <li>tere - A faster alternative to cd + ls</li> <li>thefuck - Fix common shell mistakes by using an easy to remember command</li> <li>tldr - A fully-functional bash client for tldr, simplified and community-driven man pages</li> <li>tmux - Amazing terminal multiplexer</li> <li>undollar - undollar bites the dollar sign off the tip of the command you just pasted into your terminal</li> <li>usql - Universal command-line interface for SQL databases.</li> <li>v - z for vim.</li> <li>wemux - Multi-User Tmux Made Easy</li> <li>xiki - Makes the shell console more friendly and powerful</li> <li>xplr -  A hackable, minimal, fast TUI file explorer</li> <li>xsv - a fast CSV command line toolkit written in Rust</li> <li>xxh - Bring your favorite shell wherever you go through the SSH.</li> </ul>"},{"location":"programming/bash/awesome_shell/#directory-navigation","title":"Directory Navigation","text":"<ul> <li>aliasme - alias helper to change directory quickly</li> <li>autojump - A cd command that learns - easily navigate directories from the command line</li> <li>bashmarks - Directory bookmarks for the shell</li> <li>bd - Quickly go back to a parent directory</li> <li>commacd - A faster way to move around in Bash</li> <li>enhancd - :rocket: A next-generation cd command with an interactive filter</li> <li>goto - A shell utility for navigation to aliased directories supporting auto-completion</li> <li>jump - Jump helps you navigate your file system faster by learning your habits.</li> <li>lazy-cd - Simple bash commands for bookmarked navigation of the file system, complete with bash-completion.</li> <li>up - Ascend directories by name or count; for bash, zsh, and fish.</li> <li>z - z is the new j, yo</li> <li>z.lua - A new cd command that helps you navigate faster by learning your habits</li> <li>zoxide - A faster way to navigate your filesystem, written in Rust</li> <li>zpyi - Python in Zsh - Easy python scripting in shell</li> </ul>"},{"location":"programming/bash/awesome_shell/#customization","title":"Customization","text":"<p>Custom prompts, color themes, etc.</p> <ul> <li>aphrodite-terminal-theme \u2014 Minimalistic Aphrodite theme (prompt) for sexy terminals that works in bash, fish and zsh</li> <li>base16-builder - Base16-Builder</li> <li>bash-full-of-colors - Powerful prompt with screen, tmux, git support and many more</li> <li>bash-git-prompt - An informative and fancy Bash prompt for Git users</li> <li>bash-powerline - Powerline-style Bash prompt in pure Bash script</li> <li>bashstrap - A quick way to spruce up OSX terminal</li> <li>bullet-train-oh-my-zsh-theme - :bullettrain_side: An oh-my-zsh shell theme based on the Powerline Vim plugin</li> <li>emojify Emoji on the command line :scream:</li> <li>flatui-terminal-theme - Nicer colors for terminal</li> <li>geometry - A minimal ZSH theme where any function can be added to the left prompt or (async) right prompt on the fly.</li> <li>git-prompt - Bash prompt with Git, SVN and HG modules</li> <li>gittify - A colorful Bash prompt + customized Git aliases</li> <li>Gogh - Color Scheme - Color Scheme for Gnome Terminal</li> <li>liquidprompt - A full-featured &amp; carefully designed adaptive prompt for Bash &amp; Zsh</li> <li>mysql-colorize -  Colorization for mysql comand-line client</li> <li>oh-my-git - An opinionated git prompt for bash and zsh</li> <li>oh-my-posh - Prompt theme engine for any shell and platform written in go.</li> <li>polyglot - An informative Git prompt that works in bash, zsh, ksh, mksh, pdksh, oksh, dash, yash, busybox sh, and osh</li> <li>powerlevel10k - Super flexible awesome powerline ZSH theme</li> <li>sexy-bash-prompt - Bash prompt with colors, Git statuses, and Git branches</li> <li>starship - Fast, customisable, cross-shell prompt written in rust</li> <li>synth-shell - Greeter with a customizable status report and a fancy bash prompt</li> </ul>"},{"location":"programming/bash/awesome_shell/#for-developers","title":"For Developers","text":"<p>Command-line development, version control, and deployment.</p> <ul> <li>1Password SSH Agent - Authenticate Git and SSH workflows with biometric unlock using 1Password</li> <li>ack - A grep-like search tool optimized for source code.</li> <li>add-gitignore - Interactive CLI that generates a .gitignore for your project based on your needs.</li> <li>bcal - Byte CALculator for storage conversions and calculations</li> <li>bitwise - Terminal based interactive bit manipulator in curses.</li> <li>bocker - Docker implemented in 100 lines of bash</li> <li>cloc - Count Lines of Code</li> <li>doclt - A command line interface to Digital Ocean</li> <li>dokku - Docker powered mini-Heroku. The smallest PaaS implementation you've ever seen.</li> <li>forgit - Utility tool for <code>git</code> taking advantage of fuzzy finder fzf.</li> <li>git-extra-commands - Many Git extra utilities. Churn, cut-branch, improved-merge and many more.</li> <li>git-extras - Git utilities -- repo summary, repl, changelog population, author commit percentages and more</li> <li>git-open - Type <code>git open</code> to open the GitHub page or website for a repository in your browser</li> <li>git-quick-stats - Git quick statistics is a simple and efficient way to access various statistics in git repository.</li> <li>git-semver - Git plugin for easing semantic versioning and changelog validation</li> <li>git-sh - A customized Bash environment suitable for Git work</li> <li>gita - A command-line tool to manage multiple git repos.</li> <li>hub - hub helps you win at git.</li> <li>just - Task runner for saving and running project-specific commands.</li> <li>licins - Insert commented software licenses into source code.</li> <li>mkdkr - Makefile + Docker = CI Pipeline</li> <li>mr - Multiple Repository management tool</li> <li>nve - Run any command on specific Node.js versions.</li> <li>overcommit - A fully configurable and extendable Git hook manager</li> <li>pre-commit - A framework for managing and maintaining multi-language pre-commit hooks</li> <li>rebound - Instantly browse Stack Overflow results in your terminal when you get a compiler error</li> <li>repren - Command-line search-and-replace and file-renaming swiss army knife</li> <li>slap - Sublime-like terminal-based text editor that runs on Node.js</li> <li>shipit - Minimalistic SSH deployment</li> <li>starring - Automatically star the npm-packages that you are using on GitHub.</li> <li>tag - Instantly jump to your ag matches.</li> <li>trunk - Blazingly fast meta code checker and formatter</li> <li>vmn - git-based automatic versioning and state recovery solution agnostic to language or architecture</li> <li>wipe-modules - A little agent that removes the node_modules folder of non-active projects</li> </ul>"},{"location":"programming/bash/awesome_shell/#system-utilities","title":"System Utilities","text":"<p>OS-related tools, including system administration, system debugging, and file and process management.</p> <ul> <li>atop - ASCII full-screen performance monitor that is capable of reporting the activity of all processes</li> <li>bat - A <code>cat</code> clone with wings</li> <li>bmon - Real-time network bandwidth monitor and rate estimator with human-friendly visual output</li> <li>btop - Linux/OSX/FreeBSD resource monitor</li> <li>catcli -  The command line catalog tool for your offline data</li> <li>ccat - ccat is the colorizing cat. It works similar to cat but displays content with syntax highlighting.</li> <li>exa - A modern version of <code>ls</code>.</li> <li>progress - Linux tool to show progress for <code>cp</code>, <code>rm</code>, <code>dd</code>, and more...</li> <li>stronghold - Easily configure MacOS security settings from the terminal.</li> <li>glances - Glances an Eye on your system</li> <li>goaccess - GoAccess is a real-time web log analyzer and interactive viewer that runs in a terminal in *nix systems.</li> <li>hblock - Hosts-file based adblocker</li> <li>histstat - History for netstat</li> <li>htop - A ncurses based interactive process viewer which aims to be a better <code>top</code></li> <li>lnav - An advanced log file viewer for the small-scale</li> <li>logdissect - CLI utility and Python API for analyzing log files and other data.</li> <li>ls++ - Colorized ls on steroids</li> <li>lsd - LSDeluxe, rewrite of GNU ls with lot of added features like colors, icons, tree-view and more formatting options.</li> <li>lsp - An improved <code>ls</code>, with file descriptions in plain language and intelligent file grouping</li> <li>maza - Local ad blocker. Like Pi-hole but local and using your operating system.</li> <li>mtr - The functionality of the 'traceroute' and 'ping' programs in a single network diagnostic tool.</li> <li>ncdu - NCurses Disk Usage</li> <li>nmtui - Text User Interface for controlling NetworkManager</li> <li>powertop - Battery/Power usage and device stats monitoring command-line tool, with tune-up options.</li> <li>prettyping - Making the output of <code>ping</code> prettier, more colorful, more compact, and easier to read.</li> <li>procdog - Lightweight command-line control of long-lived processes like servers</li> <li>quick-secure - Quickly secure and harden UNIX/Linux systems</li> <li>rng - Copy range of lines from file or stdin to stdout.</li> <li>tiptop - Graphical command-line system monitor.</li> <li>wifi-wand - a Ruby command line application for managing WiFi on MacOS (install by <code>gem install wifi-wand</code>)</li> <li>xiringuito - SSH-based \"VPN for poors\"</li> </ul>"},{"location":"programming/bash/awesome_shell/#downloading-and-serving","title":"Downloading and Serving","text":"<p>Self-hosted, lightweight servers and networking tools written in shell scripts.</p> <ul> <li>aria2 - aria2 is a lightweight multi-protocol &amp; multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, BitTorrent and Metalink</li> <li>balls - Bash on Balls</li> <li>bashttpd - A web server written in Bash</li> <li>bashhub-server - Private cloud shell history. Open source server for bashhub</li> <li>bitpocket - \"DIY Dropbox\" or \"2-way directory (r)sync with proper deletion\"</li> <li>Dropbox-Uploader - Dropbox Uploader is a Bash script which can be used to upload, download, list or delete files from Dropbox</li> <li>httpie - HTTPie is a command line HTTP client, a user-friendly cURL replacement</li> <li>HTTPLab - The interactive web server, let you inspect HTTP requests and forge responses.</li> <li>ngincat - Tiny Bash HTTP server using netcat</li> <li>resty - Little command line REST client that you can use in pipelines</li> <li>shell2http - HTTP-server to execute shell commands. Designed for development, prototyping or remote control</li> <li>vesper - \ud83c\udf78Vesper is a HTTP framework for Bash/Unix Shell</li> <li>xh - Friendly and fast tool for sending HTTP requests</li> <li>youtube-dl - Small command-line program to download videos from YouTube.com and other video sites</li> </ul>"},{"location":"programming/bash/awesome_shell/#multimedia-and-file-formats","title":"Multimedia and File Formats","text":"<p>Tools for handling video and audio files.</p> <ul> <li>adb-export - Export Android content providers to CSV format</li> <li>Android-Kitchen - A text-based kitchen for Android ROM customization. Uses shell scripts and works with Cygwin/OS X/Linux</li> <li>Beets - Music library manager and MusicBrainz tagger</li> <li>cmus - Cross-platform cli audio player.</li> <li>dasel - Query and update data structures using selectors from the command line. Comparable to jq / yq but supports JSON, YAML, TOML and XML with zero runtime dependencies.</li> <li>dzr - Cross-platform Deezer.com audio player.</li> <li>fx - Command-line JSON processing tool by anononymus JavaScript functions</li> <li>gifgen - Simple high quality GIF encoding</li> <li>image-scraper - A cool command line image scraper with a lot of features.</li> <li>imgp - Blazing fast batch image resizer and rotator</li> <li>jc - Convert command output, file-types, and common strings to JSON or YAML for easier use in scripts.</li> <li>jo - A small utility to create JSON objects from command-line arguments.</li> <li>jq - Sed for json data. You can use it to slice and filter and map and transform structured data</li> <li>korkut - Quick and simple image processing at the command line.</li> <li>mpv - Lets you play most audio and video formats (using ASCII characters) in the shell as well as in a GUI.</li> <li>nehm - Console tool, which downloads, sets IDv3 tags and adds to your iTunes (if you use it) your SoundCloud likes in convenient way</li> <li>PiCAST - PiCAST turns your $35 Raspberry Pi in to a Chromecast like Device</li> <li>sejda - Command line manipulation of PDF documents (split, merge, rotate, convert to jpg, extract text, etc)</li> <li>visidata - A terminal spreadsheet multitool for exploring and arranging data (csv/json/xml/xls/yaml/etc)</li> <li>xidel - Cli tool to filter, map and create HTML/XML/JSON data with (Turing-complete) XPath and XQuery.</li> <li>xmlstarlet - Old but powerful tool for command-line XML formatting, filtering, and manipulation.</li> <li>yq - yq is a portable command-line YAML processor</li> </ul>"},{"location":"programming/bash/awesome_shell/#applications","title":"Applications","text":"<p>Command line-based applications or command line access to existing services.</p> <ul> <li>ansiweather - Weather in your terminal, with ANSI colors and Unicode symbols</li> <li>awless - A powerful, innovative and small surface CLI to manage AWS.</li> <li>bashblog - A Bash script that handles blog posting</li> <li>carbon-now-cli - \ud83c\udfa8 Beautiful images of your code \u2014 from right inside your terminal.</li> <li>choosealicense-cli - Choose an OSS license from the comfort of your terminal</li> <li>cointop - The fastest and most interactive terminal based UI application for tracking cryptocurrencies</li> <li>dstask - Single binary terminal-based TODO manager with git-based sync + markdown notes per task</li> <li>editly - Command line video editor</li> <li>facebook-cli - Facebook command line tool</li> <li>fanyi - Translate English to Chinese in terminal</li> <li>gcalcli - Google Calendar command line interface</li> <li>geeknote - Command line evernote client</li> <li>haxor-news - Browse Hacker News like a haxor</li> <li>hn-cli - Browse Hacker News from the comfort of your Terminal</li> <li>iponmap - Draw point on world map using ip address</li> <li>isitup - Check whether a website is up or down</li> <li>jrnl - A simple command line journal application that stores your journal in a plain text file</li> <li>kanban.bash - commandline asciii kanban board for minimalist productivity bash hackers (csv-based)</li> <li>ledger - Command line accounting</li> <li>licen - Generate your license. Yet another lice, but implement with Jinja2 and docopt</li> <li>md2png - Convert markdown to PNG image</li> <li>moviemon - Everything about your movies within the command line.</li> <li>nomino - Batch rename utility using regex, sort and map file options.</li> <li>pcalc - Calculator made for programmers working with multiple number representations, sizes, and overall close to the bits.</li> <li>pockyt - Read, Manage, and Automate your Pocket collection.</li> <li>pushblast - Get PushBullet notifications when a shell program exits</li> <li>pushbullet-bash - Bash interface to the PushBullet API</li> <li>ranger - A console file manager with VI key bindings.</li> <li>Reddit Terminal Viewer - Browse Reddit from your terminal</li> <li>SAWS - A Supercharged AWS CLI</li> <li>taskbook - Tasks, boards &amp; notes for the command-line habitat</li> <li>taskwarrior - A command-line TODO list manager</li> <li>terjira - Command line power tool for Jira</li> <li>ticker \u2014 Terminal stock ticker with live updates and position tracking</li> <li>vl - URL link checker on text documents</li> <li>wego - Weather app for the terminal</li> <li>whales - A tool to automatically dockerize your applications</li> <li>whereami - Get your geolocation information from the CLI</li> <li>wttr.in - :partly_sunny: The right way to check the weather (curl wttr.in)</li> </ul>"},{"location":"programming/bash/awesome_shell/#games","title":"Games","text":"<p>All work and no play is a cruddy way to spend your day.</p> <ul> <li>bash2048 - Bash implementation of 2048 game</li> <li>minesweeper - Bash implementation of minesweeper</li> <li>nudoku - ncurses based sudoku game written in C</li> <li>piu-piu - Horizontal scroller game in bash with multiplayer mode!</li> <li>sedtris - Tetris in sed</li> <li>sed-scripts - Arkanoid and Sokoban written using sed</li> <li>SHTAP - Reusable text adventure engine for Bash 4</li> <li>tty-solitaire - Play solitaire in your terminal!</li> </ul>"},{"location":"programming/bash/awesome_shell/#shell-package-management","title":"Shell Package Management","text":"<p>Tools for managing multiple shell configurations. For zsh-specific tools, see the Zsh section.</p> <ul> <li>bash-it - A community Bash framework</li> <li>basher - A package manager for shell scripts</li> <li>bashing - Smashing Bash into Pieces</li> <li>bpkg - JavaScript has npm, Ruby has Gems, Python has pip and now Shell has bpkg</li> <li>dotdrop - Save your dotfiles once, deploy them everywhere</li> <li>dotfiler \u2013 Shell agnostic git based dotfiles package manager, written in Python.</li> <li>fresh - Keep your dotfiles fresh</li> <li>homeshick - Git dotfile synchronizer written in Bash</li> <li>shallow-backup - Easily create lightweight documentation of installed packages, dotfiles, and more</li> <li>shundle - Plugin manager for shell scripts</li> <li>vcsh - Config manager based on Git</li> <li>yadm - Git-based dotfiles manager supporting encryption, alternates, and bootstrapping</li> </ul>"},{"location":"programming/bash/awesome_shell/#shell-script-development","title":"Shell Script Development","text":"<p>Tools for writing, improving, or organizing Bash or other shell scripts</p> <ul> <li>ansi - ANSI escape codes in pure bash - change text color, position the cursor, much more</li> <li>assert.sh - Bash unit testing framework</li> <li>bashew - bash script creator - from small stand-alone script to complex projects with CI/CD and testing</li> <li>bashful - A collection of libraries to simplify writing Bash scripts</li> <li>Bashlets - A modular extensible toolbox for Bash</li> <li>bashly - Bash command line framework and CLI generator</li> <li>bashmanager - mini bash framework for creating command line tools</li> <li>bashwithnails - a Bash framework written just for fun with testing, dependency management &amp; packaging</li> <li>bash-language-server - LSP-based Bash language server</li> <li>bash-modules - functions for developing with unofficial strict mode enabled.</li> <li>bats - Bash Automated Testing System</li> <li>composure - Compose, document, version and organize your shell functions</li> <li>crash - Proper error handling, exceptions and try/catch for ZSH</li> <li>critic.sh - Dead simple testing framework for Bash with coverage reporting</li> <li>dispatch - A command line argument parser in 50 lines of portable shell script.</li> <li>esh - A simple templating engine based on shell, implemented in ~290 lines of POSIX shell and awk.</li> <li>Fishtape - TAP producer and test harness for fish</li> <li>getoptions - An elegant option parser for shell scripts (sh, bash and all POSIX shells)</li> <li>getopts.fish - CLI parser for fish</li> <li>is.sh - An alternative for builtin test command, it will make your \"if\" statements pretty</li> <li>lumberjack - A logging interface for shell scripts</li> <li>mo - Mustache templates in pure bash</li> <li>optparse - A BASH wrapper for getopts, for simple command line arguments.</li> <li>rerun - A modular shell automation framework to organize your keeper scripts</li> <li>revolver - A reusable progress spinner for shell scripts</li> <li>phases - Minimally invasive bash preprocessor, select sections of your script to run</li> <li>powscript - bash transpiler written in bash (coffeescript for bash)</li> <li>semver_bash - Semantic Versioning in Bash</li> <li>sh-semver - Semver tool for bash - finds versions matching to specified rules</li> <li>shellcheck - Static analysis tool for shell scripts</li> <li>shellfire -  A repository of namespaced, composable shell (bash, sh and dash) function libraries</li> <li>shellspec - A full-featured BDD unit testing framework for dash, bash, ksh, zsh and all POSIX shells</li> <li>shfmt - A shell parser, formatter, and interpreter with bash support; includes shfmt</li> <li>shpec - A shell testing framework</li> <li>shutit - Automation framework based on bash and pexpect</li> <li>sub - A delicious way to organize programs</li> <li>ts - A shell test script</li> <li>urchin - An idiomatic shell testing framework that uses only shell commands</li> <li>shunit2 - A unit test framework for Bash scripts with a flavour of JUnit/PyUnit.</li> <li>rebash - Scripting library/framework. Features: imports, exceptions, doc-tests ...</li> <li>zunit - A powerful unit testing framework for ZSH</li> </ul>"},{"location":"programming/bash/awesome_shell/#guides","title":"Guides","text":"<ul> <li>Bash Official Reference Manual</li> <li>Bash Hackers Wiki</li> <li>Greg Wooledge's (aka \"greycat\") wiki.   Specifically Bash Guide, Bash FAQ and Bash Pitfalls</li> <li>Google's Shell Style Guide</li> <li>The Linux Documentation Project: Bash Programming - Intro/How-to</li> <li>The Linux Documentation Project: Advanced Bash Scripting Guide</li> <li>WikiBooks: Bash Shell Scripting</li> <li>Use the Unofficial Bash Strict Mode (Unless You Looove Debugging)</li> <li>The Art of Command Line</li> <li>Learn Enough Command Line to Be Dangerous</li> <li>A guide to learn bash</li> <li>Shell Field Guide</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/","title":"Terminals Are Sexy","text":""},{"location":"programming/bash/terminals_are_sexy/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Terminals Are Sexy</li> <li>Table of Contents</li> <li>Shells<ul> <li>Base Shells</li> <li>ZSH</li> <li>Bash</li> <li>Git</li> <li>Fish</li> </ul> </li> <li>Terminal Emulation Applications</li> <li>Package Managers<ul> <li>Universal</li> <li>macOS</li> <li>Linux</li> <li>ChromeOS</li> <li>Windows</li> </ul> </li> <li>Text Editors</li> <li>Tools and Plugins</li> <li>Communication</li> <li>Other<ul> <li>Community</li> <li>Other Sexy Lists</li> <li>Awesome</li> <li>Misc</li> </ul> </li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#shells","title":"Shells","text":"<p>Sexy frameworks, plugins and resources for your sexy shell.</p>"},{"location":"programming/bash/terminals_are_sexy/#base-shells","title":"Base Shells","text":"<ul> <li>Ammonite-Shell - An object shell with a Scala-like scripting language.</li> <li>bash - GNU Project's shell (Bourne Again SHell).</li> <li>fish - Smart and user-friendly command line shell.</li> <li>PowerShell - Automation and configuration tool/framework that is optimized for dealing with structured data.</li> <li>xonsh - Python-ish, BASHwards-looking shell language and command prompt.</li> <li>zsh - Powerful shell with scripting language.</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#zsh","title":"ZSH","text":"<ul> <li>alf - Out of this world super fast and configurable framework for zsh.</li> <li>ant-zsh - Tiny and lightweight ZSH configuration environment for special customization needs.</li> <li>antibody - Faster and simpler antigen written in Golang.</li> <li>antigen - Plugin manager for zsh, inspired by oh-my-zsh and vundle.</li> <li>dotzsh - Community driven framework for zsh.</li> <li>liquidprompt - Full-featured &amp; carefully designed adaptive prompt for Bash &amp; Zsh.</li> <li>oh-my-zsh - Delightful community-driven framework for managing your zsh configuration.</li> <li>powerlevel9k - Super flexible awesome powerline ZSH theme.</li> <li>prezto - Configuration framework for Zsh.</li> <li>pumice - Lightweight plugin manager for zsh.</li> <li>pure - Pretty, minimal and fast ZSH prompt.</li> <li>slimzsh - Small, usable configuration for ZSH.</li> <li>zeesh - Cross-platform Zsh framework.</li> <li>zgen - Lightweight and simple plugin manager for ZSH.</li> <li>zilsh - Zsh config system that aims to appeal more to power-users and follow the simplistic approach of vim-pathogen.</li> <li>zim - Zsh configuration framework with blazing speed and modular extensions.</li> <li>zinit - Flexible Zsh plugin manager with clean fpath, reports, completion management, turbo mode, services.</li> <li>zoppo - Crippled configuration framework for Zsh.</li> <li>zplug - Next-generation plugin manager for zsh.</li> <li>zpm - Plugin manager for zsh similar to vim-plug.</li> <li>zsh-autosuggestions - Fish-like autosuggestions for zsh.</li> <li>zsh-pony - Covers customizing ZSH without a framework.</li> <li>zsh-quickstart-kit - Simple zsh quickstart for using zsh and zgen.</li> <li>zsh-syntax-highlighting - Fish shell like syntax highlighting for Zsh.</li> <li>zshdb - ZSH debugger.</li> <li>ztanesh - Aims to improve your UNIX command line experience and productivity with the the configuration provided by the ztanesh project.</li> <li>zulu - Total environment manager for ZSH 5+.</li> <li>zunit - Powerful unit testing framework for ZSH.</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#bash","title":"Bash","text":"<ul> <li>aliases - Contextual, dynamic, organized aliases for the bash shell.</li> <li>bash-it - Collection of community Bash commands and scripts.</li> <li>bash-powerline - Powerline-style Bash prompt in pure Bash script.</li> <li>bash-sensible - Attempt at saner Bash defaults.</li> <li>bashtrap - Quick way to spruce up OSX terminal.</li> <li>hstr - Bash History Suggest Box.</li> <li>liquidprompt - Full-featured &amp; carefully designed adaptive prompt for Bash &amp; Zsh.</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#git","title":"Git","text":"<ul> <li>bash-git-prompt - Informative and fancy Bash prompt for Git users.</li> <li>git-extra-commands - Collection of useful extra commands for git</li> <li>git-prompt - Bash prompt with Git, SVN and HG modules.</li> <li>git-radar - Heads up display for git</li> <li>git-sh - Customized Bash environment suitable for Git work.</li> <li>gittify - Colorful Bash prompt + customized Git aliases.</li> <li>oh-my-git - Opinionated git prompt for bash and zsh.</li> <li>sexy-bash-prompt - Bash prompt with colors, Git statuses, and Git branches.</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#fish","title":"Fish","text":"<ul> <li>Fisher - Package manager for the fish shell.</li> <li>oh-my-fish - The Fishshell Framework.</li> </ul> <p>\u2b06 back to top</p>"},{"location":"programming/bash/terminals_are_sexy/#terminal-emulation-applications","title":"Terminal Emulation Applications","text":"<p>Sexy 3rd party terminal emulation applications.</p> <ul> <li>Alacritty - Cross-platform, GPU-accelerated terminal emulator.</li> <li>Cmder - Lovely console emulator package for Windows.</li> <li>ConEmu - Customizable Windows terminal with tabs, splits, quake-style and more.</li> <li>ConsoleZ - Windows console window enhancement. It is a fork of Console project.</li> <li>FluentTerminal - A Terminal Emulator based on UWP and web technologies.</li> <li>GNOME Terminal - Terminal emulator for GNOME.</li> <li>GNU Screen - Full-screen window manager that multiplexes a physical terminal between several processes.</li> <li>Go2Shell - Opens a terminal window to the current directory in Finder.</li> <li>Hyper - Terminal built on web technologies.</li> <li>iTerm2 - Terminal emulator for macOS that does amazing things.</li> <li>KiTTY - Fork from version 0.70 of PuTTY, the best telnet / SSH client in the world.</li> <li>Konsole - Terminal emulator for the K Desktop Environment.</li> <li>MacTerm - Powerful replacement for macOS Terminal.</li> <li>Mosh - Remote terminal application that allows roaming and supports intermittent connectivity.</li> <li>PuTTY - SSH and telnet client, developed originally by Simon Tatham for the Windows platform.</li> <li>Terminator - Multiple GNOME terminals in one window.</li> <li>Terminology - The best terminal emulator based on the Enlightenment Foundation Libraries.</li> <li>Terminus - Cross-platform terminal for a more modern age, based on web technologies.</li> <li>Termite - Keyboard-centric terminal, aimed at use within a tiling window manager.</li> <li>Tilda - Gtk based drop down terminal for Linux and Unix.</li> <li>Tilix - Advanced GTK3 tiling terminal emulator that follows the Gnome Human Interface Guidelines.</li> <li>Xfce Terminal - Modern terminal emulator primarily for the Xfce desktop environment.</li> <li>xterm - Terminal emulator for the X Window System.</li> <li>ZOC - SSH/Telnet Client and Terminal Emulator for macOS and Windows.</li> </ul> <p>\u2b06 back to top</p>"},{"location":"programming/bash/terminals_are_sexy/#package-managers","title":"Package Managers","text":"<p>Sexy package managers for your macOS, Linux &amp; Windows CLIs.</p>"},{"location":"programming/bash/terminals_are_sexy/#universal","title":"Universal","text":"<ul> <li>asdf - Extendable version manager with support for Ruby, Node.js, Elixir, Erlang &amp; more</li> <li>basher - Package manager for shell scripts.</li> <li>bpkg - JavaScript has npm, Ruby has Gems, Python has pip and now Shell has bpkg.</li> <li>composer - Composer is a package manager for PHP.</li> <li>guix - Functional package manager for installed software packages and versions.</li> <li>nix - Powerful package manager for Linux and other Unix systems that makes package management reliable and reproducible.</li> <li>npmjs - Package manager for JavaScript.</li> <li>pip - Package management system used to install and manage software packages written in Python.</li> <li>rubygems - The Ruby community\u2019s gem hosting service.</li> <li>yarn - New package and dependency manager for javascript.</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#macos","title":"macOS","text":"<ul> <li>fink - Wants to bring the full world of Unix Open Source software to Darwin and macOS.</li> <li>homebrew - Missing package manager for macOS.</li> <li>macports - Package manager that simplifies the installation of software on the macOS and Darwin operating systems.</li> <li>mas - Mac App Store command line interface.</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#linux","title":"Linux","text":"<ul> <li>linuxbrew - The Homebrew package manager for Linux.</li> <li>pkgin - Aimed at being an apt / yum like tool for managing pkgsrc binary packages.</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#chromeos","title":"ChromeOS","text":"<ul> <li>chromebrew - Package manager for Chrome OS.</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#windows","title":"Windows","text":"<ul> <li>chocolatey - Package manager for Windows.</li> <li>cygwin - Linux-like environment for Windows making it possible to port software running on POSIX systems to Windows.</li> <li>ninite - Install and Update All Your Programs at Once.</li> <li>oneget - PackageManagement (aka OneGet) is a package manager for Windows.</li> <li>ruckzuck - Software Package Manager for Windows, a quick way to install and update Software.</li> <li>scoop - Package manager for Windows.</li> <li>wpkg - Automated software deployment, upgrade and removal program for Windows.</li> </ul> <p>\u2b06 back to top</p>"},{"location":"programming/bash/terminals_are_sexy/#text-editors","title":"Text Editors","text":"<p>Sexy text editors for your Command Line Interface.</p> <ul> <li>emacs - Cross-platform text-editor that has both command-line and graphical user interface.<ul> <li>spacemacs - Community-driven emacs distribution.</li> </ul> </li> <li>jed - Freely available text editor for Unix, VMS, MSDOS, OS/2, BeOS, QNX, and win9X/NT platforms.</li> <li>kakoune - Modal editor with multiple selections and orthogonal design.</li> <li>micro - Modern and intuitive terminal-based text editor.</li> <li>nano - Text editor for Unix-like computing systems or operating environments using a command line interface.</li> <li>slap - Sublime-like terminal-based text editor.</li> <li>vim - Extensively configurable, cross-platform and highly efficient text editor.<ul> <li>SpaceVim - Community-driven vim distribution.</li> <li>neovim - Literally the future of vim.</li> </ul> </li> <li>vis - Highly efficient text editor.</li> </ul> <p>\u2b06 back to top</p>"},{"location":"programming/bash/terminals_are_sexy/#tools-and-plugins","title":"Tools and Plugins","text":"<p>Sexy Applications for your Command Line Interface.</p> <ul> <li>ack3 - Greplike tool, optimized for programmers.</li> <li>add-gitignore - An interactive CLI that generates a .gitignore for your project based on your needs.</li> <li>asciinema - Terminal session recorder.</li> <li>autojump - cd command that learns</li> <li>bcal - Storage conversion and expression calculator.</li> <li>buku - command-line bookmark manager.</li> <li>byobu - Byobu is an open source text-based window manager and terminal multiplexer.</li> <li>cointop - The fastest and most interactive terminal based UI application for tracking cryptocurrencies.</li> <li>colorls - Beautify the terminal's <code>ls</code> command, with color and font-awesome icons.</li> <li>ddgr - DuckDuckGo from the terminal.</li> <li>df-show - Interactive directory and file browser with a similar feel to the <code>ls</code> command.</li> <li>dockly - Docker console UI and Dashboard for quickly managing and inspecting  Containers and Services.</li> <li>dry - Docker manager for the terminal.</li> <li>exa - Replacement for 'ls' written in Rust.</li> <li>fselect - 'find' replacement with SQL-like syntax.</li> <li>fx - Command-line JSON viewer.</li> <li>fzf - Command-line fuzzy finder.</li> <li>gcalcli - Google Calendar command line interface.</li> <li>getnews.tech - Checking the latest news headlines from various news outlets on the web.</li> <li>glances - top/htop alternative.</li> <li>googler - Search Google from your terminal.</li> <li>haxor-news - Browse Hacker News like a haxor.</li> <li>homebrew-cask - CLI workflow for the administration of macOS applications distributed as binaries.</li> <li>howdoi - Instant code answers and examples from the command line</li> <li>htop - Cool looking and interactive process viewer 'replacement' for the top command.</li> <li>hub - Command-line wrapper for git that makes working with GitHub easy.</li> <li>imgp - Multi-core batch image resizer and rotator.</li> <li>jaymock-cli - Mock an API and generate fake JSON test data, right from the terminal.</li> <li>jq.node - Command-line JSON/string processor, JavaScript and Lodash in your shell.</li> <li>jrnl - Simple command line journal application that stores your journal in a plain text file.</li> <li>k - Directory listings for zsh with git features.</li> <li>kubebox - Terminal console for Kubernetes.</li> <li>lexis - word counting made easy. Retrieve the number of words in a string or stdin.</li> <li>lf - Terminal file manager.</li> <li>lolcat - Rainbows and unicorns!</li> <li>lunchy - Friendly wrapper for launchctl.</li> <li>mps-youtube - Terminal based YouTube player and downloader</li> <li>navi - An interactive cheatsheet tool for the command-line.</li> <li>neofetch - Fetches system/theme information in terminal for Linux desktop screenshots. Alternative to screenfetch.</li> <li>nnn - Tiny, lightning fast, feature-packed file manager.</li> <li>ranger - Console file manager with vi key bindings.</li> <li>rebound - Command-line debugger that instantly fetches Stack Overflow results when you get a compiler error.</li> <li>reddit terminal viewer - Browse Reddit from your terminal.</li> <li>ripgrep - Code-searching tool like ack and the_silver_searcher, but faster.</li> <li>screenfetch - Fetches system/theme information in terminal for Linux desktop screenshots.</li> <li>shell2http - HTTP-server to execute shell commands. Designed for development, prototyping or remote control.</li> <li>streamlink - CLI for extracting streams from various websites to a video player of your choosing.</li> <li>taskell - Command-line Trello-like kanban-board/TODO lists.</li> <li>taskwarrior - Command-line TODO list manager.</li> <li>the_silver_searcher - Code-searching tool similar to ack, but faster.</li> <li>tig - Text mode interface for git.</li> <li>tiv - Text mode terminal image viewer.</li> <li>tldr - Simplified and community-driven man pages.</li> <li>tmux - Terminal multiplexer.</li> <li>tmuxinator - Manage complex tmux sessions easily.</li> <li>transfer.sh - Quickly upload and share files from your shell.</li> <li>tre - Improved <code>tree</code> command that knows git, creates shell alias for quick opening, and more!</li> <li>vifm - Console file manager with vi key bindings and some ideas from mutt.</li> <li>wal - generate and change colorschemes on the fly.</li> <li>whereami - Get your geolocation information from the CLI.</li> <li>wttr.in - The right way to check the weather.</li> <li>yadm - Seamless git-based management of your dotfiles.</li> <li>youtube-dl - download videos from YouTube</li> <li>z - Tool to jump to folders based on history matching a given regex</li> <li>z.lua - New cd command that helps you navigate faster by learning your habits.</li> <li>zoxide - cd anywhere without typing in long paths.</li> </ul> <p>\u2b06 back to top</p>"},{"location":"programming/bash/terminals_are_sexy/#communication","title":"Communication","text":"<p>Sexy Tools for communicating through the Command Line Interface.</p> <ul> <li>bitchx - Feature-rich and highly configurable, terminal based IRC client based on ircII.</li> <li>centerim - Terminal based, multi-protocol Instant Messaging client with support for IRC.</li> <li>epic - IRC client that has been under active development for 20+ years in 5 generations.</li> <li>go-jira - Simple jira command line client in Go.</li> <li>irssi - Self proclaimed client of the future and my favorite IRC client.</li> <li>slack-term - Slack client for your terminal.</li> <li>Slackadaisical - Simple Slack client for the CLI.</li> <li>weechat - Fast, light and extensible chat client.</li> </ul> <p>\u2b06 back to top</p>"},{"location":"programming/bash/terminals_are_sexy/#other","title":"Other","text":""},{"location":"programming/bash/terminals_are_sexy/#community","title":"Community","text":"<p>Join the CLI lover community.</p> <ul> <li>/r/commandline - This is for anything regarding the command line, in any operating system.</li> <li>/r/osxterminal - Tips for using terminal.app in macOS.</li> <li>/r/zsh/ - Everything on zsh.</li> <li>/r/unixporn/ - Everything on unix.</li> <li>#bash - Bash IRC channel on freenode.</li> <li>Stack Overflow - Terminal tagged questions.</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#other-sexy-lists","title":"Other Sexy Lists","text":"<p>Here are some more sexy lists.</p>"},{"location":"programming/bash/terminals_are_sexy/#awesome","title":"Awesome","text":"<ul> <li>awesome-devenv - Curated list of delightful Bash scripts and resources.</li> <li>awesome-emacs - Community driven list of useful Emacs packages, libraries and others.</li> <li>awesome-sysadmin - Curated list of amazingly awesome open source sysadmin resources.</li> <li>awesome-zsh-plugins - Collection of ZSH frameworks, plugins &amp; themes inspired by the various awesome list collections out there.</li> </ul>"},{"location":"programming/bash/terminals_are_sexy/#misc","title":"Misc","text":"<ul> <li>bash-guide - Guide to learn bash.</li> <li>the-art-of-command-line - Master the command line, in one page.</li> </ul>"},{"location":"programming/composer/composer/","title":"Composer","text":""},{"location":"programming/composer/composer/#ejecutar-composer-con-instancia-de-php-que-no-sea-la-por-defecto-del-sistema","title":"Ejecutar composer con instancia de php que no sea la por defecto del sistema","text":"<pre><code>/usr/bin/php7.4 /usr/local/bin/composer install\n</code></pre>"},{"location":"programming/html/text_tags/","title":"Text tags","text":"<pre><code>&lt;p&gt;Esto es texto regular&lt;/p&gt;\n\n&lt;p&gt;&lt;b&gt;Texto en negrita&lt;/b&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;i&gt;Texto en cursiva&lt;/i&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;small&gt;Texto peque\u00f1o&lt;/small&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Texto fuerte&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Normal &lt;sub&gt;Texto subindice&lt;/sub&gt;&lt;/p&gt;\n\n&lt;p&gt;Normal &lt;sup&gt;Texto superindice&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;ins&gt;Texto insertado&lt;/ins&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;del&gt;Texto borrado&lt;/del&gt;&lt;/p&gt;\n</code></pre>"},{"location":"programming/javascript/awesome_javaScript/","title":"Awesome JavaScript","text":"<p>A collection of awesome browser-side JavaScript libraries, resources and shiny things.</p> <ul> <li>Awesome JavaScript</li> <li>Package Managers</li> <li>Component Management</li> <li>Loaders</li> <li>Transpilers</li> <li>Bundlers</li> <li>Minimizers</li> <li>Type Checkers</li> <li>Testing Frameworks<ul> <li>Frameworks</li> <li>Assertion</li> <li>Coverage</li> <li>Runner</li> </ul> </li> <li>QA Tools</li> <li>MVC Frameworks and Libraries</li> <li>Node-Powered CMS Frameworks</li> <li>Templating Engines</li> <li>Game Engines</li> <li>Articles and Posts</li> <li>Data Visualization</li> <li>Timeline</li> <li>Spreadsheet</li> <li>Editors</li> <li>Documentation</li> <li>Files</li> <li>Functional Programming</li> <li>Reactive Programming</li> <li>Data Structure</li> <li>Date</li> <li>String</li> <li>Number</li> <li>Storage</li> <li>Color</li> <li>I18n And L10n</li> <li>Control Flow</li> <li>Routing</li> <li>Security</li> <li>Log</li> <li>RegExp</li> <li>Voice Command</li> <li>API</li> <li>Streaming</li> <li>Vision Detection</li> <li>Machine Learning</li> <li>Browser Detection</li> <li>Operating System</li> <li>Benchmark</li> <li>Web Worker</li> <li>Code highlighting</li> <li>Loading Status</li> <li>Validation</li> <li>Keyboard Wrappers</li> <li>Tours And Guides</li> <li>Notifications</li> <li>Sliders</li> <li>Range Sliders</li> <li>Form Widgets<ul> <li>Input</li> <li>Calendar</li> <li>Select</li> <li>File Uploader</li> <li>Other</li> </ul> </li> <li>Tips</li> <li>Modals and Popups</li> <li>Scroll</li> <li>Menu</li> <li>Table/Grid</li> <li>Frameworks</li> <li>Boilerplates</li> <li>Images</li> <li>Gesture</li> <li>Maps</li> <li>Video/Audio</li> <li>Typography</li> <li>Animations</li> <li>Image Processing</li> <li>ES6</li> <li>Generators</li> <li>SDK</li> <li>Full Text Search</li> <li>Misc</li> <li>Worth Reading</li> <li>Other Awesome Lists</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#package-managers","title":"Package Managers","text":"<p>Host the JavaScript libraries and provide tools for fetching and packaging them.</p> <ul> <li>npm - npm is the package manager for JavaScript.</li> <li>Bower - A package manager for the web.</li> <li>component - Client package management for building better web applications.</li> <li>spm - Brand new static package manager.</li> <li>jam - A package manager using a browser-focused and RequireJS compatible repository.</li> <li>jspm - Frictionless browser package management.</li> <li>Ender - The no-library library.</li> <li>volo - Create front end projects from templates, add dependencies, and automate the resulting projects.</li> <li>Duo - Next-generation package manager that blends the best ideas from Component, Browserify and Go to make organizing and writing front-end code quick and painless.</li> <li>yarn - Fast, reliable, and secure dependency management.</li> <li>pnpm - Fast, disk space efficient package manager.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#component-management","title":"Component Management","text":"<ul> <li>Bit - Create, find and reuse components (React, Angular, Node etc.) across applications.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#loaders","title":"Loaders","text":"<p>Module or loading system for JavaScript.</p> <ul> <li>RequireJS - A file and module loader for JavaScript.</li> <li>browserify - Browser-side require() the node.js way.</li> <li>SeaJS - A Module Loader for the Web.</li> <li>HeadJS - The only script in your HEAD.</li> <li>lazyload - Tiny, dependency-free async JavaScript and CSS loader.</li> <li>script.js - Asynchronous JavaScript loader and dependency manager.</li> <li>systemjs - AMD, CJS &amp; ES6 spec-compliant module loader.</li> <li>LodJS - Module loader based on AMD.</li> <li>ESL - Module loader browser first, support lazy define and AMD.</li> <li>modulejs - Lightweight JavaScript module system.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#transpilers","title":"Transpilers","text":"<p>Software that converts the modern JavaScript syntax into the older JavaScript syntax.</p> <ul> <li>SWC - Extensible Rust-based platform for compilation.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#bundlers","title":"Bundlers","text":"<ul> <li>webpack - Packs CommonJs/AMD modules for the browser.</li> <li>Rollup - Next-generation ES6 module bundler.</li> <li>Brunch - Fast front-end web app build tool with simple declarative config.</li> <li>Parcel - Blazing fast, zero configuration web application bundler.</li> <li>Microbundle - Zero-configuration bundler for tiny modules.</li> <li>FuseBox - A bundler that does it right</li> <li>Snowpack - A lightning-fast frontend build tool, designed for the modern web.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#minimizers","title":"Minimizers","text":"<ul> <li>Terser - parser, mangler and compressor toolkit for ES6+</li> <li>Uglify - parser / mangler / compressor / beautifier toolkit</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#type-checkers","title":"Type Checkers","text":"<ul> <li>TypeScript - A typed superset of JavaScript that compiles to plain JavaScript.</li> <li>Flow.js - A static type checker for JavaScript from Facebook.</li> <li>Hegel -  A static type checker for JavaScript with a bias on type inference an strong type system.</li> <li>TypL - the JavaScript Type Linter with a bias on type inference.</li> <li>Hindley Milner Definitions - runtime type checking for JavaScript functions using Haskell-alike Hindley Milner type signatures.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#testing-frameworks","title":"Testing Frameworks","text":""},{"location":"programming/javascript/awesome_javaScript/#frameworks","title":"Frameworks","text":"<ul> <li>mocha - Simple, flexible, fun JavaScript test framework for node.js &amp; the browser.</li> <li>jasmine - DOM-less simple JavaScript testing framework.</li> <li>qunit - An easy-to-use JavaScript Unit Testing framework.</li> <li>jest - Painless JavaScript Unit Testing.</li> <li>prova - Node &amp; Browser test runner based on Tape and Browserify</li> <li>DalekJS - Automated cross browser functional testing with JavaScript</li> <li>Protractor - Protractor is an end-to-end test framework for AngularJS applications.</li> <li>tape - Tap-producing test harness for node and browsers.</li> <li>TestCafe - Automated browser testing for the modern web development stack.</li> <li>ava - \ud83d\ude80 Futuristic JavaScript test runner</li> <li>Cypress - Complete end-to-end testing framework for anything that runs in a browser and beyond.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#assertion","title":"Assertion","text":"<ul> <li>chai - BDD / TDD assertion framework for node.js and the browser that can be paired with any testing framework.</li> <li>Enzyme - Enzyme is a JavaScript Testing utility for React that makes it easier to assert, manipulate, and traverse your React Components' output.</li> <li>react testing library - Simple and complete React DOM testing utilities that encourage good testing practices.</li> <li>Sinon.JS - Test spies, stubs, and mocks for JavaScript.</li> <li>expect.js - Minimalistic BDD-style assertions for Node.JS and the browser.</li> <li>proxyquire - Stub nodejs's require.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#coverage","title":"Coverage","text":"<ul> <li>istanbul - Yet another JS code coverage tool.</li> <li>blanket - A simple code coverage library for JavaScript. Designed to be easy to install and use, for both browser and nodejs.</li> <li>JSCover - JSCover is a tool that measures code coverage for JavaScript programs.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#runner","title":"Runner","text":"<ul> <li>phantomjs - Scriptable Headless WebKit.</li> <li>slimerjs - A PhantomJS-like tool running Gecko.</li> <li>casperjs - Navigation scripting &amp; testing utility for PhantomJS and SlimerJS.</li> <li>zombie - Insanely fast, full-stack, headless browser testing using node.js.</li> <li>totoro - A simple and stable cross-browser testing tool.</li> <li>karma - Spectacular Test Runner for JavaScript.</li> <li>nightwatch - UI automated testing framework based on node.js and selenium webdriver.</li> <li>intern - A next-generation code testing stack for JavaScript.</li> <li>puppeteer - Headless Chrome Node.js API by official Google Chrome team.</li> <li>webdriverio - Next-gen WebDriver test automation framework for Node.js.</li> <li>taiko - A Node.js library with a simple API to automate Chromium based browsers.</li> <li>Playwright - Node.js library to automate Chromium, Firefox and WebKit with a single API.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#qa-tools","title":"QA Tools","text":"<ul> <li>prettier - Prettier is an opinionated code formatter.</li> <li>JSHint - JSHint is a tool that helps to detect errors and potential problems in your JavaScript code.</li> <li>jscs - JavaScript Code Style checker.</li> <li>jsfmt - For formatting, searching, and rewriting JavaScript.</li> <li>jsinspect - Detect copy-pasted and structurally similar code.</li> <li>buddy.js - Magic number detection for JavaScript.</li> <li>ESLint - A fully pluggable tool for identifying and reporting on patterns in JavaScript.</li> <li>JSLint - High-standards, strict &amp; opinionated code quality tool, aiming to keep only good parts of the language.</li> <li>JavaScript Standard Style - Opinionated, no-configuration style guide, style checker, and formatter</li> <li>Pre-evaluate code at buildtime - Pre-evaluate your front end javascript code at build-time</li> <li>JS-Beautifier - Npm cli and library to format JS code.</li> <li>husky - Prevents bad git commit, git push and more.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#mvc-frameworks-and-libraries","title":"MVC Frameworks and Libraries","text":"<ul> <li>angular.js - HTML enhanced for web apps. (deprecated)</li> <li>angular - Angular is a development platform for building mobile and desktop web applications using Typescript/JavaScript and other languages.</li> <li>aurelia - A JavaScript client framework for mobile, desktop and web.</li> <li>backbone - Give your JS App some Backbone with Models, Views, Collections, and Events.</li> <li>ember.js - A JavaScript framework for creating ambitious web applications.</li> <li>meteor - An ultra-simple, database-everywhere, data-on-the-wire, pure-javascript web framework.</li> <li>ractive - Next-generation DOM manipulation.</li> <li>vue - Intuitive, fast &amp; composable MVVM for building interactive interfaces.</li> <li>svelte - Svelte is a new way to build web applications. It's a compiler that takes your declarative components and converts them into efficient JavaScript that surgically updates the DOM.</li> <li>knockout - Knockout makes it easier to create rich, responsive UIs with JavaScript.</li> <li>spine - Lightweight MVC library for building JavaScript applications.</li> <li>espresso.js - A minimal JavaScript library for crafting user interfaces.</li> <li>canjs - Can do JS, better, faster, easier.</li> <li>react - A library for building user interfaces. It's declarative, efficient, and extremely flexible. Works with a Virtual DOM.</li> <li>hyperapp - 1kb JavaScript library for building frontend applications.</li> <li>preact - Fast 3kb React alternative with the same ES6 API. Components &amp; Virtual DOM.</li> <li>nativescript - Build truly native cross-platform iOS and Android apps with JavaScript.</li> <li>react-native - A framework for building native apps with React.</li> <li>riot - React-like library, but with very small size.</li> <li>thorax - Strengthening your Backbone.</li> <li>chaplin - An architecture for JavaScript applications using the Backbone.js library.</li> <li>marionette - A composite application library for Backbone.js that aims to simplify the construction of large scale JavaScript applications.</li> <li>ripple - A tiny foundation for building reactive views.</li> <li>rivets - Lightweight and powerful data binding + templating solution.</li> <li>derby - MVC framework making it easy to write realtime, collaborative applications that run in both Node.js and browsers.<ul> <li>derby-awesome - A collection of awesome derby components</li> </ul> </li> <li>way.js - Simple, lightweight, persistent two-way databinding.</li> <li>mithril.js - Mithril is a client-side MVC framework (Light-weight, Robust, Fast).</li> <li>jsblocks - jsblocks is better MV-ish framework.</li> <li>feathers - A minimalist real-time JavaScript framework for tomorrow's apps.</li> <li>Keo - Functional stateless React components with Shadow DOM support.</li> <li>atvjs - Blazing fast Apple TV application development using pure JavaScript.</li> <li>Alpine.js - offers you the reactive and declarative nature of big frameworks like Vue or React at a much lower cost.</li> <li>inferno - \ud83d\udd25 An extremely fast, React-like JavaScript library for building modern user interfaces.</li> <li>FoalTS - Elegant and all-inclusive Node.JS framework for building web applications (TypeScript).</li> <li>Lucia - 3kb library for tiny web apps.</li> <li>Adonis - The Node.js Framework highly focused on developer ergonomics, stability and confidence.</li> <li>GrapesJS - Free and Open source Web Builder Framework. Next generation tool for building templates without coding.</li> <li>Rete.js - A modular framework for visual programming allows to create node based editor in browser.</li> <li>litegraph.js - A graph node engine and editor similar to PD or UDK Blueprints, comes with its own editor in HTML5 Canvas2D.</li> <li>Drawflow - This allow you to create data flows easily and quickly.</li> <li>Blockly - A library that adds a visual code editor to web and mobile apps by Google.</li> <li>Million - &lt;1kb compiler-focused virtual DOM. It's fast!</li> <li>Whatsup - A frontend framework for chillout-mode development \ud83e\udd64. JSX components on generators, fast mobx-like state management and exclusive cssx style system.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#node-powered-cms-frameworks","title":"Node-Powered CMS Frameworks","text":"<ul> <li>KeystoneJS - powerful CMS and web app framework.</li> <li>Reaction Commerce - reactive CMS, real-time architecture and design.</li> <li>Ghost - simple, powerful publishing platform.</li> <li>Apostrophe - CMS with content editing and essential services.</li> <li>We.js - framework for real time apps, sites or blogs.</li> <li>Hatch.js - CMS platform with social features.</li> <li>TaracotJS - fast and minimalist CMS based on Node.js.</li> <li>Nodizecms - CMS for CoffeeScript lovers.</li> <li>Cody - CMS with WSYWYG editor.</li> <li>PencilBlue - CMS and blogging platform.</li> <li>Strapi - Open source Node.js Headless CMS to easily build customisable APIs.</li> <li>Factor - The Javascript CMS</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#templating-engines","title":"Templating Engines","text":"<p>Templating engines allow you to perform string interpolation.</p> <ul> <li>mustache.js - Minimal templating with {{mustaches}} in JavaScript.</li> <li>handlebars.js - An extension to the Mustache templating language.</li> <li>nunjucks - A rich and powerful templating language for JavaScript from Mozilla.</li> <li>hogan.js - A compiler for the Mustache templating language.</li> <li>doT - The fastest + concise JavaScript template engine for nodejs and browsers.</li> <li>dustjs - Asynchronous templates for the browser and node.js.</li> <li>eco - Embedded CoffeeScript templates.</li> <li>JavaScript-Templates - &lt; 1KB lightweight, fast &amp; powerful JavaScript templating engine with zero dependencies.</li> <li>t.js - A tiny JavaScript templating framework in ~400 bytes gzipped.</li> <li>Pug - Robust, elegant, feature rich template engine for nodejs. (formerly known as Jade)</li> <li>EJS - Effective JavaScript templating.</li> <li>xtemplate - eXtensible Template Engine lib for node and the browser</li> <li>marko - A fast, lightweight, HTML-based templating engine for Node.js and the browser with async, streaming, custom tags and CommonJS modules as compiled output.</li> <li>swig - (Archived) A simple, powerful, and extendable Node.js and browser-based JavaScript template engine.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#game-engines","title":"Game Engines","text":"<ul> <li>A-Frame - Make WebVR.</li> <li>Cocos - Open Source Cross-Platform Game Development Framework.</li> <li>Impact - Impact - HTML5 Canvas &amp; JavaScript Game Engine.</li> <li>GDevelop - Free and Easy Game-Making App.</li> <li>Kaboom.js - A game programming library that helps you make games fast and fun.</li> <li>Matter.js - A 2D rigid body JavaScript physics engine.</li> <li>melonJS - Open source HTML5 game engine that empowers developers and designers to focus on content.</li> <li>Phaser - Phaser - A fast, fun and free open source HTML5 game framework.</li> <li>PixiJS - The HTML5 Creation Engine.</li> <li>PlayCanvas - PlayCanvas WebGL Game Engine.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#articles-and-posts","title":"Articles and Posts","text":"<ul> <li>The JavaScript that you should know - Article about concepts of JavaScript Functional.</li> <li>How JavaScript works - A series of articles about the building blocks of JavaScript.</li> <li>Multi-threading using web-workers - Web Workers: Adding Multi-threading to JavaScript</li> <li>this keyword in JavaScript - Breaking down the 'this' keyword in JavaScript</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#data-visualization","title":"Data Visualization","text":"<p>Data visualization tools for the web.</p> <ul> <li>d3 - A JavaScript visualization library for HTML and SVG.</li> <li>metrics-graphics - A library optimized for concise, principled data graphics and layouts.</li> <li>three.js - JavaScript 3D library.</li> <li>Chart.js - Simple HTML5 Charts using the &lt;canvas&gt; tag.</li> <li>paper.js - The Swiss Army Knife of Vector Graphics Scripting \u2013 Scriptographer ported to JavaScript and the browser, using HTML5 Canvas.</li> <li>fabric.js - JavaScript Canvas Library, SVG-to-Canvas (&amp; canvas-to-SVG) Parser.</li> <li>peity - Progressive  bar, line and pie charts. <li>raphael - JavaScript Vector Library.</li> <li>echarts - Enterprise Charts.</li> <li>visjs - Multiple Libraries for dynamic, browser-based data visualization.</li> <li>two.js - A renderer agnostic two-dimensional drawing api for the web.</li> <li>g.raphael - Charts for Rapha\u00ebl.</li> <li>sigma.js - A JavaScript library dedicated to graph drawing.</li> <li>arbor - A graph visualization library using web workers and jQuery.</li> <li>cubism - A D3 plugin for visualizing time series.</li> <li>dc.js - Multi-Dimensional charting built to work natively with crossfilter rendered with d3.js</li> <li>vega - A visualization grammar.</li> <li>processing.js - Processing.js makes your data visualizations work using web standards and without any plug-ins.</li> <li>envisionjs - Dynamic HTML5 visualization.</li> <li>rickshaw - JavaScript toolkit for creating interactive real-time graphs.</li> <li>flot - Attractive JavaScript charts for jQuery.</li> <li>morris.js - Pretty time-series line graphs.</li> <li>nvd3 - Build re-usable charts and chart components for d3.js.</li> <li>svg.js - A lightweight library for manipulating and animating SVG.</li> <li>heatmap.js - JavaScript Library for HTML5 canvas based heatmaps.</li> <li>jquery.sparkline - A plugin for the jQuery JavaScript library to generate small sparkline charts directly in the browser.</li> <li>trianglify - Low poly style background generator with d3.js.</li> <li>d3-cloud - Create word clouds in JavaScript.</li> <li>d4 - A friendly reusable charts DSL for D3.</li> <li>dimple.js - Easy charts for business analytics powered by d3.</li> <li>chartist-js - Simple responsive charts.</li> <li>epoch - A general purpose real-time charting library.</li> <li>c3 - D3-based reusable chart library.</li> <li>BabylonJS - A framework for building 3D games with HTML 5 and WebGL.</li> <li>recharts - Redefined chart library built with React and D3.</li> <li>GraphicsJS - A lightweight JavaScript graphics library with the intuitive API, based on SVG/VML technology.</li> <li>mxGraph - Diagramming library that enables interactive graph and charting applications to be quickly created that run natively in any major browser that is supported by its vendor.</li> <li>Frappe Charts - GitHub-inspired simple and modern SVG charts for the web with zero dependencies.</li> <li>Frappe Gantt - A simple, interactive, modern gantt chart library for the web.</li> <li>G2 - A highly interactive data-driven visualization grammar for statistical charts.</li> <li>G2Plot - An interactive and responsive charting library. Based on the grammar of graphics.</li> <li>Cytoscape.js - A fully featured graph theory library.</li> <li>cola.js - library for arranging your HTML5 documents and diagrams using constraint-based optimization techniques</li> <li>jointjs - Diagramming library to create static diagrams or fully interactive diagramming tools.</li> <li>vizzu - Library for animated data visualizations and data stories.</li> <p>There're also some great commercial libraries, like amchart, anychart, plotly, and lightning chart.</p>"},{"location":"programming/javascript/awesome_javaScript/#timeline","title":"Timeline","text":"<ul> <li>TimelineJS v3 - A Storytelling Timeline built in JavaScript.</li> <li>timesheet.js - JavaScript library for simple HTML5 &amp; CSS3 time sheets.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#spreadsheet","title":"Spreadsheet","text":"<ul> <li>HANDSONTABLE - Handsontable is a JavaScript/HTML5 Spreadsheet Library for Developers</li> <li>Frappe Datatable - Frappe DataTable is a simple, modern and interactive datatable library for displaying tabular data.</li> <li>Luckysheet - Luckysheet is an online spreadsheet like excel that is powerful, simple to configure, and completely open source.</li> <li>Jspreadsheet CE - Jspreadsheet is a lightweight vanilla javascript plugin to create amazing web-based interactive tables and spreadsheets compatible with other spreadsheet software.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#editors","title":"Editors","text":"<ul> <li>ace - Ace (Ajax.org Cloud9 Editor).</li> <li>CodeMirror - In-browser code editor.</li> <li>esprima - ECMAScript parsing infrastructure for multipurpose analysis.</li> <li>quill - A cross browser rich text editor with an API.</li> <li>medium-editor - Medium.com WYSIWYG editor clone.</li> <li>pen - enjoy live editing (+markdown).</li> <li>jquery-notebook - A simple, clean and elegant text editor. Inspired by the awesomeness of Medium.</li> <li>bootstrap-wysiwyg - Tiny bootstrap-compatible WYSIWYG rich text editor.</li> <li>ckeditor-releases - The best web text editor for everyone.</li> <li>editor - A markdown editor. still on development.</li> <li>EpicEditor - An embeddable JavaScript Markdown editor with split fullscreen editing, live previewing, automatic draft saving, offline support, and more.</li> <li>jsoneditor - A web-based tool to view, edit and format JSON.</li> <li>vim.js - JavaScript port of Vim with a persistent <code>~/.vimrc</code>.</li> <li>Squire - HTML5 rich text editor.</li> <li>TinyMCE - The JavaScript Rich Text editor.</li> <li>trix - A rich text editor for everyday writing. By Basecamp.</li> <li>Trumbowyg - A lightweight and amazing WYSIWYG JavaScript editor.</li> <li>Draft.js - A React framework for building text editors.</li> <li>bootstrap-wysihtml5 - Simple, beautiful wysiwyg editor</li> <li>wysihtml5 - Open source rich text editor based on HTML5 and the progressive-enhancement approach. Uses a sophisticated security concept and aims to generate fully valid HTML5 markup by preventing unmaintainable tag soups and inline styles.</li> <li>raptor-editor - Raptor, an HTML5 WYSIWYG content editor!</li> <li>popline - Popline is an HTML5 Rich-Text-Editor Toolbar.</li> <li>Summernote - Super simple WYSIWYG editor.</li> <li>Everright-formEditor - A visual drag-and-drop low-code form editor</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#documentation","title":"Documentation","text":"<ul> <li>DevDocs is an all-in-one API documentation reader with a fast, organized, and consistent interface.</li> <li>docco is a quick-and-dirty, hundred-line-long, literate-programming-style documentation generator.</li> <li>styledocco generates documentation and style guide documents from your stylesheets.</li> <li>Ronn builds manuals. It converts simple, human readable textfiles to roff for terminal display, and also to HTML for the web.</li> <li>dox is a JavaScript documentation generator written with node. Dox no longer generates an opinionated structure or style for your docs, it simply gives you a JSON representation, allowing you to use markdown and JSDoc-style tags.</li> <li>jsdox is a JSDoc3 to Markdown documentation generator.</li> <li>ESDoc is a good documentation generator for JavaScript.</li> <li>YUIDoc is a Node.js application that generates API documentation from comments in source, using a syntax similar to tools like Javadoc and Doxygen.</li> <li>coddoc is a jsdoc parsing library. Coddoc is different in that it is easily extensible by allowing users to add tag and code parsers through the use of coddoc.addTagHandler and coddoc.addCodeHandler. coddoc also parses source code to be used in APIs.</li> <li>sphinx a tool that makes it easy to create intelligent and beautiful documentation</li> <li>Beautiful docs is a documentation viewer based on markdown files.</li> <li>documentation.js - API documentation generator with support for ES2015+ and flow annotation.</li> <li>jsduck - API documentation generator made for Sencha JavaScript frameworks, but can be used for other frameworks too.</li> <li>codecrumbs is a visual tool for learning and documenting a codebase by putting breadcrumbs in source code.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#files","title":"Files","text":"<p>Libraries for working with files.</p> <ul> <li>Papa Parse - A powerful CSV library that supports parsing CSV files/strings and also exporting to CSV.</li> <li>jBinary - High-level I/O (loading, parsing, manipulating, serializing, saving) for binary files with declarative syntax for describing file types and data structures.</li> <li>diff2html - Git diff output parser and pretty HTML generator.</li> <li>jsPDF - JavaScript PDF generation.</li> <li>PDF.js - PDF Reader in JavaScript.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#functional-programming","title":"Functional Programming","text":"<p>Functional programming libraries to extend JavaScript\u2019s capabilities.</p> <ul> <li>underscore - JavaScript's utility _ belt.</li> <li>lodash - A utility library delivering consistency, customization, performance, &amp; extras.</li> <li>Sugar - A JavaScript library for working with native objects.</li> <li>lazy.js - Like Underscore, but lazier.</li> <li>ramda - A practical functional library for JavaScript programmers.</li> <li>mout - Modular JavaScript Utilities.</li> <li>preludejs - Hardcore Functional Programming for JavaScript.</li> <li>rambda - Faster and smaller alternative to Ramda.</li> <li>fxts - Lazy evaluation and concurrency.</li> <li>wild-wild-path - Object property paths with wildcards and regexps.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#reactive-programming","title":"Reactive Programming","text":"<p>Reactive programming libraries to extend JavaScript\u2019s capabilities.</p> <ul> <li>RxJS - A reactive programming library for JavaScript.</li> <li>Bacon - FRP (functional reactive programming) library for JavaScript.</li> <li>Kefir - FRP library for JavaScript inspired by Bacon.js and RxJS with focus on high performance and low memory consumption.</li> <li>Highland - Re-thinking the JavaScript utility belt, Highland manages synchronous and asynchronous code easily, using nothing more than standard JavaScript and Node-like Streams.</li> <li>Most.js - high performance FRP library.</li> <li>MobX - TFRP library for simple, scalable state management.</li> <li>Cycle.js - A functional and reactive JavaScript library for cleaner code.</li> <li>concent - Definitely the \u2764\ufe0f simplest but \u26a1\ufe0f strongest state management for react, it is predictable\u3001progressive and efficient.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#data-structure","title":"Data Structure","text":"<p>Data structure libraries to build a more sophisticated application.</p> <ul> <li>immutable-js - Immutable Data Collections including Sequence, Range, Repeat, Map, OrderedMap, Set and a sparse Vector.</li> <li>mori - A library for using ClojureScript's persistent data structures and supporting API from the comfort of vanilla JavaScript.</li> <li>buckets - A complete, fully tested and documented data structure library written in JavaScript.</li> <li>hashmap - Simple hashmap implementation that supports any kind of keys.</li> <li>ngraph.graph - Graph data structure in javascript.</li> <li>js-sdsl - Refer to the javascript standard data structure library implemented by c++ stl, which supports c++ bidirectional iterator mode.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#date","title":"Date","text":"<p>Date Libraries.</p> <ul> <li>moment - Parse, validate, manipulate, and display dates in JavaScript.</li> <li>moment-timezone - Timezone support for moment.js.</li> <li>jquery-timeago - A jQuery plugin that makes it easy to support automatically updating fuzzy timestamps (e.g. \"4 minutes ago\").</li> <li>timezone-js - Timezone-enabled JavaScript Date object. Uses Olson zoneinfo files for timezone data.</li> <li>date - Date() for humans.</li> <li>ms.js - Tiny millisecond conversion utility.</li> <li>countdown.js - Super simple countdowns.</li> <li>timeago.js - Simple library (less then 2kb) used to format date with <code>*** time ago</code> statement.</li> <li>fecha - Lightweight date formatting and parsing (~2KB). Meant to replace parsing and formatting functionality of moment.js.</li> <li>date-fns - Modern JavaScript date utility library.</li> <li>map-countdown - A browser countdown built on top of the Google Maps.</li> <li>dayjs - Day.js 2KB immutable date library alternative to Moment.js with the same modern API.</li> <li>luxon - Luxon is a library for working with dates and times in JavaScript.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#string","title":"String","text":"<p>String Libraries.</p> <ul> <li>voca - The ultimate JavaScript string library</li> <li>selecting - A library that allows you to access the text selected by the user.</li> <li>underscore.string - String manipulation extensions for Underscore.js JavaScript library.</li> <li>string.js - Extra JavaScript string methods.</li> <li>he - A robust HTML entity encoder/decoder written in JavaScript.</li> <li>multiline - Multiline strings in JavaScript.</li> <li>query-string - Parse and stringify URL query strings.</li> <li>URI.js - JavaScript URL mutation library.</li> <li>jsurl - Lightweight URL manipulation with JavaScript.</li> <li>sprintf.js - A sprintf implementation.</li> <li>url-pattern - Easier than regex string matching patterns for urls and other strings. Turn strings into data or data into strings.</li> <li>plexis - Lo-fi, powerful, community-driven string manipulation library.</li> <li>url-state-machine - Super fast spec-compliant URL parser state machine for Node.js.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#number","title":"Number","text":"<ul> <li>Numeral-js - A JavaScript library for formatting and manipulating numbers.</li> <li>chance.js - Random generator helper in JavaScript. Can generate numbers, strings etc.</li> <li>odometer - Smoothly transitions numbers with ease.</li> <li>accounting.js - A lightweight JavaScript library for number, money and currency formatting - fully localisable, zero dependencies.</li> <li>money.js - A tiny (1kb) JavaScript currency conversion library, for web &amp; nodeJS.</li> <li>Fraction.js - A rational number library for JavaScript.</li> <li>Complex.js - A complex number library for JavaScript.</li> <li>Polynomial.js - A polynomials library for JavaScript.</li> <li>Quaternion.js - A quaternion library for JavaScript</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#storage","title":"Storage","text":"<ul> <li>store.js - LocalStorage wrapper for all browsers without using cookies or flash. Uses localStorage, globalStorage, and userData behavior under the hood.</li> <li>localForage - Offline storage, improved. Wraps IndexedDB, WebSQL, or localStorage using a simple but powerful API.</li> <li>jStorage - jStorage is a simple key/value database to store data on browser side.</li> <li>cross-storage - Cross domain local storage, with permissions.</li> <li>basket.js - A script and resource loader for caching &amp; loading scripts with localStorage.</li> <li>bag.js - A caching script and resource loader, similar to basket.js, but with additional k/v interface and localStorage / websql / indexedDB support.</li> <li>basil.js - The missing JavaScript smart persistent layer.</li> <li>jquery-cookie - A simple, lightweight jQuery plugin for reading, writing and deleting cookies.</li> <li>js-cookie - A simple, lightweight JavaScript API for handling browser cookies.</li> <li>Cookies - JavaScript Client-Side Cookie Manipulation Library.</li> <li>DB.js - Promise based IndexDB Wrapper library.</li> <li>lawnchair.js - Simple client-side JSON storage.</li> <li>sql.js - SQLite compiled to JavaScript through Emscripten.</li> <li>pouchdb - Javascript db inspired by Apache CouchDB to run well within the browser.</li> <li>crumbsjs - A lightweight vanilla ES6 cookies and local storage JavaScript library.</li> <li>awesome-web-storage - Everything you need to know about client-side storage.</li> <li>datavore - A small, fast, in-browser database engine written in JavaScript.</li> <li>Hoodie - Offline First backend to work in browser without internet connectivity.</li> <li>NeDB - Embedded Persistent database for Browsers, nw.js, electron.</li> <li>Lovefield - Lovefield is a relational database for web apps, By Google.</li> <li>Dexie.js - Dexie.js is a wrapper library for indexedDB.</li> <li>proxy-web-storage - Keep the type of storage value unchanged and change array and object directly. Supports listening to the changes and setting expires.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#color","title":"Color","text":"<ul> <li>randomColor - A color generator for JavaScript.</li> <li>chroma.js - JavaScript library for all kinds of color manipulations.</li> <li>color - JavaScript color conversion and manipulation library.</li> <li>colors - Smarter defaults for colors on the web.</li> <li>PleaseJS - JavaScript Library for creating random pleasing colors and color schemes.</li> <li>TinyColor - Fast, small color manipulation and conversion for JavaScript.</li> <li>Vibrant.js - Extract prominent colors from an image.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#i18n-and-l10n","title":"I18n And L10n","text":"<p>Localization (l10n) and internationalization (i18n) JavaScript libraries.</p> <ul> <li>i18next - internationalisation (i18n) with JavaScript the easy way.</li> <li>polyglot - tiny i18n helper library.</li> <li>babelfish - i18n with human friendly API and built in plurals support.</li> <li>ttag - Modern javascript i18n localization library based on ES6 tagged templates and the good old GNU gettext.</li> <li>attranslate - A JavaScript-tool for synchronizing translation-files, including JSON/YAML/XML and other formats.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#control-flow","title":"Control Flow","text":"<ul> <li>async - Async utilities for node and the browser.</li> <li>q - A tool for making and composing asynchronous promises in JavaScript.</li> <li>step - An async control-flow library that makes stepping through logic easy.</li> <li>contra - Asynchronous flow control with a functional taste to it.</li> <li>Bluebird - fully featured promise library with focus on innovative features and performance.</li> <li>when - A solid, fast Promises/A+ and when() implementation, plus other async goodies.</li> <li>ObjectEventTarget - Provide a prototype that add support to event listeners (with same behavior of EventTarget from DOMElements available on browsers).</li> <li>sporadic - Composable concurrency abstractions (such as streams, coroutines and Go-like channels) on top of promises, for Node and browser engines.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#routing","title":"Routing","text":"<ul> <li>director - A tiny and isomorphic URL router for JavaScript.</li> <li>page.js - Micro client-side router inspired by the Express router (~1200 bytes).</li> <li>pathjs - Simple, lightweight routing for web browsers.</li> <li>crossroads - JavaScript Routes.</li> <li>davis.js - RESTful degradable JavaScript routing using pushState.</li> <li>navaid - A navigation aid (aka, router) for the browser in 850 bytes~!</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#security","title":"Security","text":"<ul> <li>DOMPurify - A DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG.</li> <li>js-xss - Sanitize untrusted HTML (to prevent XSS) with a configuration specified by a Whitelist.</li> <li>xss-filters - Secure XSS Filters by Yahoo.</li> <li>sanitize-html - sanitize-html provides a simple HTML sanitizer with a clear API.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#log","title":"Log","text":"<ul> <li>log - Console.log with style.</li> <li>Conzole - A debug panel built in JavaScript that wraps JavaScript native console object methods and functionality in a panel displayed inside the page.</li> <li>console.log-wrapper - Log to the console in any browser with clarity.</li> <li>loglevel - Minimal lightweight logging for JavaScript, adding reliable log level methods to wrap any available console.log methods.</li> <li>minilog \u2013 Lightweight client &amp; server-side logging with Stream-API backends.</li> <li>storyboard - Universal logging library + Chrome extension; it lets you see all client and server tasks triggered by a user action in a single place.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#regexp","title":"RegExp","text":"<ul> <li>RegEx101 - Online regex tester and debugger for JavaScript. Also supports Python, PHP and PCRE.</li> <li>RegExr - HTML/JS based tool for creating, testing, and learning about Regular Expressions.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#voice-command","title":"Voice Command","text":"<ul> <li>annyang - A JavaScript library for adding voice commands to your site, using speech recognition.</li> <li>voix.js - A JavaScript library to add voice commands to your sites, apps or games.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#api","title":"API","text":"<ul> <li>axios - Promise based HTTP client for the browser and node.js.</li> <li>bottleneck - A powerful rate limiter that makes throttling easy.</li> <li>oauth-signature-js - JavaScript OAuth 1.0a signature generator for node and the browser.</li> <li>amygdala - RESTful HTTP client for JavaScript powered web applications.</li> <li>jquery.rest - A jQuery plugin for easy consumption of RESTful APIs.</li> <li>Rails Ranger - An opinionated REST client for Ruby on Rails APIs.</li> <li>wretch - A tiny wrapper built around fetch with an intuitive syntax.</li> <li>Bearer.sh - Universal API client that supports OAuth / API Key / Basic / etc.</li> <li>FarFetch - Modern Fetch API wrapper for simplicity, with concise file uploading.</li> <li>Optic - Optic automatically documents and tests your APIs.</li> <li>SWR - React Hooks library for remote data fetching.</li> <li>React Query - Hooks for fetching, caching and updating asynchronous data in React.</li> <li>SWRV - Stale-while-revalidate data fetching for Vue.</li> <li>Vue Query - Hooks for fetching, caching and updating asynchronous data in Vue.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#streaming","title":"Streaming","text":"<ul> <li>Tailor - Streaming layout service for front-end microservices, inspired by Facebook's BigPipe.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#vision-detection","title":"Vision Detection","text":"<ul> <li>tracking.js - A modern approach for Computer Vision on the web.</li> <li>ocrad.js - OCR in JavaScript via Emscripten.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#machine-learning","title":"Machine Learning","text":"<ul> <li>ConvNetJS - Deep Learning in JavaScript. Train Convolutional Neural Networks (or ordinary ones) in your browser.</li> <li>DN2A - Digital Neural Networks Architecture.</li> <li>Brain.js - Neural networks in JavaScript.</li> <li>Mind.js - A flexible neural network library.</li> <li>Synaptic.js - Architecture-free neural network library for node.js and the browser.</li> <li>TensorFlow.js - A JavaScript library for training and deploying ML models in the browser and on Node.js.</li> <li>ml5.js - Friendly Machine Learning for the Web.</li> <li>Synapses - Lightweight cross-platform Neural Network library.</li> <li>m2cgen - A CLI tool to transpile trained classic ML models into a native JavaScript code with zero dependencies.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#browser-detection","title":"Browser Detection","text":"<ul> <li>bowser - a browser detector.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#operating-system","title":"Operating System","text":"<ul> <li>os.js - An open-source web desktop platform with a window manager, application APIs, GUI toolkit, filesystem abstractions and much more.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#benchmark","title":"Benchmark","text":"<ul> <li>benchmark.js - A benchmarking library. As used on jsPerf.com.</li> <li>matcha - A caffeine driven, simplistic approach to benchmarking.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#web-worker","title":"Web Worker","text":"<ul> <li>partytown - Relocate resource intensive third-party scripts off of the main thread and into a web worker.</li> <li>comlink - Comlink is a tiny library (1.1kB), that removes the mental barrier of thinking about postMessage and hides the fact that you are working with workers.</li> <li>greenlet - Move an async function into its own thread.</li> <li>workerize - Moves a module into a Web Worker, automatically reflecting exported functions as asynchronous proxies.</li> <li>worker-dom - An in-progress implementation of the DOM API intended to run within a Web Worker.</li> <li>threads.js - Offload CPU-intensive tasks to worker threads in node.js, web browsers and electron using one uniform API.</li> <li>workly - A really simple way to move a function or class to a web worker.</li> <li>stockroom - Offload your store management to a worker easily.</li> <li>workerpool - Offload tasks to a pool of workers on node.js and in the browser.</li> <li>clooney - Clooney is an actor library for the web. Use workers without thinking about workers.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#code-highlighting","title":"Code highlighting","text":"<ul> <li>Highlight.js - JavaScript syntax highlighter.</li> <li>PrismJS - Lightweight, robust, elegant syntax highlighting.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#loading-status","title":"Loading Status","text":"<p>Libraries for indicate load status.</p> <ul> <li>Mprogress.js - Create Google Material Design progress linear bars.</li> <li>NProgress - Slim progress bars for Ajax'y applications.</li> <li>Spin.js - A spinning activity indicator.</li> <li>progress.js - Create and manage progress bar for every objects on the page.</li> <li>progressbar.js - Beautiful and responsive progress bars with animated SVG paths.</li> <li>pace - Automatically add a progress bar to your site.</li> <li>topbar - Tiny &amp; beautiful site-wide progress indicator.</li> <li>nanobar - Very lightweight progress bars. No jQuery.</li> <li>PageLoadingEffects - Modern ways of revealing new content using SVG animations.</li> <li>SpinKit - A collection of loading indicators animated with CSS.</li> <li>Ladda - Buttons with built-in loading indicators.</li> <li>css-loaders - A collection of loading spinners animated with CSS</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#validation","title":"Validation","text":"<ul> <li>Parsley.js - Validate your forms, frontend, without writing a single line of JavaScript.</li> <li>jquery-validation - jQuery Validation Plugin.</li> <li>validator.js - String validation and sanitization.</li> <li>validate.js - Lightweight JavaScript form validation library inspired by CodeIgniter.</li> <li>validatr - Cross Browser HTML5 Form Validation.</li> <li>FormValidation - The best jQuery plugin to validate form fields. Formerly BootstrapValidator.</li> <li>is.js - Check types, regexps, presence, time and more.</li> <li>FieldVal - multipurpose validation library. Supports both sync and async validation.</li> <li>Funval - Data validation using functions interfaces (support TypeScript).</li> <li>vest - \ud83e\uddba Declarative form validation framework inspired by unit testing.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#keyboard-wrappers","title":"Keyboard Wrappers","text":"<ul> <li>mousetrap - Simple library for handling keyboard shortcuts in JavaScript.</li> <li>keymaster - A simple micro-library for defining and dispatching keyboard shortcuts.</li> <li>Keypress - A keyboard input capturing utility in which any key can be a modifier key.</li> <li>KeyboardJS - A JavaScript library for binding keyboard combos without the pain of key codes and key combo conflicts.</li> <li>jquery.hotkeys - jQuery Hotkeys lets you watch for keyboard events anywhere in your code supporting almost any key combination.</li> <li>jwerty - Awesome handling of keyboard events.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#tours-and-guides","title":"Tours And Guides","text":"<ul> <li>intro.js - A better way for new feature introduction and step-by-step users guide for your website and project.</li> <li>shepherd - Guide your users through a tour of your app.</li> <li>bootstrap-tour - Quick and easy product tours with Twitter Bootstrap Popovers.</li> <li>tourist - Simple, flexible tours for your app.</li> <li>hopscotch - A framework to make it easy for developers to add product tours to their pages.</li> <li>joyride - jQuery feature tour plugin.</li> <li>focusable - Set a spotlight focus on DOM element adding a overlay layer to the rest of the page.</li> <li>driver.js - Powerful yet light-weight, vanilla JavaScript engine to drive the user's focus across the page</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#notifications","title":"Notifications","text":"<ul> <li>iziToast - Elegant, responsive, flexible and lightweight notification plugin with no dependencies.</li> <li>messenger - Growl-style alerts and messages for your app.</li> <li>noty - jQuery notification plugin.</li> <li>pnotify - JavaScript notifications for Bootstrap, jQuery UI, and the Web Notifications Draft.</li> <li>toastr - Simple JavaScript toast notifications.</li> <li>humane-js - A simple, modern, browser notification system.</li> <li>smoke.js - Framework-agnostic styled alert system for JavaScript.</li> <li>notie - Simple notifications and inputs with no dependencies.</li> <li>notifire - Open-source notification infrastructure for products.</li> <li>toastify-js - Pure JavaScript library for better notification messages.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#sliders","title":"Sliders","text":"<ul> <li>Swiper - Mobile touch slider and framework with hardware accelerated transitions.</li> <li>slick - The last carousel you'll ever need.</li> <li>slidesJs - Is a responsive slideshow plug-in for JQuery(1.7.1+) with features like touch and CSS3 transitions</li> <li>FlexSlider - An awesome, fully responsive jQuery slider plugin.</li> <li>sly - JavaScript library for one-directional scrolling with item based navigation support.</li> <li>vegas - A jQuery plugin to add beautiful fullscreen backgrounds to your webpages. It even allows Slideshows.</li> <li>Sequence - CSS animation framework for creating responsive sliders, presentations, banners, and other step-based applications.</li> <li>reveal.js - A framework for easily creating beautiful presentations using HTML.</li> <li>impress.js - It's a presentation framework based on the power of CSS3 transforms and transitions in modern browsers and inspired by the idea behind prezi.com.</li> <li>bespoke.js - DIY Presentation Micro-Framework</li> <li>Strut - Strut - An Impress.js and Bespoke.js Presentation Editor</li> <li>PhotoSwipe - JavaScript image gallery for mobile and desktop, modular, framework independent.</li> <li>jcSlider - A responsive slider jQuery plugin with CSS animations.</li> <li>basic-jquery-slider - Simple to use, simple to theme, simple to customise.</li> <li>jQuery.adaptive-slider - A jQuery plugin for a slider with adaptive colored figcaption and navigation.</li> <li>slidr - add some slide effects.</li> <li>Flickity - Touch, responsive, flickable galleries.</li> <li>Glide.js - Responsive and touch-friendly jQuery slider. It's simple, lightweight and fast.</li> <li>Embla Carousel - An extensible low level carousel for the web, written in TypeScript.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#range-sliders","title":"Range Sliders","text":"<ul> <li>Ion.RangeSlider - Powerful and easily customizable range slider with many options and skin support.</li> <li>jQRangeSlider - A JavaScript slider selector that supports dates.</li> <li>noUiSlider - A lightweight, highly customizable range slider without bloat.</li> <li>rangeslider.js - HTML5 input range slider element polyfill.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#form-widgets","title":"Form Widgets","text":""},{"location":"programming/javascript/awesome_javaScript/#input","title":"Input","text":"<ul> <li>typeahead.js - A fast and fully-featured autocomplete library.</li> <li>tag-it - A jQuery UI plugin to handle multi-tag fields as well as tag suggestions/autocomplete.</li> <li>At.js - Add GitHub like mentions autocomplete to your application.</li> <li>Placeholders.js - A JavaScript polyfill for the HTML5 placeholder attribute.</li> <li>fancyInput - Makes typing in input fields fun with CSS3 effects.</li> <li>jQuery-Tags-Input - Magically convert a simple text input into a cool tag list with this jQuery plugin.</li> <li>vanilla-masker - A pure JavaScript mask input.</li> <li>Ion.CheckRadio - jQuery plugin for styling checkboxes and radio-buttons. With skin support.</li> <li>awesomplete - Ultra lightweight, usable, beautiful autocomplete with zero dependencies. - https://projects.verou.me/awesomplete/</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#calendar","title":"Calendar","text":"<ul> <li>pickadate.js - The mobile-friendly, responsive, and lightweight jQuery date &amp; time input picker.</li> <li>bootstrap-datepicker - A datepicker for @twitter bootstrap forked from Stefan Petre's (of eyecon.ro), improvements by @eternicode.</li> <li>Pikaday - A refreshing JavaScript Datepicker \u2014 lightweight, no dependencies, modular CSS.</li> <li>fullcalendar - Full-sized drag &amp; drop event calendar (jQuery plugin).</li> <li>rome - A customizable date (and time) picker. Dependency free, opt-in UI.</li> <li>Date Range Picker - creates a dropdown menu from which a user can select a range of dates.</li> <li>Duet Date Picker - open source version of Duet Design System\u2019s accessible date picker, WCAG 2.1 accessibility complaint</li> <li>tui.calendar - A JavaScript schedule calendar that is full featured. Now your service just got the customizable calendar.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#select","title":"Select","text":"<ul> <li>selectize.js - Selectize is the hybrid of a textbox and <code>&lt;select&gt;</code> box. It's jQuery based and it has autocomplete and native-feeling keyboard navigation; useful for tagging, contact lists, etc.</li> <li>select2 - a jQuery based replacement for select boxes. It supports searching, remote data sets, and infinite scrolling of results.</li> <li>chosen - A library for making long, unwieldy select boxes more friendly.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#file-uploader","title":"File Uploader","text":"<ul> <li>jQuery-File-Upload - File Upload widget with multiple file selection, drag&amp;drop support, progress bar, validation and preview images, audio and video for jQuery.</li> <li>dropzone - Dropzone is an easy to use drag'n'drop library. It supports image previews and shows nice progress bars.</li> <li>flow.js - A JavaScript library providing multiple simultaneous, stable, fault-tolerant and resumable/restartable file uploads via the HTML5 File API.</li> <li>fine-uploader - Multiple file upload plugin with progress-bar, drag-and-drop, direct-to-S3 uploading.</li> <li>FileAPI - A set of JavaScript tools for working with files. Multiupload, drag'n'drop and chunked file upload. Images: crop, resize and auto orientation by EXIF.</li> <li>plupload - A JavaScript API for dealing with file uploads it supports features like multiple file selection, file type filtering, request chunking, client side image scaling and it uses different runtimes to achieve this such as HTML 5, Silverlight and Flash.</li> <li>filepond - A JavaScript library that can upload anything you throw at it, optimizes images for faster uploads, and offers a great, accessible, silky smooth user experience.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#other","title":"Other","text":"<ul> <li>form - jQuery Form Plugin.</li> <li>Garlic.js - Automatically persist your forms' text and select field values locally, until the form is submitted.</li> <li>Countable - A JavaScript function to add live paragraph-, word- and character-counting to an HTML element.</li> <li>card - Make your credit card form better in one line of code.</li> <li>stretchy - Form element autosizing, the way it should be.</li> <li>analytics - A lightweight, extendable analytics library designed to work with any third-party analytics provider to track page views, custom events, &amp; identify users.</li> <li>dat.GUI - A lightweight gui controller for changing variables in JavaScript.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#tips","title":"Tips","text":"<ul> <li>tipsy - Facebook-style tooltips plugin for jQuery.</li> <li>opentip - An open source JavaScript tooltip based on the prototype framework.</li> <li>qTip2 - Pretty powerful tooltips.</li> <li>tooltipster - A jQuery tooltip plugin.</li> <li>simptip - A simple CSS tooltip made with Sass.</li> <li>toolbar - A tooltip style toolbar jQuery plugin</li> <li>hint.css - A tooltip library in CSS for your lovely websites.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#modals-and-popups","title":"Modals and Popups","text":"<ul> <li>Magnific-Popup - Light and responsive lightbox script with focus on performance.</li> <li>jquery-popbox - jQuery PopBox UI Element.</li> <li>jquery.avgrund.js - A jQuery plugin with new modal concept for popups.</li> <li>vex - A modern dialog library which is highly configurable and easy to style.</li> <li>bootstrap-modal - Extends the default Bootstrap Modal class. Responsive, stackable, ajax and more.</li> <li>css-modal - A modal built out of pure CSS.</li> <li>jquery-popup-overlay - jQuery plugin for responsive and accessible modal windows and tooltips.</li> <li>SweetAlert - An awesome replacement for JavaScript's alert.</li> <li>SweetAlert2 - An awesome replacement for JavaScript's alert.</li> <li>baguetteBox.js - Simple and easy to use lightbox script written in pure JavaScript.</li> <li>colorbox - A light-weight, customizable lightbox plugin for jQuery.</li> <li>fancyBox - A tool that offers a nice and elegant way to add zooming functionality for images, html content and multi-media on your webpages.</li> <li>swipebox - A touchable jQuery lightbox</li> <li>jBox - jBox is a powerful and flexible jQuery plugin, taking care of all your popup windows, tooltips, notices and more.</li> <li>lightGallery - A customizable, modular, responsive, lightbox gallery plugin for jQuery.</li> <li>keukenhof - Lightweight, no dependencies, accessibility enabled TypeScript library for creating modal windows.</li> <li>screenfull.js - the JavaScript Fullscreen API, which lets you bring the page or any element into fullscreen. Smoothens out the browser implementation differences, so you don't have to.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#scroll","title":"Scroll","text":"<ul> <li>scrollMonitor - A simple and fast API to monitor elements as you scroll.</li> <li>headroom - Give your pages some headroom. Hide your header until you need it.</li> <li>onepage-scroll - Create an Apple-like one page scroller website (iPhone 5S website) with One Page Scroll plugin.</li> <li>iscroll - iScroll is a high performance, small footprint, dependency free, multi-platform JavaScript scroller.</li> <li>skrollr - Stand-alone parallax scrolling library for mobile (Android + iOS) and desktop. No jQuery.</li> <li>parallax - Parallax Engine that reacts to the orientation of a smart device.</li> <li>stellar.js - Parallax scrolling made easy.</li> <li>plax - jQuery powered parallaxing.</li> <li>jparallax - jQuery plugin for creating interactive parallax effect.</li> <li>fullPage - A simple and easy to use plugin to create fullscreen scrolling websites (also known as single page websites).</li> <li>ScrollMenu - A new interface to replace old boring scrollbar.</li> <li>Clusterize.js - Tiny vanilla JS plugin to display large data sets easily.</li> <li>simpleParallax - Simple and tiny JavaScript library to add parallax animations on any images</li> <li>rellax - Buttery smooth, super lightweight, vanilla javascript parallax library.</li> <li>asscroll - A hybrid smooth scroll setup that combines the performance gains of virtual scroll with the reliability of native scroll.</li> <li>stroll - A collection of CSS List scroll effects bind to dom through javascript.</li> <li>locomotive-scroll - Detects the elements in viewport and smooth scrolling with parallax.</li> <li>elevator.js - Finally, a \"back to top\" button that behaves like a real elevator.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#menu","title":"Menu","text":"<ul> <li>jQuery-menu-aim - jQuery plugin to fire events when user's cursor aims at particular dropdown menu items. For making responsive mega dropdowns like Amazon's.</li> <li>jQuery contextMenu - contextMenu manager.</li> <li>Slideout - A responsive touch slideout navigation menu for mobile web apps.</li> <li>Slide and swipe - A sliding swipe menu that works with touchSwipe library.</li> <li>mmenu - The best jQuery plugin for app look-alike on- and off-canvas menus with sliding submenus for your website and webapp.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#tablegrid","title":"Table/Grid","text":"<ul> <li>jTable - A jQuery plugin to create AJAX based CRUD tables.</li> <li>DataTables - (jQuery plug-in) It is a highly flexible tool, based upon the foundations of progressive enhancement, and will add advanced interaction controls to any HTML table.</li> <li>Tabulator - (jQuery plug-in) An extremely flexible library that create tables with a range of interactive features from any JSON data source or existing HTML table.</li> <li>Bootstrap Table - An Extension to the popular Bootstrap framework for creating tables that fit the style of your site with no need for additional markup.</li> <li>floatThead - (jQuery plug-in) lock any table's header while scrolling within the body. Works on any table and requires no custom html or css.</li> <li>Masonry - A cascading grid layout library.</li> <li>Packery - A grid layout library that uses a bin-packing algorithm. Useable for draggable layouts.</li> <li>Isotope - A filterable, sortable, grid layout library. Can implement Masonry, Packery, and other layouts.</li> <li>flexboxgrid - Grid based on CSS3 flexbox.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#frameworks_1","title":"Frameworks","text":"<ul> <li>Semantic UI - UI Kit with lots of themes and elements.</li> <li>w2ui - A set of jQuery plugins for front-end development of data-driven web applications.</li> <li>fluidity - The worlds smallest fully-responsive css framework.</li> <li>Ink - An HTML5/CSS3 framework used at SAPO for fast and efficient website design and prototyping.</li> <li>DataFormsJS - A minimal JavaScript Framework and standalone components for rapid development of sites and SPA's.</li> <li>EHTML - HTML Framework that allows you not to write JavaScript code.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#boilerplates","title":"Boilerplates","text":"<ul> <li>html5-boilerplate - A professional front-end template for building fast, robust, and adaptable web apps or sites.</li> <li>mobile-boilerplate - A front-end template that helps you build fast, modern mobile web apps.</li> <li>webplate - An awesome front-end framework that lets you stay focused on building your site or app while remaining really easy to use.</li> <li>Cerberus - A few simple, but solid patterns for responsive HTML emails. Even in Outlook.</li> <li>full-page-intro-and-navigation - An intro page with a full width background image, a bold animated menu and an iOS-like blurred effect behind the navigation.</li> <li>Fluid-Squares - A fluid grid of square units.</li> <li>Mobile-First-RWD - An example of a mobile-first responsive web design.</li> <li>this-is-responsive - This Is Responsive.</li> <li>npm run-scripts Task automation with NPM run-scripts.</li> <li>Wasp Wasp is a declarative domain-specific language for developing, building, and deploying modern Javascript full-stack web apps with less code.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#images","title":"Images","text":"<ul> <li>Drift - Easily add \"zoom on hover\" functionality to your site's images. Lightweight, no-dependency JavaScript.</li> <li>Magnificent.js - Zoom responsively, images &amp; more, w/ jQuery.</li> <li>Panolens.js - Panolens.js is an event-driven and WebGL based panorama viewer. Lightweight and flexible</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#gesture","title":"Gesture","text":"<ul> <li>hammer.js - A JavaScript library for multi-touch gestures.</li> <li>touchemulator - Emulate touch input on your desktop.</li> <li>Dragula - Drag and drop so simple it hurts.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#maps","title":"Maps","text":"<ul> <li>Leaflet - JavaScript library for mobile-friendly interactive maps.</li> <li>Cesium - Open Source WebGL virtual globe and map engine.</li> <li>gmaps - The easiest way to use Google Maps.</li> <li>polymaps - A free JavaScript library for making dynamic, interactive maps in modern web browsers.</li> <li>kartograph.js - Open source JavaScript renderer for Kartograph SVG maps.</li> <li>mapbox.js - Mapbox JavaScript API, a Leaflet Plugin.</li> <li>jqvmap - jQuery Vector Map Library.</li> <li>OpenLayers3 - A high-performance, feature-packed library for all your mapping needs.</li> <li>H3js - Hexagonal hierarchical geospatial indexing system ported to javascript by Uber for geospatial visualization.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#videoaudio","title":"Video/Audio","text":"<ul> <li>prettyembed.js - Prettier embeds for your YouTubes - with nice options like high-res preview images, advanced customization of embed options, and optional FitVids support.</li> <li>Play-em JS - Play'em is a JavaScript component that manages a music/video track queue and plays a sequence of songs by embedding several players in a HTML DIV including Youtube, Soundcloud and Vimeo.</li> <li>polyplayer - Rule YouTube, Soundcloud and Vimeo player with one API.</li> <li>flowplayer - The HTML5 video player for the web  https://flowplayer.com/</li> <li>mediaelement - HTML5  or  player with Flash and Silverlight shims that mimics the HTML5 MediaElement API, enabling a consistent UI in all browsers. http://www.mediaelementjs.com/ <li>SoundJS - A library to make working with audio on the web easier. It provides a consistent API for playing audio in different browsers.</li> <li>video.js - Video.js - open source HTML5 &amp; Flash video player.</li> <li>FitVids.js - A lightweight, easy-to-use jQuery plugin for fluid width video embeds.</li> <li>Ion.Sound - Simple sounds on any web page.</li> <li>photobooth-js - A widget that allows users to take their avatar pictures on your site.</li> <li>clappr - An extensible media player for the web http://clappr.io</li> <li>exifr - The fastest and most versatile EXIF reading library. https://mutiny.cz/exifr/</li> <li>ts-audio - an agnostic and easy-to-use library to work with the <code>AudioContext</code> API.</li> <li>AmplitudeJS - Open Source HTML5 Web Audio Library. Design your web audio player, the way you want. No dependencies required.</li> <li>ractive-player - A library for making interactive videos in React.js.</li> <li>ffmpeg.js - FFmpeg optimized for in-browser use: minimal size for faster loading, asm.js, performance tunings, etc.</li> <li>flv.js - An HTML5 Flash Video (FLV) Player written in pure JavaScript without Flash.</li> <li>hls.js -  A JavaScript library that implements an HTTP Live Streaming client. It relies on HTML5 video and MediaSource Extensions for playback.</li>"},{"location":"programming/javascript/awesome_javaScript/#typography","title":"Typography","text":"<ul> <li>FlowType.JS - Web typography at its finest: font-size and line-height based on element width.</li> <li>BigText - jQuery plugin, calculates the font-size and word-spacing needed to match a line of text to a specific width.</li> <li>circletype - A jQuery plugin that lets you curve type on the web.</li> <li>slabText - A jQuery plugin for producing big, bold &amp; responsive headlines.</li> <li>simple-text-rotator - Add a super simple rotating text to your website with little to no markup.</li> <li>novacancy.js - Text Neon Golden effect jQuery plug-in.</li> <li>jquery-responsive-text - Make your text sizing responsive!</li> <li>FitText.js - A jQuery plugin for inflating web type.</li> <li>Lettering.js - A lightweight, easy to use JavaScript <code>&lt;span&gt;</code> injector for radical Web Typography.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#animations","title":"Animations","text":"<ul> <li>velocity - Accelerated JavaScript animation.</li> <li>jquery.transit - Super-smooth CSS3 transformations and transitions for jQuery.</li> <li>bounce.js - Create tasty CSS3 powered animations in no time.</li> <li>GreenSock-JS - High-performance HTML5 animations that work in all major browsers.</li> <li>TransitionEnd - TransitionEnd is an agnostic and cross-browser library to work with transitioned event.</li> <li>Dynamic.js - JavaScript library to create physics-based CSS animations.</li> <li>the-cube - The Cube is an experiment with CSS3 transitions.</li> <li>Effeckt.css - A Performant Transitions and Animations Library.</li> <li>animate.css - A cross-browser library of CSS animations. As easy to use as an easy thing.</li> <li>textillate - A simple plugin for CSS3 text animations.</li> <li>move.js - CSS3 backed JavaScript animation framework.</li> <li>animatable - One property, two values, endless possibilities.</li> <li>shuffle-images - The Simplest Way to shuffle through images in a Creative Way.</li> <li>smoothState.js - Unobtrusive page transitions with jQuery.</li> <li>Anime.js - A JavaScript animation engine.</li> <li>Mo.js - Motion graphics toolbelt for the web.</li> <li>particles.js - A lightweight JavaScript library for creating particles.</li> <li>tsParticles - A new and improved version of particles.js with bug fixes and many new features.</li> <li>particles-bg - A lightweight React particles animation background component.</li> <li>barbajs - It helps you create fluid and smooth transitions between your website's pages.</li> <li>typicaljs - Animated typing in ~400 bytes \ud83d\udc21 of JavaScript</li> <li>AutoAnimate - Add motion to your apps with a single line of code.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#image-processing","title":"Image Processing","text":"<ul> <li>lena.js - A Library for image processing with filters and util functions.</li> <li>pica - High quality image resize (with fast Lanczos filter, implemented in pure JS).</li> <li>cropper - A simple jQuery image cropping plugin.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#es6","title":"ES6","text":"<ul> <li>es6features - Overview of ECMAScript 6 features.</li> <li>es6-features - ECMAScript 6: Feature Overview &amp; Comparison.</li> <li>es6-cheatsheet - ES2015 [ES6] cheatsheet containing tips, tricks, best practices and code snippets.</li> <li>ECMAScript 6 compatibility table - Compatibility tables for all ECMAScript 6 features on a variety of environments.</li> <li>Babel (Formerly 6to5) - Turn ES6+ code into vanilla ES5 with no runtime.</li> <li>Traceur compiler - ES6 features &gt; ES5. Includes classes, generators, promises, destructuring patterns, default parameters &amp; more.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#generators","title":"Generators","text":"<ul> <li>Gatsby.js - React-based static site generator.</li> <li>Gridsome - Vue-powered static site generator.</li> <li>Docusaurus - React-based static site generator by Facebook, ideal for content-centric websites.</li> <li>Next.js - React powered static site generator, and they say \"All the tools you need to make the Web. Faster.\".</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#sdk","title":"SDK","text":"<ul> <li>javascript-sdk-design - JavaScript SDK design guide extracted from work and personal experience.</li> <li>Spotify SDK - Entity oriented SDK to work with the Spotify Web API.</li> <li>Square Node.js SDK - JavaScript client library for payments and other Square APIs.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#full-text-search","title":"Full Text Search","text":"<ul> <li>lunr - Library for use in the browser and It indexes JSON documents and provides a simple search interface for retrieving documents that best match text queries.</li> <li>flexsearch - It is a Next-Generation full text search library for Browser and Node.js.</li> <li>Elasticlunr - This library is based on lunr.js, but more flexible and customized.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#misc","title":"Misc","text":"<ul> <li>echo - Lazy-loading images with data-* attributes.</li> <li>picturefill - A responsive image polyfill for &lt;picture&gt;, srcset, sizes.</li> <li>platform.js - A platform detection library that works on nearly all JavaScript platforms.</li> <li>json3 - A modern JSON implementation compatible with nearly all JavaScript platforms.</li> <li>Logical Or Not - A game about JavaScript specificities.</li> <li>BitSet.js - A JavaScript Bit-Vector implementation.</li> <li>spoiler-alert - SPOILER ALERT! A happy little jquery plugin to hide spoilers on your site.</li> <li>jquery.vibrate.js - Vibration API Wrappers</li> <li>list.js - Adds search, sort, filters and flexibility to tables, lists and various HTML elements. Built to be invisible and work on existing HTML. https://listjs.com</li> <li>mixitup - MixItUp - A Filter &amp; Sort Plugin.</li> <li>grid - Drag and drop library for two-dimensional, resizable and responsive lists.</li> <li>jquery-match-height - a responsive equal heights plugin for jQuery.</li> <li>SurveyJS - SurveyJS is a JavaScript Survey and Form Library. https://surveyjs.io/</li> <li>Array Explorer and Object Explorer - Resources to help figure out what native JavaScript method would be best to use at any given time.</li> <li>Clipboard.js - \"Copy to clipboard\" without Flash or use of Frameworks.</li> <li>ky - Tiny and elegant HTTP client based on the browser Fetch API.</li> <li>Fcal -  Math expression evaluator.</li> <li>emoji-button - Vanilla JavaScript emoji picker component.</li> <li>iooxa - Components for interactive scientific writing, reactive documents and explorable explanations.</li> <li>Idyll - Create explorable explanations and interactive storytelling essays. Can be embedded in HTML.</li> <li>javascript-algorithms - Algorithms and data structures implemented in JavaScript with explanations and links to further readings.</li> <li>FingerprintJS - Makes a visitor identifier from a browser fingerprint that stays the same in incognito mode and when browser data is purged.</li> <li>Peg.js - A simple parser generator for JavaScript that produces fast parsers with excellent error reporting. Usable from your browser, from the command line, or via JavaScript API.</li> <li>lune - Library to calculate the phases of the moon accurately.</li> <li>jsemu - A list of emulators written in the JavaScript programming language.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#worth-reading","title":"Worth Reading","text":"<ul> <li>You Don't Know JS - Possibly the best book written on modern JavaScript, completely readable online for free, or can be bought to support the author.</li> <li>braziljs/js-the-right-way - An easy-to-read, quick reference for JS best practices, accepted coding standards, and links around the Web.</li> <li>JSbooks - Directory of free JavaScript ebooks.</li> <li>Superhero.js - A collection of resources about creating, testing and maintaining a large JavaScript code base.</li> <li>SJSJ - Simplified JavaScript Jargon is a community-driven attempt at explaining the loads of buzzwords making the current JavaScript ecosystem in a few simple words.</li> <li>How to Write an Open Source JavaScript Library - A comprehensive guide through a set of steps to publish a JavaScript open source library.</li> <li>JavaScript Tutorials - Learn Javascript online from a diverse range of user ranked online tutorials.</li> <li>Functional-Light JavaScript - Pragmatic, balanced FP in JavaScript.</li> <li>Clean Code JavaScript - Clean Code concepts adapted for JavaScript.</li> </ul>"},{"location":"programming/javascript/awesome_javaScript/#other-awesome-lists","title":"Other Awesome Lists","text":"<ul> <li>sotayamashita/awesome-css</li> <li>emijrp/awesome-awesome</li> <li>bayandin/awesome-awesomeness</li> <li>sindresorhus/awesome</li> <li>jnv/list</li> <li>gianarb/angularjs</li> <li>peterkokot/awesome-dojo</li> <li>addyosmani/es6-tools</li> <li>ericdouglas/ES6-Learning</li> <li>obetomuniz/awesome-webcomponents</li> <li>willianjusten/awesome-svg</li> <li>davidsonfellipe/awesome-wpo</li> <li>instanceofpro/awesome-backbone</li> <li>enaqx/awesome-react</li> <li>bolshchikov/js-must-watch</li> <li>peterkokot/awesome-jquery</li> <li>davidyezsetz/you-might-not-need-jquery-plugins</li> <li>MaximAbramchuck/awesome-interviews</li> <li>denolib/awesome-deno</li> <li>apvarun/awesome-bun</li> </ul>"},{"location":"programming/javascript/clean_code_javascript/","title":"clean-code-javascript","text":""},{"location":"programming/javascript/clean_code_javascript/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Variables</li> <li>Functions</li> <li>Objects and Data Structures</li> <li>Classes</li> <li>SOLID</li> <li>Testing</li> <li>Concurrency</li> <li>Error Handling</li> <li>Formatting</li> <li>Comments</li> <li>Translation</li> </ol>"},{"location":"programming/javascript/clean_code_javascript/#introduction","title":"Introduction","text":"<p>Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.</p> <p>Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of Clean Code.</p> <p>Our craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to assess the quality of the JavaScript code that you and your team produce.</p> <p>One more thing: knowing these won't immediately make you a better software developer, and working with them for many years doesn't mean you won't make mistakes. Every piece of code starts as a first draft, like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. Don't beat yourself up for first drafts that need improvement. Beat up the code instead!</p>"},{"location":"programming/javascript/clean_code_javascript/#variables","title":"Variables","text":""},{"location":"programming/javascript/clean_code_javascript/#use-meaningful-and-pronounceable-variable-names","title":"Use meaningful and pronounceable variable names","text":"<p>Bad:</p> <pre><code>const yyyymmdstr = moment().format(\"YYYY/MM/DD\");\n</code></pre> <p>Good:</p> <pre><code>const currentDate = moment().format(\"YYYY/MM/DD\");\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#use-the-same-vocabulary-for-the-same-type-of-variable","title":"Use the same vocabulary for the same type of variable","text":"<p>Bad:</p> <pre><code>getUserInfo();\ngetClientData();\ngetCustomerRecord();\n</code></pre> <p>Good:</p> <pre><code>getUser();\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#use-searchable-names","title":"Use searchable names","text":"<p>We will read more code than we will ever write. It's important that the code we do write is readable and searchable. By not naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable. Tools like buddy.js and ESLint can help identify unnamed constants.</p> <p>Bad:</p> <pre><code>// What the heck is 86400000 for?\nsetTimeout(blastOff, 86400000);\n</code></pre> <p>Good:</p> <pre><code>// Declare them as capitalized named constants.\nconst MILLISECONDS_PER_DAY = 60 * 60 * 24 * 1000; //86400000;\n\nsetTimeout(blastOff, MILLISECONDS_PER_DAY);\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#use-explanatory-variables","title":"Use explanatory variables","text":"<p>Bad:</p> <pre><code>const address = \"One Infinite Loop, Cupertino 95014\";\nconst cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;\nsaveCityZipCode(\n  address.match(cityZipCodeRegex)[1],\n  address.match(cityZipCodeRegex)[2]\n);\n</code></pre> <p>Good:</p> <pre><code>const address = \"One Infinite Loop, Cupertino 95014\";\nconst cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;\nconst [_, city, zipCode] = address.match(cityZipCodeRegex) || [];\nsaveCityZipCode(city, zipCode);\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#avoid-mental-mapping","title":"Avoid Mental Mapping","text":"<p>Explicit is better than implicit.</p> <p>Bad:</p> <pre><code>const locations = [\"Austin\", \"New York\", \"San Francisco\"];\nlocations.forEach(l =&gt; {\n  doStuff();\n  doSomeOtherStuff();\n  // ...\n  // ...\n  // ...\n  // Wait, what is `l` for again?\n  dispatch(l);\n});\n</code></pre> <p>Good:</p> <pre><code>const locations = [\"Austin\", \"New York\", \"San Francisco\"];\nlocations.forEach(location =&gt; {\n  doStuff();\n  doSomeOtherStuff();\n  // ...\n  // ...\n  // ...\n  dispatch(location);\n});\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#dont-add-unneeded-context","title":"Don't add unneeded context","text":"<p>If your class/object name tells you something, don't repeat that in your variable name.</p> <p>Bad:</p> <pre><code>const Car = {\n  carMake: \"Honda\",\n  carModel: \"Accord\",\n  carColor: \"Blue\"\n};\n\nfunction paintCar(car, color) {\n  car.carColor = color;\n}\n</code></pre> <p>Good:</p> <pre><code>const Car = {\n  make: \"Honda\",\n  model: \"Accord\",\n  color: \"Blue\"\n};\n\nfunction paintCar(car, color) {\n  car.color = color;\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#use-default-parameters-instead-of-short-circuiting-or-conditionals","title":"Use default parameters instead of short circuiting or conditionals","text":"<p>Default parameters are often cleaner than short circuiting. Be aware that if you use them, your function will only provide default values for <code>undefined</code> arguments. Other \"falsy\" values such as <code>''</code>, <code>\"\"</code>, <code>false</code>, <code>null</code>, <code>0</code>, and <code>NaN</code>, will not be replaced by a default value.</p> <p>Bad:</p> <pre><code>function createMicrobrewery(name) {\n  const breweryName = name || \"Hipster Brew Co.\";\n  // ...\n}\n</code></pre> <p>Good:</p> <pre><code>function createMicrobrewery(name = \"Hipster Brew Co.\") {\n  // ...\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#functions","title":"Functions","text":""},{"location":"programming/javascript/clean_code_javascript/#function-arguments-2-or-fewer-ideally","title":"Function arguments (2 or fewer ideally)","text":"<p>Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.</p> <p>One or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it's not, most of the time a higher-level object will suffice as an argument.</p> <p>Since JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.</p> <p>To make it obvious what properties the function expects, you can use the ES2015/ES6 destructuring syntax. This has a few advantages:</p> <ol> <li>When someone looks at the function signature, it's immediately clear what    properties are being used.</li> <li>It can be used to simulate named parameters.</li> <li>Destructuring also clones the specified primitive values of the argument    object passed into the function. This can help prevent side effects. Note:    objects and arrays that are destructured from the argument object are NOT    cloned.</li> <li>Linters can warn you about unused properties, which would be impossible    without destructuring.</li> </ol> <p>Bad:</p> <pre><code>function createMenu(title, body, buttonText, cancellable) {\n  // ...\n}\n\ncreateMenu(\"Foo\", \"Bar\", \"Baz\", true);\n\n</code></pre> <p>Good:</p> <pre><code>function createMenu({ title, body, buttonText, cancellable }) {\n  // ...\n}\n\ncreateMenu({\n  title: \"Foo\",\n  body: \"Bar\",\n  buttonText: \"Baz\",\n  cancellable: true\n});\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#functions-should-do-one-thing","title":"Functions should do one thing","text":"<p>This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you'll be ahead of many developers.</p> <p>Bad:</p> <pre><code>function emailClients(clients) {\n  clients.forEach(client =&gt; {\n    const clientRecord = database.lookup(client);\n    if (clientRecord.isActive()) {\n      email(client);\n    }\n  });\n}\n</code></pre> <p>Good:</p> <pre><code>function emailActiveClients(clients) {\n  clients.filter(isActiveClient).forEach(email);\n}\n\nfunction isActiveClient(client) {\n  const clientRecord = database.lookup(client);\n  return clientRecord.isActive();\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#function-names-should-say-what-they-do","title":"Function names should say what they do","text":"<p>Bad:</p> <pre><code>function addToDate(date, month) {\n  // ...\n}\n\nconst date = new Date();\n\n// It's hard to tell from the function name what is added\naddToDate(date, 1);\n</code></pre> <p>Good:</p> <pre><code>function addMonthToDate(month, date) {\n  // ...\n}\n\nconst date = new Date();\naddMonthToDate(1, date);\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#functions-should-only-be-one-level-of-abstraction","title":"Functions should only be one level of abstraction","text":"<p>When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.</p> <p>Bad:</p> <pre><code>function parseBetterJSAlternative(code) {\n  const REGEXES = [\n    // ...\n  ];\n\n  const statements = code.split(\" \");\n  const tokens = [];\n  REGEXES.forEach(REGEX =&gt; {\n    statements.forEach(statement =&gt; {\n      // ...\n    });\n  });\n\n  const ast = [];\n  tokens.forEach(token =&gt; {\n    // lex...\n  });\n\n  ast.forEach(node =&gt; {\n    // parse...\n  });\n}\n</code></pre> <p>Good:</p> <pre><code>function parseBetterJSAlternative(code) {\n  const tokens = tokenize(code);\n  const syntaxTree = parse(tokens);\n  syntaxTree.forEach(node =&gt; {\n    // parse...\n  });\n}\n\nfunction tokenize(code) {\n  const REGEXES = [\n    // ...\n  ];\n\n  const statements = code.split(\" \");\n  const tokens = [];\n  REGEXES.forEach(REGEX =&gt; {\n    statements.forEach(statement =&gt; {\n      tokens.push(/* ... */);\n    });\n  });\n\n  return tokens;\n}\n\nfunction parse(tokens) {\n  const syntaxTree = [];\n  tokens.forEach(token =&gt; {\n    syntaxTree.push(/* ... */);\n  });\n\n  return syntaxTree;\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#remove-duplicate-code","title":"Remove duplicate code","text":"<p>Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there's more than one place to alter something if you need to change some logic.</p> <p>Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there's only one place to update!</p> <p>Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.</p> <p>Getting the abstraction right is critical, that's why you should follow the SOLID principles laid out in the Classes section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don't repeat yourself, otherwise you'll find yourself updating multiple places anytime you want to change one thing.</p> <p>Bad:</p> <pre><code>function showDeveloperList(developers) {\n  developers.forEach(developer =&gt; {\n    const expectedSalary = developer.calculateExpectedSalary();\n    const experience = developer.getExperience();\n    const githubLink = developer.getGithubLink();\n    const data = {\n      expectedSalary,\n      experience,\n      githubLink\n    };\n\n    render(data);\n  });\n}\n\nfunction showManagerList(managers) {\n  managers.forEach(manager =&gt; {\n    const expectedSalary = manager.calculateExpectedSalary();\n    const experience = manager.getExperience();\n    const portfolio = manager.getMBAProjects();\n    const data = {\n      expectedSalary,\n      experience,\n      portfolio\n    };\n\n    render(data);\n  });\n}\n</code></pre> <p>Good:</p> <pre><code>function showEmployeeList(employees) {\n  employees.forEach(employee =&gt; {\n    const expectedSalary = employee.calculateExpectedSalary();\n    const experience = employee.getExperience();\n\n    const data = {\n      expectedSalary,\n      experience\n    };\n\n    switch (employee.type) {\n      case \"manager\":\n        data.portfolio = employee.getMBAProjects();\n        break;\n      case \"developer\":\n        data.githubLink = employee.getGithubLink();\n        break;\n    }\n\n    render(data);\n  });\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#set-default-objects-with-objectassign","title":"Set default objects with Object.assign","text":"<p>Bad:</p> <pre><code>const menuConfig = {\n  title: null,\n  body: \"Bar\",\n  buttonText: null,\n  cancellable: true\n};\n\nfunction createMenu(config) {\n  config.title = config.title || \"Foo\";\n  config.body = config.body || \"Bar\";\n  config.buttonText = config.buttonText || \"Baz\";\n  config.cancellable =\n    config.cancellable !== undefined ? config.cancellable : true;\n}\n\ncreateMenu(menuConfig);\n</code></pre> <p>Good:</p> <pre><code>const menuConfig = {\n  title: \"Order\",\n  // User did not include 'body' key\n  buttonText: \"Send\",\n  cancellable: true\n};\n\nfunction createMenu(config) {\n  let finalConfig = Object.assign(\n    {\n      title: \"Foo\",\n      body: \"Bar\",\n      buttonText: \"Baz\",\n      cancellable: true\n    },\n    config\n  );\n  return finalConfig\n  // config now equals: {title: \"Order\", body: \"Bar\", buttonText: \"Send\", cancellable: true}\n  // ...\n}\n\ncreateMenu(menuConfig);\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#dont-use-flags-as-function-parameters","title":"Don't use flags as function parameters","text":"<p>Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.</p> <p>Bad:</p> <pre><code>function createFile(name, temp) {\n  if (temp) {\n    fs.create(`./temp/${name}`);\n  } else {\n    fs.create(name);\n  }\n}\n</code></pre> <p>Good:</p> <pre><code>function createFile(name) {\n  fs.create(name);\n}\n\nfunction createTempFile(name) {\n  createFile(`./temp/${name}`);\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#avoid-side-effects-part-1","title":"Avoid Side Effects (part 1)","text":"<p>A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.</p> <p>Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don't have several functions and classes that write to a particular file. Have one service that does it. One and only one.</p> <p>The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.</p> <p>Bad:</p> <pre><code>// Global variable referenced by following function.\n// If we had another function that used this name, now it'd be an array and it could break it.\nlet name = \"Ryan McDermott\";\n\nfunction splitIntoFirstAndLastName() {\n  name = name.split(\" \");\n}\n\nsplitIntoFirstAndLastName();\n\nconsole.log(name); // ['Ryan', 'McDermott'];\n</code></pre> <p>Good:</p> <pre><code>function splitIntoFirstAndLastName(name) {\n  return name.split(\" \");\n}\n\nconst name = \"Ryan McDermott\";\nconst newName = splitIntoFirstAndLastName(name);\n\nconsole.log(name); // 'Ryan McDermott';\nconsole.log(newName); // ['Ryan', 'McDermott'];\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#avoid-side-effects-part-2","title":"Avoid Side Effects (part 2)","text":"<p>In JavaScript, some values are unchangeable (immutable) and some are changeable  (mutable). Objects and arrays are two kinds of mutable values so it's important  to handle them carefully when they're passed as parameters to a function. A  JavaScript function can change an object's properties or alter the contents of  an array which could easily cause bugs elsewhere.</p> <p>Suppose there's a function that accepts an array parameter representing a  shopping cart. If the function makes a change in that shopping cart array -  by adding an item to purchase, for example - then any other function that  uses that same <code>cart</code> array will be affected by this addition. That may be  great, however it could also be bad. Let's imagine a bad situation:</p> <p>The user clicks the \"Purchase\" button which calls a <code>purchase</code> function that spawns a network request and sends the <code>cart</code> array to the server. Because of a bad network connection, the <code>purchase</code> function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks an \"Add to Cart\" button on an item they don't actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the <code>cart</code> array was modified.</p> <p>A great solution would be for the <code>addItemToCart</code> function to always clone the  <code>cart</code>, edit it, and return the clone. This would ensure that functions that are still using the old shopping cart wouldn't be affected by the changes.</p> <p>Two caveats to mention to this approach:</p> <ol> <li> <p>There might be cases where you actually want to modify the input object,    but when you adopt this programming practice you will find that those cases    are pretty rare. Most things can be refactored to have no side effects!</p> </li> <li> <p>Cloning big objects can be very expensive in terms of performance. Luckily,    this isn't a big issue in practice because there are    great libraries that allow    this kind of programming approach to be fast and not as memory intensive as    it would be for you to manually clone objects and arrays.</p> </li> </ol> <p>Bad:</p> <pre><code>const addItemToCart = (cart, item) =&gt; {\n  cart.push({ item, date: Date.now() });\n};\n</code></pre> <p>Good:</p> <pre><code>const addItemToCart = (cart, item) =&gt; {\n  return [...cart, { item, date: Date.now() }];\n};\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#dont-write-to-global-functions","title":"Don't write to global functions","text":"<p>Polluting globals is a bad practice in JavaScript because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let's think about an example: what if you wanted to extend JavaScript's native Array method to have a <code>diff</code> method that could show the difference between two arrays? You could write your new function to the <code>Array.prototype</code>, but it could clash with another library that tried to do the same thing. What if that other library was just using <code>diff</code> to find the difference between the first and last elements of an array? This is why it would be much better to just use ES2015/ES6 classes and simply extend the <code>Array</code> global.</p> <p>Bad:</p> <pre><code>Array.prototype.diff = function diff(comparisonArray) {\n  const hash = new Set(comparisonArray);\n  return this.filter(elem =&gt; !hash.has(elem));\n};\n</code></pre> <p>Good:</p> <pre><code>class SuperArray extends Array {\n  diff(comparisonArray) {\n    const hash = new Set(comparisonArray);\n    return this.filter(elem =&gt; !hash.has(elem));\n  }\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#favor-functional-programming-over-imperative-programming","title":"Favor functional programming over imperative programming","text":"<p>JavaScript isn't a functional language in the way that Haskell is, but it has a functional flavor to it. Functional languages can be cleaner and easier to test. Favor this style of programming when you can.</p> <p>Bad:</p> <pre><code>const programmerOutput = [\n  {\n    name: \"Uncle Bobby\",\n    linesOfCode: 500\n  },\n  {\n    name: \"Suzie Q\",\n    linesOfCode: 1500\n  },\n  {\n    name: \"Jimmy Gosling\",\n    linesOfCode: 150\n  },\n  {\n    name: \"Gracie Hopper\",\n    linesOfCode: 1000\n  }\n];\n\nlet totalOutput = 0;\n\nfor (let i = 0; i &lt; programmerOutput.length; i++) {\n  totalOutput += programmerOutput[i].linesOfCode;\n}\n</code></pre> <p>Good:</p> <pre><code>const programmerOutput = [\n  {\n    name: \"Uncle Bobby\",\n    linesOfCode: 500\n  },\n  {\n    name: \"Suzie Q\",\n    linesOfCode: 1500\n  },\n  {\n    name: \"Jimmy Gosling\",\n    linesOfCode: 150\n  },\n  {\n    name: \"Gracie Hopper\",\n    linesOfCode: 1000\n  }\n];\n\nconst totalOutput = programmerOutput.reduce(\n  (totalLines, output) =&gt; totalLines + output.linesOfCode,\n  0\n);\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#encapsulate-conditionals","title":"Encapsulate conditionals","text":"<p>Bad:</p> <pre><code>if (fsm.state === \"fetching\" &amp;&amp; isEmpty(listNode)) {\n  // ...\n}\n</code></pre> <p>Good:</p> <pre><code>function shouldShowSpinner(fsm, listNode) {\n  return fsm.state === \"fetching\" &amp;&amp; isEmpty(listNode);\n}\n\nif (shouldShowSpinner(fsmInstance, listNodeInstance)) {\n  // ...\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#avoid-negative-conditionals","title":"Avoid negative conditionals","text":"<p>Bad:</p> <pre><code>function isDOMNodeNotPresent(node) {\n  // ...\n}\n\nif (!isDOMNodeNotPresent(node)) {\n  // ...\n}\n</code></pre> <p>Good:</p> <pre><code>function isDOMNodePresent(node) {\n  // ...\n}\n\nif (isDOMNodePresent(node)) {\n  // ...\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#avoid-conditionals","title":"Avoid conditionals","text":"<p>This seems like an impossible task. Upon first hearing this, most people say, \"how am I supposed to do anything without an <code>if</code> statement?\" The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, \"well that's great but why would I want to do that?\" The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have <code>if</code> statements, you are telling your user that your function does more than one thing. Remember, just do one thing.</p> <p>Bad:</p> <pre><code>class Airplane {\n  // ...\n  getCruisingAltitude() {\n    switch (this.type) {\n      case \"777\":\n        return this.getMaxAltitude() - this.getPassengerCount();\n      case \"Air Force One\":\n        return this.getMaxAltitude();\n      case \"Cessna\":\n        return this.getMaxAltitude() - this.getFuelExpenditure();\n    }\n  }\n}\n</code></pre> <p>Good:</p> <pre><code>class Airplane {\n  // ...\n}\n\nclass Boeing777 extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getPassengerCount();\n  }\n}\n\nclass AirForceOne extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude();\n  }\n}\n\nclass Cessna extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getFuelExpenditure();\n  }\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#avoid-type-checking-part-1","title":"Avoid type-checking (part 1)","text":"<p>JavaScript is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.</p> <p>Bad:</p> <pre><code>function travelToTexas(vehicle) {\n  if (vehicle instanceof Bicycle) {\n    vehicle.pedal(this.currentLocation, new Location(\"texas\"));\n  } else if (vehicle instanceof Car) {\n    vehicle.drive(this.currentLocation, new Location(\"texas\"));\n  }\n}\n</code></pre> <p>Good:</p> <pre><code>function travelToTexas(vehicle) {\n  vehicle.move(this.currentLocation, new Location(\"texas\"));\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#avoid-type-checking-part-2","title":"Avoid type-checking (part 2)","text":"<p>If you are working with basic primitive values like strings and integers, and you can't use polymorphism but you still feel the need to type-check, you should consider using TypeScript. It is an excellent alternative to normal JavaScript, as it provides you with static typing on top of standard JavaScript syntax. The problem with manually type-checking normal JavaScript is that doing it well requires so much extra verbiage that the faux \"type-safety\" you get doesn't make up for the lost readability. Keep your JavaScript clean, write good tests, and have good code reviews. Otherwise, do all of that but with TypeScript (which, like I said, is a great alternative!).</p> <p>Bad:</p> <pre><code>function combine(val1, val2) {\n  if (\n    (typeof val1 === \"number\" &amp;&amp; typeof val2 === \"number\") ||\n    (typeof val1 === \"string\" &amp;&amp; typeof val2 === \"string\")\n  ) {\n    return val1 + val2;\n  }\n\n  throw new Error(\"Must be of type String or Number\");\n}\n</code></pre> <p>Good:</p> <pre><code>function combine(val1, val2) {\n  return val1 + val2;\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#dont-over-optimize","title":"Don't over-optimize","text":"<p>Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. There are good resources for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.</p> <p>Bad:</p> <pre><code>// On old browsers, each iteration with uncached `list.length` would be costly\n// because of `list.length` recomputation. In modern browsers, this is optimized.\nfor (let i = 0, len = list.length; i &lt; len; i++) {\n  // ...\n}\n</code></pre> <p>Good:</p> <pre><code>for (let i = 0; i &lt; list.length; i++) {\n  // ...\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#remove-dead-code","title":"Remove dead code","text":"<p>Dead code is just as bad as duplicate code. There's no reason to keep it in your codebase. If it's not being called, get rid of it! It will still be safe in your version history if you still need it.</p> <p>Bad:</p> <pre><code>function oldRequestModule(url) {\n  // ...\n}\n\nfunction newRequestModule(url) {\n  // ...\n}\n\nconst req = newRequestModule;\ninventoryTracker(\"apples\", req, \"www.inventory-awesome.io\");\n</code></pre> <p>Good:</p> <pre><code>function newRequestModule(url) {\n  // ...\n}\n\nconst req = newRequestModule;\ninventoryTracker(\"apples\", req, \"www.inventory-awesome.io\");\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#objects-and-data-structures","title":"Objects and Data Structures","text":""},{"location":"programming/javascript/clean_code_javascript/#use-getters-and-setters","title":"Use getters and setters","text":"<p>Using getters and setters to access data on objects could be better than simply looking for a property on an object. \"Why?\" you might ask. Well, here's an unorganized list of reasons why:</p> <ul> <li>When you want to do more beyond getting an object property, you don't have   to look up and change every accessor in your codebase.</li> <li>Makes adding validation simple when doing a <code>set</code>.</li> <li>Encapsulates the internal representation.</li> <li>Easy to add logging and error handling when getting and setting.</li> <li>You can lazy load your object's properties, let's say getting it from a   server.</li> </ul> <p>Bad:</p> <pre><code>function makeBankAccount() {\n  // ...\n\n  return {\n    balance: 0\n    // ...\n  };\n}\n\nconst account = makeBankAccount();\naccount.balance = 100;\n</code></pre> <p>Good:</p> <pre><code>function makeBankAccount() {\n  // this one is private\n  let balance = 0;\n\n  // a \"getter\", made public via the returned object below\n  function getBalance() {\n    return balance;\n  }\n\n  // a \"setter\", made public via the returned object below\n  function setBalance(amount) {\n    // ... validate before updating the balance\n    balance = amount;\n  }\n\n  return {\n    // ...\n    getBalance,\n    setBalance\n  };\n}\n\nconst account = makeBankAccount();\naccount.setBalance(100);\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#make-objects-have-private-members","title":"Make objects have private members","text":"<p>This can be accomplished through closures (for ES5 and below).</p> <p>Bad:</p> <pre><code>const Employee = function(name) {\n  this.name = name;\n};\n\nEmployee.prototype.getName = function getName() {\n  return this.name;\n};\n\nconst employee = new Employee(\"John Doe\");\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\ndelete employee.name;\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: undefined\n</code></pre> <p>Good:</p> <pre><code>function makeEmployee(name) {\n  return {\n    getName() {\n      return name;\n    }\n  };\n}\n\nconst employee = makeEmployee(\"John Doe\");\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\ndelete employee.name;\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#classes","title":"Classes","text":""},{"location":"programming/javascript/clean_code_javascript/#prefer-es2015es6-classes-over-es5-plain-functions","title":"Prefer ES2015/ES6 classes over ES5 plain functions","text":"<p>It's very difficult to get readable class inheritance, construction, and method definitions for classical ES5 classes. If you need inheritance (and be aware that you might not), then prefer ES2015/ES6 classes. However, prefer small functions over classes until you find yourself needing larger and more complex objects.</p> <p>Bad:</p> <pre><code>const Animal = function(age) {\n  if (!(this instanceof Animal)) {\n    throw new Error(\"Instantiate Animal with `new`\");\n  }\n\n  this.age = age;\n};\n\nAnimal.prototype.move = function move() {};\n\nconst Mammal = function(age, furColor) {\n  if (!(this instanceof Mammal)) {\n    throw new Error(\"Instantiate Mammal with `new`\");\n  }\n\n  Animal.call(this, age);\n  this.furColor = furColor;\n};\n\nMammal.prototype = Object.create(Animal.prototype);\nMammal.prototype.constructor = Mammal;\nMammal.prototype.liveBirth = function liveBirth() {};\n\nconst Human = function(age, furColor, languageSpoken) {\n  if (!(this instanceof Human)) {\n    throw new Error(\"Instantiate Human with `new`\");\n  }\n\n  Mammal.call(this, age, furColor);\n  this.languageSpoken = languageSpoken;\n};\n\nHuman.prototype = Object.create(Mammal.prototype);\nHuman.prototype.constructor = Human;\nHuman.prototype.speak = function speak() {};\n</code></pre> <p>Good:</p> <pre><code>class Animal {\n  constructor(age) {\n    this.age = age;\n  }\n\n  move() {\n    /* ... */\n  }\n}\n\nclass Mammal extends Animal {\n  constructor(age, furColor) {\n    super(age);\n    this.furColor = furColor;\n  }\n\n  liveBirth() {\n    /* ... */\n  }\n}\n\nclass Human extends Mammal {\n  constructor(age, furColor, languageSpoken) {\n    super(age, furColor);\n    this.languageSpoken = languageSpoken;\n  }\n\n  speak() {\n    /* ... */\n  }\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#use-method-chaining","title":"Use method chaining","text":"<p>This pattern is very useful in JavaScript and you see it in many libraries such as jQuery and Lodash. It allows your code to be expressive, and less verbose. For that reason, I say, use method chaining and take a look at how clean your code will be. In your class functions, simply return <code>this</code> at the end of every function, and you can chain further class methods onto it.</p> <p>Bad:</p> <pre><code>class Car {\n  constructor(make, model, color) {\n    this.make = make;\n    this.model = model;\n    this.color = color;\n  }\n\n  setMake(make) {\n    this.make = make;\n  }\n\n  setModel(model) {\n    this.model = model;\n  }\n\n  setColor(color) {\n    this.color = color;\n  }\n\n  save() {\n    console.log(this.make, this.model, this.color);\n  }\n}\n\nconst car = new Car(\"Ford\", \"F-150\", \"red\");\ncar.setColor(\"pink\");\ncar.save();\n</code></pre> <p>Good:</p> <pre><code>class Car {\n  constructor(make, model, color) {\n    this.make = make;\n    this.model = model;\n    this.color = color;\n  }\n\n  setMake(make) {\n    this.make = make;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  setModel(model) {\n    this.model = model;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  setColor(color) {\n    this.color = color;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  save() {\n    console.log(this.make, this.model, this.color);\n    // NOTE: Returning this for chaining\n    return this;\n  }\n}\n\nconst car = new Car(\"Ford\", \"F-150\", \"red\").setColor(\"pink\").save();\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#prefer-composition-over-inheritance","title":"Prefer composition over inheritance","text":"<p>As stated famously in Design Patterns by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.</p> <p>You might be wondering then, \"when should I use inheritance?\" It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:</p> <ol> <li>Your inheritance represents an \"is-a\" relationship and not a \"has-a\"    relationship (Human-&gt;Animal vs. User-&gt;UserDetails).</li> <li>You can reuse code from the base classes (Humans can move like all animals).</li> <li>You want to make global changes to derived classes by changing a base class.    (Change the caloric expenditure of all animals when they move).</li> </ol> <p>Bad:</p> <pre><code>class Employee {\n  constructor(name, email) {\n    this.name = name;\n    this.email = email;\n  }\n\n  // ...\n}\n\n// Bad because Employees \"have\" tax data. EmployeeTaxData is not a type of Employee\nclass EmployeeTaxData extends Employee {\n  constructor(ssn, salary) {\n    super();\n    this.ssn = ssn;\n    this.salary = salary;\n  }\n\n  // ...\n}\n</code></pre> <p>Good:</p> <pre><code>class EmployeeTaxData {\n  constructor(ssn, salary) {\n    this.ssn = ssn;\n    this.salary = salary;\n  }\n\n  // ...\n}\n\nclass Employee {\n  constructor(name, email) {\n    this.name = name;\n    this.email = email;\n  }\n\n  setTaxData(ssn, salary) {\n    this.taxData = new EmployeeTaxData(ssn, salary);\n  }\n  // ...\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#solid","title":"SOLID","text":""},{"location":"programming/javascript/clean_code_javascript/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>As stated in Clean Code, \"There should never be more than one reason for a class to change\". It's tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won't be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It's important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.</p> <p>Bad:</p> <pre><code>class UserSettings {\n  constructor(user) {\n    this.user = user;\n  }\n\n  changeSettings(settings) {\n    if (this.verifyCredentials()) {\n      // ...\n    }\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n</code></pre> <p>Good:</p> <pre><code>class UserAuth {\n  constructor(user) {\n    this.user = user;\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n\nclass UserSettings {\n  constructor(user) {\n    this.user = user;\n    this.auth = new UserAuth(user);\n  }\n\n  changeSettings(settings) {\n    if (this.auth.verifyCredentials()) {\n      // ...\n    }\n  }\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#openclosed-principle-ocp","title":"Open/Closed Principle (OCP)","text":"<p>As stated by Bertrand Meyer, \"software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.\" What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.</p> <p>Bad:</p> <pre><code>class AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"ajaxAdapter\";\n  }\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"nodeAdapter\";\n  }\n}\n\nclass HttpRequester {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  fetch(url) {\n    if (this.adapter.name === \"ajaxAdapter\") {\n      return makeAjaxCall(url).then(response =&gt; {\n        // transform response and return\n      });\n    } else if (this.adapter.name === \"nodeAdapter\") {\n      return makeHttpCall(url).then(response =&gt; {\n        // transform response and return\n      });\n    }\n  }\n}\n\nfunction makeAjaxCall(url) {\n  // request and return promise\n}\n\nfunction makeHttpCall(url) {\n  // request and return promise\n}\n</code></pre> <p>Good:</p> <pre><code>class AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"ajaxAdapter\";\n  }\n\n  request(url) {\n    // request and return promise\n  }\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"nodeAdapter\";\n  }\n\n  request(url) {\n    // request and return promise\n  }\n}\n\nclass HttpRequester {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  fetch(url) {\n    return this.adapter.request(url).then(response =&gt; {\n      // transform response and return\n    });\n  }\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<p>This is a scary term for a very simple concept. It's formally defined as \"If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).\" That's an even scarier definition.</p> <p>The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let's take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the \"is-a\" relationship via inheritance, you quickly get into trouble.</p> <p>Bad:</p> <pre><code>class Rectangle {\n  constructor() {\n    this.width = 0;\n    this.height = 0;\n  }\n\n  setColor(color) {\n    // ...\n  }\n\n  render(area) {\n    // ...\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Rectangle {\n  setWidth(width) {\n    this.width = width;\n    this.height = width;\n  }\n\n  setHeight(height) {\n    this.width = height;\n    this.height = height;\n  }\n}\n\nfunction renderLargeRectangles(rectangles) {\n  rectangles.forEach(rectangle =&gt; {\n    rectangle.setWidth(4);\n    rectangle.setHeight(5);\n    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.\n    rectangle.render(area);\n  });\n}\n\nconst rectangles = [new Rectangle(), new Rectangle(), new Square()];\nrenderLargeRectangles(rectangles);\n</code></pre> <p>Good:</p> <pre><code>class Shape {\n  setColor(color) {\n    // ...\n  }\n\n  render(area) {\n    // ...\n  }\n}\n\nclass Rectangle extends Shape {\n  constructor(width, height) {\n    super();\n    this.width = width;\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Shape {\n  constructor(length) {\n    super();\n    this.length = length;\n  }\n\n  getArea() {\n    return this.length * this.length;\n  }\n}\n\nfunction renderLargeShapes(shapes) {\n  shapes.forEach(shape =&gt; {\n    const area = shape.getArea();\n    shape.render(area);\n  });\n}\n\nconst shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];\nrenderLargeShapes(shapes);\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<p>JavaScript doesn't have interfaces so this principle doesn't apply as strictly as others. However, it's important and relevant even with JavaScript's lack of type system.</p> <p>ISP states that \"Clients should not be forced to depend upon interfaces that they do not use.\" Interfaces are implicit contracts in JavaScript because of duck typing.</p> <p>A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won't need all of the settings. Making them optional helps prevent having a \"fat interface\".</p> <p>Bad:</p> <pre><code>class DOMTraverser {\n  constructor(settings) {\n    this.settings = settings;\n    this.setup();\n  }\n\n  setup() {\n    this.rootNode = this.settings.rootNode;\n    this.settings.animationModule.setup();\n  }\n\n  traverse() {\n    // ...\n  }\n}\n\nconst $ = new DOMTraverser({\n  rootNode: document.getElementsByTagName(\"body\"),\n  animationModule() {} // Most of the time, we won't need to animate when traversing.\n  // ...\n});\n</code></pre> <p>Good:</p> <pre><code>class DOMTraverser {\n  constructor(settings) {\n    this.settings = settings;\n    this.options = settings.options;\n    this.setup();\n  }\n\n  setup() {\n    this.rootNode = this.settings.rootNode;\n    this.setupOptions();\n  }\n\n  setupOptions() {\n    if (this.options.animationModule) {\n      // ...\n    }\n  }\n\n  traverse() {\n    // ...\n  }\n}\n\nconst $ = new DOMTraverser({\n  rootNode: document.getElementsByTagName(\"body\"),\n  options: {\n    animationModule() {}\n  }\n});\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<p>This principle states two essential things:</p> <ol> <li>High-level modules should not depend on low-level modules. Both should    depend on abstractions.</li> <li>Abstractions should not depend upon details. Details should depend on    abstractions.</li> </ol> <p>This can be hard to understand at first, but if you've worked with AngularJS, you've seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.</p> <p>As stated previously, JavaScript doesn't have interfaces so the abstractions that are depended upon are implicit contracts. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an <code>InventoryTracker</code> will have a <code>requestItems</code> method.</p> <p>Bad:</p> <pre><code>class InventoryRequester {\n  constructor() {\n    this.REQ_METHODS = [\"HTTP\"];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\nclass InventoryTracker {\n  constructor(items) {\n    this.items = items;\n\n    // BAD: We have created a dependency on a specific request implementation.\n    // We should just have requestItems depend on a request method: `request`\n    this.requester = new InventoryRequester();\n  }\n\n  requestItems() {\n    this.items.forEach(item =&gt; {\n      this.requester.requestItem(item);\n    });\n  }\n}\n\nconst inventoryTracker = new InventoryTracker([\"apples\", \"bananas\"]);\ninventoryTracker.requestItems();\n</code></pre> <p>Good:</p> <pre><code>class InventoryTracker {\n  constructor(items, requester) {\n    this.items = items;\n    this.requester = requester;\n  }\n\n  requestItems() {\n    this.items.forEach(item =&gt; {\n      this.requester.requestItem(item);\n    });\n  }\n}\n\nclass InventoryRequesterV1 {\n  constructor() {\n    this.REQ_METHODS = [\"HTTP\"];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\nclass InventoryRequesterV2 {\n  constructor() {\n    this.REQ_METHODS = [\"WS\"];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\n// By constructing our dependencies externally and injecting them, we can easily\n// substitute our request module for a fancy new one that uses WebSockets.\nconst inventoryTracker = new InventoryTracker(\n  [\"apples\", \"bananas\"],\n  new InventoryRequesterV2()\n);\ninventoryTracker.requestItems();\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#testing","title":"Testing","text":"<p>Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won't be sure that you didn't break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a good coverage tool.</p> <p>There's no excuse to not write tests. There are plenty of good JS test frameworks, so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.</p>"},{"location":"programming/javascript/clean_code_javascript/#single-concept-per-test","title":"Single concept per test","text":"<p>Bad:</p> <pre><code>import assert from \"assert\";\n\ndescribe(\"MomentJS\", () =&gt; {\n  it(\"handles date boundaries\", () =&gt; {\n    let date;\n\n    date = new MomentJS(\"1/1/2015\");\n    date.addDays(30);\n    assert.equal(\"1/31/2015\", date);\n\n    date = new MomentJS(\"2/1/2016\");\n    date.addDays(28);\n    assert.equal(\"02/29/2016\", date);\n\n    date = new MomentJS(\"2/1/2015\");\n    date.addDays(28);\n    assert.equal(\"03/01/2015\", date);\n  });\n});\n</code></pre> <p>Good:</p> <pre><code>import assert from \"assert\";\n\ndescribe(\"MomentJS\", () =&gt; {\n  it(\"handles 30-day months\", () =&gt; {\n    const date = new MomentJS(\"1/1/2015\");\n    date.addDays(30);\n    assert.equal(\"1/31/2015\", date);\n  });\n\n  it(\"handles leap year\", () =&gt; {\n    const date = new MomentJS(\"2/1/2016\");\n    date.addDays(28);\n    assert.equal(\"02/29/2016\", date);\n  });\n\n  it(\"handles non-leap year\", () =&gt; {\n    const date = new MomentJS(\"2/1/2015\");\n    date.addDays(28);\n    assert.equal(\"03/01/2015\", date);\n  });\n});\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#concurrency","title":"Concurrency","text":""},{"location":"programming/javascript/clean_code_javascript/#use-promises-not-callbacks","title":"Use Promises, not callbacks","text":"<p>Callbacks aren't clean, and they cause excessive amounts of nesting. With ES2015/ES6, Promises are a built-in global type. Use them!</p> <p>Bad:</p> <pre><code>import { get } from \"request\";\nimport { writeFile } from \"fs\";\n\nget(\n  \"https://en.wikipedia.org/wiki/Robert_Cecil_Martin\",\n  (requestErr, response, body) =&gt; {\n    if (requestErr) {\n      console.error(requestErr);\n    } else {\n      writeFile(\"article.html\", body, writeErr =&gt; {\n        if (writeErr) {\n          console.error(writeErr);\n        } else {\n          console.log(\"File written\");\n        }\n      });\n    }\n  }\n);\n</code></pre> <p>Good:</p> <pre><code>import { get } from \"request-promise\";\nimport { writeFile } from \"fs-extra\";\n\nget(\"https://en.wikipedia.org/wiki/Robert_Cecil_Martin\")\n  .then(body =&gt; {\n    return writeFile(\"article.html\", body);\n  })\n  .then(() =&gt; {\n    console.log(\"File written\");\n  })\n  .catch(err =&gt; {\n    console.error(err);\n  });\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#asyncawait-are-even-cleaner-than-promises","title":"Async/Await are even cleaner than Promises","text":"<p>Promises are a very clean alternative to callbacks, but ES2017/ES8 brings async and await which offer an even cleaner solution. All you need is a function that is prefixed in an <code>async</code> keyword, and then you can write your logic imperatively without a <code>then</code> chain of functions. Use this if you can take advantage of ES2017/ES8 features today!</p> <p>Bad:</p> <pre><code>import { get } from \"request-promise\";\nimport { writeFile } from \"fs-extra\";\n\nget(\"https://en.wikipedia.org/wiki/Robert_Cecil_Martin\")\n  .then(body =&gt; {\n    return writeFile(\"article.html\", body);\n  })\n  .then(() =&gt; {\n    console.log(\"File written\");\n  })\n  .catch(err =&gt; {\n    console.error(err);\n  });\n</code></pre> <p>Good:</p> <pre><code>import { get } from \"request-promise\";\nimport { writeFile } from \"fs-extra\";\n\nasync function getCleanCodeArticle() {\n  try {\n    const body = await get(\n      \"https://en.wikipedia.org/wiki/Robert_Cecil_Martin\"\n    );\n    await writeFile(\"article.html\", body);\n    console.log(\"File written\");\n  } catch (err) {\n    console.error(err);\n  }\n}\n\ngetCleanCodeArticle()\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#error-handling","title":"Error Handling","text":"<p>Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it's letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.</p>"},{"location":"programming/javascript/clean_code_javascript/#dont-ignore-caught-errors","title":"Don't ignore caught errors","text":"<p>Doing nothing with a caught error doesn't give you the ability to ever fix or react to said error. Logging the error to the console (<code>console.log</code>) isn't much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a <code>try/catch</code> it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.</p> <p>Bad:</p> <pre><code>try {\n  functionThatMightThrow();\n} catch (error) {\n  console.log(error);\n}\n</code></pre> <p>Good:</p> <pre><code>try {\n  functionThatMightThrow();\n} catch (error) {\n  // One option (more noisy than console.log):\n  console.error(error);\n  // Another option:\n  notifyUserOfError(error);\n  // Another option:\n  reportErrorToService(error);\n  // OR do all three!\n}\n</code></pre>"},{"location":"programming/javascript/clean_code_javascript/#dont-ignore-rejected-promises","title":"Don't ignore rejected promises","text":"<p>For the same reason you shouldn't ignore caught errors from <code>try/catch</code>.</p> <p>Bad:</p> <pre><code>getdata()\n  .then(data =&gt; {\n    functionThatMightThrow(data);\n  })\n  .catch(error =&gt; {\n    console.log(error);\n  });\n</code></pre> <p>Good:</p> <pre><code>getdata()\n  .then(data =&gt; {\n    functionThatMightThrow(data);\n  })\n  .catch(error =&gt; {\n    // One option (more noisy than console.log):\n    console.error(error);\n    // Another option:\n    notifyUserOfError(error);\n    // Another option:\n    reportErrorToService(error);\n    // OR do all three!\n  });\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#formatting","title":"Formatting","text":"<p>Formatting is subjective. Like many rules herein, there is no hard and fast rule that you must follow. The main point is DO NOT ARGUE over formatting. There are tons of tools to automate this. Use one! It's a waste of time and money for engineers to argue over formatting.</p> <p>For things that don't fall under the purview of automatic formatting (indentation, tabs vs. spaces, double vs. single quotes, etc.) look here for some guidance.</p>"},{"location":"programming/javascript/clean_code_javascript/#use-consistent-capitalization","title":"Use consistent capitalization","text":"<p>JavaScript is untyped, so capitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just be consistent.</p> <p>Bad:</p> <pre><code>const DAYS_IN_WEEK = 7;\nconst daysInMonth = 30;\n\nconst songs = [\"Back In Black\", \"Stairway to Heaven\", \"Hey Jude\"];\nconst Artists = [\"ACDC\", \"Led Zeppelin\", \"The Beatles\"];\n\nfunction eraseDatabase() {}\nfunction restore_database() {}\n\nclass animal {}\nclass Alpaca {}\n</code></pre> <p>Good:</p> <pre><code>const DAYS_IN_WEEK = 7;\nconst DAYS_IN_MONTH = 30;\n\nconst SONGS = [\"Back In Black\", \"Stairway to Heaven\", \"Hey Jude\"];\nconst ARTISTS = [\"ACDC\", \"Led Zeppelin\", \"The Beatles\"];\n\nfunction eraseDatabase() {}\nfunction restoreDatabase() {}\n\nclass Animal {}\nclass Alpaca {}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#function-callers-and-callees-should-be-close","title":"Function callers and callees should be close","text":"<p>If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.</p> <p>Bad:</p> <pre><code>class PerformanceReview {\n  constructor(employee) {\n    this.employee = employee;\n  }\n\n  lookupPeers() {\n    return db.lookup(this.employee, \"peers\");\n  }\n\n  lookupManager() {\n    return db.lookup(this.employee, \"manager\");\n  }\n\n  getPeerReviews() {\n    const peers = this.lookupPeers();\n    // ...\n  }\n\n  perfReview() {\n    this.getPeerReviews();\n    this.getManagerReview();\n    this.getSelfReview();\n  }\n\n  getManagerReview() {\n    const manager = this.lookupManager();\n  }\n\n  getSelfReview() {\n    // ...\n  }\n}\n\nconst review = new PerformanceReview(employee);\nreview.perfReview();\n</code></pre> <p>Good:</p> <pre><code>class PerformanceReview {\n  constructor(employee) {\n    this.employee = employee;\n  }\n\n  perfReview() {\n    this.getPeerReviews();\n    this.getManagerReview();\n    this.getSelfReview();\n  }\n\n  getPeerReviews() {\n    const peers = this.lookupPeers();\n    // ...\n  }\n\n  lookupPeers() {\n    return db.lookup(this.employee, \"peers\");\n  }\n\n  getManagerReview() {\n    const manager = this.lookupManager();\n  }\n\n  lookupManager() {\n    return db.lookup(this.employee, \"manager\");\n  }\n\n  getSelfReview() {\n    // ...\n  }\n}\n\nconst review = new PerformanceReview(employee);\nreview.perfReview();\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#comments","title":"Comments","text":""},{"location":"programming/javascript/clean_code_javascript/#only-comment-things-that-have-business-logic-complexity","title":"Only comment things that have business logic complexity.","text":"<p>Comments are an apology, not a requirement. Good code mostly documents itself.</p> <p>Bad:</p> <pre><code>function hashIt(data) {\n  // The hash\n  let hash = 0;\n\n  // Length of string\n  const length = data.length;\n\n  // Loop through every character in data\n  for (let i = 0; i &lt; length; i++) {\n    // Get character code.\n    const char = data.charCodeAt(i);\n    // Make the hash\n    hash = (hash &lt;&lt; 5) - hash + char;\n    // Convert to 32-bit integer\n    hash &amp;= hash;\n  }\n}\n</code></pre> <p>Good:</p> <pre><code>function hashIt(data) {\n  let hash = 0;\n  const length = data.length;\n\n  for (let i = 0; i &lt; length; i++) {\n    const char = data.charCodeAt(i);\n    hash = (hash &lt;&lt; 5) - hash + char;\n\n    // Convert to 32-bit integer\n    hash &amp;= hash;\n  }\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#dont-leave-commented-out-code-in-your-codebase","title":"Don't leave commented out code in your codebase","text":"<p>Version control exists for a reason. Leave old code in your history.</p> <p>Bad:</p> <pre><code>doStuff();\n// doOtherStuff();\n// doSomeMoreStuff();\n// doSoMuchStuff();\n</code></pre> <p>Good:</p> <pre><code>doStuff();\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#dont-have-journal-comments","title":"Don't have journal comments","text":"<p>Remember, use version control! There's no need for dead code, commented code, and especially journal comments. Use <code>git log</code> to get history!</p> <p>Bad:</p> <pre><code>/**\n * 2016-12-20: Removed monads, didn't understand them (RM)\n * 2016-10-01: Improved using special monads (JP)\n * 2016-02-03: Removed type-checking (LI)\n * 2015-03-14: Added combine with type-checking (JR)\n */\nfunction combine(a, b) {\n  return a + b;\n}\n</code></pre> <p>Good:</p> <pre><code>function combine(a, b) {\n  return a + b;\n}\n</code></pre> <p>\u2b06 back to top</p>"},{"location":"programming/javascript/clean_code_javascript/#avoid-positional-markers","title":"Avoid positional markers","text":"<p>They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.</p> <p>Bad:</p> <pre><code>////////////////////////////////////////////////////////////////////////////////\n// Scope Model Instantiation\n////////////////////////////////////////////////////////////////////////////////\n$scope.model = {\n  menu: \"foo\",\n  nav: \"bar\"\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Action setup\n////////////////////////////////////////////////////////////////////////////////\nconst actions = function() {\n  // ...\n};\n</code></pre> <p>Good:</p> <pre><code>$scope.model = {\n  menu: \"foo\",\n  nav: \"bar\"\n};\n\nconst actions = function() {\n  // ...\n};\n</code></pre>"},{"location":"programming/javascript/javascript_questions/","title":"Javascript Questions","text":"JavaScript Questions <p>Source Repo</p>"},{"location":"programming/javascript/javascript_questions/#1-whats-the-output","title":"1. What's the output?","text":"<pre><code>function sayHi() {\n  console.log(name);\n  console.log(age);\n  var name = 'Lydia';\n  let age = 21;\n}\n\nsayHi();\n</code></pre> <ul> <li>A: <code>Lydia</code> and <code>undefined</code></li> <li>B: <code>Lydia</code> and <code>ReferenceError</code></li> <li>C: <code>ReferenceError</code> and <code>21</code></li> <li>D: <code>undefined</code> and <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: D  Within the function, we first declare the `name` variable with the `var` keyword. This means that the variable gets hoisted (memory space is set up during the creation phase) with the default value of `undefined`, until we actually get to the line where we define the variable. We haven't defined the variable yet on the line where we try to log the `name` variable, so it still holds the value of `undefined`.  Variables with the `let` keyword (and `const`) are hoisted, but unlike `var`, don't get initialized. They are not accessible before the line we declare (initialize) them. This is called the \"temporal dead zone\". When we try to access the variables before they are declared, JavaScript throws a `ReferenceError`.  </p>"},{"location":"programming/javascript/javascript_questions/#2-whats-the-output","title":"2. What's the output?","text":"<pre><code>for (var i = 0; i &lt; 3; i++) {\n  setTimeout(() =&gt; console.log(i), 1);\n}\n\nfor (let i = 0; i &lt; 3; i++) {\n  setTimeout(() =&gt; console.log(i), 1);\n}\n</code></pre> <ul> <li>A: <code>0 1 2</code> and <code>0 1 2</code></li> <li>B: <code>0 1 2</code> and <code>3 3 3</code></li> <li>C: <code>3 3 3</code> and <code>0 1 2</code></li> </ul> Answer <p>  #### Answer: C  Because of the event queue in JavaScript, the `setTimeout` callback function is called _after_ the loop has been executed. Since the variable `i` in the first loop was declared using the `var` keyword, this value was global. During the loop, we incremented the value of `i` by `1` each time, using the unary operator `++`. By the time the `setTimeout` callback function was invoked, `i` was equal to `3` in the first example.  In the second loop, the variable `i` was declared using the `let` keyword: variables declared with the `let` (and `const`) keyword are block-scoped (a block is anything between `{ }`). During each iteration, `i` will have a new value, and each value is scoped inside the loop.  </p>"},{"location":"programming/javascript/javascript_questions/#3-whats-the-output","title":"3. What's the output?","text":"<pre><code>const shape = {\n  radius: 10,\n  diameter() {\n    return this.radius * 2;\n  },\n  perimeter: () =&gt; 2 * Math.PI * this.radius,\n};\n\nconsole.log(shape.diameter());\nconsole.log(shape.perimeter());\n</code></pre> <ul> <li>A: <code>20</code> and <code>62.83185307179586</code></li> <li>B: <code>20</code> and <code>NaN</code></li> <li>C: <code>20</code> and <code>63</code></li> <li>D: <code>NaN</code> and <code>63</code></li> </ul> Answer <p>  #### Answer: B  Note that the value of `diameter` is a regular function, whereas the value of `perimeter` is an arrow function.  With arrow functions, the `this` keyword refers to its current surrounding scope, unlike regular functions! This means that when we call `perimeter`, it doesn't refer to the shape object, but to its surrounding scope (window for example).  There is no value `radius` on that object, which returns `NaN`.  </p>"},{"location":"programming/javascript/javascript_questions/#4-whats-the-output","title":"4. What's the output?","text":"<pre><code>+true;\n!'Lydia';\n</code></pre> <ul> <li>A: <code>1</code> and <code>false</code></li> <li>B: <code>false</code> and <code>NaN</code></li> <li>C: <code>false</code> and <code>false</code></li> </ul> Answer <p>  #### Answer: A  The unary plus tries to convert an operand to a number. `true` is `1`, and `false` is `0`.  The string `'Lydia'` is a truthy value. What we're actually asking, is \"is this truthy value falsy?\". This returns `false`.  </p>"},{"location":"programming/javascript/javascript_questions/#5-which-one-is-true","title":"5. Which one is true?","text":"<pre><code>const bird = {\n  size: 'small',\n};\n\nconst mouse = {\n  name: 'Mickey',\n  small: true,\n};\n</code></pre> <ul> <li>A: <code>mouse.bird.size</code> is not valid</li> <li>B: <code>mouse[bird.size]</code> is not valid</li> <li>C: <code>mouse[bird[\"size\"]]</code> is not valid</li> <li>D: All of them are valid</li> </ul> Answer <p>  #### Answer: A  In JavaScript, all object keys are strings (unless it's a Symbol). Even though we might not _type_ them as strings, they are always converted into strings under the hood.  JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket `[` and keeps going until it finds the closing bracket `]`. Only then, it will evaluate the statement.  `mouse[bird.size]`: First it evaluates `bird.size`, which is `\"small\"`. `mouse[\"small\"]` returns `true`  However, with dot notation, this doesn't happen. `mouse` does not have a key called `bird`, which means that `mouse.bird` is `undefined`. Then, we ask for the `size` using dot notation: `mouse.bird.size`. Since `mouse.bird` is `undefined`, we're actually asking `undefined.size`. This isn't valid, and will throw an error similar to `Cannot read property \"size\" of undefined`.  </p>"},{"location":"programming/javascript/javascript_questions/#6-whats-the-output","title":"6. What's the output?","text":"<pre><code>let c = { greeting: 'Hey!' };\nlet d;\n\nd = c;\nc.greeting = 'Hello';\nconsole.log(d.greeting);\n</code></pre> <ul> <li>A: <code>Hello</code></li> <li>B: <code>Hey!</code></li> <li>C: <code>undefined</code></li> <li>D: <code>ReferenceError</code></li> <li>E: <code>TypeError</code></li> </ul> Answer <p>  #### Answer: A  In JavaScript, all objects interact by _reference_ when setting them equal to each other.  First, variable `c` holds a value to an object. Later, we assign `d` with the same reference that `c` has to the object.    When you change one object, you change all of them.  </p>"},{"location":"programming/javascript/javascript_questions/#7-whats-the-output","title":"7. What's the output?","text":"<pre><code>let a = 3;\nlet b = new Number(3);\nlet c = 3;\n\nconsole.log(a == b);\nconsole.log(a === b);\nconsole.log(b === c);\n</code></pre> <ul> <li>A: <code>true</code> <code>false</code> <code>true</code></li> <li>B: <code>false</code> <code>false</code> <code>true</code></li> <li>C: <code>true</code> <code>false</code> <code>false</code></li> <li>D: <code>false</code> <code>true</code> <code>true</code></li> </ul> Answer <p>  #### Answer: C  `new Number()` is a built-in function constructor. Although it looks like a number, it's not really a number: it has a bunch of extra features and is an object.  When we use the `==` operator (Equality operator), it only checks whether it has the same _value_. They both have the value of `3`, so it returns `true`.  However, when we use the `===` operator (Strict equality operator), both value _and_ type should be the same. It's not: `new Number()` is not a number, it's an **object**. Both return `false.`  </p>"},{"location":"programming/javascript/javascript_questions/#8-whats-the-output","title":"8. What's the output?","text":"<pre><code>class Chameleon {\n  static colorChange(newColor) {\n    this.newColor = newColor;\n    return this.newColor;\n  }\n\n  constructor({ newColor = 'green' } = {}) {\n    this.newColor = newColor;\n  }\n}\n\nconst freddie = new Chameleon({ newColor: 'purple' });\nconsole.log(freddie.colorChange('orange'));\n</code></pre> <ul> <li>A: <code>orange</code></li> <li>B: <code>purple</code></li> <li>C: <code>green</code></li> <li>D: <code>TypeError</code></li> </ul> Answer <p>  #### Answer: D  The `colorChange` function is static. Static methods are designed to live only on the constructor in which they are created, and cannot be passed down to any children or called upon class instances. Since `freddie` is an instance of class Chameleon, the function cannot be called upon it. A `TypeError` is thrown.  </p>"},{"location":"programming/javascript/javascript_questions/#9-whats-the-output","title":"9. What's the output?","text":"<pre><code>let greeting;\ngreetign = {}; // Typo!\nconsole.log(greetign);\n</code></pre> <ul> <li>A: <code>{}</code></li> <li>B: <code>ReferenceError: greetign is not defined</code></li> <li>C: <code>undefined</code></li> </ul> Answer <p>  #### Answer: A  It logs the object, because we just created an empty object on the global object! When we mistyped `greeting` as `greetign`, the JS interpreter actually saw this as:  1. `global.greetign = {}` in Node.js 2. `window.greetign = {}`, `frames.greetign = {}` and `self.greetign` in browsers. 3. `self.greetign` in web workers. 4. `globalThis.greetign` in all environments.  In order to avoid this, we can use `\"use strict\"`. This makes sure that you have declared a variable before setting it equal to anything.  </p>"},{"location":"programming/javascript/javascript_questions/#10-what-happens-when-we-do-this","title":"10. What happens when we do this?","text":"<pre><code>function bark() {\n  console.log('Woof!');\n}\n\nbark.animal = 'dog';\n</code></pre> <ul> <li>A: Nothing, this is totally fine!</li> <li>B: <code>SyntaxError</code>. You cannot add properties to a function this way.</li> <li>C: <code>\"Woof\"</code> gets logged.</li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: A  This is possible in JavaScript, because functions are objects! (Everything besides primitive types are objects)  A function is a special type of object. The code you write yourself isn't the actual function. The function is an object with properties. This property is invocable.  </p>"},{"location":"programming/javascript/javascript_questions/#11-whats-the-output","title":"11. What's the output?","text":"<pre><code>function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nconst member = new Person('Lydia', 'Hallie');\nPerson.getFullName = function() {\n  return `${this.firstName} ${this.lastName}`;\n};\n\nconsole.log(member.getFullName());\n</code></pre> <ul> <li>A: <code>TypeError</code></li> <li>B: <code>SyntaxError</code></li> <li>C: <code>Lydia Hallie</code></li> <li>D: <code>undefined</code> <code>undefined</code></li> </ul> Answer <p>  #### Answer: A  In JavaScript, functions are objects, and therefore, the method `getFullName` gets added to the constructor function object itself. For that reason, we can call `Person.getFullName()`, but `member.getFullName` throws a `TypeError`.   If you want a method to be available to all object instances, you have to add it to the prototype property:   <pre><code>Person.prototype.getFullName = function() {\n  return `${this.firstName} ${this.lastName}`;\n};\n</code></pre> </p>"},{"location":"programming/javascript/javascript_questions/#12-whats-the-output","title":"12. What's the output?","text":"<pre><code>function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nconst lydia = new Person('Lydia', 'Hallie');\nconst sarah = Person('Sarah', 'Smith');\n\nconsole.log(lydia);\nconsole.log(sarah);\n</code></pre> <ul> <li>A: <code>Person {firstName: \"Lydia\", lastName: \"Hallie\"}</code> and <code>undefined</code></li> <li>B: <code>Person {firstName: \"Lydia\", lastName: \"Hallie\"}</code> and <code>Person {firstName: \"Sarah\", lastName: \"Smith\"}</code></li> <li>C: <code>Person {firstName: \"Lydia\", lastName: \"Hallie\"}</code> and <code>{}</code></li> <li>D: <code>Person {firstName: \"Lydia\", lastName: \"Hallie\"}</code> and <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: A  For `sarah`, we didn't use the `new` keyword. When using `new`, `this` refers to the new empty object we create. However, if you don't add `new`, `this` refers to the **global object**!  We said that `this.firstName` equals `\"Sarah\"` and `this.lastName` equals `\"Smith\"`. What we actually did, is defining `global.firstName = 'Sarah'` and `global.lastName = 'Smith'`. `sarah` itself is left `undefined`, since we don't return a value from the `Person` function.  </p>"},{"location":"programming/javascript/javascript_questions/#13-what-are-the-three-phases-of-event-propagation","title":"13. What are the three phases of event propagation?","text":"<ul> <li>A: Target &gt; Capturing &gt; Bubbling</li> <li>B: Bubbling &gt; Target &gt; Capturing</li> <li>C: Target &gt; Bubbling &gt; Capturing</li> <li>D: Capturing &gt; Target &gt; Bubbling</li> </ul> Answer <p>  #### Answer: D  During the **capturing** phase, the event goes through the ancestor elements down to the target element. It then reaches the **target** element, and **bubbling** begins.   </p>"},{"location":"programming/javascript/javascript_questions/#14-all-object-have-prototypes","title":"14. All object have prototypes.","text":"<ul> <li>A: true</li> <li>B: false</li> </ul> Answer <p>  #### Answer: B  All objects have prototypes, except for the **base object**. The base object is the object created by the user, or an object that is created using the `new` keyword. The base object has access to some methods and properties, such as `.toString`. This is the reason why you can use built-in JavaScript methods! All of such methods are available on the prototype. Although JavaScript can't find it directly on your object, it goes down the prototype chain and finds it there, which makes it accessible for you.  </p>"},{"location":"programming/javascript/javascript_questions/#15-whats-the-output","title":"15. What's the output?","text":"<pre><code>function sum(a, b) {\n  return a + b;\n}\n\nsum(1, '2');\n</code></pre> <ul> <li>A: <code>NaN</code></li> <li>B: <code>TypeError</code></li> <li>C: <code>\"12\"</code></li> <li>D: <code>3</code></li> </ul> Answer <p>  #### Answer: C  JavaScript is a **dynamically typed language**: we don't specify what types certain variables are. Values can automatically be converted into another type without you knowing, which is called _implicit type coercion_. **Coercion** is converting from one type into another.  In this example, JavaScript converts the number `1` into a string, in order for the function to make sense and return a value. During the addition of a numeric type (`1`) and a string type (`'2'`), the number is treated as a string. We can concatenate strings like `\"Hello\" + \"World\"`, so what's happening here is `\"1\" + \"2\"` which returns `\"12\"`.  </p>"},{"location":"programming/javascript/javascript_questions/#16-whats-the-output","title":"16. What's the output?","text":"<pre><code>let number = 0;\nconsole.log(number++);\nconsole.log(++number);\nconsole.log(number);\n</code></pre> <ul> <li>A: <code>1</code> <code>1</code> <code>2</code></li> <li>B: <code>1</code> <code>2</code> <code>2</code></li> <li>C: <code>0</code> <code>2</code> <code>2</code></li> <li>D: <code>0</code> <code>1</code> <code>2</code></li> </ul> Answer <p>  #### Answer: C  The **postfix** unary operator `++`:  1. Returns the value (this returns `0`) 2. Increments the value (number is now `1`)  The **prefix** unary operator `++`:  1. Increments the value (number is now `2`) 2. Returns the value (this returns `2`)  This returns `0 2 2`.  </p>"},{"location":"programming/javascript/javascript_questions/#17-whats-the-output","title":"17. What's the output?","text":"<pre><code>function getPersonInfo(one, two, three) {\n  console.log(one);\n  console.log(two);\n  console.log(three);\n}\n\nconst person = 'Lydia';\nconst age = 21;\n\ngetPersonInfo`${person} is ${age} years old`;\n</code></pre> <ul> <li>A: <code>\"Lydia\"</code> <code>21</code> <code>[\"\", \" is \", \" years old\"]</code></li> <li>B: <code>[\"\", \" is \", \" years old\"]</code> <code>\"Lydia\"</code> <code>21</code></li> <li>C: <code>\"Lydia\"</code> <code>[\"\", \" is \", \" years old\"]</code> <code>21</code></li> </ul> Answer <p>  #### Answer: B  If you use tagged template literals, the value of the first argument is always an array of the string values. The remaining arguments get the values of the passed expressions!  </p>"},{"location":"programming/javascript/javascript_questions/#18-whats-the-output","title":"18. What's the output?","text":"<pre><code>function checkAge(data) {\n  if (data === { age: 18 }) {\n    console.log('You are an adult!');\n  } else if (data == { age: 18 }) {\n    console.log('You are still an adult.');\n  } else {\n    console.log(`Hmm.. You don't have an age I guess`);\n  }\n}\n\ncheckAge({ age: 18 });\n</code></pre> <ul> <li>A: <code>You are an adult!</code></li> <li>B: <code>You are still an adult.</code></li> <li>C: <code>Hmm.. You don't have an age I guess</code></li> </ul> Answer <p>  #### Answer: C  When testing equality, primitives are compared by their _value_, while objects are compared by their _reference_. JavaScript checks if the objects have a reference to the same location in memory.  The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.  This is why both `{ age: 18 } === { age: 18 }` and `{ age: 18 } == { age: 18 }` return `false`.  </p>"},{"location":"programming/javascript/javascript_questions/#19-whats-the-output","title":"19. What's the output?","text":"<pre><code>function getAge(...args) {\n  console.log(typeof args);\n}\n\ngetAge(21);\n</code></pre> <ul> <li>A: <code>\"number\"</code></li> <li>B: <code>\"array\"</code></li> <li>C: <code>\"object\"</code></li> <li>D: <code>\"NaN\"</code></li> </ul> Answer <p>  #### Answer: C  The rest parameter (`...args`) lets us \"collect\" all remaining arguments into an array. An array is an object, so `typeof args` returns `\"object\"`  </p>"},{"location":"programming/javascript/javascript_questions/#20-whats-the-output","title":"20. What's the output?","text":"<pre><code>function getAge() {\n  'use strict';\n  age = 21;\n  console.log(age);\n}\n\ngetAge();\n</code></pre> <ul> <li>A: <code>21</code></li> <li>B: <code>undefined</code></li> <li>C: <code>ReferenceError</code></li> <li>D: <code>TypeError</code></li> </ul> Answer <p>  #### Answer: C  With `\"use strict\"`, you can make sure that you don't accidentally declare global variables. We never declared the variable `age`, and since we use `\"use strict\"`, it will throw a reference error. If we didn't use `\"use strict\"`, it would have worked, since the property `age` would have gotten added to the global object.  </p>"},{"location":"programming/javascript/javascript_questions/#21-whats-the-value-of-sum","title":"21. What's the value of <code>sum</code>?","text":"<pre><code>const sum = eval('10*10+5');\n</code></pre> <ul> <li>A: <code>105</code></li> <li>B: <code>\"105\"</code></li> <li>C: <code>TypeError</code></li> <li>D: <code>\"10*10+5\"</code></li> </ul> Answer <p>  #### Answer: A  `eval` evaluates codes that's passed as a string. If it's an expression, like in this case, it evaluates the expression. The expression is `10 * 10 + 5`. This returns the number `105`.  </p>"},{"location":"programming/javascript/javascript_questions/#22-how-long-is-cool_secret-accessible","title":"22. How long is cool_secret accessible?","text":"<pre><code>sessionStorage.setItem('cool_secret', 123);\n</code></pre> <ul> <li>A: Forever, the data doesn't get lost.</li> <li>B: When the user closes the tab.</li> <li>C: When the user closes the entire browser, not only the tab.</li> <li>D: When the user shuts off their computer.</li> </ul> Answer <p>  #### Answer: B  The data stored in `sessionStorage` is removed after closing the _tab_.  If you used `localStorage`, the data would've been there forever, unless for example `localStorage.clear()` is invoked.  </p>"},{"location":"programming/javascript/javascript_questions/#23-whats-the-output","title":"23. What's the output?","text":"<pre><code>var num = 8;\nvar num = 10;\n\nconsole.log(num);\n</code></pre> <ul> <li>A: <code>8</code></li> <li>B: <code>10</code></li> <li>C: <code>SyntaxError</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: B  With the `var` keyword, you can declare multiple variables with the same name. The variable will then hold the latest value.  You cannot do this with `let` or `const` since they're block-scoped.  </p>"},{"location":"programming/javascript/javascript_questions/#24-whats-the-output","title":"24. What's the output?","text":"<pre><code>const obj = { 1: 'a', 2: 'b', 3: 'c' };\nconst set = new Set([1, 2, 3, 4, 5]);\n\nobj.hasOwnProperty('1');\nobj.hasOwnProperty(1);\nset.has('1');\nset.has(1);\n</code></pre> <ul> <li>A: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li> <li>B: <code>false</code> <code>true</code> <code>true</code> <code>true</code></li> <li>C: <code>true</code> <code>true</code> <code>false</code> <code>true</code></li> <li>D: <code>true</code> <code>true</code> <code>true</code> <code>true</code></li> </ul> Answer <p>  #### Answer: C  All object keys (excluding Symbols) are strings under the hood, even if you don't type it yourself as a string. This is why `obj.hasOwnProperty('1')` also returns true.  It doesn't work that way for a set. There is no `'1'` in our set: `set.has('1')` returns `false`. It has the numeric type `1`, `set.has(1)` returns `true`.  </p>"},{"location":"programming/javascript/javascript_questions/#25-whats-the-output","title":"25. What's the output?","text":"<pre><code>const obj = { a: 'one', b: 'two', a: 'three' };\nconsole.log(obj);\n</code></pre> <ul> <li>A: <code>{ a: \"one\", b: \"two\" }</code></li> <li>B: <code>{ b: \"two\", a: \"three\" }</code></li> <li>C: <code>{ a: \"three\", b: \"two\" }</code></li> <li>D: <code>SyntaxError</code></li> </ul> Answer <p>  #### Answer: C  If you have two keys with the same name, the key will be replaced. It will still be in its first position, but with the last specified value.  </p>"},{"location":"programming/javascript/javascript_questions/#26-the-javascript-global-execution-context-creates-two-things-for-you-the-global-object-and-the-this-keyword","title":"26. The JavaScript global execution context creates two things for you: the global object, and the \"this\" keyword.","text":"<ul> <li>A: true</li> <li>B: false</li> <li>C: it depends</li> </ul> Answer <p>  #### Answer: A  The base execution context is the global execution context: it's what's accessible everywhere in your code.  </p>"},{"location":"programming/javascript/javascript_questions/#27-whats-the-output","title":"27. What's the output?","text":"<pre><code>for (let i = 1; i &lt; 5; i++) {\n  if (i === 3) continue;\n  console.log(i);\n}\n</code></pre> <ul> <li>A: <code>1</code> <code>2</code></li> <li>B: <code>1</code> <code>2</code> <code>3</code></li> <li>C: <code>1</code> <code>2</code> <code>4</code></li> <li>D: <code>1</code> <code>3</code> <code>4</code></li> </ul> Answer <p>  #### Answer: C  The `continue` statement skips an iteration if a certain condition returns `true`.  </p>"},{"location":"programming/javascript/javascript_questions/#28-whats-the-output","title":"28. What's the output?","text":"<pre><code>String.prototype.giveLydiaPizza = () =&gt; {\n  return 'Just give Lydia pizza already!';\n};\n\nconst name = 'Lydia';\n\nconsole.log(name.giveLydiaPizza())\n</code></pre> <ul> <li>A: <code>\"Just give Lydia pizza already!\"</code></li> <li>B: <code>TypeError: not a function</code></li> <li>C: <code>SyntaxError</code></li> <li>D: <code>undefined</code></li> </ul> Answer <p>  #### Answer: A  `String` is a built-in constructor, which we can add properties to. I just added a method to its prototype. Primitive strings are automatically converted into a string object, generated by the string prototype function. So, all strings (string objects) have access to that method!  </p>"},{"location":"programming/javascript/javascript_questions/#29-whats-the-output","title":"29. What's the output?","text":"<pre><code>const a = {};\nconst b = { key: 'b' };\nconst c = { key: 'c' };\n\na[b] = 123;\na[c] = 456;\n\nconsole.log(a[b]);\n</code></pre> <ul> <li>A: <code>123</code></li> <li>B: <code>456</code></li> <li>C: <code>undefined</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: B  Object keys are automatically converted into strings. We are trying to set an object as a key to object `a`, with the value of `123`.  However, when we stringify an object, it becomes `\"[object Object]\"`. So what we are saying here, is that `a[\"[object Object]\"] = 123`. Then, we can try to do the same again. `c` is another object that we are implicitly stringifying. So then, `a[\"[object Object]\"] = 456`.  Then, we log `a[b]`, which is actually `a[\"[object Object]\"]`. We just set that to `456`, so it returns `456`.  </p>"},{"location":"programming/javascript/javascript_questions/#30-whats-the-output","title":"30. What's the output?","text":"<pre><code>const foo = () =&gt; console.log('First');\nconst bar = () =&gt; setTimeout(() =&gt; console.log('Second'));\nconst baz = () =&gt; console.log('Third');\n\nbar();\nfoo();\nbaz();\n</code></pre> <ul> <li>A: <code>First</code> <code>Second</code> <code>Third</code></li> <li>B: <code>First</code> <code>Third</code> <code>Second</code></li> <li>C: <code>Second</code> <code>First</code> <code>Third</code></li> <li>D: <code>Second</code> <code>Third</code> <code>First</code></li> </ul> Answer <p>  #### Answer: B  We have a `setTimeout` function and invoked it first. Yet, it was logged last.  This is because in browsers, we don't just have the runtime engine, we also have something called a `WebAPI`. The `WebAPI` gives us the `setTimeout` function to start with, and for example the DOM.  After the _callback_ is pushed to the WebAPI, the `setTimeout` function itself (but not the callback!) is popped off the stack.    Now, `foo` gets invoked, and `\"First\"` is being logged.    `foo` is popped off the stack, and `baz` gets invoked. `\"Third\"` gets logged.    The WebAPI can't just add stuff to the stack whenever it's ready. Instead, it pushes the callback function to something called the _queue_.    This is where an event loop starts to work. An **event loop** looks at the stack and task queue. If the stack is empty, it takes the first thing on the queue and pushes it onto the stack.    `bar` gets invoked, `\"Second\"` gets logged, and it's popped off the stack.  </p>"},{"location":"programming/javascript/javascript_questions/#31-what-is-the-eventtarget-when-clicking-the-button","title":"31. What is the event.target when clicking the button?","text":"<pre><code>&lt;div onclick=\"console.log('first div')\"&gt;\n  &lt;div onclick=\"console.log('second div')\"&gt;\n    &lt;button onclick=\"console.log('button')\"&gt;\n      Click!\n    &lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li>A: Outer <code>div</code></li> <li>B: Inner <code>div</code></li> <li>C: <code>button</code></li> <li>D: An array of all nested elements.</li> </ul> Answer <p>  #### Answer: C  The deepest nested element that caused the event is the target of the event. You can stop bubbling by `event.stopPropagation`  </p>"},{"location":"programming/javascript/javascript_questions/#32-when-you-click-the-paragraph-whats-the-logged-output","title":"32. When you click the paragraph, what's the logged output?","text":"<pre><code>&lt;div onclick=\"console.log('div')\"&gt;\n  &lt;p onclick=\"console.log('p')\"&gt;\n    Click here!\n  &lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li>A: <code>p</code> <code>div</code></li> <li>B: <code>div</code> <code>p</code></li> <li>C: <code>p</code></li> <li>D: <code>div</code></li> </ul> Answer <p>  #### Answer: A  If we click `p`, we see two logs: `p` and `div`. During event propagation, there are 3 phases: capturing, target, and bubbling. By default, event handlers are executed in the bubbling phase (unless you set `useCapture` to `true`). It goes from the deepest nested element outwards.  </p>"},{"location":"programming/javascript/javascript_questions/#33-whats-the-output","title":"33. What's the output?","text":"<pre><code>const person = { name: 'Lydia' };\n\nfunction sayHi(age) {\n  return `${this.name} is ${age}`;\n}\n\nconsole.log(sayHi.call(person, 21));\nconsole.log(sayHi.bind(person, 21));\n</code></pre> <ul> <li>A: <code>undefined is 21</code> <code>Lydia is 21</code></li> <li>B: <code>function</code> <code>function</code></li> <li>C: <code>Lydia is 21</code> <code>Lydia is 21</code></li> <li>D: <code>Lydia is 21</code> <code>function</code></li> </ul> Answer <p>  #### Answer: D  With both, we can pass the object to which we want the `this` keyword to refer to. However, `.call` is also _executed immediately_!  `.bind.` returns a _copy_ of the function, but with a bound context! It is not executed immediately.  </p>"},{"location":"programming/javascript/javascript_questions/#34-whats-the-output","title":"34. What's the output?","text":"<pre><code>function sayHi() {\n  return (() =&gt; 0)();\n}\n\nconsole.log(typeof sayHi());\n</code></pre> <ul> <li>A: <code>\"object\"</code></li> <li>B: <code>\"number\"</code></li> <li>C: <code>\"function\"</code></li> <li>D: <code>\"undefined\"</code></li> </ul> Answer <p>  #### Answer: B  The `sayHi` function returns the returned value of the immediately invoked function expression (IIFE). This function returned `0`, which is type `\"number\"`.  FYI: `typeof` can return the following list of values: `undefined`, `boolean`, `number`, `bigint`, `string`, `symbol`, `function` and `object`. Note that `typeof null` returns `\"object\"`.  </p>"},{"location":"programming/javascript/javascript_questions/#35-which-of-these-values-are-falsy","title":"35. Which of these values are falsy?","text":"<pre><code>0;\nnew Number(0);\n('');\n(' ');\nnew Boolean(false);\nundefined;\n</code></pre> <ul> <li>A: <code>0</code>, <code>''</code>, <code>undefined</code></li> <li>B: <code>0</code>, <code>new Number(0)</code>, <code>''</code>, <code>new Boolean(false)</code>, <code>undefined</code></li> <li>C: <code>0</code>, <code>''</code>, <code>new Boolean(false)</code>, <code>undefined</code></li> <li>D: All of them are falsy</li> </ul> Answer <p>  #### Answer: A  There are 8 falsy values:  - `undefined` - `null` - `NaN` - `false` - `''` (empty string) - `0` - `-0` - `0n` (BigInt(0))  Function constructors, like `new Number` and `new Boolean` are truthy.  </p>"},{"location":"programming/javascript/javascript_questions/#36-whats-the-output","title":"36. What's the output?","text":"<pre><code>console.log(typeof typeof 1);\n</code></pre> <ul> <li>A: <code>\"number\"</code></li> <li>B: <code>\"string\"</code></li> <li>C: <code>\"object\"</code></li> <li>D: <code>\"undefined\"</code></li> </ul> Answer <p>  #### Answer: B  `typeof 1` returns `\"number\"`. `typeof \"number\"` returns `\"string\"`  </p>"},{"location":"programming/javascript/javascript_questions/#37-whats-the-output","title":"37. What's the output?","text":"<pre><code>const numbers = [1, 2, 3];\nnumbers[10] = 11;\nconsole.log(numbers);\n</code></pre> <ul> <li>A: <code>[1, 2, 3, null x 7, 11]</code></li> <li>B: <code>[1, 2, 3, 11]</code></li> <li>C: <code>[1, 2, 3, empty x 7, 11]</code></li> <li>D: <code>SyntaxError</code></li> </ul> Answer <p>  #### Answer: C  When you set a value to an element in an array that exceeds the length of the array, JavaScript creates something called \"empty slots\". These actually have the value of `undefined`, but you will see something like:  `[1, 2, 3, empty x 7, 11]`  depending on where you run it (it's different for every browser, node, etc.)  </p>"},{"location":"programming/javascript/javascript_questions/#38-whats-the-output","title":"38. What's the output?","text":"<pre><code>(() =&gt; {\n  let x, y;\n  try {\n    throw new Error();\n  } catch (x) {\n    (x = 1), (y = 2);\n    console.log(x);\n  }\n  console.log(x);\n  console.log(y);\n})();\n</code></pre> <ul> <li>A: <code>1</code> <code>undefined</code> <code>2</code></li> <li>B: <code>undefined</code> <code>undefined</code> <code>undefined</code></li> <li>C: <code>1</code> <code>1</code> <code>2</code></li> <li>D: <code>1</code> <code>undefined</code> <code>undefined</code></li> </ul> Answer <p>  #### Answer: A  The `catch` block receives the argument `x`. This is not the same `x` as the variable when we pass arguments. This variable `x` is block-scoped.  Later, we set this block-scoped variable equal to `1`, and set the value of the variable `y`. Now, we log the block-scoped variable `x`, which is equal to `1`.  Outside of the `catch` block, `x` is still `undefined`, and `y` is `2`. When we want to `console.log(x)` outside of the `catch` block, it returns `undefined`, and `y` returns `2`.  </p>"},{"location":"programming/javascript/javascript_questions/#39-everything-in-javascript-is-either-a","title":"39. Everything in JavaScript is either a...","text":"<ul> <li>A: primitive or object</li> <li>B: function or object</li> <li>C: trick question! only objects</li> <li>D: number or object</li> </ul> Answer <p>  #### Answer: A  JavaScript only has primitive types and objects.  Primitive types are `boolean`, `null`, `undefined`, `bigint`, `number`, `string`, and `symbol`.  What differentiates a primitive from an object is that primitives do not have any properties or methods; however, you'll note that `'foo'.toUpperCase()` evaluates to `'FOO'` and does not result in a `TypeError`. This is because when you try to access a property or method on a primitive like a string, JavaScript will implicitly wrap the primitive type using one of the wrapper classes, i.e. `String`, and then immediately discard the wrapper after the expression evaluates. All primitives except for `null` and `undefined` exhibit this behaviour.  </p>"},{"location":"programming/javascript/javascript_questions/#40-whats-the-output","title":"40. What's the output?","text":"<pre><code>[[0, 1], [2, 3]].reduce(\n  (acc, cur) =&gt; {\n    return acc.concat(cur);\n  },\n  [1, 2],\n);\n</code></pre> <ul> <li>A: <code>[0, 1, 2, 3, 1, 2]</code></li> <li>B: <code>[6, 1, 2]</code></li> <li>C: <code>[1, 2, 0, 1, 2, 3]</code></li> <li>D: <code>[1, 2, 6]</code></li> </ul> Answer <p>  #### Answer: C  `[1, 2]` is our initial value. This is the value we start with, and the value of the very first `acc`. During the first round, `acc` is `[1,2]`, and `cur` is `[0, 1]`. We concatenate them, which results in `[1, 2, 0, 1]`.  Then, `[1, 2, 0, 1]` is `acc` and `[2, 3]` is `cur`. We concatenate them, and get `[1, 2, 0, 1, 2, 3]`  </p>"},{"location":"programming/javascript/javascript_questions/#41-whats-the-output","title":"41. What's the output?","text":"<pre><code>!!null;\n!!'';\n!!1;\n</code></pre> <ul> <li>A: <code>false</code> <code>true</code> <code>false</code></li> <li>B: <code>false</code> <code>false</code> <code>true</code></li> <li>C: <code>false</code> <code>true</code> <code>true</code></li> <li>D: <code>true</code> <code>true</code> <code>false</code></li> </ul> Answer <p>  #### Answer: B  `null` is falsy. `!null` returns `true`. `!true` returns `false`.  `\"\"` is falsy. `!\"\"` returns `true`. `!true` returns `false`.  `1` is truthy. `!1` returns `false`. `!false` returns `true`.  </p>"},{"location":"programming/javascript/javascript_questions/#42-what-does-the-setinterval-method-return-in-the-browser","title":"42. What does the <code>setInterval</code> method return in the browser?","text":"<pre><code>setInterval(() =&gt; console.log('Hi'), 1000);\n</code></pre> <ul> <li>A: a unique id</li> <li>B: the amount of milliseconds specified</li> <li>C: the passed function</li> <li>D: <code>undefined</code></li> </ul> Answer <p>  #### Answer: A  It returns a unique id. This id can be used to clear that interval with the `clearInterval()` function.  </p>"},{"location":"programming/javascript/javascript_questions/#43-what-does-this-return","title":"43. What does this return?","text":"<pre><code>[...'Lydia'];\n</code></pre> <ul> <li>A: <code>[\"L\", \"y\", \"d\", \"i\", \"a\"]</code></li> <li>B: <code>[\"Lydia\"]</code></li> <li>C: <code>[[], \"Lydia\"]</code></li> <li>D: <code>[[\"L\", \"y\", \"d\", \"i\", \"a\"]]</code></li> </ul> Answer <p>  #### Answer: A  A string is an iterable. The spread operator maps every character of an iterable to one element.  </p>"},{"location":"programming/javascript/javascript_questions/#44-whats-the-output","title":"44. What's the output?","text":"<pre><code>function* generator(i) {\n  yield i;\n  yield i * 2;\n}\n\nconst gen = generator(10);\n\nconsole.log(gen.next().value);\nconsole.log(gen.next().value);\n</code></pre> <ul> <li>A: <code>[0, 10], [10, 20]</code></li> <li>B: <code>20, 20</code></li> <li>C: <code>10, 20</code></li> <li>D: <code>0, 10 and 10, 20</code></li> </ul> Answer <p>  #### Answer: C  Regular functions cannot be stopped mid-way after invocation. However, a generator function can be \"stopped\" midway, and later continue from where it stopped. Every time a generator function encounters a `yield` keyword, the function yields the value specified after it. Note that the generator function in that case doesn\u2019t _return_ the value, it _yields_ the value.  First, we initialize the generator function with `i` equal to `10`. We invoke the generator function using the `next()` method. The first time we invoke the generator function, `i` is equal to `10`. It encounters the first `yield` keyword: it yields the value of `i`. The generator is now \"paused\", and `10` gets logged.  Then, we invoke the function again with the `next()` method. It starts to continue where it stopped previously, still with `i` equal to `10`. Now, it encounters the next `yield` keyword, and yields `i * 2`. `i` is equal to `10`, so it returns `10 * 2`, which is `20`. This results in `10, 20`.  </p>"},{"location":"programming/javascript/javascript_questions/#45-what-does-this-return","title":"45. What does this return?","text":"<pre><code>const firstPromise = new Promise((res, rej) =&gt; {\n  setTimeout(res, 500, 'one');\n});\n\nconst secondPromise = new Promise((res, rej) =&gt; {\n  setTimeout(res, 100, 'two');\n});\n\nPromise.race([firstPromise, secondPromise]).then(res =&gt; console.log(res));\n</code></pre> <ul> <li>A: <code>\"one\"</code></li> <li>B: <code>\"two\"</code></li> <li>C: <code>\"two\" \"one\"</code></li> <li>D: <code>\"one\" \"two\"</code></li> </ul> Answer <p>  #### Answer: B  When we pass multiple promises to the `Promise.race` method, it resolves/rejects the _first_ promise that resolves/rejects. To the `setTimeout` method, we pass a timer: 500ms for the first promise (`firstPromise`), and 100ms for the second promise (`secondPromise`). This means that the `secondPromise` resolves first with the value of `'two'`. `res` now holds the value of `'two'`, which gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#46-whats-the-output","title":"46. What's the output?","text":"<pre><code>let person = { name: 'Lydia' };\nconst members = [person];\nperson = null;\n\nconsole.log(members);\n</code></pre> <ul> <li>A: <code>null</code></li> <li>B: <code>[null]</code></li> <li>C: <code>[{}]</code></li> <li>D: <code>[{ name: \"Lydia\" }]</code></li> </ul> Answer <p>  #### Answer: D  First, we declare a variable `person` with the value of an object that has a `name` property.    Then, we declare a variable called `members`. We set the first element of that array equal to the value of the `person` variable. Objects interact by _reference_ when setting them equal to each other. When you assign a reference from one variable to another, you make a _copy_ of that reference. (note that they don't have the _same_ reference!)    Then, we set the variable `person` equal to `null`.    We are only modifying the value of the `person` variable, and not the first element in the array, since that element has a different (copied) reference to the object. The first element in `members` still holds its reference to the original object. When we log the `members` array, the first element still holds the value of the object, which gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#47-whats-the-output","title":"47. What's the output?","text":"<pre><code>const person = {\n  name: 'Lydia',\n  age: 21,\n};\n\nfor (const item in person) {\n  console.log(item);\n}\n</code></pre> <ul> <li>A: <code>{ name: \"Lydia\" }, { age: 21 }</code></li> <li>B: <code>\"name\", \"age\"</code></li> <li>C: <code>\"Lydia\", 21</code></li> <li>D: <code>[\"name\", \"Lydia\"], [\"age\", 21]</code></li> </ul> Answer <p>  #### Answer: B  With a `for-in` loop, we can iterate through object keys, in this case `name` and `age`. Under the hood, object keys are strings (if they're not a Symbol). On every loop, we set the value of `item` equal to the current key it\u2019s iterating over. First, `item` is equal to `name`, and gets logged. Then, `item` is equal to `age`, which gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#48-whats-the-output","title":"48. What's the output?","text":"<pre><code>console.log(3 + 4 + '5');\n</code></pre> <ul> <li>A: <code>\"345\"</code></li> <li>B: <code>\"75\"</code></li> <li>C: <code>12</code></li> <li>D: <code>\"12\"</code></li> </ul> Answer <p>  #### Answer: B  Operator associativity is the order in which the compiler evaluates the expressions, either left-to-right or right-to-left. This only happens if all operators have the _same_ precedence. We only have one type of operator: `+`. For addition, the associativity is left-to-right.  `3 + 4` gets evaluated first. This results in the number `7`.  `7 + '5'` results in `\"75\"` because of coercion. JavaScript converts the number `7` into a string, see question 15. We can concatenate two strings using the `+`operator. `\"7\" + \"5\"` results in `\"75\"`.  </p>"},{"location":"programming/javascript/javascript_questions/#49-whats-the-value-of-num","title":"49. What's the value of <code>num</code>?","text":"<pre><code>const num = parseInt('7*6', 10);\n</code></pre> <ul> <li>A: <code>42</code></li> <li>B: <code>\"42\"</code></li> <li>C: <code>7</code></li> <li>D: <code>NaN</code></li> </ul> Answer <p>  #### Answer: C  Only the first numbers in the string is returned. Based on the _radix_ (the second argument in order to specify what type of number we want to parse it to: base 10, hexadecimal, octal, binary, etc.), the `parseInt` checks whether the characters in the string are valid. Once it encounters a character that isn't a valid number in the radix, it stops parsing and ignores the following characters.  `*` is not a valid number. It only parses `\"7\"` into the decimal `7`. `num` now holds the value of `7`.  </p>"},{"location":"programming/javascript/javascript_questions/#50-whats-the-output","title":"50. What's the output?","text":"<pre><code>[1, 2, 3].map(num =&gt; {\n  if (typeof num === 'number') return;\n  return num * 2;\n});\n</code></pre> <ul> <li>A: <code>[]</code></li> <li>B: <code>[null, null, null]</code></li> <li>C: <code>[undefined, undefined, undefined]</code></li> <li>D: <code>[ 3 x empty ]</code></li> </ul> Answer <p>  #### Answer: C  When mapping over the array, the value of `num` is equal to the element it\u2019s currently looping over. In this case, the elements are numbers, so the condition of the if statement `typeof num === \"number\"` returns `true`. The map function creates a new array and inserts the values returned from the function.  However, we don\u2019t return a value. When we don\u2019t return a value from the function, the function returns `undefined`. For every element in the array, the function block gets called, so for each element we return `undefined`.  </p>"},{"location":"programming/javascript/javascript_questions/#51-whats-the-output","title":"51. What's the output?","text":"<pre><code>function getInfo(member, year) {\n  member.name = 'Lydia';\n  year = '1998';\n}\n\nconst person = { name: 'Sarah' };\nconst birthYear = '1997';\n\ngetInfo(person, birthYear);\n\nconsole.log(person, birthYear);\n</code></pre> <ul> <li>A: <code>{ name: \"Lydia\" }, \"1997\"</code></li> <li>B: <code>{ name: \"Sarah\" }, \"1998\"</code></li> <li>C: <code>{ name: \"Lydia\" }, \"1998\"</code></li> <li>D: <code>{ name: \"Sarah\" }, \"1997\"</code></li> </ul> Answer <p>  #### Answer: A  Arguments are passed by _value_, unless their value is an object, then they're passed by _reference_. `birthYear` is passed by value, since it's a string, not an object. When we pass arguments by value, a _copy_ of that value is created (see question 46).  The variable `birthYear` has a reference to the value `\"1997\"`. The argument `year` also has a reference to the value `\"1997\"`, but it's not the same value as `birthYear` has a reference to. When we update the value of `year` by setting `year` equal to `\"1998\"`, we are only updating the value of `year`. `birthYear` is still equal to `\"1997\"`.  The value of `person` is an object. The argument `member` has a (copied) reference to the _same_ object. When we modify a property of the object `member` has a reference to, the value of `person` will also be modified, since they both have a reference to the same object. `person`'s `name` property is now equal to the value `\"Lydia\"`  </p>"},{"location":"programming/javascript/javascript_questions/#52-whats-the-output","title":"52. What's the output?","text":"<pre><code>function greeting() {\n  throw 'Hello world!';\n}\n\nfunction sayHi() {\n  try {\n    const data = greeting();\n    console.log('It worked!', data);\n  } catch (e) {\n    console.log('Oh no an error:', e);\n  }\n}\n\nsayHi();\n</code></pre> <ul> <li>A: <code>It worked! Hello world!</code></li> <li>B: <code>Oh no an error: undefined</code></li> <li>C: <code>SyntaxError: can only throw Error objects</code></li> <li>D: <code>Oh no an error: Hello world!</code></li> </ul> Answer <p>  #### Answer: D  With the `throw` statement, we can create custom errors. With this statement, you can throw exceptions. An exception can be a string, a number, a boolean or an object. In this case, our exception is the string `'Hello world!'`.  With the `catch` statement, we can specify what to do if an exception is thrown in the `try` block. An exception is thrown: the string `'Hello world!'`. `e` is now equal to that string, which we log. This results in `'Oh an error: Hello world!'`.  </p>"},{"location":"programming/javascript/javascript_questions/#53-whats-the-output","title":"53. What's the output?","text":"<pre><code>function Car() {\n  this.make = 'Lamborghini';\n  return { make: 'Maserati' };\n}\n\nconst myCar = new Car();\nconsole.log(myCar.make);\n</code></pre> <ul> <li>A: <code>\"Lamborghini\"</code></li> <li>B: <code>\"Maserati\"</code></li> <li>C: <code>ReferenceError</code></li> <li>D: <code>TypeError</code></li> </ul> Answer <p>  #### Answer: B  When a constructor function is called with the `new` keyword, it creates an object and sets the `this` keyword to refer to that object. By default, if the constructor function doesn't explicitly return anything, it will return the newly created object.  In this case, the constructor function `Car` explicitly returns a new object with `make` set to `\"Maserati\"`, which overrides the default behavior. Therefore, when `new Car()` is called, the _returned_ object is assigned to `myCar`, resulting in the output being `\"Maserati\"` when `myCar.make` is accessed.  </p>"},{"location":"programming/javascript/javascript_questions/#54-whats-the-output","title":"54. What's the output?","text":"<pre><code>(() =&gt; {\n  let x = (y = 10);\n})();\n\nconsole.log(typeof x);\nconsole.log(typeof y);\n</code></pre> <ul> <li>A: <code>\"undefined\", \"number\"</code></li> <li>B: <code>\"number\", \"number\"</code></li> <li>C: <code>\"object\", \"number\"</code></li> <li>D: <code>\"number\", \"undefined\"</code></li> </ul> Answer <p>  #### Answer: A  `let x = (y = 10);` is actually shorthand for:   <pre><code>y = 10;\nlet x = y;\n</code></pre>   When we set `y` equal to `10`, we actually add a property `y` to the global object (`window` in browser, `global` in Node). In a browser, `window.y` is now equal to `10`.  Then, we declare a variable `x` with the value of `y`, which is `10`. Variables declared with the `let` keyword are _block scoped_, they are only defined within the block they're declared in; the immediately invoked function expression (IIFE) in this case. When we use the `typeof` operator, the operand `x` is not defined: we are trying to access `x` outside of the block it's declared in. This means that `x` is not defined. Values who haven't been assigned a value or declared are of type `\"undefined\"`. `console.log(typeof x)` returns `\"undefined\"`.  However, we created a global variable `y` when setting `y` equal to `10`. This value is accessible anywhere in our code. `y` is defined, and holds a value of type `\"number\"`. `console.log(typeof y)` returns `\"number\"`.  </p>"},{"location":"programming/javascript/javascript_questions/#55-whats-the-output","title":"55. What's the output?","text":"<pre><code>class Dog {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nDog.prototype.bark = function() {\n  console.log(`Woof I am ${this.name}`);\n};\n\nconst pet = new Dog('Mara');\n\npet.bark();\n\ndelete Dog.prototype.bark;\n\npet.bark();\n</code></pre> <ul> <li>A: <code>\"Woof I am Mara\"</code>, <code>TypeError</code></li> <li>B: <code>\"Woof I am Mara\"</code>, <code>\"Woof I am Mara\"</code></li> <li>C: <code>\"Woof I am Mara\"</code>, <code>undefined</code></li> <li>D: <code>TypeError</code>, <code>TypeError</code></li> </ul> Answer <p>  #### Answer: A  We can delete properties from objects using the `delete` keyword, also on the prototype. By deleting a property on the prototype, it is not available anymore in the prototype chain. In this case, the `bark` function is not available anymore on the prototype after `delete Dog.prototype.bark`, yet we still try to access it.  When we try to invoke something that is not a function, a `TypeError` is thrown. In this case `TypeError: pet.bark is not a function`, since `pet.bark` is `undefined`.  </p>"},{"location":"programming/javascript/javascript_questions/#56-whats-the-output","title":"56. What's the output?","text":"<pre><code>const set = new Set([1, 1, 2, 3, 4]);\n\nconsole.log(set);\n</code></pre> <ul> <li>A: <code>[1, 1, 2, 3, 4]</code></li> <li>B: <code>[1, 2, 3, 4]</code></li> <li>C: <code>{1, 1, 2, 3, 4}</code></li> <li>D: <code>{1, 2, 3, 4}</code></li> </ul> Answer <p>  #### Answer: D  The `Set` object is a collection of _unique_ values: a value can only occur once in a set.  We passed the iterable `[1, 1, 2, 3, 4]` with a duplicate value `1`. Since we cannot have two of the same values in a set, one of them is removed. This results in `{1, 2, 3, 4}`.  </p>"},{"location":"programming/javascript/javascript_questions/#57-whats-the-output","title":"57. What's the output?","text":"<pre><code>// counter.js\nlet counter = 10;\nexport default counter;\n</code></pre> <pre><code>// index.js\nimport myCounter from './counter';\n\nmyCounter += 1;\n\nconsole.log(myCounter);\n</code></pre> <ul> <li>A: <code>10</code></li> <li>B: <code>11</code></li> <li>C: <code>Error</code></li> <li>D: <code>NaN</code></li> </ul> Answer <p>  #### Answer: C  An imported module is _read-only_: you cannot modify the imported module. Only the module that exports them can change its value.  When we try to increment the value of `myCounter`, it throws an error: `myCounter` is read-only and cannot be modified.  </p>"},{"location":"programming/javascript/javascript_questions/#58-whats-the-output","title":"58. What's the output?","text":"<pre><code>const name = 'Lydia';\nage = 21;\n\nconsole.log(delete name);\nconsole.log(delete age);\n</code></pre> <ul> <li>A: <code>false</code>, <code>true</code></li> <li>B: <code>\"Lydia\"</code>, <code>21</code></li> <li>C: <code>true</code>, <code>true</code></li> <li>D: <code>undefined</code>, <code>undefined</code></li> </ul> Answer <p>  #### Answer: A  The `delete` operator returns a boolean value: `true` on a successful deletion, else it'll return `false`. However, variables declared with the `var`, `const` or `let` keyword cannot be deleted using the `delete` operator.  The `name` variable was declared with a `const` keyword, so its deletion is not successful: `false` is returned. When we set `age` equal to `21`, we actually added a property called `age` to the global object. You can successfully delete properties from objects this way, also the global object, so `delete age` returns `true`.  </p>"},{"location":"programming/javascript/javascript_questions/#59-whats-the-output","title":"59. What's the output?","text":"<pre><code>const numbers = [1, 2, 3, 4, 5];\nconst [y] = numbers;\n\nconsole.log(y);\n</code></pre> <ul> <li>A: <code>[[1, 2, 3, 4, 5]]</code></li> <li>B: <code>[1, 2, 3, 4, 5]</code></li> <li>C: <code>1</code></li> <li>D: <code>[1]</code></li> </ul> Answer <p>  #### Answer: C  We can unpack values from arrays or properties from objects through destructuring. For example:   <pre><code>[a, b] = [1, 2];\n</code></pre>   The value of `a` is now `1`, and the value of `b` is now `2`. What we actually did in the question, is:   <pre><code>[y] = [1, 2, 3, 4, 5];\n</code></pre>   This means that the value of `y` is equal to the first value in the array, which is the number `1`. When we log `y`, `1` is returned.  </p>"},{"location":"programming/javascript/javascript_questions/#60-whats-the-output","title":"60. What's the output?","text":"<pre><code>const user = { name: 'Lydia', age: 21 };\nconst admin = { admin: true, ...user };\n\nconsole.log(admin);\n</code></pre> <ul> <li>A: <code>{ admin: true, user: { name: \"Lydia\", age: 21 } }</code></li> <li>B: <code>{ admin: true, name: \"Lydia\", age: 21 }</code></li> <li>C: <code>{ admin: true, user: [\"Lydia\", 21] }</code></li> <li>D: <code>{ admin: true }</code></li> </ul> Answer <p>  #### Answer: B  It's possible to combine objects using the spread operator `...`. It lets you create copies of the key/value pairs of one object, and add them to another object. In this case, we create copies of the `user` object, and add them to the `admin` object. The `admin` object now contains the copied key/value pairs, which results in `{ admin: true, name: \"Lydia\", age: 21 }`.  </p>"},{"location":"programming/javascript/javascript_questions/#61-whats-the-output","title":"61. What's the output?","text":"<pre><code>const person = { name: 'Lydia' };\n\nObject.defineProperty(person, 'age', { value: 21 });\n\nconsole.log(person);\nconsole.log(Object.keys(person));\n</code></pre> <ul> <li>A: <code>{ name: \"Lydia\", age: 21 }</code>, <code>[\"name\", \"age\"]</code></li> <li>B: <code>{ name: \"Lydia\", age: 21 }</code>, <code>[\"name\"]</code></li> <li>C: <code>{ name: \"Lydia\"}</code>, <code>[\"name\", \"age\"]</code></li> <li>D: <code>{ name: \"Lydia\"}</code>, <code>[\"age\"]</code></li> </ul> Answer <p>  #### Answer: B  With the `defineProperty` method, we can add new properties to an object, or modify existing ones. When we add a property to an object using the `defineProperty` method, they are by default _not enumerable_. The `Object.keys` method returns all _enumerable_ property names from an object, in this case only `\"name\"`.  Properties added using the `defineProperty` method are immutable by default. You can override this behavior using the `writable`, `configurable` and `enumerable` properties. This way, the `defineProperty` method gives you a lot more control over the properties you're adding to an object.  </p>"},{"location":"programming/javascript/javascript_questions/#62-whats-the-output","title":"62. What's the output?","text":"<pre><code>const settings = {\n  username: 'lydiahallie',\n  level: 19,\n  health: 90,\n};\n\nconst data = JSON.stringify(settings, ['level', 'health']);\nconsole.log(data);\n</code></pre> <ul> <li>A: <code>\"{\"level\":19, \"health\":90}\"</code></li> <li>B: <code>\"{\"username\": \"lydiahallie\"}\"</code></li> <li>C: <code>\"[\"level\", \"health\"]\"</code></li> <li>D: <code>\"{\"username\": \"lydiahallie\", \"level\":19, \"health\":90}\"</code></li> </ul> Answer <p>  #### Answer: A  The second argument of `JSON.stringify` is the _replacer_. The replacer can either be a function or an array, and lets you control what and how the values should be stringified.  If the replacer is an _array_, only the property names included in the array will be added to the JSON string. In this case, only the properties with the names `\"level\"` and `\"health\"` are included, `\"username\"` is excluded. `data` is now equal to `\"{\"level\":19, \"health\":90}\"`.  If the replacer is a _function_, this function gets called on every property in the object you're stringifying. The value returned from this function will be the value of the property when it's added to the JSON string. If the value is `undefined`, this property is excluded from the JSON string.  </p>"},{"location":"programming/javascript/javascript_questions/#63-whats-the-output","title":"63. What's the output?","text":"<pre><code>let num = 10;\n\nconst increaseNumber = () =&gt; num++;\nconst increasePassedNumber = number =&gt; number++;\n\nconst num1 = increaseNumber();\nconst num2 = increasePassedNumber(num1);\n\nconsole.log(num1);\nconsole.log(num2);\n</code></pre> <ul> <li>A: <code>10</code>, <code>10</code></li> <li>B: <code>10</code>, <code>11</code></li> <li>C: <code>11</code>, <code>11</code></li> <li>D: <code>11</code>, <code>12</code></li> </ul> Answer <p>  #### Answer: A  The unary operator `++` _first returns_ the value of the operand, _then increments_ the value of the operand. The value of `num1` is `10`, since the `increaseNumber` function first returns the value of `num`, which is `10`, and only increments the value of `num` afterwards.  `num2` is `10`, since we passed `num1` to the `increasePassedNumber`. `number` is equal to `10`(the value of `num1`. Again, the unary operator `++` _first returns_ the value of the operand, _then increments_ the value of the operand. The value of `number` is `10`, so `num2` is equal to `10`.  </p>"},{"location":"programming/javascript/javascript_questions/#64-whats-the-output","title":"64. What's the output?","text":"<pre><code>const value = { number: 10 };\n\nconst multiply = (x = { ...value }) =&gt; {\n  console.log((x.number *= 2));\n};\n\nmultiply();\nmultiply();\nmultiply(value);\nmultiply(value);\n</code></pre> <ul> <li>A: <code>20</code>, <code>40</code>, <code>80</code>, <code>160</code></li> <li>B: <code>20</code>, <code>40</code>, <code>20</code>, <code>40</code></li> <li>C: <code>20</code>, <code>20</code>, <code>20</code>, <code>40</code></li> <li>D: <code>NaN</code>, <code>NaN</code>, <code>20</code>, <code>40</code></li> </ul> Answer <p>  #### Answer: C  In ES6, we can initialize parameters with a default value. The value of the parameter will be the default value, if no other value has been passed to the function, or if the value of the parameter is `\"undefined\"`. In this case, we spread the properties of the `value` object into a new object, so `x` has the default value of `{ number: 10 }`.  The default argument is evaluated at _call time_! Every time we call the function, a _new_ object is created. We invoke the `multiply` function the first two times without passing a value: `x` has the default value of `{ number: 10 }`. We then log the multiplied value of that number, which is `20`.  The third time we invoke multiply, we do pass an argument: the object called `value`. The `*=` operator is actually shorthand for `x.number = x.number * 2`: we modify the value of `x.number`, and log the multiplied value `20`.  The fourth time, we pass the `value` object again. `x.number` was previously modified to `20`, so `x.number *= 2` logs `40`.  </p>"},{"location":"programming/javascript/javascript_questions/#65-whats-the-output","title":"65. What's the output?","text":"<pre><code>[1, 2, 3, 4].reduce((x, y) =&gt; console.log(x, y));\n</code></pre> <ul> <li>A: <code>1</code> <code>2</code> and <code>3</code> <code>3</code> and <code>6</code> <code>4</code></li> <li>B: <code>1</code> <code>2</code> and <code>2</code> <code>3</code> and <code>3</code> <code>4</code></li> <li>C: <code>1</code> <code>undefined</code> and <code>2</code> <code>undefined</code> and <code>3</code> <code>undefined</code> and <code>4</code> <code>undefined</code></li> <li>D: <code>1</code> <code>2</code> and <code>undefined</code> <code>3</code> and <code>undefined</code> <code>4</code></li> </ul> Answer <p>  #### Answer: D  The first argument that the `reduce` method receives is the _accumulator_, `x` in this case. The second argument is the _current value_, `y`. With the reduce method, we execute a callback function on every element in the array, which could ultimately result in one single value.  In this example, we are not returning any values, we are simply logging the values of the accumulator and the current value.  The value of the accumulator is equal to the previously returned value of the callback function. If you don't pass the optional `initialValue` argument to the `reduce` method, the accumulator is equal to the first element on the first call.  On the first call, the accumulator (`x`) is `1`, and the current value (`y`) is `2`. We don't return from the callback function, we log the accumulator and current value: `1` and `2` get logged.  If you don't return a value from a function, it returns `undefined`. On the next call, the accumulator is `undefined`, and the current value is `3`. `undefined` and `3` get logged.  On the fourth call, we again don't return from the callback function. The accumulator is again `undefined`, and the current value is `4`. `undefined` and `4` get logged.  </p>"},{"location":"programming/javascript/javascript_questions/#66-with-which-constructor-can-we-successfully-extend-the-dog-class","title":"66. With which constructor can we successfully extend the <code>Dog</code> class?","text":"<pre><code>class Dog {\n  constructor(name) {\n    this.name = name;\n  }\n};\n\nclass Labrador extends Dog {\n  // 1\n  constructor(name, size) {\n    this.size = size;\n  }\n  // 2\n  constructor(name, size) {\n    super(name);\n    this.size = size;\n  }\n  // 3\n  constructor(size) {\n    super(name);\n    this.size = size;\n  }\n  // 4\n  constructor(name, size) {\n    this.name = name;\n    this.size = size;\n  }\n\n};\n</code></pre> <ul> <li>A: 1</li> <li>B: 2</li> <li>C: 3</li> <li>D: 4</li> </ul> Answer <p>  #### Answer: B  In a derived class, you cannot access the `this` keyword before calling `super`. If you try to do that, it will throw a ReferenceError: 1 and 4 would throw a reference error.  With the `super` keyword, we call that parent class's constructor with the given arguments. The parent's constructor receives the `name` argument, so we need to pass `name` to `super`.  The `Labrador` class receives two arguments, `name` since it extends `Dog`, and `size` as an extra property on the `Labrador` class. They both need to be passed to the constructor function on `Labrador`, which is done correctly using constructor 2.  </p>"},{"location":"programming/javascript/javascript_questions/#67-whats-the-output","title":"67. What's the output?","text":"<pre><code>// index.js\nconsole.log('running index.js');\nimport { sum } from './sum.js';\nconsole.log(sum(1, 2));\n\n// sum.js\nconsole.log('running sum.js');\nexport const sum = (a, b) =&gt; a + b;\n</code></pre> <ul> <li>A: <code>running index.js</code>, <code>running sum.js</code>, <code>3</code></li> <li>B: <code>running sum.js</code>, <code>running index.js</code>, <code>3</code></li> <li>C: <code>running sum.js</code>, <code>3</code>, <code>running index.js</code></li> <li>D: <code>running index.js</code>, <code>undefined</code>, <code>running sum.js</code></li> </ul> Answer <p>  #### Answer: B  With the `import` keyword, all imported modules are _pre-parsed_. This means that the imported modules get run _first_, the code in the file which imports the module gets executed _after_.  This is a difference between `require()` in CommonJS and `import`! With `require()`, you can load dependencies on demand while the code is being run. If we would have used `require` instead of `import`, `running index.js`, `running sum.js`, `3` would have been logged to the console.  </p>"},{"location":"programming/javascript/javascript_questions/#68-whats-the-output","title":"68. What's the output?","text":"<pre><code>console.log(Number(2) === Number(2));\nconsole.log(Boolean(false) === Boolean(false));\nconsole.log(Symbol('foo') === Symbol('foo'));\n</code></pre> <ul> <li>A: <code>true</code>, <code>true</code>, <code>false</code></li> <li>B: <code>false</code>, <code>true</code>, <code>false</code></li> <li>C: <code>true</code>, <code>false</code>, <code>true</code></li> <li>D: <code>true</code>, <code>true</code>, <code>true</code></li> </ul> Answer <p>  #### Answer: A  Every Symbol is entirely unique. The purpose of the argument passed to the Symbol is to give the Symbol a description. The value of the Symbol is not dependent on the passed argument. As we test equality, we are creating two entirely new symbols: the first `Symbol('foo')`, and the second `Symbol('foo')`. These two values are unique and not equal to each other, `Symbol('foo') === Symbol('foo')` returns `false`.  </p>"},{"location":"programming/javascript/javascript_questions/#69-whats-the-output","title":"69. What's the output?","text":"<pre><code>const name = 'Lydia Hallie';\nconsole.log(name.padStart(13));\nconsole.log(name.padStart(2));\n</code></pre> <ul> <li>A: <code>\"Lydia Hallie\"</code>, <code>\"Lydia Hallie\"</code></li> <li>B: <code>\" Lydia Hallie\"</code>, <code>\" Lydia Hallie\"</code> (<code>\"[13x whitespace]Lydia Hallie\"</code>, <code>\"[2x whitespace]Lydia Hallie\"</code>)</li> <li>C: <code>\" Lydia Hallie\"</code>, <code>\"Lydia Hallie\"</code> (<code>\"[1x whitespace]Lydia Hallie\"</code>, <code>\"Lydia Hallie\"</code>)</li> <li>D: <code>\"Lydia Hallie\"</code>, <code>\"Lyd\"</code>,</li> </ul> Answer <p>  #### Answer: C  With the `padStart` method, we can add padding to the beginning of a string. The value passed to this method is the _total_ length of the string together with the padding. The string `\"Lydia Hallie\"` has a length of `12`. `name.padStart(13)` inserts 1 space at the start of the string, because 12 + 1 is 13.  If the argument passed to the `padStart` method is smaller than the length of the array, no padding will be added.  </p>"},{"location":"programming/javascript/javascript_questions/#70-whats-the-output","title":"70. What's the output?","text":"<pre><code>console.log('\ud83e\udd51' + '\ud83d\udcbb');\n</code></pre> <ul> <li>A: <code>\"\ud83e\udd51\ud83d\udcbb\"</code></li> <li>B: <code>257548</code></li> <li>C: A string containing their code points</li> <li>D: Error</li> </ul> Answer <p>  #### Answer: A  With the `+` operator, you can concatenate strings. In this case, we are concatenating the string `\"\ud83e\udd51\"` with the string `\"\ud83d\udcbb\"`, resulting in `\"\ud83e\udd51\ud83d\udcbb\"`.  </p>"},{"location":"programming/javascript/javascript_questions/#71-how-can-we-log-the-values-that-are-commented-out-after-the-consolelog-statement","title":"71. How can we log the values that are commented out after the console.log statement?","text":"<pre><code>function* startGame() {\n  const answer = yield 'Do you love JavaScript?';\n  if (answer !== 'Yes') {\n    return \"Oh wow... Guess we're done here\";\n  }\n  return 'JavaScript loves you back \u2764\ufe0f';\n}\n\nconst game = startGame();\nconsole.log(/* 1 */); // Do you love JavaScript?\nconsole.log(/* 2 */); // JavaScript loves you back \u2764\ufe0f\n</code></pre> <ul> <li>A: <code>game.next(\"Yes\").value</code> and <code>game.next().value</code></li> <li>B: <code>game.next.value(\"Yes\")</code> and <code>game.next.value()</code></li> <li>C: <code>game.next().value</code> and <code>game.next(\"Yes\").value</code></li> <li>D: <code>game.next.value()</code> and <code>game.next.value(\"Yes\")</code></li> </ul> Answer <p>  #### Answer: C  A generator function \"pauses\" its execution when it sees the `yield` keyword. First, we have to let the function yield the string \"Do you love JavaScript?\", which can be done by calling `game.next().value`.  Every line is executed, until it finds the first `yield` keyword. There is a `yield` keyword on the first line within the function: the execution stops with the first yield! _This means that the variable `answer` is not defined yet!_  When we call `game.next(\"Yes\").value`, the previous `yield` is replaced with the value of the parameters passed to the `next()` function, `\"Yes\"` in this case. The value of the variable `answer` is now equal to `\"Yes\"`. The condition of the if-statement returns `false`, and `JavaScript loves you back \u2764\ufe0f` gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#72-whats-the-output","title":"72. What's the output?","text":"<pre><code>console.log(String.raw`Hello\\nworld`);\n</code></pre> <ul> <li>A: <code>Hello world!</code></li> <li>B: <code>Hello</code> <code>world</code></li> <li>C: <code>Hello\\nworld</code></li> <li>D: <code>Hello\\n</code> <code>world</code></li> </ul> Answer <p>  #### Answer: C  `String.raw` returns a string where the escapes (`\\n`, `\\v`, `\\t` etc.) are ignored! Backslashes can be an issue since you could end up with something like:  `` const path = `C:\\Documents\\Projects\\table.html` ``  Which would result in:  `\"C:DocumentsProjects able.html\"`  With `String.raw`, it would simply ignore the escape and print:  `C:\\Documents\\Projects\\table.html`  In this case, the string is `Hello\\nworld`, which gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#73-whats-the-output","title":"73. What's the output?","text":"<pre><code>async function getData() {\n  return await Promise.resolve('I made it!');\n}\n\nconst data = getData();\nconsole.log(data);\n</code></pre> <ul> <li>A: <code>\"I made it!\"</code></li> <li>B: <code>Promise {&lt;resolved&gt;: \"I made it!\"}</code></li> <li>C: <code>Promise {&lt;pending&gt;}</code></li> <li>D: <code>undefined</code></li> </ul> Answer <p>  #### Answer: C  An async function always returns a promise. The `await` still has to wait for the promise to resolve: a pending promise gets returned when we call `getData()` in order to set `data` equal to it.  If we wanted to get access to the resolved value `\"I made it\"`, we could have used the `.then()` method on `data`:  `data.then(res =&gt; console.log(res))`  This would've logged `\"I made it!\"`  </p>"},{"location":"programming/javascript/javascript_questions/#74-whats-the-output","title":"74. What's the output?","text":"<pre><code>function addToList(item, list) {\n  return list.push(item);\n}\n\nconst result = addToList('apple', ['banana']);\nconsole.log(result);\n</code></pre> <ul> <li>A: <code>['apple', 'banana']</code></li> <li>B: <code>2</code></li> <li>C: <code>true</code></li> <li>D: <code>undefined</code></li> </ul> Answer <p>  #### Answer: B  The `.push()` method returns the _length_ of the new array! Previously, the array contained one element (the string `\"banana\"`) and had a length of `1`. After adding the string `\"apple\"` to the array, the array contains two elements, and has a length of `2`. This gets returned from the `addToList` function.  The `push` method modifies the original array. If you wanted to return the _array_ from the function rather than the _length of the array_, you should have returned `list` after pushing `item` to it.  </p>"},{"location":"programming/javascript/javascript_questions/#75-whats-the-output","title":"75. What's the output?","text":"<pre><code>const box = { x: 10, y: 20 };\n\nObject.freeze(box);\n\nconst shape = box;\nshape.x = 100;\n\nconsole.log(shape);\n</code></pre> <ul> <li>A: <code>{ x: 100, y: 20 }</code></li> <li>B: <code>{ x: 10, y: 20 }</code></li> <li>C: <code>{ x: 100 }</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: B  `Object.freeze` makes it impossible to add, remove, or modify properties of an object (unless the property's value is another object).  When we create the variable `shape` and set it equal to the frozen object `box`, `shape` also refers to a frozen object. You can check whether an object is frozen by using `Object.isFrozen`. In this case, `Object.isFrozen(shape)` would return true, since the variable `shape` has a reference to a frozen object.  Since `shape` is frozen, and since the value of `x` is not an object, we cannot modify the property `x`. `x` is still equal to `10`, and `{ x: 10, y: 20 }` gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#76-whats-the-output","title":"76. What's the output?","text":"<pre><code>const { firstName: myName } = { firstName: 'Lydia' };\n\nconsole.log(firstName);\n</code></pre> <ul> <li>A: <code>\"Lydia\"</code></li> <li>B: <code>\"myName\"</code></li> <li>C: <code>undefined</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: D  By using [destructuring assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) syntax we can unpack values from arrays, or properties from objects, into distinct variables:   <pre><code>const { firstName } = { firstName: 'Lydia' };\n// ES5 version:\n// var firstName = { firstName: 'Lydia' }.firstName;\n\nconsole.log(firstName); // \"Lydia\"\n</code></pre>   Also, a property can be unpacked from an object and assigned to a variable with a different name than the object property:   <pre><code>const { firstName: myName } = { firstName: 'Lydia' };\n// ES5 version:\n// var myName = { firstName: 'Lydia' }.firstName;\n\nconsole.log(myName); // \"Lydia\"\nconsole.log(firstName); // Uncaught ReferenceError: firstName is not defined\n</code></pre>   Therefore, `firstName` does not exist as a variable, thus attempting to access its value will raise a `ReferenceError`.  **Note:** Be aware of the `global scope` properties:   <pre><code>const { name: myName } = { name: 'Lydia' };\n\nconsole.log(myName); // \"lydia\"\nconsole.log(name); // \"\" ----- Browser e.g. Chrome\nconsole.log(name); // ReferenceError: name is not defined  ----- NodeJS\n\n</code></pre>   Whenever Javascript is unable to find a variable within the _current scope_, it climbs up the [Scope chain](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch3.md) and searches for it and if it reaches the top-level scope, aka **Global scope**, and still doesn't find it, it will throw a `ReferenceError`.  - In **Browsers** such as _Chrome_, `name` is a _deprecated global scope property_. In this example, the code is running inside _global scope_ and there is no user defined local variable for `name`, therefore it searches the predefined _variables/properties_ in the global scope which is in case of browsers, it searches through `window` object and it will extract the [window.name](https://developer.mozilla.org/en-US/docs/Web/API/Window/name) value which is equal to an **empty string**.  - In **NodeJS**, there is no such property on the `global` object, thus attempting to access a non-existent variable will raise a [ReferenceError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined).  </p>"},{"location":"programming/javascript/javascript_questions/#77-is-this-a-pure-function","title":"77. Is this a pure function?","text":"<pre><code>function sum(a, b) {\n  return a + b;\n}\n</code></pre> <ul> <li>A: Yes</li> <li>B: No</li> </ul> Answer <p>  #### Answer: A  A pure function is a function that _always_ returns the same result, if the same arguments are passed.  The `sum` function always returns the same result. If we pass `1` and `2`, it will _always_ return `3` without side effects. If we pass `5` and `10`, it will _always_ return `15`, and so on. This is the definition of a pure function.  </p>"},{"location":"programming/javascript/javascript_questions/#78-what-is-the-output","title":"78. What is the output?","text":"<pre><code>const add = () =&gt; {\n  const cache = {};\n  return num =&gt; {\n    if (num in cache) {\n      return `From cache! ${cache[num]}`;\n    } else {\n      const result = num + 10;\n      cache[num] = result;\n      return `Calculated! ${result}`;\n    }\n  };\n};\n\nconst addFunction = add();\nconsole.log(addFunction(10));\nconsole.log(addFunction(10));\nconsole.log(addFunction(5 * 2));\n</code></pre> <ul> <li>A: <code>Calculated! 20</code> <code>Calculated! 20</code> <code>Calculated! 20</code></li> <li>B: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Calculated! 20</code></li> <li>C: <code>Calculated! 20</code> <code>From cache! 20</code> <code>From cache! 20</code></li> <li>D: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Error</code></li> </ul> Answer <p>  #### Answer: C  The `add` function is a _memoized_ function. With memoization, we can cache the results of a function in order to speed up its execution. In this case, we create a `cache` object that stores the previously returned values.  If we call the `addFunction` function again with the same argument, it first checks whether it has already gotten that value in its cache. If that's the case, the caches value will be returned, which saves on execution time. Else, if it's not cached, it will calculate the value and store it afterwards.  We call the `addFunction` function three times with the same value: on the first invocation, the value of the function when `num` is equal to `10` isn't cached yet. The condition of the if-statement `num in cache` returns `false`, and the else block gets executed: `Calculated! 20` gets logged, and the value of the result gets added to the cache object. `cache` now looks like `{ 10: 20 }`.  The second time, the `cache` object contains the value that gets returned for `10`. The condition of the if-statement `num in cache` returns `true`, and `'From cache! 20'` gets logged.  The third time, we pass `5 * 2` to the function which gets evaluated to `10`. The `cache` object contains the value that gets returned for `10`. The condition of the if-statement `num in cache` returns `true`, and `'From cache! 20'` gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#79-what-is-the-output","title":"79. What is the output?","text":"<pre><code>const myLifeSummedUp = ['\u2615', '\ud83d\udcbb', '\ud83c\udf77', '\ud83c\udf6b'];\n\nfor (let item in myLifeSummedUp) {\n  console.log(item);\n}\n\nfor (let item of myLifeSummedUp) {\n  console.log(item);\n}\n</code></pre> <ul> <li>A: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>\"\u2615\"</code> <code>\"\ud83d\udcbb\"</code> <code>\"\ud83c\udf77\"</code> <code>\"\ud83c\udf6b\"</code></li> <li>B: <code>\"\u2615\"</code> <code>\"\ud83d\udcbb\"</code> <code>\"\ud83c\udf77\"</code> <code>\"\ud83c\udf6b\"</code> and <code>\"\u2615\"</code> <code>\"\ud83d\udcbb\"</code> <code>\"\ud83c\udf77\"</code> <code>\"\ud83c\udf6b\"</code></li> <li>C: <code>\"\u2615\"</code> <code>\"\ud83d\udcbb\"</code> <code>\"\ud83c\udf77\"</code> <code>\"\ud83c\udf6b\"</code> and <code>0</code> <code>1</code> <code>2</code> <code>3</code></li> <li>D: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>{0: \"\u2615\", 1: \"\ud83d\udcbb\", 2: \"\ud83c\udf77\", 3: \"\ud83c\udf6b\"}</code></li> </ul> Answer <p>  #### Answer: A  With a _for-in_ loop, we can iterate over **enumerable** properties. In an array, the enumerable properties are the \"keys\" of array elements, which are actually their indexes. You could see an array as:  `{0: \"\u2615\", 1: \"\ud83d\udcbb\", 2: \"\ud83c\udf77\", 3: \"\ud83c\udf6b\"}`  Where the keys are the enumerable properties. `0` `1` `2` `3` get logged.  With a _for-of_ loop, we can iterate over **iterables**. An array is an iterable. When we iterate over the array, the variable \"item\" is equal to the element it's currently iterating over, `\"\u2615\"` `\"\ud83d\udcbb\"` `\"\ud83c\udf77\"` `\"\ud83c\udf6b\"` get logged.  </p>"},{"location":"programming/javascript/javascript_questions/#80-what-is-the-output","title":"80. What is the output?","text":"<pre><code>const list = [1 + 2, 1 * 2, 1 / 2];\nconsole.log(list);\n</code></pre> <ul> <li>A: <code>[\"1 + 2\", \"1 * 2\", \"1 / 2\"]</code></li> <li>B: <code>[\"12\", 2, 0.5]</code></li> <li>C: <code>[3, 2, 0.5]</code></li> <li>D: <code>[1, 1, 1]</code></li> </ul> Answer <p>  #### Answer: C  Array elements can hold any value. Numbers, strings, objects, other arrays, null, boolean values, undefined, and other expressions such as dates, functions, and calculations.  The element will be equal to the returned value. `1 + 2` returns `3`, `1 * 2` returns `2`, and `1 / 2` returns `0.5`.  </p>"},{"location":"programming/javascript/javascript_questions/#81-what-is-the-output","title":"81. What is the output?","text":"<pre><code>function sayHi(name) {\n  return `Hi there, ${name}`;\n}\n\nconsole.log(sayHi());\n</code></pre> <ul> <li>A: <code>Hi there,</code></li> <li>B: <code>Hi there, undefined</code></li> <li>C: <code>Hi there, null</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: B  By default, arguments have the value of `undefined`, unless a value has been passed to the function. In this case, we didn't pass a value for the `name` argument. `name` is equal to `undefined` which gets logged.  In ES6, we can overwrite this default `undefined` value with default parameters. For example:  `function sayHi(name = \"Lydia\") { ... }`  In this case, if we didn't pass a value or if we passed `undefined`, `name` would always be equal to the string `Lydia`  </p>"},{"location":"programming/javascript/javascript_questions/#82-what-is-the-output","title":"82. What is the output?","text":"<pre><code>var status = '\ud83d\ude0e';\n\nsetTimeout(() =&gt; {\n  const status = '\ud83d\ude0d';\n\n  const data = {\n    status: '\ud83e\udd51',\n    getStatus() {\n      return this.status;\n    },\n  };\n\n  console.log(data.getStatus());\n  console.log(data.getStatus.call(this));\n}, 0);\n</code></pre> <ul> <li>A: <code>\"\ud83e\udd51\"</code> and <code>\"\ud83d\ude0d\"</code></li> <li>B: <code>\"\ud83e\udd51\"</code> and <code>\"\ud83d\ude0e\"</code></li> <li>C: <code>\"\ud83d\ude0d\"</code> and <code>\"\ud83d\ude0e\"</code></li> <li>D: <code>\"\ud83d\ude0e\"</code> and <code>\"\ud83d\ude0e\"</code></li> </ul> Answer <p>  #### Answer: B  The value of the `this` keyword is dependent on where you use it. In a **method**, like the `getStatus` method, the `this` keyword refers to _the object that the method belongs to_. The method belongs to the `data` object, so `this` refers to the `data` object. When we log `this.status`, the `status` property on the `data` object gets logged, which is `\"\ud83e\udd51\"`.  With the `call` method, we can change the object to which the `this` keyword refers. In **functions**, the `this` keyword refers to the _the object that the function belongs to_. We declared the `setTimeout` function on the _global object_, so within the `setTimeout` function, the `this` keyword refers to the _global object_. On the global object, there is a variable called _status_ with the value of `\"\ud83d\ude0e\"`. When logging `this.status`, `\"\ud83d\ude0e\"` gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#83-what-is-the-output","title":"83. What is the output?","text":"<pre><code>const person = {\n  name: 'Lydia',\n  age: 21,\n};\n\nlet city = person.city;\ncity = 'Amsterdam';\n\nconsole.log(person);\n</code></pre> <ul> <li>A: <code>{ name: \"Lydia\", age: 21 }</code></li> <li>B: <code>{ name: \"Lydia\", age: 21, city: \"Amsterdam\" }</code></li> <li>C: <code>{ name: \"Lydia\", age: 21, city: undefined }</code></li> <li>D: <code>\"Amsterdam\"</code></li> </ul> Answer <p>  #### Answer: A  We set the variable `city` equal to the value of the property called `city` on the `person` object. There is no property on this object called `city`, so the variable `city` has the value of `undefined`.  Note that we are _not_ referencing the `person` object itself! We simply set the variable `city` equal to the current value of the `city` property on the `person` object.  Then, we set `city` equal to the string `\"Amsterdam\"`. This doesn't change the person object: there is no reference to that object.  When logging the `person` object, the unmodified object gets returned.  </p>"},{"location":"programming/javascript/javascript_questions/#84-what-is-the-output","title":"84. What is the output?","text":"<pre><code>function checkAge(age) {\n  if (age &lt; 18) {\n    const message = \"Sorry, you're too young.\";\n  } else {\n    const message = \"Yay! You're old enough!\";\n  }\n\n  return message;\n}\n\nconsole.log(checkAge(21));\n</code></pre> <ul> <li>A: <code>\"Sorry, you're too young.\"</code></li> <li>B: <code>\"Yay! You're old enough!\"</code></li> <li>C: <code>ReferenceError</code></li> <li>D: <code>undefined</code></li> </ul> Answer <p>  #### Answer: C  Variables with the `const` and `let` keyword are _block-scoped_. A block is anything between curly brackets (`{ }`). In this case, the curly brackets of the if/else statements. You cannot reference a variable outside of the block it's declared in, a ReferenceError gets thrown.  </p>"},{"location":"programming/javascript/javascript_questions/#85-what-kind-of-information-would-get-logged","title":"85. What kind of information would get logged?","text":"<pre><code>fetch('https://www.website.com/api/user/1')\n  .then(res =&gt; res.json())\n  .then(res =&gt; console.log(res));\n</code></pre> <ul> <li>A: The result of the <code>fetch</code> method.</li> <li>B: The result of the second invocation of the <code>fetch</code> method.</li> <li>C: The result of the callback in the previous <code>.then()</code>.</li> <li>D: It would always be undefined.</li> </ul> Answer <p>  #### Answer: C  The value of `res` in the second `.then` is equal to the returned value of the previous `.then`. You can keep chaining `.then`s like this, where the value is passed to the next handler.  </p>"},{"location":"programming/javascript/javascript_questions/#86-which-option-is-a-way-to-set-hasname-equal-to-true-provided-you-cannot-pass-true-as-an-argument","title":"86. Which option is a way to set <code>hasName</code> equal to <code>true</code>, provided you cannot pass <code>true</code> as an argument?","text":"<pre><code>function getName(name) {\n  const hasName = //\n}\n</code></pre> <ul> <li>A: <code>!!name</code></li> <li>B: <code>name</code></li> <li>C: <code>new Boolean(name)</code></li> <li>D: <code>name.length</code></li> </ul> Answer <p>  #### Answer: A  With `!!name`, we determine whether the value of `name` is truthy or falsy. If name is truthy, which we want to test for, `!name` returns `false`. `!false` (which is what `!!name` practically is) returns `true`.  By setting `hasName` equal to `name`, you set `hasName` equal to whatever value you passed to the `getName` function, not the boolean value `true`.  `new Boolean(true)` returns an object wrapper, not the boolean value itself.  `name.length` returns the length of the passed argument, not whether it's `true`.  </p>"},{"location":"programming/javascript/javascript_questions/#87-whats-the-output","title":"87. What's the output?","text":"<pre><code>console.log('I want pizza'[0]);\n</code></pre> <ul> <li>A: <code>\"\"\"</code></li> <li>B: <code>\"I\"</code></li> <li>C: <code>SyntaxError</code></li> <li>D: <code>undefined</code></li> </ul> Answer <p>  #### Answer: B  In order to get a character at a specific index of a string, you can use bracket notation. The first character in the string has index 0, and so on. In this case, we want to get the element with index 0, the character `\"I'`, which gets logged.  Note that this method is not supported in IE7 and below. In that case, use `.charAt()`.  </p>"},{"location":"programming/javascript/javascript_questions/#88-whats-the-output","title":"88. What's the output?","text":"<pre><code>function sum(num1, num2 = num1) {\n  console.log(num1 + num2);\n}\n\nsum(10);\n</code></pre> <ul> <li>A: <code>NaN</code></li> <li>B: <code>20</code></li> <li>C: <code>ReferenceError</code></li> <li>D: <code>undefined</code></li> </ul> Answer <p>  #### Answer: B  You can set a default parameter's value equal to another parameter of the function, as long as they've been defined _before_ the default parameter. We pass the value `10` to the `sum` function. If the `sum` function only receives 1 argument, it means that the value for `num2` is not passed, and the value of `num1` is equal to the passed value `10` in this case. The default value of `num2` is the value of `num1`, which is `10`. `num1 + num2` returns `20`.  If you're trying to set a default parameter's value equal to a parameter which is defined _after_ (to the right), the parameter's value hasn't been initialized yet, which will throw an error.  </p>"},{"location":"programming/javascript/javascript_questions/#89-whats-the-output","title":"89. What's the output?","text":"<pre><code>// module.js\nexport default () =&gt; 'Hello world';\nexport const name = 'Lydia';\n\n// index.js\nimport * as data from './module';\n\nconsole.log(data);\n</code></pre> <ul> <li>A: <code>{ default: function default(), name: \"Lydia\" }</code></li> <li>B: <code>{ default: function default() }</code></li> <li>C: <code>{ default: \"Hello world\", name: \"Lydia\" }</code></li> <li>D: Global object of <code>module.js</code></li> </ul> Answer <p>  #### Answer: A  With the `import * as name` syntax, we import _all exports_ from the `module.js` file into the `index.js` file as a new object called `data` is created. In the `module.js` file, there are two exports: the default export, and a named export. The default export is a function which returns the string `\"Hello World\"`, and the named export is a variable called `name` which has the value of the string `\"Lydia\"`.  The `data` object has a `default` property for the default export, other properties have the names of the named exports and their corresponding values.  </p>"},{"location":"programming/javascript/javascript_questions/#90-whats-the-output","title":"90. What's the output?","text":"<pre><code>class Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nconst member = new Person('John');\nconsole.log(typeof member);\n</code></pre> <ul> <li>A: <code>\"class\"</code></li> <li>B: <code>\"function\"</code></li> <li>C: <code>\"object\"</code></li> <li>D: <code>\"string\"</code></li> </ul> Answer <p>  #### Answer: C  Classes are syntactical sugar for function constructors. The equivalent of the `Person` class as a function constructor would be:   <pre><code>function Person(name) {\n  this.name = name;\n}\n</code></pre>   Calling a function constructor with `new` results in the creation of an instance of `Person`, `typeof` keyword returns `\"object\"` for an instance. `typeof member` returns `\"object\"`.  </p>"},{"location":"programming/javascript/javascript_questions/#91-whats-the-output","title":"91. What's the output?","text":"<pre><code>let newList = [1, 2, 3].push(4);\n\nconsole.log(newList.push(5));\n</code></pre> <ul> <li>A: <code>[1, 2, 3, 4, 5]</code></li> <li>B: <code>[1, 2, 3, 5]</code></li> <li>C: <code>[1, 2, 3, 4]</code></li> <li>D: <code>Error</code></li> </ul> Answer <p>  #### Answer: D  The `.push` method returns the _new length_ of the array, not the array itself! By setting `newList` equal to `[1, 2, 3].push(4)`, we set `newList` equal to the new length of the array: `4`.  Then, we try to use the `.push` method on `newList`. Since `newList` is the numerical value `4`, we cannot use the `.push` method: a TypeError is thrown.  </p>"},{"location":"programming/javascript/javascript_questions/#92-whats-the-output","title":"92. What's the output?","text":"<pre><code>function giveLydiaPizza() {\n  return 'Here is pizza!';\n}\n\nconst giveLydiaChocolate = () =&gt;\n  \"Here's chocolate... now go hit the gym already.\";\n\nconsole.log(giveLydiaPizza.prototype);\nconsole.log(giveLydiaChocolate.prototype);\n</code></pre> <ul> <li>A: <code>{ constructor: ...}</code> <code>{ constructor: ...}</code></li> <li>B: <code>{}</code> <code>{ constructor: ...}</code></li> <li>C: <code>{ constructor: ...}</code> <code>{}</code></li> <li>D: <code>{ constructor: ...}</code> <code>undefined</code></li> </ul> Answer <p>  #### Answer: D  Regular functions, such as the `giveLydiaPizza` function, have a `prototype` property, which is an object (prototype object) with a `constructor` property. Arrow functions however, such as the `giveLydiaChocolate` function, do not have this `prototype` property. `undefined` gets returned when trying to access the `prototype` property using `giveLydiaChocolate.prototype`.  </p>"},{"location":"programming/javascript/javascript_questions/#93-whats-the-output","title":"93. What's the output?","text":"<pre><code>const person = {\n  name: 'Lydia',\n  age: 21,\n};\n\nfor (const [x, y] of Object.entries(person)) {\n  console.log(x, y);\n}\n</code></pre> <ul> <li>A: <code>name</code> <code>Lydia</code> and <code>age</code> <code>21</code></li> <li>B: <code>[\"name\", \"Lydia\"]</code> and <code>[\"age\", 21]</code></li> <li>C: <code>[\"name\", \"age\"]</code> and <code>undefined</code></li> <li>D: <code>Error</code></li> </ul> Answer <p>  #### Answer: A  `Object.entries(person)` returns an array of nested arrays, containing the keys and objects:  `[ [ 'name', 'Lydia' ], [ 'age', 21 ] ]`  Using the `for-of` loop, we can iterate over each element in the array, the subarrays in this case. We can destructure the subarrays instantly in the for-of loop, using `const [x, y]`. `x` is equal to the first element in the subarray, `y` is equal to the second element in the subarray.  The first subarray is `[ \"name\", \"Lydia\" ]`, with `x` equal to `\"name\"`, and `y` equal to `\"Lydia\"`, which get logged. The second subarray is `[ \"age\", 21 ]`, with `x` equal to `\"age\"`, and `y` equal to `21`, which get logged.  </p>"},{"location":"programming/javascript/javascript_questions/#94-whats-the-output","title":"94. What's the output?","text":"<pre><code>function getItems(fruitList, ...args, favoriteFruit) {\n  return [...fruitList, ...args, favoriteFruit]\n}\n\ngetItems([\"banana\", \"apple\"], \"pear\", \"orange\")\n</code></pre> <ul> <li>A: <code>[\"banana\", \"apple\", \"pear\", \"orange\"]</code></li> <li>B: <code>[[\"banana\", \"apple\"], \"pear\", \"orange\"]</code></li> <li>C: <code>[\"banana\", \"apple\", [\"pear\"], \"orange\"]</code></li> <li>D: <code>SyntaxError</code></li> </ul> Answer <p>  #### Answer: D  `...args` is a rest parameter. The rest parameter's value is an array containing all remaining arguments, **and can only be the last parameter**! In this example, the rest parameter was the second parameter. This is not possible, and will throw a syntax error.   <pre><code>function getItems(fruitList, favoriteFruit, ...args) {\n  return [...fruitList, ...args, favoriteFruit];\n}\n\ngetItems(['banana', 'apple'], 'pear', 'orange');\n</code></pre>   The above example works. This returns the array `[ 'banana', 'apple', 'orange', 'pear' ]`  </p>"},{"location":"programming/javascript/javascript_questions/#95-whats-the-output","title":"95. What's the output?","text":"<pre><code>function nums(a, b) {\n  if (a &gt; b) console.log('a is bigger');\n  else console.log('b is bigger');\n  return\n  a + b;\n}\n\nconsole.log(nums(4, 2));\nconsole.log(nums(1, 2));\n</code></pre> <ul> <li>A: <code>a is bigger</code>, <code>6</code> and <code>b is bigger</code>, <code>3</code></li> <li>B: <code>a is bigger</code>, <code>undefined</code> and <code>b is bigger</code>, <code>undefined</code></li> <li>C: <code>undefined</code> and <code>undefined</code></li> <li>D: <code>SyntaxError</code></li> </ul> Answer <p>  #### Answer: B  In JavaScript, we don't _have_ to write the semicolon (`;`) explicitly, however the JavaScript engine still adds them after statements. This is called **Automatic Semicolon Insertion**. A statement can for example be variables, or keywords like `throw`, `return`, `break`, etc.  Here, we wrote a `return` statement, and another value `a + b` on a _new line_. However, since it's a new line, the engine doesn't know that it's actually the value that we wanted to return. Instead, it automatically added a semicolon after `return`. You could see this as:   <pre><code>return;\na + b;\n</code></pre>   This means that `a + b` is never reached, since a function stops running after the `return` keyword. If no value gets returned, like here, the function returns `undefined`. Note that there is no automatic insertion after `if/else` statements!  </p>"},{"location":"programming/javascript/javascript_questions/#96-whats-the-output","title":"96. What's the output?","text":"<pre><code>class Person {\n  constructor() {\n    this.name = 'Lydia';\n  }\n}\n\nPerson = class AnotherPerson {\n  constructor() {\n    this.name = 'Sarah';\n  }\n};\n\nconst member = new Person();\nconsole.log(member.name);\n</code></pre> <ul> <li>A: <code>\"Lydia\"</code></li> <li>B: <code>\"Sarah\"</code></li> <li>C: <code>Error: cannot redeclare Person</code></li> <li>D: <code>SyntaxError</code></li> </ul> Answer <p>  #### Answer: B  We can set classes equal to other classes/function constructors. In this case, we set `Person` equal to `AnotherPerson`. The name on this constructor is `Sarah`, so the name property on the new `Person` instance `member` is `\"Sarah\"`.  </p>"},{"location":"programming/javascript/javascript_questions/#97-whats-the-output","title":"97. What's the output?","text":"<pre><code>const info = {\n  [Symbol('a')]: 'b',\n};\n\nconsole.log(info);\nconsole.log(Object.keys(info));\n</code></pre> <ul> <li>A: <code>{Symbol('a'): 'b'}</code> and <code>[\"{Symbol('a')\"]</code></li> <li>B: <code>{}</code> and <code>[]</code></li> <li>C: <code>{ a: \"b\" }</code> and <code>[\"a\"]</code></li> <li>D: <code>{Symbol('a'): 'b'}</code> and <code>[]</code></li> </ul> Answer <p>  #### Answer: D  A Symbol is not _enumerable_. The Object.keys method returns all _enumerable_ key properties on an object. The Symbol won't be visible, and an empty array is returned. When logging the entire object, all properties will be visible, even non-enumerable ones.  This is one of the many qualities of a symbol: besides representing an entirely unique value (which prevents accidental name collision on objects, for example when working with 2 libraries that want to add properties to the same object), you can also \"hide\" properties on objects this way (although not entirely. You can still access symbols using the `Object.getOwnPropertySymbols()` method).  </p>"},{"location":"programming/javascript/javascript_questions/#98-whats-the-output","title":"98. What's the output?","text":"<pre><code>const getList = ([x, ...y]) =&gt; [x, y]\nconst getUser = user =&gt; { name: user.name, age: user.age }\n\nconst list = [1, 2, 3, 4]\nconst user = { name: \"Lydia\", age: 21 }\n\nconsole.log(getList(list))\nconsole.log(getUser(user))\n</code></pre> <ul> <li>A: <code>[1, [2, 3, 4]]</code> and <code>SyntaxError</code></li> <li>B: <code>[1, [2, 3, 4]]</code> and <code>{ name: \"Lydia\", age: 21 }</code></li> <li>C: <code>[1, 2, 3, 4]</code> and <code>{ name: \"Lydia\", age: 21 }</code></li> <li>D: <code>Error</code> and <code>{ name: \"Lydia\", age: 21 }</code></li> </ul> Answer <p>  #### Answer: A  The `getList` function receives an array as its argument. Between the parentheses of the `getList` function, we destructure this array right away. You could see this as:  `[x, ...y] = [1, 2, 3, 4]`  With the rest parameter `...y`, we put all \"remaining\" arguments in an array. The remaining arguments are `2`, `3` and `4` in this case. The value of `y` is an array, containing all the rest parameters. The value of `x` is equal to `1` in this case, so when we log `[x, y]`, `[1, [2, 3, 4]]` gets logged.  The `getUser` function receives an object. With arrow functions, we don't _have_ to write curly brackets if we just return one value. However, if you want to instantly return an _object_ from an arrow function, you have to write it between parentheses, otherwise everything between the two braces will be interpreted as a block statement. In this case the code between the braces is not a valid JavaScript code, so a `SyntaxError` gets thrown.   The following function would have returned an object:  `const getUser = user =&gt; ({ name: user.name, age: user.age })`  </p>"},{"location":"programming/javascript/javascript_questions/#99-whats-the-output","title":"99. What's the output?","text":"<pre><code>const name = 'Lydia';\n\nconsole.log(name());\n</code></pre> <ul> <li>A: <code>SyntaxError</code></li> <li>B: <code>ReferenceError</code></li> <li>C: <code>TypeError</code></li> <li>D: <code>undefined</code></li> </ul> Answer <p>  #### Answer: C  The variable `name` holds the value of a string, which is not a function, thus cannot invoke.  TypeErrors get thrown when a value is not of the expected type. JavaScript expected `name` to be a function since we're trying to invoke it. It was a string however, so a TypeError gets thrown: name is not a function!  SyntaxErrors get thrown when you've written something that isn't valid JavaScript, for example when you've written the word `return` as `retrun`. ReferenceErrors get thrown when JavaScript isn't able to find a reference to a value that you're trying to access.  </p>"},{"location":"programming/javascript/javascript_questions/#100-whats-the-value-of-output","title":"100. What's the value of output?","text":"<pre><code>// \ud83c\udf89\u2728 This is my 100th question! \u2728\ud83c\udf89\n\nconst output = `${[] &amp;&amp; 'Im'}possible!\nYou should${'' &amp;&amp; `n't`} see a therapist after so much JavaScript lol`;\n</code></pre> <ul> <li>A: <code>possible! You should see a therapist after so much JavaScript lol</code></li> <li>B: <code>Impossible! You should see a therapist after so much JavaScript lol</code></li> <li>C: <code>possible! You shouldn't see a therapist after so much JavaScript lol</code></li> <li>D: <code>Impossible! You shouldn't see a therapist after so much JavaScript lol</code></li> </ul> Answer <p>  #### Answer: B  `[]` is a truthy value. With the `&amp;&amp;` operator, the right-hand value will be returned if the left-hand value is a truthy value. In this case, the left-hand value `[]` is a truthy value, so `\"Im'` gets returned.  `\"\"` is a falsy value. If the left-hand value is falsy, nothing gets returned. `n't` doesn't get returned.  </p>"},{"location":"programming/javascript/javascript_questions/#101-whats-the-value-of-output","title":"101. What's the value of output?","text":"<pre><code>const one = false || {} || null;\nconst two = null || false || '';\nconst three = [] || 0 || true;\n\nconsole.log(one, two, three);\n</code></pre> <ul> <li>A: <code>false</code> <code>null</code> <code>[]</code></li> <li>B: <code>null</code> <code>\"\"</code> <code>true</code></li> <li>C: <code>{}</code> <code>\"\"</code> <code>[]</code></li> <li>D: <code>null</code> <code>null</code> <code>true</code></li> </ul> Answer <p>  #### Answer: C  With the `||` operator, we can return the first truthy operand. If all values are falsy, the last operand gets returned.  `(false || {} || null)`: the empty object `{}` is a truthy value. This is the first (and only) truthy value, which gets returned. `one` is equal to `{}`.  `(null || false || \"\")`: all operands are falsy values. This means that the last operand, `\"\"` gets returned. `two` is equal to `\"\"`.  `([] || 0 || \"\")`: the empty array`[]` is a truthy value. This is the first truthy value, which gets returned. `three` is equal to `[]`.  </p>"},{"location":"programming/javascript/javascript_questions/#102-whats-the-value-of-output","title":"102. What's the value of output?","text":"<pre><code>const myPromise = () =&gt; Promise.resolve('I have resolved!');\n\nfunction firstFunction() {\n  myPromise().then(res =&gt; console.log(res));\n  console.log('second');\n}\n\nasync function secondFunction() {\n  console.log(await myPromise());\n  console.log('second');\n}\n\nfirstFunction();\nsecondFunction();\n</code></pre> <ul> <li>A: <code>I have resolved!</code>, <code>second</code> and <code>I have resolved!</code>, <code>second</code></li> <li>B: <code>second</code>, <code>I have resolved!</code> and <code>second</code>, <code>I have resolved!</code></li> <li>C: <code>I have resolved!</code>, <code>second</code> and <code>second</code>, <code>I have resolved!</code></li> <li>D: <code>second</code>, <code>I have resolved!</code> and <code>I have resolved!</code>, <code>second</code></li> </ul> Answer <p>  #### Answer: D  With a promise, we basically say _I want to execute this function, but I'll put it aside for now while it's running since this might take a while. Only when a certain value is resolved (or rejected), and when the call stack is empty, I want to use this value._  We can get this value with both `.then` and the `await` keyword in an `async` function. Although we can get a promise's value with both `.then` and `await`, they work a bit differently.  In the `firstFunction`, we (sort of) put the myPromise function aside while it was running, but continued running the other code, which is `console.log('second')` in this case. Then, the function resolved with the string `I have resolved`, which then got logged after it saw that the callstack was empty.  With the await keyword in `secondFunction`, we literally pause the execution of an async function until the value has been resolved before moving to the next line.  This means that it waited for the `myPromise` to resolve with the value `I have resolved`, and only once that happened, we moved to the next line: `second` got logged.  </p>"},{"location":"programming/javascript/javascript_questions/#103-whats-the-value-of-output","title":"103. What's the value of output?","text":"<pre><code>const set = new Set();\n\nset.add(1);\nset.add('Lydia');\nset.add({ name: 'Lydia' });\n\nfor (let item of set) {\n  console.log(item + 2);\n}\n</code></pre> <ul> <li>A: <code>3</code>, <code>NaN</code>, <code>NaN</code></li> <li>B: <code>3</code>, <code>7</code>, <code>NaN</code></li> <li>C: <code>3</code>, <code>Lydia2</code>, <code>[object Object]2</code></li> <li>D: <code>\"12\"</code>, <code>Lydia2</code>, <code>[object Object]2</code></li> </ul> Answer <p>  #### Answer: C  The `+` operator is not only used for adding numerical values, but we can also use it to concatenate strings. Whenever the JavaScript engine sees that one or more values are not a number, it coerces the number into a string.  The first one is `1`, which is a numerical value. `1 + 2` returns the number 3.  However, the second one is a string `\"Lydia\"`. `\"Lydia\"` is a string and `2` is a number: `2` gets coerced into a string. `\"Lydia\"` and `\"2\"` get concatenated, which results in the string `\"Lydia2\"`.  `{ name: \"Lydia\" }` is an object. Neither a number nor an object is a string, so it stringifies both. Whenever we stringify a regular object, it becomes `\"[object Object]\"`. `\"[object Object]\"` concatenated with `\"2\"` becomes `\"[object Object]2\"`.  </p>"},{"location":"programming/javascript/javascript_questions/#104-whats-its-value","title":"104. What's its value?","text":"<pre><code>Promise.resolve(5);\n</code></pre> <ul> <li>A: <code>5</code></li> <li>B: <code>Promise {&lt;pending&gt;: 5}</code></li> <li>C: <code>Promise\u00a0{&lt;fulfilled&gt;: 5}</code></li> <li>D: <code>Error</code></li> </ul> Answer <p>  #### Answer: C  We can pass any type of value we want to `Promise.resolve`, either a promise or a non-promise. The method itself returns a promise with the resolved value (``). If you pass a regular function, it'll be a resolved promise with a regular value. If you pass a promise, it'll be a resolved promise with the resolved value of that passed promise.  In this case, we just passed the numerical value `5`. It returns a resolved promise with the value `5`."},{"location":"programming/javascript/javascript_questions/#105-whats-its-value","title":"105. What's its value?","text":"<pre><code>function compareMembers(person1, person2 = person) {\n  if (person1 !== person2) {\n    console.log('Not the same!');\n  } else {\n    console.log('They are the same!');\n  }\n}\n\nconst person = { name: 'Lydia' };\n\ncompareMembers(person);\n</code></pre> <ul> <li>A: <code>Not the same!</code></li> <li>B: <code>They are the same!</code></li> <li>C: <code>ReferenceError</code></li> <li>D: <code>SyntaxError</code></li> </ul> Answer <p>  #### Answer: B  Objects are passed by reference. When we check objects for strict equality (`===`), we're comparing their references.  We set the default value for `person2` equal to the `person` object, and passed the `person` object as the value for `person1`.  This means that both values have a reference to the same spot in memory, thus they are equal.  The code block in the `else` statement gets run, and `They are the same!` gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#106-whats-its-value","title":"106. What's its value?","text":"<pre><code>const colorConfig = {\n  red: true,\n  blue: false,\n  green: true,\n  black: true,\n  yellow: false,\n};\n\nconst colors = ['pink', 'red', 'blue'];\n\nconsole.log(colorConfig.colors[1]);\n</code></pre> <ul> <li>A: <code>true</code></li> <li>B: <code>false</code></li> <li>C: <code>undefined</code></li> <li>D: <code>TypeError</code></li> </ul> Answer <p>  #### Answer: D  In JavaScript, we have two ways to access properties on an object: bracket notation, or dot notation. In this example, we use dot notation (`colorConfig.colors`) instead of bracket notation (`colorConfig[\"colors\"]`).  With dot notation, JavaScript tries to find the property on the object with that exact name. In this example, JavaScript tries to find a property called `colors` on the `colorConfig` object. There is no property called `colors`, so this returns `undefined`. Then, we try to access the value of the first element by using `[1]`. We cannot do this on a value that's `undefined`, so it throws a `TypeError`: `Cannot read property '1' of undefined`.  JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket `[` and keeps going until it finds the closing bracket `]`. Only then, it will evaluate the statement. If we would've used `colorConfig[colors[1]]`, it would have returned the value of the `red` property on the `colorConfig` object.  </p>"},{"location":"programming/javascript/javascript_questions/#107-whats-its-value","title":"107. What's its value?","text":"<pre><code>console.log('\u2764\ufe0f' === '\u2764\ufe0f');\n</code></pre> <ul> <li>A: <code>true</code></li> <li>B: <code>false</code></li> </ul> Answer <p>  #### Answer: A  Under the hood, emojis are unicodes. The unicodes for the heart emoji is `\"U+2764 U+FE0F\"`. These are always the same for the same emojis, so we're comparing two equal strings to each other, which returns true.  </p>"},{"location":"programming/javascript/javascript_questions/#108-which-of-these-methods-modifies-the-original-array","title":"108. Which of these methods modifies the original array?","text":"<pre><code>const emojis = ['\u2728', '\ud83e\udd51', '\ud83d\ude0d'];\n\nemojis.map(x =&gt; x + '\u2728');\nemojis.filter(x =&gt; x !== '\ud83e\udd51');\nemojis.find(x =&gt; x !== '\ud83e\udd51');\nemojis.reduce((acc, cur) =&gt; acc + '\u2728');\nemojis.slice(1, 2, '\u2728');\nemojis.splice(1, 2, '\u2728');\n</code></pre> <ul> <li>A: <code>All of them</code></li> <li>B: <code>map</code> <code>reduce</code> <code>slice</code> <code>splice</code></li> <li>C: <code>map</code> <code>slice</code> <code>splice</code></li> <li>D: <code>splice</code></li> </ul> Answer <p>  #### Answer: D  With `splice` method, we modify the original array by deleting, replacing or adding elements. In this case, we removed 2 items from index 1 (we removed `'\ud83e\udd51'` and `'\ud83d\ude0d'`) and added the \u2728 emoji instead.  `map`, `filter` and `slice` return a new array, `find` returns an element, and `reduce` returns a reduced value.  </p>"},{"location":"programming/javascript/javascript_questions/#109-whats-the-output","title":"109. What's the output?","text":"<pre><code>const food = ['\ud83c\udf55', '\ud83c\udf6b', '\ud83e\udd51', '\ud83c\udf54'];\nconst info = { favoriteFood: food[0] };\n\ninfo.favoriteFood = '\ud83c\udf5d';\n\nconsole.log(food);\n</code></pre> <ul> <li>A: <code>['\ud83c\udf55', '\ud83c\udf6b', '\ud83e\udd51', '\ud83c\udf54']</code></li> <li>B: <code>['\ud83c\udf5d', '\ud83c\udf6b', '\ud83e\udd51', '\ud83c\udf54']</code></li> <li>C: <code>['\ud83c\udf5d', '\ud83c\udf55', '\ud83c\udf6b', '\ud83e\udd51', '\ud83c\udf54']</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: A  We set the value of the `favoriteFood` property on the `info` object equal to the string with the pizza emoji, `'\ud83c\udf55'`. A string is a primitive data type. In JavaScript, primitive data types don't interact by reference.  In JavaScript, primitive data types (everything that's not an object) interact by _value_. In this case, we set the value of the `favoriteFood` property on the `info` object equal to the value of the first element in the `food` array, the string with the pizza emoji in this case (`'\ud83c\udf55'`). A string is a primitive data type, and interact by value (see my [blogpost](https://www.theavocoder.com/complete-javascript/2018/12/21/by-value-vs-by-reference) if you're interested in learning more)  Then, we change the value of the `favoriteFood` property on the `info` object. The `food` array hasn't changed, since the value of `favoriteFood` was merely a _copy_ of the value of the first element in the array, and doesn't have a reference to the same spot in memory as the element on `food[0]`. When we log food, it's still the original array, `['\ud83c\udf55', '\ud83c\udf6b', '\ud83e\udd51', '\ud83c\udf54']`.  </p>"},{"location":"programming/javascript/javascript_questions/#110-what-does-this-method-do","title":"110. What does this method do?","text":"<pre><code>JSON.parse();\n</code></pre> <ul> <li>A: Parses JSON to a JavaScript value</li> <li>B: Parses a JavaScript object to JSON</li> <li>C: Parses any JavaScript value to JSON</li> <li>D: Parses JSON to a JavaScript object only</li> </ul> Answer <p>  #### Answer: A  With the `JSON.parse()` method, we can parse JSON string to a JavaScript value.   <pre><code>// Stringifying a number into valid JSON, then parsing the JSON string to a JavaScript value:\nconst jsonNumber = JSON.stringify(4); // '4'\nJSON.parse(jsonNumber); // 4\n\n// Stringifying an array value into valid JSON, then parsing the JSON string to a JavaScript value:\nconst jsonArray = JSON.stringify([1, 2, 3]); // '[1, 2, 3]'\nJSON.parse(jsonArray); // [1, 2, 3]\n\n// Stringifying an object  into valid JSON, then parsing the JSON string to a JavaScript value:\nconst jsonArray = JSON.stringify({ name: 'Lydia' }); // '{\"name\":\"Lydia\"}'\nJSON.parse(jsonArray); // { name: 'Lydia' }\n</code></pre> </p>"},{"location":"programming/javascript/javascript_questions/#111-whats-the-output","title":"111. What's the output?","text":"<pre><code>let name = 'Lydia';\n\nfunction getName() {\n  console.log(name);\n  let name = 'Sarah';\n}\n\ngetName();\n</code></pre> <ul> <li>A: Lydia</li> <li>B: Sarah</li> <li>C: <code>undefined</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: D  Each function has its own _execution context_ (or _scope_). The `getName` function first looks within its own context (scope) to see if it contains the variable `name` we're trying to access. In this case, the `getName` function contains its own `name` variable: we declare the variable `name` with the `let` keyword, and with the value of `'Sarah'`.  Variables with the `let` keyword (and `const`) are hoisted, but unlike `var`, don't get initialized. They are not accessible before the line we declare (initialize) them. This is called the \"temporal dead zone\". When we try to access the variables before they are declared, JavaScript throws a `ReferenceError`.  If we wouldn't have declared the `name` variable within the `getName` function, the javascript engine would've looked down the _scope chain_. The outer scope has a variable called `name` with the value of `Lydia`. In that case, it would've logged `Lydia`.   <pre><code>let name = 'Lydia';\n\nfunction getName() {\n  console.log(name);\n}\n\ngetName(); // Lydia\n</code></pre> </p>"},{"location":"programming/javascript/javascript_questions/#112-whats-the-output","title":"112. What's the output?","text":"<pre><code>function* generatorOne() {\n  yield ['a', 'b', 'c'];\n}\n\nfunction* generatorTwo() {\n  yield* ['a', 'b', 'c'];\n}\n\nconst one = generatorOne();\nconst two = generatorTwo();\n\nconsole.log(one.next().value);\nconsole.log(two.next().value);\n</code></pre> <ul> <li>A: <code>a</code> and <code>a</code></li> <li>B: <code>a</code> and <code>undefined</code></li> <li>C: <code>['a', 'b', 'c']</code> and <code>a</code></li> <li>D: <code>a</code> and <code>['a', 'b', 'c']</code></li> </ul> Answer <p>  #### Answer: C  With the `yield` keyword, we `yield` values in a generator function. With the `yield*` keyword, we can yield values from another generator function, or iterable object (for example an array).  In `generatorOne`, we yield the entire array `['a', 'b', 'c']` using the `yield` keyword. The value of `value` property on the object returned by the `next` method on `one` (`one.next().value`) is equal to the entire array `['a', 'b', 'c']`.   <pre><code>console.log(one.next().value); // ['a', 'b', 'c']\nconsole.log(one.next().value); // undefined\n</code></pre>   In `generatorTwo`, we use the `yield*` keyword. This means that the first yielded value of `two`, is equal to the first yielded value in the iterator. The iterator is the array `['a', 'b', 'c']`. The first yielded value is `a`, so the first time we call `two.next().value`, `a` is returned.   <pre><code>console.log(two.next().value); // 'a'\nconsole.log(two.next().value); // 'b'\nconsole.log(two.next().value); // 'c'\nconsole.log(two.next().value); // undefined\n</code></pre> </p>"},{"location":"programming/javascript/javascript_questions/#113-whats-the-output","title":"113. What's the output?","text":"<pre><code>console.log(`${(x =&gt; x)('I love')} to program`);\n</code></pre> <ul> <li>A: <code>I love to program</code></li> <li>B: <code>undefined to program</code></li> <li>C: <code>${(x =&gt; x)('I love') to program</code></li> <li>D: <code>TypeError</code></li> </ul> Answer <p>  #### Answer: A  Expressions within template literals are evaluated first. This means that the string will contain the returned value of the expression, the immediately invoked function `(x =&gt; x)('I love')` in this case. We pass the value `'I love'` as an argument to the `x =&gt; x` arrow function. `x` is equal to `'I love'`, which gets returned. This results in `I love to program`.  </p>"},{"location":"programming/javascript/javascript_questions/#114-what-will-happen","title":"114. What will happen?","text":"<pre><code>let config = {\n  alert: setInterval(() =&gt; {\n    console.log('Alert!');\n  }, 1000),\n};\n\nconfig = null;\n</code></pre> <ul> <li>A: The <code>setInterval</code> callback won't be invoked</li> <li>B: The <code>setInterval</code> callback gets invoked once</li> <li>C: The <code>setInterval</code> callback will still be called every second</li> <li>D: We never invoked <code>config.alert()</code>, config is <code>null</code></li> </ul> Answer <p>  #### Answer: C  Normally when we set objects equal to `null`, those objects get _garbage collected_ as there is no reference anymore to that object. However, since the callback function within `setInterval` is an arrow function (thus bound to the `config` object), the callback function still holds a reference to the `config` object.  As long as there is a reference, the object won't get garbage collected.  Since this is an interval, setting `config` to `null` or `delete`-ing `config.alert` won't garbage-collect the interval, so the interval will still be called.  It should be cleared with `clearInterval(config.alert)` to remove it from memory. Since it was not cleared, the `setInterval` callback function will still get invoked every 1000ms (1s).  </p>"},{"location":"programming/javascript/javascript_questions/#115-which-methods-will-return-the-value-hello-world","title":"115. Which method(s) will return the value <code>'Hello world!'</code>?","text":"<pre><code>const myMap = new Map();\nconst myFunc = () =&gt; 'greeting';\n\nmyMap.set(myFunc, 'Hello world!');\n\n//1\nmyMap.get('greeting');\n//2\nmyMap.get(myFunc);\n//3\nmyMap.get(() =&gt; 'greeting');\n</code></pre> <ul> <li>A: 1</li> <li>B: 2</li> <li>C: 2 and 3</li> <li>D: All of them</li> </ul> Answer <p>  #### Answer: B  When adding a key/value pair using the `set` method, the key will be the value of the first argument passed to the `set` function, and the value will be the second argument passed to the `set` function. The key is the _function_ `() =&gt; 'greeting'` in this case, and the value `'Hello world'`. `myMap` is now `{ () =&gt; 'greeting' =&gt; 'Hello world!' }`.  1 is wrong, since the key is not `'greeting'` but `() =&gt; 'greeting'`. 3 is wrong, since we're creating a new function by passing it as a parameter to the `get` method. Object interact by _reference_. Functions are objects, which is why two functions are never strictly equal, even if they are identical: they have a reference to a different spot in memory.  </p>"},{"location":"programming/javascript/javascript_questions/#116-whats-the-output","title":"116. What's the output?","text":"<pre><code>const person = {\n  name: 'Lydia',\n  age: 21,\n};\n\nconst changeAge = (x = { ...person }) =&gt; (x.age += 1);\nconst changeAgeAndName = (x = { ...person }) =&gt; {\n  x.age += 1;\n  x.name = 'Sarah';\n};\n\nchangeAge(person);\nchangeAgeAndName();\n\nconsole.log(person);\n</code></pre> <ul> <li>A: <code>{name: \"Sarah\", age: 22}</code></li> <li>B: <code>{name: \"Sarah\", age: 23}</code></li> <li>C: <code>{name: \"Lydia\", age: 22}</code></li> <li>D: <code>{name: \"Lydia\", age: 23}</code></li> </ul> Answer <p>  #### Answer: C  Both the `changeAge` and `changeAgeAndName` functions have a default parameter, namely a _newly_ created object `{ ...person }`. This object has copies of all the key/values in the `person` object.  First, we invoke the `changeAge` function and pass the `person` object as its argument. This function increases the value of the `age` property by 1. `person` is now `{ name: \"Lydia\", age: 22 }`.  Then, we invoke the `changeAgeAndName` function, however we don't pass a parameter. Instead, the value of `x` is equal to a _new_ object: `{ ...person }`. Since it's a new object, it doesn't affect the values of the properties on the `person` object. `person` is still equal to `{ name: \"Lydia\", age: 22 }`.  </p>"},{"location":"programming/javascript/javascript_questions/#117-which-of-the-following-options-will-return-6","title":"117. Which of the following options will return <code>6</code>?","text":"<pre><code>function sumValues(x, y, z) {\n  return x + y + z;\n}\n</code></pre> <ul> <li>A: <code>sumValues([...1, 2, 3])</code></li> <li>B: <code>sumValues([...[1, 2, 3]])</code></li> <li>C: <code>sumValues(...[1, 2, 3])</code></li> <li>D: <code>sumValues([1, 2, 3])</code></li> </ul> Answer <p>  #### Answer: C  With the spread operator `...`, we can _spread_ iterables to individual elements. The `sumValues` function receives three arguments: `x`, `y` and `z`. `...[1, 2, 3]` will result in `1, 2, 3`, which we pass to the `sumValues` function.  </p>"},{"location":"programming/javascript/javascript_questions/#118-whats-the-output","title":"118. What's the output?","text":"<pre><code>let num = 1;\nconst list = ['\ud83e\udd73', '\ud83e\udd20', '\ud83e\udd70', '\ud83e\udd2a'];\n\nconsole.log(list[(num += 1)]);\n</code></pre> <ul> <li>A: <code>\ud83e\udd20</code></li> <li>B: <code>\ud83e\udd70</code></li> <li>C: <code>SyntaxError</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: B  With the `+=` operand, we're incrementing the value of `num` by `1`. `num` had the initial value `1`, so `1 + 1` is `2`. The item on the second index in the `list` array is \ud83e\udd70, `console.log(list[2])` prints \ud83e\udd70.  </p>"},{"location":"programming/javascript/javascript_questions/#119-whats-the-output","title":"119. What's the output?","text":"<pre><code>const person = {\n  firstName: 'Lydia',\n  lastName: 'Hallie',\n  pet: {\n    name: 'Mara',\n    breed: 'Dutch Tulip Hound',\n  },\n  getFullName() {\n    return `${this.firstName} ${this.lastName}`;\n  },\n};\n\nconsole.log(person.pet?.name);\nconsole.log(person.pet?.family?.name);\nconsole.log(person.getFullName?.());\nconsole.log(member.getLastName?.());\n</code></pre> <ul> <li>A: <code>undefined</code> <code>undefined</code> <code>undefined</code> <code>undefined</code></li> <li>B: <code>Mara</code> <code>undefined</code> <code>Lydia Hallie</code> <code>ReferenceError</code></li> <li>C: <code>Mara</code> <code>null</code> <code>Lydia Hallie</code> <code>null</code></li> <li>D: <code>null</code> <code>ReferenceError</code> <code>null</code> <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: B  With the optional chaining operator `?.`, we no longer have to explicitly check whether the deeper nested values are valid or not. If we're trying to access a property on an `undefined` or `null` value (_nullish_), the expression short-circuits and returns `undefined`.  `person.pet?.name`: `person` has a property named `pet`: `person.pet` is not nullish. It has a property called `name`, and returns `Mara`. `person.pet?.family?.name`: `person` has a property named `pet`: `person.pet` is not nullish. `pet` does _not_ have a property called `family`, `person.pet.family` is nullish. The expression returns `undefined`. `person.getFullName?.()`: `person` has a property named `getFullName`: `person.getFullName()` is not nullish and can get invoked, which returns `Lydia Hallie`. `member.getLastName?.()`: variable `member` is non existent therefore a `ReferenceError` gets thrown!  </p>"},{"location":"programming/javascript/javascript_questions/#120-whats-the-output","title":"120. What's the output?","text":"<pre><code>const groceries = ['banana', 'apple', 'peanuts'];\n\nif (groceries.indexOf('banana')) {\n  console.log('We have to buy bananas!');\n} else {\n  console.log(`We don't have to buy bananas!`);\n}\n</code></pre> <ul> <li>A: We have to buy bananas!</li> <li>B: We don't have to buy bananas</li> <li>C: <code>undefined</code></li> <li>D: <code>1</code></li> </ul> Answer <p>  #### Answer: B  We passed the condition `groceries.indexOf(\"banana\")` to the if-statement. `groceries.indexOf(\"banana\")` returns `0`, which is a falsy value. Since the condition in the if-statement is falsy, the code in the `else` block runs, and `We don't have to buy bananas!` gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#121-whats-the-output","title":"121. What's the output?","text":"<pre><code>const config = {\n  languages: [],\n  set language(lang) {\n    return this.languages.push(lang);\n  },\n};\n\nconsole.log(config.language);\n</code></pre> <ul> <li>A: <code>function language(lang) { this.languages.push(lang }</code></li> <li>B: <code>0</code></li> <li>C: <code>[]</code></li> <li>D: <code>undefined</code></li> </ul> Answer <p>  #### Answer: D  The `language` method is a `setter`. Setters don't hold an actual value, their purpose is to _modify_ properties. When calling a `setter` method, `undefined` gets returned.  </p>"},{"location":"programming/javascript/javascript_questions/#122-whats-the-output","title":"122. What's the output?","text":"<pre><code>const name = 'Lydia Hallie';\n\nconsole.log(!typeof name === 'object');\nconsole.log(!typeof name === 'string');\n</code></pre> <ul> <li>A: <code>false</code> <code>true</code></li> <li>B: <code>true</code> <code>false</code></li> <li>C: <code>false</code> <code>false</code></li> <li>D: <code>true</code> <code>true</code></li> </ul> Answer <p>  #### Answer: C  `typeof name` returns `\"string\"`. The string `\"string\"` is a truthy value, so `!typeof name` returns the boolean value `false`. `false === \"object\"` and `false === \"string\"` both return`false`.  (If we wanted to check whether the type was (un)equal to a certain type, we should've written `!==` instead of `!typeof`)  </p>"},{"location":"programming/javascript/javascript_questions/#123-whats-the-output","title":"123. What's the output?","text":"<pre><code>const add = x =&gt; y =&gt; z =&gt; {\n  console.log(x, y, z);\n  return x + y + z;\n};\n\nadd(4)(5)(6);\n</code></pre> <ul> <li>A: <code>4</code> <code>5</code> <code>6</code></li> <li>B: <code>6</code> <code>5</code> <code>4</code></li> <li>C: <code>4</code> <code>function</code> <code>function</code></li> <li>D: <code>undefined</code> <code>undefined</code> <code>6</code></li> </ul> Answer <p>  #### Answer: A  The `add` function returns an arrow function, which returns an arrow function, which returns an arrow function (still with me?). The first function receives an argument `x` with the value of `4`. We invoke the second function, which receives an argument `y` with the value `5`. Then we invoke the third function, which receives an argument `z` with the value `6`. When we're trying to access the value `x`, `y` and `z` within the last arrow function, the JS engine goes up the scope chain in order to find the values for `x` and `y` accordingly. This returns `4` `5` `6`.  </p>"},{"location":"programming/javascript/javascript_questions/#124-whats-the-output","title":"124. What's the output?","text":"<pre><code>async function* range(start, end) {\n  for (let i = start; i &lt;= end; i++) {\n    yield Promise.resolve(i);\n  }\n}\n\n(async () =&gt; {\n  const gen = range(1, 3);\n  for await (const item of gen) {\n    console.log(item);\n  }\n})();\n</code></pre> <ul> <li>A: <code>Promise {1}</code> <code>Promise {2}</code> <code>Promise {3}</code></li> <li>B: <code>Promise {&lt;pending&gt;}</code> <code>Promise {&lt;pending&gt;}</code> <code>Promise {&lt;pending&gt;}</code></li> <li>C: <code>1</code> <code>2</code> <code>3</code></li> <li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li> </ul> Answer <p>  #### Answer: C  The generator function `range` returns an async object with promises for each item in the range we pass: `Promise{1}`, `Promise{2}`, `Promise{3}`. We set the variable `gen` equal to the async object, after which we loop over it using a `for await ... of` loop. We set the variable `item` equal to the returned Promise values: first `Promise{1}`, then `Promise{2}`, then `Promise{3}`. Since we're _awaiting_ the value of `item`, the resolved promise, the resolved _values_ of the promises get returned: `1`, `2`, then `3`.  </p>"},{"location":"programming/javascript/javascript_questions/#125-whats-the-output","title":"125. What's the output?","text":"<pre><code>const myFunc = ({ x, y, z }) =&gt; {\n  console.log(x, y, z);\n};\n\nmyFunc(1, 2, 3);\n</code></pre> <ul> <li>A: <code>1</code> <code>2</code> <code>3</code></li> <li>B: <code>{1: 1}</code> <code>{2: 2}</code> <code>{3: 3}</code></li> <li>C: <code>{ 1: undefined }</code> <code>undefined</code> <code>undefined</code></li> <li>D: <code>undefined</code> <code>undefined</code> <code>undefined</code></li> </ul> Answer <p>  #### Answer: D  `myFunc` expects an object with properties `x`, `y` and `z` as its argument. Since we're only passing three separate numeric values (1, 2, 3) instead of one object with properties `x`, `y` and `z` ({x: 1, y: 2, z: 3}), `x`, `y` and `z` have their default value of `undefined`.  </p>"},{"location":"programming/javascript/javascript_questions/#126-whats-the-output","title":"126. What's the output?","text":"<pre><code>function getFine(speed, amount) {\n  const formattedSpeed = new Intl.NumberFormat('en-US', {\n    style: 'unit',\n    unit: 'mile-per-hour'\n  }).format(speed);\n\n  const formattedAmount = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(amount);\n\n  return `The driver drove ${formattedSpeed} and has to pay ${formattedAmount}`;\n}\n\nconsole.log(getFine(130, 300))\n</code></pre> <ul> <li>A: The driver drove 130 and has to pay 300</li> <li>B: The driver drove 130 mph and has to pay \\$300.00</li> <li>C: The driver drove undefined and has to pay undefined</li> <li>D: The driver drove 130.00 and has to pay 300.00</li> </ul> Answer <p>  #### Answer: B  With the `Intl.NumberFormat` method, we can format numeric values to any locale. We format the numeric value `130` to the `en-US` locale as a `unit` in `mile-per-hour`, which results in `130 mph`. The numeric value `300` to the `en-US` locale as a `currency` in `USD` results in `$300.00`.  </p>"},{"location":"programming/javascript/javascript_questions/#127-whats-the-output","title":"127. What's the output?","text":"<pre><code>const spookyItems = ['\ud83d\udc7b', '\ud83c\udf83', '\ud83d\udd78'];\n({ item: spookyItems[3] } = { item: '\ud83d\udc80' });\n\nconsole.log(spookyItems);\n</code></pre> <ul> <li>A: <code>[\"\ud83d\udc7b\", \"\ud83c\udf83\", \"\ud83d\udd78\"]</code></li> <li>B: <code>[\"\ud83d\udc7b\", \"\ud83c\udf83\", \"\ud83d\udd78\", \"\ud83d\udc80\"]</code></li> <li>C: <code>[\"\ud83d\udc7b\", \"\ud83c\udf83\", \"\ud83d\udd78\", { item: \"\ud83d\udc80\" }]</code></li> <li>D: <code>[\"\ud83d\udc7b\", \"\ud83c\udf83\", \"\ud83d\udd78\", \"[object Object]\"]</code></li> </ul> Answer <p>  #### Answer: B  By destructuring objects, we can unpack values from the right-hand object, and assign the unpacked value to the value of the same property name on the left-hand object. In this case, we're assigning the value \"\ud83d\udc80\" to `spookyItems[3]`. This means that we're modifying the `spookyItems` array, we're adding the \"\ud83d\udc80\" to it. When logging `spookyItems`, `[\"\ud83d\udc7b\", \"\ud83c\udf83\", \"\ud83d\udd78\", \"\ud83d\udc80\"]` gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#128-whats-the-output","title":"128. What's the output?","text":"<pre><code>const name = 'Lydia Hallie';\nconst age = 21;\n\nconsole.log(Number.isNaN(name));\nconsole.log(Number.isNaN(age));\n\nconsole.log(isNaN(name));\nconsole.log(isNaN(age));\n</code></pre> <ul> <li>A: <code>true</code> <code>false</code> <code>true</code> <code>false</code></li> <li>B: <code>true</code> <code>false</code> <code>false</code> <code>false</code></li> <li>C: <code>false</code> <code>false</code> <code>true</code> <code>false</code></li> <li>D: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li> </ul> Answer <p>  #### Answer: C  With the `Number.isNaN` method, you can check if the value you pass is a _numeric value_ and equal to `NaN`. `name` is not a numeric value, so `Number.isNaN(name)` returns `false`. `age` is a numeric value, but is not equal to `NaN`, so `Number.isNaN(age)` returns `false`.  With the `isNaN` method, you can check if the value you pass is not a number. `name` is not a number, so `isNaN(name)` returns true. `age` is a number, so `isNaN(age)` returns `false`.  </p>"},{"location":"programming/javascript/javascript_questions/#129-whats-the-output","title":"129. What's the output?","text":"<pre><code>const randomValue = 21;\n\nfunction getInfo() {\n  console.log(typeof randomValue);\n  const randomValue = 'Lydia Hallie';\n}\n\ngetInfo();\n</code></pre> <ul> <li>A: <code>\"number\"</code></li> <li>B: <code>\"string\"</code></li> <li>C: <code>undefined</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: D  Variables declared with the `const` keyword are not referenceable before their initialization: this is called the _temporal dead zone_. In the `getInfo` function, the variable `randomValue` is scoped in the functional scope of `getInfo`. On the line where we want to log the value of `typeof randomValue`, the variable `randomValue` isn't initialized yet: a `ReferenceError` gets thrown! The engine didn't go down the scope chain since we declared the variable `randomValue` in the `getInfo` function.  </p>"},{"location":"programming/javascript/javascript_questions/#130-whats-the-output","title":"130. What's the output?","text":"<pre><code>const myPromise = Promise.resolve('Woah some cool data');\n\n(async () =&gt; {\n  try {\n    console.log(await myPromise);\n  } catch {\n    throw new Error(`Oops didn't work`);\n  } finally {\n    console.log('Oh finally!');\n  }\n})();\n</code></pre> <ul> <li>A: <code>Woah some cool data</code></li> <li>B: <code>Oh finally!</code></li> <li>C: <code>Woah some cool data</code> <code>Oh finally!</code></li> <li>D: <code>Oops didn't work</code> <code>Oh finally!</code></li> </ul> Answer <p>  #### Answer: C  In the `try` block, we're logging the awaited value of the `myPromise` variable: `\"Woah some cool data\"`. Since no errors were thrown in the `try` block, the code in the `catch` block doesn't run. The code in the `finally` block _always_ runs, `\"Oh finally!\"` gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#131-whats-the-output","title":"131. What's the output?","text":"<pre><code>const emojis = ['\ud83e\udd51', ['\u2728', '\u2728', ['\ud83c\udf55', '\ud83c\udf55']]];\n\nconsole.log(emojis.flat(1));\n</code></pre> <ul> <li>A: <code>['\ud83e\udd51', ['\u2728', '\u2728', ['\ud83c\udf55', '\ud83c\udf55']]]</code></li> <li>B: <code>['\ud83e\udd51', '\u2728', '\u2728', ['\ud83c\udf55', '\ud83c\udf55']]</code></li> <li>C: <code>['\ud83e\udd51', ['\u2728', '\u2728', '\ud83c\udf55', '\ud83c\udf55']]</code></li> <li>D: <code>['\ud83e\udd51', '\u2728', '\u2728', '\ud83c\udf55', '\ud83c\udf55']</code></li> </ul> Answer <p>  #### Answer: B  With the `flat` method, we can create a new, flattened array. The depth of the flattened array depends on the value that we pass. In this case, we passed the value `1` (which we didn't have to, that's the default value), meaning that only the arrays on the first depth will be concatenated. `['\ud83e\udd51']` and `['\u2728', '\u2728', ['\ud83c\udf55', '\ud83c\udf55']]` in this case. Concatenating these two arrays results in `['\ud83e\udd51', '\u2728', '\u2728', ['\ud83c\udf55', '\ud83c\udf55']]`.  </p>"},{"location":"programming/javascript/javascript_questions/#132-whats-the-output","title":"132. What's the output?","text":"<pre><code>class Counter {\n  constructor() {\n    this.count = 0;\n  }\n\n  increment() {\n    this.count++;\n  }\n}\n\nconst counterOne = new Counter();\ncounterOne.increment();\ncounterOne.increment();\n\nconst counterTwo = counterOne;\ncounterTwo.increment();\n\nconsole.log(counterOne.count);\n</code></pre> <ul> <li>A: <code>0</code></li> <li>B: <code>1</code></li> <li>C: <code>2</code></li> <li>D: <code>3</code></li> </ul> Answer <p>  #### Answer: D  `counterOne` is an instance of the `Counter` class. The counter class contains a `count` property on its constructor, and an `increment` method. First, we invoked the `increment` method twice by calling `counterOne.increment()`. Currently, `counterOne.count` is `2`.    Then, we create a new variable `counterTwo`, and set it equal to `counterOne`. Since objects interact by reference, we're just creating a new reference to the same spot in memory that `counterOne` points to. Since it has the same spot in memory, any changes made to the object that `counterTwo` has a reference to, also apply to `counterOne`. Currently, `counterTwo.count` is `2`.  We invoke `counterTwo.increment()`, which sets `count` to `3`. Then, we log the count on `counterOne`, which logs `3`.   </p>"},{"location":"programming/javascript/javascript_questions/#133-whats-the-output","title":"133. What's the output?","text":"<pre><code>const myPromise = Promise.resolve(Promise.resolve('Promise'));\n\nfunction funcOne() {\n  setTimeout(() =&gt; console.log('Timeout 1!'), 0);\n  myPromise.then(res =&gt; res).then(res =&gt; console.log(`${res} 1!`));\n  console.log('Last line 1!');\n}\n\nasync function funcTwo() {\n  const res = await myPromise;\n  console.log(`${res} 2!`)\n  setTimeout(() =&gt; console.log('Timeout 2!'), 0);\n  console.log('Last line 2!');\n}\n\nfuncOne();\nfuncTwo();\n</code></pre> <ul> <li>A: <code>Promise 1! Last line 1! Promise 2! Last line 2! Timeout 1! Timeout 2!</code></li> <li>B: <code>Last line 1! Timeout 1! Promise 1! Last line 2! Promise2! Timeout 2!</code></li> <li>C: <code>Last line 1! Promise 2! Last line 2! Promise 1! Timeout 1! Timeout 2!</code></li> <li>D: <code>Timeout 1! Promise 1! Last line 1! Promise 2! Timeout 2! Last line 2!</code></li> </ul> Answer <p>  #### Answer: C  First, we invoke `funcOne`. On the first line of `funcOne`, we call the _asynchronous_ `setTimeout` function, from which the callback is sent to the Web API. (see my article on the event loop here.)  Then we call the `myPromise` promise, which is an _asynchronous_ operation.  Both the promise and the timeout are asynchronous operations, the function keeps on running while it's busy completing the promise and handling the `setTimeout` callback. This means that `Last line 1!` gets logged first, since this is not an asynchonous operation.   Since the callstack is not empty yet, the `setTimeout` function and promise in `funcOne` cannot get added to the callstack yet.  In `funcTwo`, the variable `res` gets `Promise` because `Promise.resolve(Promise.resolve('Promise'))` is equivalent to `Promise.resolve('Promise')` since resolving a promise just resolves it's value. The `await` in this line stops the execution of the function until it receives the resolution of the promise and then keeps on running synchronously until completion, so `Promise 2!` and then `Last line 2!` are logged and the `setTimeout` is sent to the Web API.  Then the call stack is empty. Promises are _microtasks_ so they are resolved first when the call stack is empty so `Promise 1!` gets to be logged.  Now, since `funcTwo` popped off the call stack, the call stack is empty. The callbacks waiting in the queue (`() =&gt; console.log(\"Timeout 1!\")` from `funcOne`, and `() =&gt; console.log(\"Timeout 2!\")` from `funcTwo`) get added to the call stack one by one. The first callback logs `Timeout 1!`, and gets popped off the stack. Then, the second callback logs `Timeout 2!`, and gets popped off the stack.  </p>"},{"location":"programming/javascript/javascript_questions/#134-how-can-we-invoke-sum-in-sumjs-from-indexjs","title":"134. How can we invoke <code>sum</code> in <code>sum.js</code> from <code>index.js?</code>","text":"<pre><code>// sum.js\nexport default function sum(x) {\n  return x + x;\n}\n\n// index.js\nimport * as sum from './sum';\n</code></pre> <ul> <li>A: <code>sum(4)</code></li> <li>B: <code>sum.sum(4)</code></li> <li>C: <code>sum.default(4)</code></li> <li>D: Default aren't imported with <code>*</code>, only named exports</li> </ul> Answer <p>  #### Answer: C  With the asterisk `*`, we import all exported values from that file, both default and named. If we had the following file:   <pre><code>// info.js\nexport const name = 'Lydia';\nexport const age = 21;\nexport default 'I love JavaScript';\n\n// index.js\nimport * as info from './info';\nconsole.log(info);\n</code></pre>   The following would get logged:   <pre><code>{\n  default: \"I love JavaScript\",\n  name: \"Lydia\",\n  age: 21\n}\n</code></pre>   For the `sum` example, it means that the imported value `sum` looks like this:   <pre><code>{ default: function sum(x) { return x + x } }\n</code></pre>   We can invoke this function, by calling `sum.default`  </p>"},{"location":"programming/javascript/javascript_questions/#135-whats-the-output","title":"135. What's the output?","text":"<pre><code>const handler = {\n  set: () =&gt; console.log('Added a new property!'),\n  get: () =&gt; console.log('Accessed a property!'),\n};\n\nconst person = new Proxy({}, handler);\n\nperson.name = 'Lydia';\nperson.name;\n</code></pre> <ul> <li>A: <code>Added a new property!</code></li> <li>B: <code>Accessed a property!</code></li> <li>C: <code>Added a new property!</code> <code>Accessed a property!</code></li> <li>D: Nothing gets logged</li> </ul> Answer <p>  #### Answer: C  With a Proxy object, we can add custom behavior to an object that we pass to it as the second argument. In this case, we pass the `handler` object which contained two properties: `set` and `get`. `set` gets invoked whenever we _set_ property values, `get` gets invoked whenever we _get_ (access) property values.  The first argument is an empty object `{}`, which is the value of `person`. To this object, the custom behavior specified in the `handler` object gets added. If we add a property to the `person` object, `set` will get invoked. If we access a property on the `person` object, `get` gets invoked.  First, we added a new property `name` to the proxy object (`person.name = \"Lydia\"`). `set` gets invoked, and logs `\"Added a new property!\"`.  Then, we access a property value on the proxy object, the `get` property on the handler object got invoked. `\"Accessed a property!\"` gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#136-which-of-the-following-will-modify-the-person-object","title":"136. Which of the following will modify the <code>person</code> object?","text":"<pre><code>const person = { name: 'Lydia Hallie' };\n\nObject.seal(person);\n</code></pre> <ul> <li>A: <code>person.name = \"Evan Bacon\"</code></li> <li>B: <code>person.age = 21</code></li> <li>C: <code>delete person.name</code></li> <li>D: <code>Object.assign(person, { age: 21 })</code></li> </ul> Answer <p>  #### Answer: A  With `Object.seal` we can prevent new properties from being _added_, or existing properties to be _removed_.  However, you can still modify the value of existing properties.  </p>"},{"location":"programming/javascript/javascript_questions/#137-which-of-the-following-will-modify-the-person-object","title":"137. Which of the following will modify the <code>person</code> object?","text":"<pre><code>const person = {\n  name: 'Lydia Hallie',\n  address: {\n    street: '100 Main St',\n  },\n};\n\nObject.freeze(person);\n</code></pre> <ul> <li>A: <code>person.name = \"Evan Bacon\"</code></li> <li>B: <code>delete person.address</code></li> <li>C: <code>person.address.street = \"101 Main St\"</code></li> <li>D: <code>person.pet = { name: \"Mara\" }</code></li> </ul> Answer <p>  #### Answer: C  The `Object.freeze` method _freezes_ an object. No properties can be added, modified, or removed.  However, it only _shallowly_ freezes the object, meaning that only _direct_ properties on the object are frozen. If the property is another object, like `address` in this case, the properties on that object aren't frozen, and can be modified.  </p>"},{"location":"programming/javascript/javascript_questions/#138-whats-the-output","title":"138. What's the output?","text":"<pre><code>const add = x =&gt; x + x;\n\nfunction myFunc(num = 2, value = add(num)) {\n  console.log(num, value);\n}\n\nmyFunc();\nmyFunc(3);\n</code></pre> <ul> <li>A: <code>2</code> <code>4</code> and <code>3</code> <code>6</code></li> <li>B: <code>2</code> <code>NaN</code> and <code>3</code> <code>NaN</code></li> <li>C: <code>2</code> <code>Error</code> and <code>3</code> <code>6</code></li> <li>D: <code>2</code> <code>4</code> and <code>3</code> <code>Error</code></li> </ul> Answer <p>  #### Answer: A  First, we invoked `myFunc()` without passing any arguments. Since we didn't pass arguments, `num` and `value` got their default values: num is `2`, and `value` the returned value of the function `add`. To the `add` function, we pass `num` as an argument, which had the value of `2`. `add` returns `4`, which is the value of `value`.  Then, we invoked `myFunc(3)` and passed the value `3` as the value for the argument `num`. We didn't pass an argument for `value`. Since we didn't pass a value for the `value` argument, it got the default value: the returned value of the `add` function. To `add`, we pass `num`, which has the value of `3`. `add` returns `6`, which is the value of `value`.  </p>"},{"location":"programming/javascript/javascript_questions/#139-whats-the-output","title":"139. What's the output?","text":"<pre><code>class Counter {\n  #number = 10\n\n  increment() {\n    this.#number++\n  }\n\n  getNum() {\n    return this.#number\n  }\n}\n\nconst counter = new Counter()\ncounter.increment()\n\nconsole.log(counter.#number)\n</code></pre> <ul> <li>A: <code>10</code></li> <li>B: <code>11</code></li> <li>C: <code>undefined</code></li> <li>D: <code>SyntaxError</code></li> </ul> Answer <p>  #### Answer: D  In ES2020, we can add private variables in classes by using the `#`. We cannot access these variables outside of the class. When we try to log `counter.#number`, a SyntaxError gets thrown: we cannot acccess it outside the `Counter` class!  </p>"},{"location":"programming/javascript/javascript_questions/#140-whats-missing","title":"140. What's missing?","text":"<pre><code>const teams = [\n  { name: 'Team 1', members: ['Paul', 'Lisa'] },\n  { name: 'Team 2', members: ['Laura', 'Tim'] },\n];\n\nfunction* getMembers(members) {\n  for (let i = 0; i &lt; members.length; i++) {\n    yield members[i];\n  }\n}\n\nfunction* getTeams(teams) {\n  for (let i = 0; i &lt; teams.length; i++) {\n    // \u2728 SOMETHING IS MISSING HERE \u2728\n  }\n}\n\nconst obj = getTeams(teams);\nobj.next(); // { value: \"Paul\", done: false }\nobj.next(); // { value: \"Lisa\", done: false }\n</code></pre> <ul> <li>A: <code>yield getMembers(teams[i].members)</code></li> <li>B: <code>yield* getMembers(teams[i].members)</code></li> <li>C: <code>return getMembers(teams[i].members)</code></li> <li>D: <code>return yield getMembers(teams[i].members)</code></li> </ul> Answer <p>  #### Answer: B  In order to iterate over the `members` in each element in the `teams` array, we need to pass `teams[i].members` to the `getMembers` generator function. The generator function returns a generator object. In order to iterate over each element in this generator object, we need to use `yield*`.  If we would've written `yield`, `return yield`, or `return`, the entire generator function would've gotten returned the first time we called the `next` method.  </p>"},{"location":"programming/javascript/javascript_questions/#141-whats-the-output","title":"141. What's the output?","text":"<pre><code>const person = {\n  name: 'Lydia Hallie',\n  hobbies: ['coding'],\n};\n\nfunction addHobby(hobby, hobbies = person.hobbies) {\n  hobbies.push(hobby);\n  return hobbies;\n}\n\naddHobby('running', []);\naddHobby('dancing');\naddHobby('baking', person.hobbies);\n\nconsole.log(person.hobbies);\n</code></pre> <ul> <li>A: <code>[\"coding\"]</code></li> <li>B: <code>[\"coding\", \"dancing\"]</code></li> <li>C: <code>[\"coding\", \"dancing\", \"baking\"]</code></li> <li>D: <code>[\"coding\", \"running\", \"dancing\", \"baking\"]</code></li> </ul> Answer <p>  #### Answer: C  The `addHobby` function receives two arguments, `hobby` and `hobbies` with the default value of the `hobbies` array on the `person` object.  First, we invoke the `addHobby` function, and pass `\"running\"` as the value for `hobby` and an empty array as the value for `hobbies`. Since we pass an empty array as the value for `hobbies`, `\"running\"` gets added to this empty array.  Then, we invoke the `addHobby` function, and pass `\"dancing\"` as the value for `hobby`. We didn't pass a value for `hobbies`, so it gets the default value, the `hobbies` property on the `person` object. We push the hobby `dancing` to the `person.hobbies` array.  Last, we invoke the `addHobby` function, and pass `\"baking\"` as the value for `hobby`, and the `person.hobbies` array as the value for `hobbies`. We push the hobby `baking` to the `person.hobbies` array.  After pushing `dancing` and `baking`, the value of `person.hobbies` is `[\"coding\", \"dancing\", \"baking\"]`  </p>"},{"location":"programming/javascript/javascript_questions/#142-whats-the-output","title":"142. What's the output?","text":"<pre><code>class Bird {\n  constructor() {\n    console.log(\"I'm a bird. \ud83e\udda2\");\n  }\n}\n\nclass Flamingo extends Bird {\n  constructor() {\n    console.log(\"I'm pink. \ud83c\udf38\");\n    super();\n  }\n}\n\nconst pet = new Flamingo();\n</code></pre> <ul> <li>A: <code>I'm pink. \ud83c\udf38</code></li> <li>B: <code>I'm pink. \ud83c\udf38</code> <code>I'm a bird. \ud83e\udda2</code></li> <li>C: <code>I'm a bird. \ud83e\udda2</code> <code>I'm pink. \ud83c\udf38</code></li> <li>D: Nothing, we didn't call any method</li> </ul> Answer <p>  #### Answer: B  We create the variable `pet` which is an instance of the `Flamingo` class. When we instantiate this instance, the `constructor` on `Flamingo` gets called. First, `\"I'm pink. \ud83c\udf38\"` gets logged, after which we call `super()`. `super()` calls the constructor of the parent class, `Bird`. The constructor in `Bird` gets called, and logs `\"I'm a bird. \ud83e\udda2\"`.  </p>"},{"location":"programming/javascript/javascript_questions/#143-which-of-the-options-results-in-an-error","title":"143. Which of the options result(s) in an error?","text":"<pre><code>const emojis = ['\ud83c\udf84', '\ud83c\udf85\ud83c\udffc', '\ud83c\udf81', '\u2b50'];\n\n/* 1 */ emojis.push('\ud83e\udd8c');\n/* 2 */ emojis.splice(0, 2);\n/* 3 */ emojis = [...emojis, '\ud83e\udd42'];\n/* 4 */ emojis.length = 0;\n</code></pre> <ul> <li>A: 1</li> <li>B: 1 and 2</li> <li>C: 3 and 4</li> <li>D: 3</li> </ul> Answer <p>  #### Answer: D  The `const` keyword simply means we cannot _redeclare_ the value of that variable, it's _read-only_. However, the value itself isn't immutable. The properties on the `emojis` array can be modified, for example by pushing new values, splicing them, or setting the length of the array to 0.  </p>"},{"location":"programming/javascript/javascript_questions/#144-what-do-we-need-to-add-to-the-person-object-to-get-lydia-hallie-21-as-the-output-of-person","title":"144. What do we need to add to the <code>person</code> object to get <code>[\"Lydia Hallie\", 21]</code> as the output of <code>[...person]</code>?","text":"<pre><code>const person = {\n  name: \"Lydia Hallie\",\n  age: 21\n}\n\n[...person] // [\"Lydia Hallie\", 21]\n</code></pre> <ul> <li>A: Nothing, object are iterable by default</li> <li>B: <code>*[Symbol.iterator]() { for (let x in this) yield* this[x] }</code></li> <li>C: <code>*[Symbol.iterator]() { yield* Object.values(this) }</code></li> <li>D: <code>*[Symbol.iterator]() { for (let x in this) yield this }</code></li> </ul> Answer <p>  #### Answer: C  Objects aren't iterable by default. An iterable is an iterable if the iterator protocol is present. We can add this manually by adding the iterator symbol `[Symbol.iterator]`, which has to return a generator object, for example by making it a generator function `*[Symbol.iterator]() {}`. This generator function has to yield the `Object.values` of the `person` object if we want it to return the array `[\"Lydia Hallie\", 21]`: `yield* Object.values(this)`.  </p>"},{"location":"programming/javascript/javascript_questions/#145-whats-the-output","title":"145. What's the output?","text":"<pre><code>let count = 0;\nconst nums = [0, 1, 2, 3];\n\nnums.forEach(num =&gt; {\n    if (num) count += 1\n})\n\nconsole.log(count)\n</code></pre> <ul> <li>A: 1</li> <li>B: 2</li> <li>C: 3</li> <li>D: 4</li> </ul> Answer <p>  #### Answer: C  The `if` condition within the `forEach` loop checks whether the value of `num` is truthy or falsy. Since the first number in the `nums` array is `0`, a falsy value, the `if` statement's code block won't be executed. `count` only gets incremented for the other 3 numbers in the `nums` array, `1`, `2` and `3`. Since `count` gets incremented by `1` 3 times, the value of `count` is `3`.  </p>"},{"location":"programming/javascript/javascript_questions/#146-whats-the-output","title":"146. What's the output?","text":"<pre><code>function getFruit(fruits) {\n    console.log(fruits?.[1]?.[1])\n}\n\ngetFruit([['\ud83c\udf4a', '\ud83c\udf4c'], ['\ud83c\udf4d']])\ngetFruit()\ngetFruit([['\ud83c\udf4d'], ['\ud83c\udf4a', '\ud83c\udf4c']])\n</code></pre> <ul> <li>A: <code>null</code>, <code>undefined</code>, \ud83c\udf4c</li> <li>B: <code>[]</code>, <code>null</code>, \ud83c\udf4c</li> <li>C: <code>[]</code>, <code>[]</code>, \ud83c\udf4c</li> <li>D: <code>undefined</code>, <code>undefined</code>, \ud83c\udf4c</li> </ul> Answer <p>  #### Answer: D  The `?` allows us to optionally access deeper nested properties within objects. We're trying to log the item on index `1` within the subarray that's on index `1` of the `fruits` array. If the subarray on index `1` in the `fruits` array doesn't exist, it'll simply return `undefined`. If the subarray on index `1` in the `fruits` array exists, but this subarray doesn't have an item on its `1` index, it'll also return `undefined`.   First, we're trying to log the second item in the `['\ud83c\udf4d']` subarray of `[['\ud83c\udf4a', '\ud83c\udf4c'], ['\ud83c\udf4d']]`. This subarray only contains one item, which means there is no item on index `1`, and returns `undefined`.  Then, we're invoking the `getFruits` function without passing a value as an argument, which means that `fruits` has a value of `undefined` by default. Since we're conditionally chaining the item on index `1` of`fruits`, it returns `undefined` since this item on index `1` does not exist.   Lastly, we're trying to log the second item in the `['\ud83c\udf4a', '\ud83c\udf4c']` subarray of `['\ud83c\udf4d'], ['\ud83c\udf4a', '\ud83c\udf4c']`. The item on index `1` within this subarray is `\ud83c\udf4c`, which gets logged.  </p>"},{"location":"programming/javascript/javascript_questions/#147-whats-the-output","title":"147. What's the output?","text":"<pre><code>class Calc {\n    constructor() {\n        this.count = 0 \n    }\n\n    increase() {\n        this.count ++\n    }\n}\n\nconst calc = new Calc()\nnew Calc().increase()\n\nconsole.log(calc.count)\n</code></pre> <ul> <li>A: <code>0</code></li> <li>B: <code>1</code></li> <li>C: <code>undefined</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: A  We set the variable `calc` equal to a new instance of the `Calc` class. Then, we instantiate a new instance of `Calc`, and invoke the `increase` method on this instance. Since the count property is within the constructor of the `Calc` class, the count property is not shared on the prototype of `Calc`. This means that the value of count has not been updated for the instance calc points to, count is still `0`.  </p>"},{"location":"programming/javascript/javascript_questions/#148-whats-the-output","title":"148. What's the output?","text":"<pre><code>const user = {\n    email: \"e@mail.com\",\n    password: \"12345\"\n}\n\nconst updateUser = ({ email, password }) =&gt; {\n    if (email) {\n        Object.assign(user, { email })\n    }\n\n    if (password) {\n        user.password = password\n    }\n\n    return user\n}\n\nconst updatedUser = updateUser({ email: \"new@email.com\" })\n\nconsole.log(updatedUser === user)\n</code></pre> <ul> <li>A: <code>false</code></li> <li>B: <code>true</code></li> <li>C: <code>TypeError</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: B  The `updateUser` function updates the values of the `email` and `password` properties on user, if their values are passed to the function, after which the function returns the `user` object. The returned value of the `updateUser` function is the `user` object, which means that the value of updatedUser is a reference to the same `user` object that `user` points to. `updatedUser === user` equals `true`.  </p>"},{"location":"programming/javascript/javascript_questions/#149-whats-the-output","title":"149. What's the output?","text":"<pre><code>const fruit = ['\ud83c\udf4c', '\ud83c\udf4a', '\ud83c\udf4e']\n\nfruit.slice(0, 1)\nfruit.splice(0, 1)\nfruit.unshift('\ud83c\udf47')\n\nconsole.log(fruit)\n</code></pre> <ul> <li>A: <code>['\ud83c\udf4c', '\ud83c\udf4a', '\ud83c\udf4e']</code></li> <li>B: <code>['\ud83c\udf4a', '\ud83c\udf4e']</code></li> <li>C: <code>['\ud83c\udf47', '\ud83c\udf4a', '\ud83c\udf4e']</code></li> <li>D: <code>['\ud83c\udf47', '\ud83c\udf4c', '\ud83c\udf4a', '\ud83c\udf4e']</code></li> </ul> Answer <p>  #### Answer: C  First, we invoke the `slice` method on the fruit array. The slice method does not modify the original array, but returns the value that it sliced off the array: the banana emoji. Then, we invoke the `splice` method on the fruit array. The splice method does modify the original array, which means that the fruit array now consists of `['\ud83c\udf4a', '\ud83c\udf4e']`. At last, we invoke the `unshift` method on the `fruit` array, which modifies the original array by adding the provided value, \u2018\ud83c\udf47\u2019 in this case,  as the first element in the array.  The fruit array now consists of `['\ud83c\udf47', '\ud83c\udf4a', '\ud83c\udf4e']`.  </p>"},{"location":"programming/javascript/javascript_questions/#150-whats-the-output","title":"150. What's the output?","text":"<pre><code>const animals = {};\nlet dog = { emoji: '\ud83d\udc36' }\nlet cat = { emoji: '\ud83d\udc08' }\n\nanimals[dog] = { ...dog, name: \"Mara\" }\nanimals[cat] = { ...cat, name: \"Sara\" }\n\nconsole.log(animals[dog])\n</code></pre> <ul> <li>A: <code>{ emoji: \"\ud83d\udc36\", name: \"Mara\" }</code></li> <li>B: <code>{ emoji: \"\ud83d\udc08\", name: \"Sara\" }</code></li> <li>C: <code>undefined</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: B  Object keys are converted to strings.   Since the value of  `dog` is an object,  `animals[dog]` actually means that we\u2019re creating a new property called `\"object Object\"` equal to the new object. `animals[\"object Object\"]` is now equal to `{ emoji: \"\ud83d\udc36\", name: \"Mara\"}`.  `cat` is also an object, which means that `animals[cat]` actually means that we\u2019re overwriting the value of  `animals[\"object Object\"]` with the new cat properties.   Logging `animals[dog]`, or actually `animals[\"object Object\"]` since converting the `dog` object to a string results `\"object Object\"`, returns the `{ emoji: \"\ud83d\udc08\", name: \"Sara\" }`.  </p>"},{"location":"programming/javascript/javascript_questions/#151-whats-the-output","title":"151. What's the output?","text":"<pre><code>const user = {\n    email: \"my@email.com\",\n    updateEmail: email =&gt; {\n        this.email = email\n    }\n}\n\nuser.updateEmail(\"new@email.com\")\nconsole.log(user.email)\n</code></pre> <ul> <li>A: <code>my@email.com</code></li> <li>B: <code>new@email.com</code></li> <li>C: <code>undefined</code></li> <li>D: <code>ReferenceError</code></li> </ul> Answer <p>  #### Answer: A  The `updateEmail` function is an arrow function, and is not bound to the `user` object. This means that the `this` keyword is not referring to the `user` object, but refers to  the global scope in this case. The value of `email` within the `user` object does not get updated. When logging the value of `user.email`, the original value of `my@email.com` gets returned.   </p>"},{"location":"programming/javascript/javascript_questions/#152-whats-the-output","title":"152. What's the output?","text":"<pre><code>const promise1 = Promise.resolve('First')\nconst promise2 = Promise.resolve('Second')\nconst promise3 = Promise.reject('Third')\nconst promise4 = Promise.resolve('Fourth')\n\nconst runPromises = async () =&gt; {\n    const res1 = await Promise.all([promise1, promise2])\n    const res2  = await Promise.all([promise3, promise4])\n    return [res1, res2]\n}\n\nrunPromises()\n    .then(res =&gt; console.log(res))\n    .catch(err =&gt; console.log(err))\n</code></pre> <ul> <li>A: <code>[['First', 'Second'], ['Fourth']]</code></li> <li>B: <code>[['First', 'Second'], ['Third', 'Fourth']]</code></li> <li>C: <code>[['First', 'Second']]</code></li> <li>D: <code>'Third'</code></li> </ul> Answer <p>  #### Answer: D  The `Promise.all` method runs the passed promises in parallel. If one promise fails, the `Promise.all` method _rejects_ with the value of the rejected promise. In this case, `promise3` rejected with the value `\"Third\"`. We\u2019re catching the rejected value in the chained `catch` method on the `runPromises` invocation to catch any errors  within the `runPromises` function. Only `\"Third\"` gets logged, since `promise3` rejected with this value.  </p>"},{"location":"programming/javascript/javascript_questions/#153-what-should-the-value-of-method-be-to-log-name-lydia-age-22","title":"153. What should the value of <code>method</code> be to log <code>{ name: \"Lydia\", age: 22 }</code>?","text":"<pre><code>const keys = [\"name\", \"age\"]\nconst values = [\"Lydia\", 22]\n\nconst method = /* ?? */\nObject[method](keys.map((_, i) =&gt; {\n    return [keys[i], values[i]]\n})) // { name: \"Lydia\", age: 22 }\n</code></pre> <ul> <li>A: <code>entries</code></li> <li>B: <code>values</code></li> <li>C: <code>fromEntries</code></li> <li>D: <code>forEach</code></li> </ul> Answer <p>  #### Answer: C  The `fromEntries` method turns a 2d array into an object. The first element in each subarray will be the key, and the second element in each subarray will be the value. In this case, we\u2019re mapping over the `keys` array, which returns an array which first element is the item on the key array on the current index, and the second element is the item of the values array on the current index.   This creates an array of subarrays containing the correct keys and values, which results in `{ name: \"Lydia\", age: 22 }`  </p>"},{"location":"programming/javascript/javascript_questions/#154-whats-the-output","title":"154. What's the output?","text":"<pre><code>const createMember = ({ email, address = {}}) =&gt; {\n    const validEmail = /.+\\@.+\\..+/.test(email)\n    if (!validEmail) throw new Error(\"Valid email pls\")\n\n    return {\n        email,\n        address: address ? address : null\n    }\n}\n\nconst member = createMember({ email: \"my@email.com\" })\nconsole.log(member)\n</code></pre> <ul> <li>A: <code>{ email: \"my@email.com\", address: null }</code></li> <li>B: <code>{ email: \"my@email.com\" }</code></li> <li>C: <code>{ email: \"my@email.com\", address: {} }</code></li> <li>D: <code>{ email: \"my@email.com\", address: undefined }</code></li> </ul> Answer <p>  #### Answer: C  The default value of `address` is an empty object `{}`. When we set the variable `member` equal to the object returned by the `createMember` function, we didn't pass a value for address, which means that the value of address is the default empty object `{}`. An empty object is a truthy value, which means that the condition of the `address ? address : null` conditional returns `true`. The value of address is the empty object `{}`.  </p>"},{"location":"programming/javascript/javascript_questions/#155-whats-the-output","title":"155. What's the output?","text":"<pre><code>let randomValue = { name: \"Lydia\" }\nrandomValue = 23\n\nif (!typeof randomValue === \"string\") {\n    console.log(\"It's not a string!\")\n} else {\n    console.log(\"Yay it's a string!\")\n}\n</code></pre> <ul> <li>A: <code>It's not a string!</code></li> <li>B: <code>Yay it's a string!</code></li> <li>C: <code>TypeError</code></li> <li>D: <code>undefined</code></li> </ul> Answer <p>  #### Answer: B  The condition within the `if` statement checks whether the value of `!typeof randomValue` is equal to `\"string\"`. The `!` operator converts the value to a boolean value. If the value is truthy, the returned value will be `false`, if the value is falsy, the returned value will be `true`. In this case, the returned value of `typeof randomValue` is the truthy value `\"number\"`, meaning that the value of `!typeof randomValue` is the boolean value `false`.  `!typeof randomValue === \"string\"` always returns false, since we're actually checking `false === \"string\"`. Since the condition returned `false`, the code block of the `else` statement gets run, and `Yay it's a string!` gets logged.  </p>"},{"location":"programming/javascript/map/","title":"Map","text":"<p>Map is a collection of keyed data items, just like an Object. But the main difference is that Map allows keys of any type.</p> <p>Methods and properties are:</p> <ul> <li><code>new Map()</code> \u2013 creates the map.</li> <li><code>map.set(key, value)</code> \u2013 stores the value by the key.</li> <li><code>map.get(key)</code> \u2013 returns the value by the key, undefined if key doesn\u2019t exist in map.</li> <li><code>map.has(key)</code> \u2013 returns true if the key exists, false otherwise.</li> <li><code>map.delete(key)</code> \u2013 removes the value by the key.</li> <li><code>map.clear()</code> \u2013 removes everything from the map.</li> <li><code>map.size()</code> \u2013 returns the current element count.</li> </ul> <p>For instance:</p> <pre><code>let map = new Map();\nmap.set('1', 'str1');   // a string key\nmap.set(1, 'num1');     // a numeric key\nmap.set(true, 'bool1'); // a boolean key\n\n// remember the regular Object? it would convert keys to string\n// Map keeps the type, so these two are different:\nalert( map.get(1)   ); // 'num1'\nalert( map.get('1') ); // 'str1'\n\nalert( map.size ); // 3\n</code></pre> <p>As we can see, unlike objects, keys are not converted to strings. Any type of key is possible.</p> <p>Map can also use objects as keys.</p> <p>For instance:</p> <pre><code>let john = { name: \"John\" };\n\n// for every user, let's store their visits count\nlet visitsCountMap = new Map();\n\n// john is the key for the map\nvisitsCountMap.set(john, 123);\n\nalert( visitsCountMap.get(john) ); // 123\n</code></pre> <p>Using objects as keys is one of the most notable and important Map features. The same does not count for Object. String as a key in Object is fine, but we can\u2019t use another Object as a key in Object.</p> <p>Let\u2019s try:</p> <pre><code>let john = { name: \"John\" };\nlet ben = { name: \"Ben\" };\n\nlet visitsCountObj = {}; // try to use an object\n\nvisitsCountObj[ben] = 234; // try to use ben object as the key\nvisitsCountObj[john] = 123; // try to use john object as the key, ben object will get replaced\n\n// That's what got written!\nalert( visitsCountObj[\"[object Object]\"] ); // 123\n</code></pre> <p>As visitsCountObj is an object, it converts all Object keys, such as john and ben above, to same string \"[object Object]\". Definitely not what we want.</p> <p>Every map.set call returns the map itself, so we can \u201cchain\u201d the calls:</p> <pre><code>map.set('1', 'str1')\n  .set(1, 'num1')\n  .set(true, 'bool1');\n</code></pre>"},{"location":"programming/javascript/map/#iteration-over-map","title":"Iteration over Map","text":"<p>For looping over a map, there are 3 methods:</p> <ul> <li><code>map.keys()</code> \u2013 returns an iterable for keys,</li> <li><code>map.values()</code> \u2013 returns an iterable for values,</li> <li><code>map.entries()</code> \u2013 returns an iterable for entries [key, value], it\u2019s used by default in for..of.</li> </ul> <p>For instance:</p> <pre><code>let recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\n\n// iterate over keys (vegetables)\nfor (let vegetable of recipeMap.keys()) {\n  alert(vegetable); // cucumber, tomatoes, onion\n}\n\n// iterate over values (amounts)\nfor (let amount of recipeMap.values()) {\n  alert(amount); // 500, 350, 50\n}\n\n// iterate over [key, value] entries\nfor (let entry of recipeMap) { // the same as of recipeMap.entries()\n  alert(entry); // cucumber,500 (and so on)\n}\n</code></pre> <p>The iteration goes in the same order as the values were inserted. Map preserves this order, unlike a regular Object.</p> <p>Besides that, Map has a built-in forEach method, similar to Array:</p> <pre><code>// runs the function for each (key, value) pair\nrecipeMap.forEach( (value, key, map) =&gt; {\n  alert(`${key}: ${value}`); // cucumber: 500 etc\n});\n</code></pre>"},{"location":"programming/javascript/map/#objectentries-map-from-object","title":"Object.entries: Map from Object","text":"<p>When a Map is created, we can pass an array (or another iterable) with key/value pairs for initialization, like this:</p> <pre><code>// array of [key, value] pairs\nlet map = new Map([\n  ['1',  'str1'],\n  [1,    'num1'],\n  [true, 'bool1']\n]);\n\nalert( map.get('1') ); // str1\n</code></pre> <p>If we have a plain object, and we\u2019d like to create a Map from it, then we can use built-in method Object.entries(obj) that returns an array of key/value pairs for an object exactly in that format.</p> <p>So we can create a map from an object like this:</p> <pre><code>let obj = {\n  name: \"John\",\n  age: 30\n};\n\nlet map = new Map(Object.entries(obj));\n\nalert( map.get('name') ); // John\n</code></pre> <p>Here, Object.entries returns the array of key/value pairs: [ [\"name\",\"John\"], [\"age\", 30] ]. That\u2019s what Map needs.</p>"},{"location":"programming/javascript/map/#objectfromentries-object-from-map","title":"Object.fromEntries: Object from Map","text":"<p>We\u2019ve just seen how to create Map from a plain object with Object.entries(obj).</p> <p>There\u2019s Object.fromEntries method that does the reverse: given an array of [key, value] pairs, it creates an object from them:</p> <pre><code>let prices = Object.fromEntries([\n  ['banana', 1],\n  ['orange', 2],\n  ['meat', 4]\n]);\n\n// now prices = { banana: 1, orange: 2, meat: 4 }\n\nalert(prices.orange); // 2\n</code></pre> <p>We can use Object.fromEntries to get a plain object from Map.</p> <p>E.g. we store the data in a Map, but we need to pass it to a 3rd-party code that expects a plain object.</p> <p>Here we go:</p> <pre><code>let map = new Map();\nmap.set('banana', 1);\nmap.set('orange', 2);\nmap.set('meat', 4);\n\nlet obj = Object.fromEntries(map.entries()); // make a plain object (*)\n\n// done!\n// obj = { banana: 1, orange: 2, meat: 4 }\n\nalert(obj.orange); // 2\n</code></pre> <p>A call to map.entries() returns an iterable of key/value pairs, exactly in the right format for Object.fromEntries.</p> <p>We could also make line (*) shorter:</p> <pre><code>let obj = Object.fromEntries(map); // omit .entries()\n</code></pre> <p>That\u2019s the same, because Object.fromEntries expects an iterable object as the argument. Not necessarily an array. And the standard iteration for map returns same key/value pairs as map.entries(). So we get a plain object with same key/values as the map.</p>"},{"location":"programming/javascript/set/","title":"Set","text":"<p>A Set is a special type collection \u2013 \u201cset of values\u201d (without keys), where each value may occur only once.</p> <p>Its main methods are:</p> <ul> <li><code>new Set(iterable)</code> \u2013 creates the set, and if an iterable object is provided (usually an array), copies values from it into the set.</li> <li><code>set.add(value)</code> \u2013 adds a value, returns the set itself.</li> <li><code>set.delete(value)</code> \u2013 removes the value, returns true if value existed at the moment of the call, otherwise false.</li> <li><code>set.has(value)</code> \u2013 returns true if the value exists in the set, otherwise false.</li> <li><code>set.clear()</code> \u2013 removes everything from the set.</li> <li><code>set.size</code> \u2013 is the elements count.</li> </ul> <p>The main feature is that repeated calls of set.add(value) with the same value don\u2019t do anything. That\u2019s the reason why each value appears in a Set only once.</p> <p>For example, we have visitors coming, and we\u2019d like to remember everyone. But repeated visits should not lead to duplicates. A visitor must be \u201ccounted\u201d only once.</p> <p>Set is just the right thing for that:</p> <pre><code>let set = new Set();\n\nlet john = { name: \"John\" };\nlet pete = { name: \"Pete\" };\nlet mary = { name: \"Mary\" };\n\n// visits, some users come multiple times\nset.add(john);\nset.add(pete);\nset.add(mary);\nset.add(john);\nset.add(mary);\n\n// set keeps only unique values\nalert( set.size ); // 3\n\nfor (let user of set) {\n  alert(user.name); // John (then Pete and Mary)\n}\n</code></pre> <p>The alternative to Set could be an array of users, and the code to check for duplicates on every insertion using arr.find. But the performance would be much worse, because this method walks through the whole array checking every element. Set is much better optimized internally for uniqueness checks.</p>"},{"location":"programming/javascript/set/#iteration-over-set","title":"Iteration over Set","text":"<p>We can loop over a set either with for..of or using forEach:</p> <pre><code>let set = new Set([\"oranges\", \"apples\", \"bananas\"]);\n\nfor (let value of set) alert(value);\n\n// the same with forEach:\nset.forEach((value, valueAgain, set) =&gt; {\n  alert(value);\n});\n</code></pre> <p>Note the funny thing. The callback function passed in forEach has 3 arguments: a value, then the same value valueAgain, and then the target object. Indeed, the same value appears in the arguments twice.</p> <p>That\u2019s for compatibility with Map where the callback passed forEach has three arguments. Looks a bit strange, for sure. But may help to replace Map with Set in certain cases with ease, and vice versa.</p> <p>The same methods Map has for iterators are also supported:</p> <ul> <li><code>set.keys()</code> \u2013 returns an iterable object for values,</li> <li><code>set.values()</code> \u2013 same as set.keys(), for compatibility with Map,</li> <li><code>set.entries()</code> \u2013 returns an iterable object for entries [value, value], exists for compatibility with Map.</li> </ul>"},{"location":"programming/node/generating_optimized_image_formats_with_node/","title":"Generating Optimized Image Formats with Node.js","text":""},{"location":"programming/node/generating_optimized_image_formats_with_node/#introduction","title":"Introduction","text":"<p>Images are an important part of any web application, but they can also be a major source of performance issues if not optimized properly. In this article, we'll cover how to use Node.js and React to automatically generate optimized image formats and display them in the best format for the user's browser.</p>"},{"location":"programming/node/generating_optimized_image_formats_with_node/#setting-up","title":"Setting up","text":"<p>First we need a library that handle image processing for us, and <code>sharp</code> is what I chose  </p> <pre><code>npm i sharp\n\n</code></pre> <p>Sharp is a high-performance Node.js library for image processing and manipulation. It is designed to be fast and memory-efficient, making it ideal for processing large images and generating multiple image formats.</p>"},{"location":"programming/node/generating_optimized_image_formats_with_node/#generation-script","title":"Generation Script","text":"<p>The first step in optimizing images for the web is to generate multiple formats of each image, each with its own advantages and disadvantages. Some formats, such as JPEG, are good for complex images with many colors, while others, such as WebP, are better for simpler images with fewer colors.</p> <p>To generate different image formats, we can use Node.js and the Sharp image processing library. Here's an example script that generates avif and webp formats for each image in the images folder:  </p> <pre><code>const sharp = require('sharp');\nconst fs = require('fs');\n\nconst inputFolder = 'images';\nconst outputFolder = 'output';\n\nconst formats = ['avif', 'webp'];\n\nif (!fs.existsSync(outputFolder)) {\n  fs.mkdirSync(outputFolder);\n}\n\nfs.readdir(inputFolder, (err, files) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  files.forEach(file =&gt; {\n    if (file.endsWith('.jpg') || file.endsWith('.jpeg') || file.endsWith('.png')) {\n      const inputPath = `${inputFolder}/${file}`;\n      const name = file.substring(0, file.lastIndexOf('.'));\n\n      formats.forEach(format =&gt; {\n        const outputPath = `${outputFolder}/${name}.${format}`;\n\n        if (!fs.existsSync(outputPath)) {\n          sharp(inputPath)\n            .toFormat(format, { quality: 80 })\n            .toFile(outputPath, (err) =&gt; {\n              if (err) {\n                console.error(err);\n              } else {\n                console.log(`${name}.${format} saved`);\n              }\n            });\n        }\n      });\n    }\n  });\n});\n\n</code></pre> <p>*Explanation: * </p> <pre><code>const sharp = require('sharp');\nconst fs = require('fs');\n\nconst inputFolder = 'images';\nconst outputFolder = 'output';\n\nconst formats = ['avif', 'webp'];\n\n</code></pre> <p>In these lines, the script imports the <code>sharp</code> and <code>fs</code> libraries, sets the input folder to <code>images</code>, the output folder to <code>output</code>, and defines the formats to be generated as <code>avif</code> and <code>webp</code>.  </p> <pre><code>if (!fs.existsSync(outputFolder)) {\n  fs.mkdirSync(outputFolder);\n}\n\n</code></pre> <p>Here, the script checks if the <code>outputFolder</code> exists, and if it doesn't, creates it using <code>fs.mkdirSync()</code>. This ensures that the output folder exists before generating any images.  </p> <pre><code>fs.readdir(inputFolder, (err, files) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n</code></pre> <p>This code reads the contents of the <code>inputFolder</code> using <code>fs.readdir()</code>. If there is an error, it logs the error to the console and returns.  </p> <pre><code>files.forEach(file =&gt; {\n    if (file.endsWith('.jpg') || file.endsWith('.jpeg') || file.endsWith('.png')) {\n\n</code></pre> <p>This code loops through each file in the <code>inputFolder</code> using <code>files.forEach()</code>. If the file name ends with <code>.jpg</code>, <code>.jpeg</code>, or <code>.png</code>, it proceeds to generate the corresponding <code>avif</code> and <code>webp</code> files.  </p> <pre><code>const inputPath = `${inputFolder}/${file}`;\n      const name = file.substring(0, file.lastIndexOf('.'));\n\n</code></pre> <p>Here, the script defines the input file path as <code>inputPath</code>, and extracts the file name without the extension to be used as the output file name.  </p> <pre><code>formats.forEach(format =&gt; {\n        const outputPath = `${outputFolder}/${name}.${format}`;\n\n        if (!fs.existsSync(outputPath)) {\n          sharp(inputPath)\n            .toFormat(format, { quality: 80 })\n            .toFile(outputPath, (err) =&gt; {\n              if (err) {\n                console.error(err);\n              } else {\n                console.log(`${name}.${format} saved`);\n              }\n            });\n        }\n      });\n\n</code></pre> <p>Here, the script loops through each format (i.e. <code>avif</code> and <code>webp</code>) using <code>formats.forEach()</code>. For each format, it defines the output file path as <code>outputPath</code>.</p> <p>If the output file does not already exist, it uses Sharp's <code>toFormat()</code> function to generate the corresponding image in the specified format with a quality of 80. It then saves the output file using <code>toFile()</code>, and logs a message to the console indicating that the file has been saved.</p>"},{"location":"programming/node/generating_optimized_image_formats_with_node/#display-optimized-images-in-react","title":"Display Optimized Images in React","text":"<p>Once we have generated multiple optimized image formats for each input image, we can display them in our React application. To do this, we can use the HTML <code>&lt;picture&gt;</code> and <code>&lt;source&gt;</code> elements to specify the different image sources for different formats. Here's an example React component that takes an image name as a prop and displays the image in the best format for the user's browser:  </p> <pre><code>import React from 'react';\n\nconst Image = ({ name }) =&gt; {\n  const avifSrc = `/images/${name}.avif`;\n  const webpSrc = `/images/${name}.webp`;\n  const jpgSrc = `/images/${name}.jpg`;\n\n  return (\n    &lt;picture&gt;\n      &lt;source srcSet={avifSrc} type=\"image/avif\" /&gt;\n      &lt;source srcSet={webpSrc} type=\"image/webp\" /&gt;\n      &lt;img src={jpgSrc} alt={name} /&gt;\n    &lt;/picture&gt;\n  );\n};\n\nexport default Image;\n\n</code></pre> <p>Enter fullscreen mode Exit fullscreen mode</p> <p>This code defines three different image source URLs based on the <code>name</code> prop passed in:</p> <ul> <li><code>avifSrc</code> corresponds to the <code>avif</code> format of the image.</li> <li><code>webpSrc</code> corresponds to the <code>webp</code> format of the image.</li> <li><code>jpgSrc</code> corresponds to the standard <code>jpg</code> format of the image, which will be used as a fallback for browsers that do not support <code>avif</code> or <code>webp</code>.</li> </ul> <pre><code>  return (\n    &lt;picture&gt;\n      &lt;source srcSet={avifSrc} type=\"image/avif\" /&gt;\n      &lt;source srcSet={webpSrc} type=\"image/webp\" /&gt;\n      &lt;img src={jpgSrc} alt={name} /&gt;\n    &lt;/picture&gt;\n  );\n};\n\n</code></pre> <p>Here, the script returns a <code>&lt;picture&gt;</code> element that displays the image in the best format for the user's browser, based on the available formats. Inside the <code>&lt;picture&gt;</code> element, there are two <code>&lt;source&gt;</code> elements, one for <code>avif</code> and one for <code>webp</code>. These elements specify the different image sources for different formats using the <code>srcSet</code> attribute and the <code>type</code> attribute to indicate the MIME type of each format.</p> <p>Finally, there is a fallback <code>&lt;img&gt;</code> element that displays the image in the standard <code>jpg</code> format for browsers that do not support <code>avif</code> or <code>webp</code>. This element uses the <code>src</code> attribute to specify the image source and the <code>alt</code> attribute to provide alternate text for the image.</p>"},{"location":"programming/node/generating_optimized_image_formats_with_node/#conclusion","title":"Conclusion","text":"<p>Images on websites can be slow to load and don't always look good on different devices. It's important to make them load faster and look better so people can enjoy your website more. We learned how to use special tools like Sharp and HTML's <code>&lt;picture&gt;</code> and <code>&lt;source&gt;</code> to make different versions of the same image and show the best one for each device. By doing this, our website will be faster and look better for everyone who uses it!</p>"},{"location":"programming/npm/concurrently/","title":"Concurrently","text":"<p>Run multiple commands concurrently. Like npm run watch-js &amp; npm run watch-less but better. docs</p>"},{"location":"programming/npm/concurrently/#installation","title":"Installation","text":"<p>concurrently can be installed in the global scope (if you'd like to have it available and use it on the whole system) or locally for a specific package (for example if you'd like to use it in the scripts section of your package):</p> npm Yarn pnpm Bun Global npm i -g concurrently yarn global add concurrently pnpm add -g concurrently bun add -g concurrently Local* npm i -D concurrently yarn add -D concurrently pnpm add -D concurrently bun add -d concurrently <p>*It's recommended to add concurrently to devDependencies as it's usually used for developing purposes. Please adjust the command if this doesn't apply in your case.</p>"},{"location":"programming/npm/concurrently/#how-to-use","title":"How to use","text":"<ul> <li>Initialize a npm project <code>npm init --y</code> for use through <code>npm run</code> and less verbosability with commands</li> <li>Install the package concurrently</li> <li>Create scripts in <code>package.json</code> to start each project individually see example below</li> <li>Create general script with concurrently to execute all the previous at the same time</li> <li>Run your project</li> </ul>"},{"location":"programming/npm/concurrently/#example","title":"Example","text":"<p>With this folder structure</p> <ul> <li>source</li> <li>admin (react admin application created with <code>create-react-app</code>)</li> <li>app (next application to show some specific data created with <code>create-next-app</code>)</li> <li> <p>api (nest backend api)</p> </li> <li> <p>Each folder have it's own .env file with it's own values, but for example the admin application need to define excecution port to avoid error and becouse react and next use the same port (3000) by default </p> </li> </ul> <p>In <code>admin/.env</code> file define <code>PORT=3001</code> and react will use this one instead of default one.</p> <ul> <li>Execute <code>npm init --y</code> this create the <code>package.json</code> file</li> </ul> <pre><code>{\n  \"name\": \"source\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre> <ul> <li>Install concurrently dependency  <code>npm install -D concurrently</code></li> <li>Modify <code>scripts</code> section as follow</li> </ul> <pre><code>  \"start:api\": \"npm --prefix ./api/ run start:dev\",\n  \"start:app\": \"npm --prefix ./app/ run dev\",\n  \"start:admin\": \"npm --prefix ./admin/ run start\"\n</code></pre> <p><code>\"start:api\"</code> start the nest api</p> <p><code>\"start:app\"</code> start the next app</p> <p><code>\"start:admin\"</code> start the react app</p> <ul> <li>Add the new one to run all with concurrently</li> </ul> <p><code>\"dev\": \"concurrently -c \\\"npm run start:api\\\" \\\"npm run start:app\\\" \\\"npm run start:admin\\\"\"</code></p> <p>With which we can run all environments at the same time, remmember that each one has to be wrapped in quotes. In this way, the log of each one identified with numbers <code>[0]</code>, <code>[1]</code> and <code>[2]</code>. To assign a name to each one you can use the <code>--name</code> parameter, for example: <code>--names \\\"API,APP,ADMIN\\\"</code>. This will help visually to identify logs.</p> <p>There is some other options for colorize or use shorthands read the docs for know more about it.</p> <p>In my case this was the final <code>package.json</code></p> <pre><code>{\n  \"name\": \"source\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start:api\": \"npm --prefix ./api/ run start:dev\",\n    \"start:app\": \"npm --prefix ./app/ run dev\",\n    \"start:admin\": \"npm --prefix ./admin/ run start\",\n    \"dev\": \"concurrently -c \\\"blue.bold,magenta.bold,yellow.bold\\\" \\\"npm run start:*\\\"\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"concurrently\": \"^8.2.0\"\n  }\n}\n</code></pre>"},{"location":"programming/npm/dependency_cruiser/","title":"Dependency cruiser","text":"<p>Easily visualize a project's dependency graph with dependency-cruiser</p> <p>You can install <code>dependency-cruiser</code> globally with <code>npm i -g dependency-cruiser</code>. Then, in the folder of any project you care about, you can run:</p> <pre><code>depcruise --exclude \"^node_modules\" --output-type dot src | dot -T svg &gt; dependencygraph.svg\n</code></pre> <p>assuming the core of your code lives in the <code>src</code> sub folder</p>"},{"location":"programming/php/constants/","title":"Constants","text":""},{"location":"programming/php/constants/#question","title":"Question","text":"<p>Const access from outside a class contained in string</p> <p>With this code:</p> <pre><code>class Constants{\n   const ONE = 1;\n   const TWO = 2;\n   const THREE = 3;\n}\n\n$input = \"ONE\";\n\necho Constants::$input;\n</code></pre> <p>I want to access to the constants inside the class having the name in a variable.</p> <p>I'ts that posible.</p>"},{"location":"programming/php/constants/#answer","title":"Answer","text":"<p>Constant function will return value of a constant by its name:</p> <pre><code>class Contants{\n   const ONE = 1;\n   const TWO = 2;\n   const THREE = 3;\n}\n\n$input = \"ONE\";\n\necho constant(Contants::class . '::' . $input);\n</code></pre>"},{"location":"programming/php/dates/","title":"Dates","text":""},{"location":"programming/php/dates/#compare-two-24-hour-time","title":"Compare two 24 hour time","text":"<p>Use the built-in function strtotime():</p> <pre><code>$time=\"00:05:00\"; //5 minutes\nif(strtotime($time) &lt;= strtotime('00:03:00')) {\n    //do some work\n} else {\n    //do something\n}\n</code></pre>"},{"location":"programming/php/global_dates/","title":"Mostrar fechas de acuerdo a uso horario","text":"<p>Problema de fecha utilizada en varios lugares del mundo (diferentes UTC). Se tiene como problema una aplicaci\u00f3n utilizada en diversas partes del mundo en donde se utiliza la misma fecha para mostrarse a diferentes usuarios que pueden estar utilizando el APP en cualquier parte del mundo.</p> <p>Para resolver este problema se utilizo el siguiente comando que se ejecuto en la base de datos:</p> <pre><code>SET time_zone = \"+00: 00\";\n</code></pre> <p>El mismo setea la zona horaria (<code>UTC-0</code>) por defecto en caso de que tu base de datos utilice <code>timestamp</code> automatizados para el update y creacion de datos.</p> <p>Luego dentro del proyecto de servicios, por ejemplo <code>Lumen</code> con <code>PHP</code>, necesitamos setear la siguiente linea en el archivo de configuraci\u00f3n <code>.env</code>:</p> <pre><code>APP_TIMEZONE = UTC\n</code></pre>"},{"location":"programming/php/pretty/","title":"Pretty format arrays and objects","text":"<pre><code>class Persona{\n    public $nombre;\n    public $apellidos;\n    public $sexo;\n\n    function __construct($nombre, $apellidos, $sexo){\n        $this-&gt;nombre = $nombre;\n        $this-&gt;apellidos = $apellidos;\n        $this-&gt;sexo = $sexo;\n    }\n}\n\n\nfunction pretty($var)\n{\n    return gettype($var) . ' ' . json_encode(\n        $var,\n        JSON_UNESCAPED_SLASHES |\n            JSON_UNESCAPED_UNICODE |\n            JSON_PRETTY_PRINT |\n            JSON_PARTIAL_OUTPUT_ON_ERROR |\n            JSON_INVALID_UTF8_SUBSTITUTE\n    );\n}\n\n$oPersona = new Persona(\"Jonh\", \"Doe\", \"Masculino\");\n\necho '&lt;pre&gt;';\necho pretty($oPersona);\necho '&lt;/pre&gt;';\n\n\n// output\n/**\nobject {\n    \"nombre\": \"Jonh\",\n    \"apellidos\": \"Doe\",\n    \"sexo\": \"Masculino\"\n}\n*/\n</code></pre>"},{"location":"programming/python/diccionarios/","title":"Diccionarios","text":""},{"location":"programming/python/diccionarios/#crear","title":"Crear","text":"<pre><code>diccionario = {\n    \"nombre\": \"Jonh\",\n    \"sexo\": \"Masculino\",\n    \"edad\": 35\n}\n</code></pre> <p>Adem\u00e1s se puede crear usando el constructor dict</p> <pre><code>persona = dict(nombre=\"Jonh Doe\", sexo=\"Masculino\")\n</code></pre>"},{"location":"programming/python/diccionarios/#acceder-a-un-elemento","title":"Acceder a un elemento","text":"<pre><code>diccionario[\"nombre\"]\n# o\ndiccionario.get('nombre')\n</code></pre>"},{"location":"programming/python/diccionarios/#modificando-valores","title":"Modificando valores","text":"<pre><code>diccionario[\"nombre\"] = \"Myke\"\n</code></pre>"},{"location":"programming/python/diccionarios/#longitud-len","title":"Longitud (len)","text":"<pre><code>len(diccionario)\n</code></pre>"},{"location":"programming/python/diccionarios/#agregar-valores","title":"Agregar valores","text":"<pre><code>diccionario[\"direccion\"] = \"Time scuare 1256\"\n</code></pre>"},{"location":"programming/python/diccionarios/#eliminar-obteniendo-el-valor-pop","title":"Eliminar obteniendo el valor (pop)","text":"<pre><code>edad = diccionario.pop('edad')\n</code></pre>"},{"location":"programming/python/diccionarios/#eliminar-ultimo-valor-agregado-popitem","title":"Eliminar \u00faltimo valor agregado (popitem)","text":"<pre><code>diccionario.popitem()\n</code></pre> <p>Remueve el \u00faltimo elemento que fue insertado en el diccionario. El valor de retorno es el item eliminado en forma de tupla.</p>"},{"location":"programming/python/diccionarios/#eliminar-del","title":"Eliminar (del)","text":"<pre><code>del diccionario[\"edad\"]\n</code></pre>"},{"location":"programming/python/diccionarios/#crear-copia-copydict","title":"Crear copia (copy)(dict)","text":"<pre><code>diccionario2 = diccionario.copy()\n</code></pre> <p>Otra forma de hacerlo es usando <code>dict</code></p> <pre><code>diccionario2 = dict(diccionario)\n</code></pre>"},{"location":"programming/python/diccionarios/#eliminar-todos-los-elementos-clear","title":"Eliminar todos los elementos (clear)","text":"<pre><code>diccionario.clear()\n</code></pre>"},{"location":"programming/python/listas/","title":"Listas","text":""},{"location":"programming/python/listas/#creacion","title":"Creaci\u00f3n","text":"<pre><code>lista = [1, 2, 3]\n</code></pre>"},{"location":"programming/python/listas/#copiar-o-duplicar-una-lista-copy","title":"Copiar o duplicar una lista (copy)","text":"<pre><code>lista2 = lista.copy()\n</code></pre>"},{"location":"programming/python/listas/#agregar-append","title":"Agregar (append)","text":"<pre><code>lista.append(4)\n</code></pre>"},{"location":"programming/python/listas/#vaciar-elementos-de-una-lista-clear","title":"Vaciar elementos de una lista (clear)","text":"<pre><code>lista.clear()\n</code></pre>"},{"location":"programming/python/listas/#contar-ocurrencias-de-un-elemento-count","title":"Contar ocurrencias de un elemento (count)","text":"<pre><code>lista.count(2)\n</code></pre>"},{"location":"programming/python/listas/#contar-elementos-len","title":"Contar elementos (len)","text":"<pre><code>len(lista)\n</code></pre>"},{"location":"programming/python/listas/#accediendo-a-elemento-por-posicion","title":"Accediendo a elemento por posici\u00f3n","text":"<pre><code>lista[2]  # accede al tercer elemento de la lista\n</code></pre>"},{"location":"programming/python/listas/#eliminar-elemento-devolviendolo-a-una-variable-pop","title":"Eliminar elemento devolviendolo a una variable (pop)","text":"<pre><code>ultimo = lista.pop()\n</code></pre>"},{"location":"programming/python/listas/#eliminar-elemento-que-no-sea-el-ultimo-remove","title":"Eliminar elemento que no sea el ultimo (remove)","text":"<pre><code>lista.remove(2)\n</code></pre>"},{"location":"programming/python/listas/#ordenar-sort","title":"Ordenar (sort)","text":"<p>Para poder ordenar con el m\u00e9todo sort todos los elementos de la lista tienen que ser del mismo tipo</p> <pre><code>lista.sort() \n</code></pre>"},{"location":"programming/python/listas/#revertir-elementos-reverse","title":"Revertir elementos (reverse)","text":"<pre><code>lista.reverse()\n</code></pre>"},{"location":"programming/python/rangos/","title":"Rangos","text":"<pre><code>rango = range(6)\nprint(rango)\n\n# range(0, 6)\n</code></pre>"},{"location":"programming/python/tuplas/","title":"tuplas","text":"<p>Al igual que con las cadenas, las componentes de las tuplas no pueden ser modificadas.</p> <pre><code>tupla = ('hola', 'mundo')\n</code></pre>"},{"location":"programming/python/tuplas/#contar-ocurrencia-de-elemento-count","title":"Contar ocurrencia de elemento (count)","text":"<pre><code>tupla.count('hola') # 1\n</code></pre>"},{"location":"programming/python/tuplas/#buscar-el-indice-de-un-elemento-index","title":"Buscar el indice de un elemento (index)","text":"<pre><code>tupla.index('mundo')\n</code></pre>"},{"location":"programming/python/tuplas/#transformar-de-tupla-a-lista-list","title":"Transformar de tupla a lista (list)","text":"<pre><code>listaDeTupla = list(tupla)\n</code></pre>"},{"location":"programming/react/github_pages/","title":"Deploy react app to github pages","text":""},{"location":"programming/react/github_pages/#prerequisitos","title":"Prerequisitos","text":"<ul> <li>Cuenta en Github</li> <li>Git instalado y configurado en la pc</li> <li>Node y npm (min v8.10)</li> <li>Tener instalado create-react-app para crear aplicaci\u00f3n react</li> </ul>"},{"location":"programming/react/github_pages/#procedimiento","title":"Procedimiento","text":"<ul> <li>Crear un repositorio en Github, para que funcione la p\u00e1gina si no es una cuenta de pago el repositorio debe ser p\u00fablico. </li> <li>Crear aplicaci\u00f3n react <code>npx create-react-app app-name</code>, al hacer esto el comando inicializar\u00e1 adem\u00e1s en el proyecto el repositorio git</li> <li>Luego instalar el m\u00f3dulo github-pages como dependencia de desarollo</li> </ul> <pre><code>cd app-name\nnpm install gh-pages --save-dev\n</code></pre> <ul> <li>Agregar la propiedad <code>homepage</code> en la parte superior del fichero <code>package.json</code> como string con el valor <code>https://{username}.github.io/{repo-name}</code> donde el <code>{username}</code> es su nombre de usuario en Github y el <code>{repo-name}</code> el nombre del repositorio, quedando de la siguiente forma: </li> </ul> <pre><code>\"homepage\": \"https://{username}.github.io/{repo-name}\"\n</code></pre> <ul> <li>En la secci\u00f3n de <code>scripts</code> necesitamos agregar 2 nuevos</li> </ul> <pre><code>\"scripts\": {\n    ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  },\n</code></pre> <ul> <li>Agregar el repositorio remoto al proyecto</li> </ul> <pre><code>git remote add origin git@github.com:{username}/{repo-name}.git\n</code></pre> <ul> <li>Ahora a desplegar a las p\u00e1ginas de GitHub ejecutando el siguiente comando</li> </ul> <pre><code>npm run deploy\n</code></pre> <p>Este comando crear\u00e1 una rama con el nombre <code>gh-pages</code> en github que tendr\u00e1 hosteada la app en la url definida en la propiedad <code>homepage</code> definida en el <code>package.json</code> - Haga commit y actualice la rama master de su repositorio remoto (opcional)</p> <pre><code>git add .\ngit commit -m \"Your awesome message\"\ngit push origin master\n</code></pre> <p>Nota: En caso de no visualizar el sitio en la url <code>https://{username}.github.io/{repo-name}</code> podr\u00edas chequear en la configuraci\u00f3n del repositorio <code>Settings</code> secci\u00f3n <code>GitHub Pages</code> y seleccionar la rama <code>gh-pages</code> y <code>/root</code> para redirigir correctamente al proyecto compilado.</p>"},{"location":"programming/react/newline_to_break/","title":"Newline to break (nl2br)","text":"<p>Source https://kevinsimper.medium.com/react-newline-to-break-nl2br-a1c240ba746</p> <p>Because you know that everything in React is functions, you can't really do this</p> <pre><code>this.state.text.replace(/(?:\\r\\n|\\r|\\n)/g, '&lt;br /&gt;')\n</code></pre> <p>Since that would return a string with DOM nodes inside, that is not allowed either, because has to be only a string.</p> <p>You then can try do something like this:</p> <pre><code>{this.props.text.split('\\n').map(function(item, key) {\n  return (\n    &lt;span key={key}&gt;\n      {item}\n      &lt;br/&gt;\n    &lt;/span&gt;\n  )\n})};\n</code></pre> <p>That is not allowed either because again React is pure functions and two functions can be next to each other.</p>"},{"location":"programming/react/newline_to_break/#tldr-solution","title":"tldr. Solution","text":"<pre><code>{this.props.text.split('\\n').map(function(item, key) {\n  return (\n    &lt;span key={key}&gt;\n      {item}\n      &lt;br/&gt;\n    &lt;/span&gt;\n  )\n})};\n</code></pre> <p>Now we're wrapping each line-break in a span, and that works fine because span\u2019s has display inline. Now we got a working nl2br line-break solution.</p> <p>And ES6 version</p> <pre><code>{this.props.text.split('\\n').map((item, key) =&gt; {\n  return &lt;span key={key}&gt;{item}&lt;br/&gt;&lt;/span&gt;\n})};\n</code></pre> <p>And with React Fragments</p> <pre><code>{this.props.text.split('\\n').map((item, key) =&gt; {\n  return &lt;Fragment key={key}&gt;{item}&lt;br/&gt;&lt;/Fragment&gt;\n})};\n</code></pre>"},{"location":"programming/typescript/style_guide/","title":"TypeScript Style Guide","text":"<p>TypeScript Style Guide provides a concise set of conventions and best practices used to create consistent, maintainable code.</p>"},{"location":"programming/typescript/style_guide/#introduction","title":"Introduction","text":"<p>TypeScript Style Guide provides a concise set of conventions and best practices used to create consistent, maintainable code.</p> <p>As projects grow in size and complexity, maintaining code quality and ensuring consistent practices becomes increasingly challenging. Defining and following a standard way to write TypeScript applications brings consistent codebase and faster development cycles.</p>"},{"location":"programming/typescript/style_guide/#table-of-contents","title":"Table of Contents","text":""},{"location":"programming/typescript/style_guide/#about-guide","title":"About Guide","text":"<p>As any code style guide is opinionated, this is no different as it tries to set conventions (sometimes arbitrary) that govern our code.</p> <p>Since \"consistency is the key\", style guide strives to enforce majority of the rules by using automated tooling as ESLint, TypeScript, Prettier, etc. Still certain design and architectural decisions must be followed which are described with conventions bellow.</p> <p>Style Guide requires you to use:</p> <ul> <li>TypeScript v5</li> <li>typescript-eslint v6 with <code>strict-type-checked</code>,   <code>stylistic-type-checked</code> configurations enabled.</li> </ul> <p>Style Guide assumes using, but is not limited to:</p> <ul> <li>React as UI library for frontend conventions.</li> <li>Jest and Testing Library for testing conventions.</li> </ul>"},{"location":"programming/typescript/style_guide/#tldr","title":"TLDR","text":"<ul> <li>Strive for data immutability. \u2b63</li> <li>Embrace const assertions. \u2b63</li> <li>Avoid type assertions. \u2b63</li> <li>Strive for functions to be pure, stateless and have single responsibility. \u2b63</li> <li>Majority of function arguments should be required (use optional sparingly). \u2b63</li> <li>Strong emphasis to keep naming conventions consistent and readable. \u2b63</li> <li>Use named exports. \u2b63</li> <li>Code is organized and grouped by feature. Collocate code as close as possible to where it's relevant. \u2b63</li> <li>UI components must only show derived state and send events, nothing more (no business logic). \u2b63</li> <li>Test business logic, not implementation details. \u2b63</li> </ul>"},{"location":"programming/typescript/style_guide/#data-immutability","title":"Data Immutability","text":"<p>Majority of the data should be immutable (use <code>Readonly</code>, <code>ReadonlyArray</code>, always return new array, object etc). To keep cognitive load for future developers low, try to keep data objects small. As an exception mutations should be used sparingly in cases where truly necessary: complex objects, performance reasoning etc.</p>"},{"location":"programming/typescript/style_guide/#types","title":"Types","text":""},{"location":"programming/typescript/style_guide/#type-definition","title":"Type Definition","text":"<p>TypeScript offers two options for type definitions - <code>type</code> and <code>interface</code>. As they come with some functional differences, we try to limit syntax difference and pick one for consistency.</p> <p>All types must be defined with <code>type</code> alias (eslint rule).</p> <p>   Consider using interfaces if developing package that can be further extended, team is more comfortable working with   interfaces etc. In such case disable lint rule where needed e.g. using type unions (type Status = 'loading' | 'error')   etc. </p> <pre><code>// \u274c Avoid interface definitions\ninterface UserRole = 'admin' | 'guest'; // invalid - interface can't define (commonly used) type unions\n\ninterface UserInfo {\n  name: string;\n  role: 'admin' | 'guest';\n}\n\n// \u2705 Use type definition\ntype UserRole = 'admin' | 'guest';\n\ntype UserInfo = {\n  name: string;\n  role: UserRole;\n};\n\n</code></pre> <p>In case of declaration merging (e.g. extending third-party library types) use <code>interface</code> and disable lint rule.</p> <pre><code>// types.ts\ndeclare namespace NodeJS {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-definitions\n  export interface ProcessEnv {\n    NODE_ENV: 'development' | 'production';\n    PORT: string;\n    CUSTOM_ENV_VAR: string;\n  }\n}\n\n// server.ts\napp.listen(process.env.PORT, () =&gt; {...}\n</code></pre>"},{"location":"programming/typescript/style_guide/#type-non-nullability-assertions","title":"Type &amp; Non-nullability Assertions","text":"<p>Type assertions <code>user as User</code> and non-nullability assertions <code>user!.name</code> are unsafe. Both only silence TypeScript compiler and increase the risk of crashing application at runtime.  They can only be used as last resort exceptions (e.g. third party library types mismatch etc.) with strong rational why being introduced into codebase.</p> <pre><code>// \u274c Avoid type &amp; non-nullability assertions\ntype User = { id: string; username: string; avatar: string | null };\nconst user = { name: 'Nika' } as User;\nrenderUserAvatar(user!.avatar);\n</code></pre>"},{"location":"programming/typescript/style_guide/#type-any","title":"Type any","text":"<p><code>any</code> data type must not be used as it represents literally \u201cany\u201d value that TypeScript defaults to and skips type checking since it cannot infer the type. As such, any is dangerous, it can mask severe programming errors.  If error truly cannot be resolved as safer option use type <code>unknown</code> since it does not allow dereferencing all properties or as last resort use <code>@ts-expect-error</code> (Type Error).</p>"},{"location":"programming/typescript/style_guide/#type-inference","title":"Type Inference","text":"<p>   As rule of thumb, explicitly declare a type when it help narrows it.        Just because you don't need to add types, doesn't mean you shouldn't. In some cases explicit type declaration can     increase code readability and intent.    </p> <pre><code>// \u274c Avoid\n// Type can be inferred\nconst userRole: string = 'admin'; // Type 'string'\nconst employees = new Map&lt;string, number&gt;([['gabriel', 32]]);\nconst [isActive, setIsActive] = useState&lt;boolean&gt;(false);\n\n// Type can be narrowed\nconst employees = new Map(); // Type 'Map&lt;any, any&gt;'\ntype UserRole = 'admin' | 'guest';\nconst [userRole, setUserRole] = useState('admin'); // Type 'string'\n\n// \u2705 Use\nconst USER_ROLE = 'admin'; // Type 'admin'\nconst employees = new Map([['gabriel', 32]]); // Type 'Map&lt;string, number&gt;'\nconst [isActive, setIsActive] = useState(false); // Type 'boolean'\n\nconst employees = new Map&lt;string, number&gt;(); // Type 'Map&lt;string, number&gt;'\nemployees.set('gabriel', 32);\ntype UserRole = 'admin' | 'guest';\nconst [userRole, setUserRole] = useState&lt;UserRole&gt;('admin'); // Type 'UserRole'\n\n</code></pre>"},{"location":"programming/typescript/style_guide/#return-types","title":"Return Types","text":"<p>Including return type annotations is highly encouraged, altought not required (eslint rule).</p> <p>Consider benefits when explicitly typing the return value of a function:</p> <ul> <li>Return values makes it clear and easy to understand to any calling code what type is returned.</li> <li>In the case where there is no return value, the calling code doesn't try to use the undefined value when it shouldn't.</li> <li>Surface potential type errors faster in the future if there are code changes that change the return type of the function.</li> <li>Easier to refactor, since it ensures that the return value is assigned to a variable of the correct type.</li> <li>Similar to writing tests before implementation (TDD), defining function arguments and return type, gives you the opportunity to discuss the feature functionality and its interface ahead of implementation.</li> <li>Although type inference is very convenient, adding return types can save TypeScript compiler a lot of work.</li> </ul>"},{"location":"programming/typescript/style_guide/#type-error","title":"Type Error","text":"<p>If TypeScript error can't be mitigated, as last resort use <code>@ts-expect-error</code> to suppress it (eslint rule). If at any future point suppressed line becomes error-free, TypeScript compiler will indicate it. <code>@ts-ignore</code> is not allowed, while <code>@ts-expect-error</code> can be used with provided description (eslint rule).</p> <pre><code>// \u274c Avoid @ts-ignore\n// @ts-ignore\nconst result = doSomething('hello');\n\n// \u2705 Use @ts-expect-error with description\n// @ts-expect-error: the library definition is wrong\nconst result = doSomething('hello');\n</code></pre>"},{"location":"programming/typescript/style_guide/#array-types","title":"Array Types","text":"<p>Array types must be defined with generic syntax (eslint rule).</p> <p>   As there is no functional difference between 'generic' and 'array' definition, feel free to set the one your team   finds most readable to work with. </p> <pre><code>// \u274c Avoid\nconst x: string[] = ['foo', 'bar'];\nconst y: readonly string[] = ['foo', 'bar'];\n\n// \u2705 Use\nconst x: Array&lt;string&gt; = ['foo', 'bar'];\nconst y: ReadonlyArray&lt;string&gt; = ['foo', 'bar'];\n</code></pre>"},{"location":"programming/typescript/style_guide/#functions","title":"Functions","text":"<p>Function conventions should be followed as much as possible (some of them derives from functional programming basic concepts):</p>"},{"location":"programming/typescript/style_guide/#general","title":"General","text":"<p>Function:</p> <ul> <li>should have single responsibility.</li> <li>should be stateless where the same input arguments return same value every single time.</li> <li>should accept at least one argument and return data.</li> <li>should not have side effects, but be pure. It's implementation should not modify or access variable value outside its local environment (global state, fetching etc.).</li> </ul>"},{"location":"programming/typescript/style_guide/#single-object-arg","title":"Single Object Arg","text":"<p>To keep function readable and easily extensible for the future (adding/removing args), strive to have single object as the function arg, instead of multiple args.  As exception this not applies when having only one primitive single arg (e.g. simple functions isNumber(value), implementing currying etc.).</p> <pre><code>// \u274c Avoid having multiple arguments\ntransformUserInput('client', false, 60, 120, null, true, 2000);\n\n// \u2705 Use options object as argument\ntransformUserInput({\n  method: 'client',\n  isValidated: false,\n  minLines: 60,\n  maxLines: 120,\n  defaultInput: null,\n  shouldLog: true,\n  timeout: 2000,\n});\n</code></pre>"},{"location":"programming/typescript/style_guide/#required-optional-args","title":"Required &amp; Optional Args","text":"<p>Strive to have majority of args required and use optional sparingly.  If function becomes to complex it probably should be broken into smaller pieces.  An exaggerated example where implementing 10 functions with 5 required args each, is better then implementing one \"can do it all\" function that accepts 50 optional args.</p>"},{"location":"programming/typescript/style_guide/#args-as-discriminated-union","title":"Args as Discriminated Union","text":"<p>When applicable use discriminated union type to eliminate optional args, which will decrease complexity on function API and only necessary/required args will be passed depending on its use case.</p> <pre><code>// \u274c Avoid optional args as they increase complexity of function API\ntype StatusParams = {\n  data?: Products;\n  title?: string;\n  time?: number;\n  error?: string;\n};\n\n// \u2705 Strive to have majority of args required, if that's not possible,\n// use discriminated union for clear intent on function usage\ntype StatusParamsSuccess = {\n  status: 'success';\n  data: Products;\n  title: string;\n};\n\ntype StatusParamsLoading = {\n  status: 'loading';\n  time: number;\n};\n\ntype StatusParamsError = {\n  status: 'error';\n  error: string;\n};\n\ntype StatusParams = StatusSuccess | StatusLoading | StatusError;\n\nexport const parseStatus = (params: StatusParams) =&gt; {...\n</code></pre>"},{"location":"programming/typescript/style_guide/#variables","title":"Variables","text":""},{"location":"programming/typescript/style_guide/#const-assertion","title":"Const Assertion","text":"<p>Strive to use const assertion (<code>as const</code>):</p> <ul> <li>type is narrowed</li> <li>object gets <code>readonly</code> properties</li> <li>array becomes <code>readonly</code> tuple</li> </ul> <p>```ts   // \u274c Avoid declaring constants without const assertion   const BASE_LOCATION = { x: 50, y: 130 }; // Type { x: number; y: number; }   BASE_LOCATION.x = 10;   const BASE_LOCATION = [50, 130]; // Type number[]   BASE_LOCATION.push(10);</p> <p>// \u2705 Use const assertion   const BASE_LOCATION = { x: 50, y: 130 } as const; // Type '{ readonly x: 50; readonly y: 130; }'   const BASE_LOCATION = [50, 130] as const; // Type 'readonly [10, 20]'   ```</p>"},{"location":"programming/typescript/style_guide/#enums-const-assertion","title":"Enums &amp; Const Assertion","text":"<p>Const assertion must be used over enum.</p> <p>While enums can still cover use cases as const assertion would, we tend to avoid it. Some of the reasonings as mentioned in TypeScript documentation - Const enum pitfalls, Objects vs Enums, Reverse mappings...</p> <pre><code>// \u274c Avoid using enums\nenum UserRole {\n  GUEST,\n  MODERATOR,\n  ADMINISTRATOR,\n}\n\nenum Color {\n  PRIMARY = '#B33930',\n  SECONDARY = '#113A5C',\n  BRAND = '#9C0E7D',\n}\n\n// \u2705 Use const assertion\nconst USER_ROLES = ['guest', 'moderator', 'administrator'] as const;\ntype UserRole = (typeof USER_ROLES)[number]; // Type \"guest\" | \"moderator\" | \"administrator\"\n\n// Use satisfies if UserRole type is already defined - e.g. database schema model\ntype UserRoleDB = ReadonlyArray&lt;'guest' | 'moderator' | 'administrator'&gt;;\nconst AVAILABLE_ROLES = ['guest', 'moderator'] as const satisfies UserRoleDB;\n\nconst COLOR = {\n  primary: '#B33930',\n  secondary: '#113A5C',\n  brand: '#9C0E7D',\n} as const;\ntype Color = typeof COLOR;\ntype ColorKey = keyof Color; // Type \"PRIMARY\" | \"SECONDARY\" | \"BRAND\"\ntype ColorValue = Color[ColorKey]; // Type \"#B33930\" | \"#113A5C\" | \"#9C0E7D\"\n</code></pre>"},{"location":"programming/typescript/style_guide/#null-undefined","title":"Null &amp; Undefined","text":"<p>In TypeScript types <code>null</code> and <code>undefined</code> many times can be used interchangeably. For consistency strive to:</p> <ul> <li>Use <code>null</code> to explicitly state it has no value - assignment, return function type etc.</li> <li>Use <code>undefined</code> assignment when trying to exclude fields. E.g. in form fields, request payload, querying database (Prisma differentiation)...</li> </ul>"},{"location":"programming/typescript/style_guide/#naming","title":"Naming","text":"<p>Setting aside convention on cache invalidation, but for the second hardest thing, clear naming with important context should be provided.</p> <p>Strive to keep naming conventions consistent and readable, because another person will maintain the code you have written.</p>"},{"location":"programming/typescript/style_guide/#named-export","title":"Named Export","text":"<p>Named exports must be used to ensure that all imports follow a uniform pattern (eslint rule). This keeps variables, functions... names consistent across the entire codebase. Named exports have the benefit of erroring when import statements try to import something that hasn't been declared.</p> <p>In case of exceptions e.g. Next.js pages, disable rule:</p> <pre><code>// .eslintrc.js\noverrides: [\n  {\n    files: [\"src/pages/**/*\"],\n    rules: { \"import/no-default-export\": \"off\" },\n  },\n],\n</code></pre>"},{"location":"programming/typescript/style_guide/#naming-conventions","title":"Naming Conventions","text":"<p>While it's often hard to find the best name, try optimize code for consistency and future reader by following conventions:</p>"},{"location":"programming/typescript/style_guide/#abbreviations-acronyms","title":"Abbreviations &amp; Acronyms","text":"<p>Treat acronyms as whole words, with capitalized first letter only.</p> <pre><code>// \u274c Avoid\nconst FAQList = ['qa-1', 'qa-2'];\nconst generateUserURL(params) =&gt; {...}\n\n// \u2705 Use\nconst FaqList = ['qa-1', 'qa-2'];\nconst generateUserUrl(params) =&gt; {...}\n</code></pre> <p>In favor of readability, strive to avoid abbreviations, unless they are widely accepted and necessary.</p> <pre><code>// \u274c Avoid\nconst GetWin(params) =&gt; {...}\n\n// \u2705 Use\nconst GetWindow(params) =&gt; {...}\n</code></pre>"},{"location":"programming/typescript/style_guide/#variables_1","title":"Variables","text":"<ul> <li>Locals   Camel case <code>products</code>, <code>productsFiltered</code></li> <li>Booleans   Prefixed with <code>is</code>, <code>has</code> etc. <code>isDisabled</code>, <code>hasProduct</code></li> <li>Constants   Capitalized <code>PRODUCT_ID</code></li> <li>Object constants</li> </ul> <p>Singular, capitalized with const assertion and optionally satisfies type (if there is one).</p> <p><code>ts   const ORDER_STATUS = {     pending: 'pending',     fulfilled: 'fulfilled',     error: 'error',   } as const satisfies OrderStatus;</code></p>"},{"location":"programming/typescript/style_guide/#functions_1","title":"Functions","text":"<p>Camel case <code>filterProductsByType</code>, <code>formatCurrency</code></p>"},{"location":"programming/typescript/style_guide/#generics","title":"Generics","text":"<p>A name starts with the capital letter T <code>TRequest</code>, <code>TFooBar</code> (similar to .Net internal implementation or Google style guide).  Avoid (popular convention) naming generics with one character <code>T</code>, <code>K</code> etc., the more variables we introduce, the easier it is to mistake them.</p> <pre><code>// \u274c Avoid naming generics with one character\nconst createPair = &lt;T, K extends string&gt;(first: T, second: K): [T, K] =&gt; {\n  return [first, second];\n};\nconst pair = createPair(1, 'a');\n\n// \u2705 Name starts with the capital letter T\nconst createPair = &lt;TFirst, TSecond extends string&gt;(first: TFirst, second: TSecond): [TFirst, TSecond] =&gt; {\n  return [first, second];\n};\nconst pair = createPair(1, 'a');\n</code></pre> <p>Eslint rule implements:</p> <pre><code>// .eslintrc.js\n'@typescript-eslint/naming-convention': [\n  'error',\n  {\n    selector: 'typeParameter',\n    format: ['PascalCase'],\n    custom: { regex: '^T[A-Z]', match: true },\n  },\n],\n</code></pre>"},{"location":"programming/typescript/style_guide/#react-components","title":"React Components","text":"<p>Pascal case <code>ProductItem</code>, <code>ProductsPage</code></p>"},{"location":"programming/typescript/style_guide/#prop-types","title":"Prop Types","text":"<p>React component name following \"Props\" postfix <code>[ComponentName]Props</code> - <code>ProductItemProps</code>, <code>ProductsPageProps</code></p>"},{"location":"programming/typescript/style_guide/#callback-props","title":"Callback Props","text":"<p>Event handler (callback) props are prefixed as <code>on*</code> - e.g. <code>onClick</code>.  Event handler implementation functions are prefixed as <code>handle*</code> - e.g. <code>handleClick</code> (eslint rule).</p> <pre><code>// \u274c Avoid inconsistent callback prop naming\n&lt;Button click={actionClick} /&gt;\n&lt;MyComponent userSelectedOccurred={triggerUser} /&gt;\n\n// \u2705 Use prop prefix 'on*' and handler prefix 'handle*'\n&lt;Button onClick={handleClick} /&gt;\n&lt;MyComponent onUserSelected={handleUserSelected} /&gt;\n</code></pre>"},{"location":"programming/typescript/style_guide/#react-hooks","title":"React Hooks","text":"<p>Camel case, prefixed as 'use' (eslint rule), symmetrically convention as <code>[value, setValue] = useState()</code> (eslint rule)</p> <pre><code>// \u274c Avoid inconsistent useState hook naming\nconst [userName, setUser] = useState();\nconst [color, updateColor] = useState();\nconst [visible, setVisible] = useState();\n\n// \u2705 Use\nconst [name, setName] = useState();\nconst [color, setColor] = useState();\nconst [isActive, setIsActive] = useState();\n</code></pre> <p>Custom hook must always return an object:</p> <pre><code>// \u274c Avoid\nconst [products, errors] = useGetProducts();\nconst [fontSizes] = useTheme();\n\n// \u2705 Use\nconst { products, errors } = useGetProducts();\nconst { fontSizes } = useTheme();\n</code></pre>"},{"location":"programming/typescript/style_guide/#comments","title":"Comments","text":"<p>Comments in general should be avoided. Try to write expressive code and name things what they are before adding comments.</p> <p>As an exception use comments only when you need to add context or explain choices that cannot be expressed through code. Comments should always be complete sentences. As rule of a thumb try to explain <code>why</code> in comments, not <code>how</code> and <code>what</code>.</p> <pre><code>// \u274c Avoid\n// convert to minutes\nconst m = s * 60;\n// avg users per minute\nconst myAvg = u / m;\n\n// \u2705 Use\nconst SECONDS_IN_MINUTE = 60;\nconst minutes = seconds * SECONDS_IN_MINUTE;\nconst averageUsersPerMinute = noOfUsers / minutes;\n\n// TODO: Filtering should be moved to the backend once API changes are released.\n// Issue/PR - https://github.com/foo/repo/pulls/55124\nconst filteredUsers = frontendFiltering(selectedUsernames);\n\n// Use Fourier transformation to minimize information loss - https://github.com/dntj/jsfft#usage\nconst frequencies = signal.FFT();\n</code></pre>"},{"location":"programming/typescript/style_guide/#source-organization","title":"Source Organization","text":""},{"location":"programming/typescript/style_guide/#code-collocation","title":"Code Collocation","text":"<ul> <li>Every application or package in monorepo has project files/folders organized and grouped by feature.</li> <li>Collocate code as close as possible to where it's relevant.</li> <li>Deep folder nesting should not represent an issue.</li> </ul>"},{"location":"programming/typescript/style_guide/#imports","title":"Imports","text":"<p>Import paths can be relative, starting with <code>./</code> or <code>../</code>, or they can be absolute <code>@common/utils</code>.</p> <p>To make import statements more readable and easier to understand:</p> <ul> <li>Relative imports <code>./sortItems</code> must be used when importing files within the same feature, that are 'close' to each other, which also allows moving feature around the codebase without introducing changes in these imports.</li> <li>Absolute imports <code>@common/utils</code> must be used in all other cases.</li> <li>All imports must be auto sorted by tooling e.g. prettier-plugin-sort-imports, eslint-plugin-import...</li> </ul> <pre><code>// \u274c Avoid\nimport { bar, foo } from '../../../../../../distant-folder';\n\n// \u2705 Use\nimport { locationApi } from '@api/locationApi';\n\nimport { foo } from '../../foo';\nimport { bar } from '../bar';\nimport { baz } from './baz';\n</code></pre>"},{"location":"programming/typescript/style_guide/#project-structure","title":"Project Structure","text":"<p>Example frontend monorepo project, where every application has following file/folder structure:</p> <pre><code>apps/\n\u251c\u2500 product-manager/\n\u2502  \u251c\u2500 common/\n\u2502  \u2502  \u251c\u2500 components/\n\u2502  \u2502  \u2502  \u251c\u2500 Button/\n\u2502  \u2502  \u2502  \u251c\u2500 ProductTitle/\n\u2502  \u2502  \u2502  \u251c\u2500 ...\n\u2502  \u2502  \u2502  \u2514\u2500 index.tsx\n\u2502  \u2502  \u251c\u2500 consts/\n\u2502  \u2502  \u2502  \u251c\u2500 paths.ts\n\u2502  \u2502  \u2502  \u2514\u2500 ...\n\u2502  \u2502  \u251c\u2500 hooks/\n\u2502  \u2502  \u2514\u2500 types/\n\u2502  \u251c\u2500 modules/\n\u2502  \u2502  \u251c\u2500 HomePage/\n\u2502  \u2502  \u251c\u2500 ProductAddPage/\n\u2502  \u2502  \u251c\u2500 ProductPage/\n\u2502  \u2502  \u251c\u2500 ProductsPage/\n\u2502  \u2502  \u2502  \u251c\u2500 api/\n\u2502  \u2502  \u2502  \u2502  \u2514\u2500 useGetProducts/\n\u2502  \u2502  \u2502  \u251c\u2500 components/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 ProductItem/\n\u2502  \u2502  \u2502  \u2502  \u251c\u2500 ProductsStatistics/\n\u2502  \u2502  \u2502  \u2502  \u2514\u2500 ...\n\u2502  \u2502  \u2502  \u251c\u2500 utils/\n\u2502  \u2502  \u2502  \u2502  \u2514\u2500 filterProductsByType/\n\u2502  \u2502  \u2502  \u2514\u2500 index.tsx\n\u2502  \u2502  \u251c\u2500 ...\n\u2502  \u2502  \u2514\u2500 index.tsx\n\u2502  \u251c\u2500 eslintrc.js\n\u2502  \u251c\u2500 package.json\n\u2502  \u2514\u2500 tsconfig.json\n\u251c\u2500 warehouse/\n\u251c\u2500 admin-dashboard/\n\u2514\u2500 ...\n</code></pre> <ul> <li><code>modules</code> folder is responsible for implementation of each individual page, where all custom features for that page are being implemented (components, hooks, utils functions etc.).</li> <li><code>common</code> folder is responsible for implementations that are truly used across application. Since its a \"global folder\" it should be used sparingly.   If same component e.g. <code>common/components/ProductTitle</code> starts being used on more the one page, it shall be moved to common folder.</li> </ul> <p>In case file-system based router (e.g. Nextjs) is being used as frontend framework, <code>pages</code> folder serves only as a router, where its responsibility is to define routes (no business logic implementation).</p>"},{"location":"programming/typescript/style_guide/#appendix-react","title":"Appendix - React","text":"<p>Since React components and hooks are also functions, respective function conventions applies.</p>"},{"location":"programming/typescript/style_guide/#props-type","title":"Props Type","text":"<pre><code>// \u274c Avoid using React.FC type\ntype FooProps = {\n  name: string;\n  score: number;\n};\n\nexport const Foo: React.FC&lt;FooProps&gt; = ({ name, score }) =&gt; {\n\n// \u2705 Use props argument with type\ntype FooProps = Readonly&lt;{\n  name: string;\n  score: number;\n}&gt;;\n\nexport const Foo = ({ name, score }: FooProps) =&gt; {...\n</code></pre>"},{"location":"programming/typescript/style_guide/#props-required-optional","title":"Props - Required &amp; Optional","text":"<p>Strive to have majority of props required and use optional sparingly.</p> <p>Especially when creating new component for first/single use case majority of props should be required. When component starts covering more use cases, introduce optional props. There are potential exceptions, where component API needs to implement optional props from the start (e.g. shared components covering multiple use cases, UI design system components - button <code>isDisabled</code> etc.)</p> <p>As mentioned in function example - implementing 10 React components with 5 required props each, is better then implementing one \"can do it all\" function that accepts 50 optional props. If component becomes to complex it probably should be broken into smaller pieces.</p> <p>Use Discriminated Type</p> <p>When applicable use discriminated type to eliminate optional props, which will decrease complexity on component API and only necessary/required props will be passed depending on its use case.</p> <pre><code>// \u274c Avoid optional props as they increase complexity of component API\ntype StatusProps = {\n  data?: Products;\n  title?: string;\n  time?: number;\n  error?: string;\n};\n\n// \u2705 Strive to have majority of props required, if that's not possible,\n// use discriminated union for clear intent on component usage\ntype StatusSuccess = {\n  status: 'success';\n  data: Products;\n  title: string;\n};\n\ntype StatusLoading = {\n  status: 'loading';\n  time: number;\n};\n\ntype StatusError = {\n  status: 'error';\n  error: string;\n};\n\ntype StatusProps = StatusSuccess | StatusLoading | StatusError;\n\nexport const Status = (status: StatusProps) =&gt; {...\n</code></pre>"},{"location":"programming/typescript/style_guide/#component-types","title":"Component Types","text":""},{"location":"programming/typescript/style_guide/#container","title":"Container","text":"<ul> <li>All container components have postfix \"Container\" or \"Page\" <code>[ComponentName]Container|Page</code>. Use \"Page\" postfix to indicate component it's an actual web page.</li> <li>Each feature has a container component (<code>AddUserContainer.tsx</code>, <code>EditProductContainer.tsx</code>, <code>ProductsPage.tsx</code> etc.)</li> <li>Includes business logic.</li> <li>API integration.</li> <li>Structure:   <code>ProductsPage/   \u251c\u2500 api/   \u2502  \u2514\u2500 useGetProducts/   \u251c\u2500 components/   \u2502  \u2514\u2500 ProductItem/   \u251c\u2500 utils/   \u2502  \u2514\u2500 filterProductsByType/   \u2514\u2500 index.tsx</code></li> </ul>"},{"location":"programming/typescript/style_guide/#ui-feature","title":"UI - Feature","text":"<ul> <li>Representational components that are designed to fulfill feature requirements.</li> <li>Nested inside container component folder.</li> <li>Should follow functions conventions as much as possible.</li> <li>No API integration.</li> <li>Structure:   <code>ProductItem/   \u251c\u2500 index.tsx   \u251c\u2500 ProductItem.stories.tsx   \u2514\u2500 ProductItem.test.tsx</code></li> </ul>"},{"location":"programming/typescript/style_guide/#ui-design-system","title":"UI - Design system","text":"<ul> <li>Global Reusable/shared components used throughout whole codebase.</li> <li>Structure:   <code>Button/   \u251c\u2500 index.tsx   \u251c\u2500 Button.stories.tsx   \u2514\u2500 Button.test.tsx</code></li> </ul>"},{"location":"programming/typescript/style_guide/#store-pass-data","title":"Store &amp; Pass Data","text":"<ul> <li>Utilize storing state in the URL, especially for filtering, sorting etc.</li> <li>Don't sync URL state with local state.</li> <li>Consider passing data simply through props, using the URL, or composing children. Use global state (Zustand, Context) as a last resort.</li> <li>Use React compound components when components should belong and work together: <code>menu</code>, <code>accordion</code>,<code>navigation</code>, <code>tabs</code>, <code>list</code>,...   Always export compound components as:</li> </ul> <p>```tsx   // PriceList.tsx   const PriceListRoot = ({ children }) =&gt; <ul>{children}</ul>;   const PriceListItem = ({ title, amount }) =&gt; <li>Name: {name} - Amount: {amount}<li></li>; <p>// \u274c   export const PriceList = {     Container: PriceListRoot,     Item: PriceListItem,   };   // \u274c   PriceList.Item = Item;   export default PriceList;</p> <p>// \u2705   export const PriceList = PriceListRoot as typeof PriceListRoot &amp; {     Item: typeof PriceListItem;   };   PriceList.Item = PriceListItem;</p> <p>// App.tsx   import { PriceList } from \"./PriceList\";</p> <p> ;   ```</p> <ul> <li>UI components should show derived state and send events, nothing more.</li> <li>As in many programming languages functions args can be passed to the next function and on to the next etc.   Rect components are no different, where prop drilling should not become an issue.   If with app scaling prop drilling truly becomes an issue, try to refactor render method, local states in parent components, using composition etc.</li> <li>Data fetching is only allowed in container components.</li> <li>Use of server-state library is encouraged (react-query, apollo client...).</li> <li>use of client-state library for global state is discouraged.   Reconsider if something should be truly global across application, e.g. <code>themeMode</code>, <code>Permissions</code> or even that can be put in server-state (e.g. user settings - <code>/me</code> endpoint). If still truly needed use Zustand or Context (not Redux, Mobx etc.).</li> </ul>"},{"location":"programming/typescript/style_guide/#appendix-tests-unit-integration","title":"Appendix - Tests (Unit &amp; Integration)","text":""},{"location":"programming/typescript/style_guide/#what-how-to-test","title":"What &amp; How To Test","text":"<p>Automated test comes with benefits that helps us write better code and makes it easy to refactor, while bugs are caught earlier in the process.  Consider trade-offs of what and how to test to achieve confidence application is working as intended, while writing and maintaining tests doesn't slow the team down.</p> <p>\u2705 Do:</p> <ul> <li>Implement test to be short, simple, and pleasant to work with. Intent of a test should be immediately visible.</li> <li>Strive to write tests in a way your app/package is used by a user, meaning test business logic.   E.g. given some user input, they receive the expected output for a process.</li> <li>All tests must be setup and implemented to run as standalone in isolation, where they don't depend on other tests order of execution.</li> <li>Tests should be resilient to changes.   Query HTML elements based on attributes that are unlikely to change. Order of priority must be followed as specified in Testing Library - role, label, placeholder, text contents, display value, alt text, title, test ID.</li> </ul> <p>\u274c Don't:</p> <ul> <li>Don't test implementation details. When refactoring code, tests shouldn't change.</li> <li>Don't re-test the library/framework.</li> <li>Don't mandate 100% code coverage for applications.</li> <li>Don't test just to test.</li> </ul> <p><code>ts   // \u274c Avoid   it('should render user list', () =&gt; {     render(&lt;UserList /&gt;);     expect(screen.getByText('Users List')).toBeInTheDocument();   });</code></p>"},{"location":"programming/typescript/style_guide/#test-description","title":"Test Description","text":"<p>All test descriptions must follow naming convention as <code>it('should ... when ...')</code>. Eslint rule implements regex:</p> <pre><code>// .eslintrc.js\n'jest/valid-title': [\n  'error',\n  {\n    mustMatch: { it: [/should.*when/u.source, \"Test title must include 'should' and 'when'\"] },\n  },\n],\n</code></pre> <pre><code>// \u274c Avoid\nit('accepts ISO date format where date is parsed and formatted as YYYY-MM');\nit('after title is confirmed user description is rendered');\n\n// \u2705 Name test description as it('should ... when ...')\nit('should return parsed date as YYYY-MM when input is in ISO date format');\nit('should render user description when title is confirmed');\n</code></pre>"},{"location":"programming/typescript/style_guide/#tooling-extension","title":"Tooling Extension","text":"<p>Test can be run through npm scripts, but to improve development experience it's highly encouraged to use Jest Runner VS code extension so any single test can be run instantly, especially if testing app/package in larger codebase (monorepo).</p> <pre><code>code --install-extension firsttris.vscode-jest-runner\n</code></pre>"},{"location":"programming/typescript/style_guide/#snapshot","title":"Snapshot","text":"<p>Snapshot tests are discouraged in order to avoid fragility, which leads to \"just update it\" turn of mind, to achieve all the tests pass.  Exceptions can be made, with strong rational behind it, where test output has short and clear intent, whats actually being tested (e.g. design system library critical elements that shouldn't deviate).</p>"},{"location":"programming/typescript/the_concise_typeScript_book/","title":"The Concise TypeScript Book","text":"<p>The Concise TypeScript Book provides a comprehensive and succinct overview of TypeScript's capabilities. It offers clear explanations covering all aspects found in the latest version of the language, from its powerful type system to advanced features. Whether you're a beginner or an experienced developer, this book is an invaluable resource to enhance your understanding and proficiency in TypeScript.</p> <p>This book is completely Free and Open Source.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#downloads","title":"Downloads","text":"<p>You can also download the Epub version here:</p> <p>https://github.com/gibbok/typescript-book/tree/main/downloads</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#table-of-content","title":"Table of content","text":"<ul> <li>The Concise TypeScript Book</li> <li>Downloads</li> <li>Table of content</li> <li>Introduction</li> <li>About the author</li> <li>TypeScript an introduction<ul> <li>What is TypeScript?</li> <li>Why TypeScript?</li> <li>TypeScript and JavaScript</li> <li>TypeScript code generation</li> <li>Modern JavaScript Now (Downleveling)</li> </ul> </li> <li>Getting Started With TypeScript<ul> <li>Installation</li> <li>Configuration</li> <li>TypeScript configuration file \u200b\u200btsconfig.json</li> <li>target</li> <li>lib</li> <li>strict</li> <li>module</li> <li>moduleResolution</li> <li>esModuleInterop</li> <li>jsx</li> <li>skipLibCheck</li> <li>files</li> <li>include</li> <li>exclude</li> <li>Migration to TypeScript Advice</li> </ul> </li> <li>Exploring the Type System<ul> <li>The TypeScript language service</li> <li>Structural Typing</li> <li>TypeScript Fundamental Comparison Rules</li> <li>Types as sets</li> <li>Assign a type: Type Declarations and Type Assertions</li> <li>Type Declaration</li> <li>Type Assertion</li> <li>Non-null assertion</li> <li>Ambient Declarations</li> <li>Property Checking and Excess Property Checking</li> <li>Weak Types</li> <li>Strict Object Literal Checking (Freshness)</li> <li>Type Inference</li> <li>More advanced inferences</li> <li>Type Widening</li> <li>Const</li> <li>const modifier on type parameters</li> <li>Explicit Type Annotation</li> <li>Const assertion</li> <li>Type Narrowing</li> <li>Conditions</li> <li>Throwing or returning</li> <li>Discriminated union</li> <li>User-defined type guards</li> </ul> </li> <li>Primitive Types<ul> <li>string</li> <li>boolean</li> <li>number</li> <li>bigInt</li> <li>symbol</li> <li>null and undefined</li> <li>Array</li> <li>any</li> </ul> </li> <li>Type Annotations</li> <li>Optional Properties</li> <li>Readonly Properties</li> <li>Index Signatures</li> <li>Extending Types</li> <li>Literal Types</li> <li>Literal Inference</li> <li>strictNullChecks</li> <li>Non-null Assertion Operator (Postfix !)</li> <li>Enums<ul> <li>Numeric enums</li> <li>String enums</li> <li>Constant enums</li> <li>Reverse mapping</li> <li>Ambient enums</li> <li>Computed and constant members</li> </ul> </li> <li>Narrowing<ul> <li>typeof type guards</li> <li>Truthiness narrowing</li> <li>Equality narrowing</li> <li>In operator narrowing</li> <li>instanceof narrowing</li> </ul> </li> <li>Assignments</li> <li>Control flow analysis</li> <li>type predicates</li> <li>Discriminated unions</li> <li>The never type</li> <li>Exhaustiveness checking</li> <li>Object Types</li> <li>Tuple Type</li> <li>Fixed length tuple</li> <li>Union Type</li> <li>Intersection Types</li> <li>Type Indexing</li> <li>Type from Value</li> <li>Type from Func Return</li> <li>Type from Module</li> <li>Mapped types</li> <li>Conditional Types</li> <li>Distributive conditional types</li> <li>\u201cinfer\u201d Type inference in conditional types</li> <li>Predefined conditional types</li> <li>Template Union Types</li> <li>Any type</li> <li>Unknown type</li> <li>Void type</li> <li>Never type</li> <li>Interface and Type<ul> <li>Common Syntax</li> <li>Basic types</li> <li>Objects and interfaces</li> <li>Union and intersection types</li> </ul> </li> <li>Built-in Type Primitives</li> <li>Common Built-in JS Objects</li> <li>Overloads</li> <li>Get \\&amp; Set</li> <li>Merging and Extension</li> <li>Differences between Type and Interface</li> <li>Class<ul> <li>Class Common Syntax</li> <li>Constructor</li> <li>Private and Protected Constructors</li> <li>Access modifiers</li> <li>Auto-Accessors in Classes</li> <li>this</li> <li>Parameter Properties</li> <li>Abstract Classes</li> <li>With Generics</li> <li>Decorators</li> <li>Class decorators</li> <li>Property Decorator</li> <li>Method Decorator</li> <li>Getter and Setter Decorators</li> <li>Inheritance</li> <li>Statics</li> <li>Property initialization</li> <li>Method overloading</li> </ul> </li> <li>Generics<ul> <li>Generic Type</li> <li>Generic Classes</li> <li>Generic Constraints</li> <li>Generic contextual narrowing</li> </ul> </li> <li>Erased Structural Types</li> <li>Namespacing</li> <li>Symbols</li> <li>Triple-Slash Directives</li> <li>Type Manipulation<ul> <li>Creating Types from Types</li> <li>Indexed Access Types</li> <li>Utility Types</li> <li>Awaited\\&lt;T&gt;</li> <li>Partial\\&lt;T&gt;</li> <li>Required\\&lt;T&gt;</li> <li>Readonly\\&lt;T&gt;</li> <li>Record\\&lt;K, T&gt;</li> <li>Pick\\&lt;T, K&gt;</li> <li>Omit\\&lt;T, K&gt;</li> <li>Exclude\\&lt;T, U&gt;</li> <li>Extract\\&lt;T, U&gt;</li> <li>NonNullable\\&lt;T&gt;</li> <li>Parameters\\&lt;T&gt;</li> <li>ConstructorParameters\\&lt;T&gt;</li> <li>ReturnType\\&lt;T&gt;</li> <li>InstanceType\\&lt;T&gt;</li> <li>ThisParameterType\\&lt;T&gt;</li> <li>OmitThisParameter\\&lt;T&gt;</li> <li>ThisType\\&lt;T&gt;</li> <li>Uppercase\\&lt;T&gt;</li> <li>Lowercase\\&lt;T&gt;</li> <li>Capitalize\\&lt;T&gt;</li> <li>Uncapitalize\\&lt;T&gt;</li> </ul> </li> <li>Others<ul> <li>Errors and Exception Handling</li> <li>Asynchronous Language Features</li> <li>Iterators and Generators</li> <li>TsDocs JSDoc Reference</li> <li>@types</li> <li>JSX</li> <li>ES6 Modules</li> <li>ES7 exponentiation operator</li> <li>The for-await-of Statement</li> <li>New.target</li> <li>Dynamic Import Expressions</li> <li>\u201ctsc \u2013watch\u201d</li> <li>Definite Assignment Assertions (!)</li> <li>Defaulted declarations</li> <li>\u201cconst\u201c assertions</li> <li>Optional Chaining</li> <li>Nullish coalescing operator (??)</li> <li>Template Literal Types</li> <li>Function overloading</li> <li>Recursive Conditional Types</li> <li>ECMAScript Module Support in Node.js</li> <li>Assertion Functions</li> <li>Variadic Tuple Types</li> <li>Boxed types</li> <li>Key Remapping in Mapped Types</li> <li>Covariance and Contravariance in TypeScript</li> <li>Optional Variance Annotations for Type Parameters</li> <li>Symbol and Template String Pattern Index Signatures</li> <li>The satisfies Operator</li> </ul> </li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#introduction","title":"Introduction","text":"<p>Welcome to The Concise TypeScript Book! This guide equips you with essential knowledge and practical skills for effective TypeScript development. Discover key concepts and techniques to write clean, robust code. Whether you're a beginner or an experienced developer, this book serves as both a comprehensive guide and a handy reference for leveraging TypeScript's power in your projects.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#about-the-author","title":"About the author","text":"<p>Simone Poggiali is an experienced Senior Front-end Developer with a passion for writing professional-grade code since the 90s. Throughout his international career, he has contributed to numerous projects for a wide range of clients, from startups to large organizations. Notable companies such as HelloFresh, Siemens, O2, and Leroy Merlin have benefited from his expertise and dedication.</p> <p>You can reach Simone Poggiali on the following platforms:</p> <ul> <li>LinkedIn: https://www.linkedin.com/in/simone-poggiali</li> <li>GitHub: https://github.com/gibbok</li> <li>Twitter: https://twitter.com/gibbok_coding</li> <li>Email: gibbok.coding\ud83d\udce7gmail.com</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#typescript-an-introduction","title":"TypeScript an introduction","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#what-is-typescript","title":"What is TypeScript?","text":"<p>TypeScript is a strongly typed programming language that builds on JavaScript. It was originally designed by Anders Hejlsberg in 2012 and is currently developed and maintained by Microsoft as an open source project.</p> <p>TypeScript compiles to JavaScript and can be executed in any JavaScript engine (e.g., a browser or server Node.js).</p> <p>TypeScript supports multiple programming paradigms such as functional, generic, imperative, and object-oriented. TypeScript is neither an interpreted nor a compiled language.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#why-typescript","title":"Why TypeScript?","text":"<p>TypeScript is a strongly typed language that helps prevent common programming mistakes and avoid certain kinds of run-time errors before the program is executed.</p> <p>A strongly typed language allows the developer to specify various program constraints and behaviors in the data type definitions, facilitating the ability to verify the correctness of the software and prevent defects. This is especially valuable in large-scale applications.</p> <p>Some of the benefits of TypeScript:</p> <ul> <li>Static typing, optionally strongly typed</li> <li>Type Inference</li> <li>Access to ES6 and ES7 features</li> <li>Cross-Platform and Cross-browser Compatibility</li> <li>Tooling support with IntelliSense</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#typescript-and-javascript","title":"TypeScript and JavaScript","text":"<p>TypeScript is written in <code>.ts</code> or <code>.tsx</code> files, while JavaScript files are written in <code>.js</code> or <code>.jsx</code>.</p> <p>Files with the extension <code>.tsx</code> or <code>.jsx</code> can contain JavaScript Syntax Extension JSX, which is used in React for UI development.</p> <p>TypeScript is a typed superset of JavaScript (ECMAScript 2015) in terms of syntax. All JavaScript code is valid TypeScript code, but the reverse is not always true.</p> <p>For instance, consider a function in a JavaScript file with the <code>.js</code> extension, such as the following:</p> <pre><code>const sum = (a, b) =&gt; a + b;\n</code></pre> <p>The function can be converted and used in TypeScript by changing the file extension to <code>.ts</code>. However, if the same function is annotated with TypeScript types, it cannot be executed in any JavaScript engine without compilation. The following TypeScript code will produce a syntax error if it is not compiled:</p> <pre><code>const sum = (a: number, b: number): number =&gt; a + b;\n</code></pre> <p>TypeScript was designed to detect possible exceptions that can occur at runtime during compilation time by having the developer define the intent with type annotations. In addition, TypeScript can also catch issues if no type annotation is provided. For instance, the following code snippet does not specify any TypeScript types:</p> <pre><code>const items = [{ x: 1 }, { x: 2 }];\nconst result = items.filter(item =&gt; item.y);\n</code></pre> <p>In this case, TypeScript detects an error and reports:</p> <pre><code>Property 'y' does not exist on type '{ x: number; }'.\n</code></pre> <p>TypeScript's type system is largely influenced by the runtime behavior of JavaScript. For example, the addition operator (+), which in JavaScript can either perform string concatenation or numeric addition, is modeled in the same way in TypeScript:</p> <pre><code>const result = '1' + 1; // Result is of type string\n</code></pre> <p>The team behind TypeScript has made a deliberate decision to flag unusual usage of JavaScript as errors. For instance, consider the following valid JavaScript code:</p> <pre><code>const result = 1 + true; // In JavaScript, the result is equal 2\n</code></pre> <p>However, TypeScript throws an error:</p> <p>Operator '+' cannot be applied to types 'number' and 'boolean'.</p> <p>This error occurs because TypeScript strictly enforces type compatibility, and in this case, it identifies an invalid operation between a number and a boolean.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#typescript-code-generation","title":"TypeScript code generation","text":"<p>The TypeScript compiler has two main responsibilities: checking for type errors and compiling to JavaScript. These two processes are independent of each other. Types do not affect the execution of the code in a JavaScript engine, as they are completely erased during compilation. TypeScript can still output JavaScript even in the presence of type errors. Here is an example of TypeScript code with a type error:</p> <pre><code>const add = (a: number, b: number): number =&gt; a + b;\nconst result = add('x', 'y'); // Argument of type 'string' is not assignable to parameter of type 'number'.\n</code></pre> <p>However, it can still produce executable JavaScript output:</p> <pre><code>'use strict';\nconst add = (a, b) =&gt; a + b;\nconst result = add('x', 'y'); // xy\n</code></pre> <p>It is not possible to check TypeScript types at runtime. For example:</p> <pre><code>interface Animal {\n    name: string;\n}\ninterface Dog extends Animal {\n    bark: () =&gt; void;\n}\ninterface Cat extends Animal {\n    meow: () =&gt; void;\n}\nconst makeNoise = (animal: Animal) =&gt; {\n    if (animal instanceof Dog) {\n        // 'Dog' only refers to a type, but is being used as a value here.\n        // ...\n    }\n};\n</code></pre> <p>As the types are erased after compilation, there is no way to run this code in JavaScript. To recognize types at runtime, we need to use another mechanism. TypeScript provides several options, with a common one being \"tagged union\". For example:</p> <pre><code>interface Dog {\n    kind: 'dog'; // Tagged union\n    bark: () =&gt; void;\n}\ninterface Cat {\n    kind: 'cat'; // Tagged union\n    meow: () =&gt; void;\n}\ntype Animal = Dog | Cat;\n\nconst makeNoise = (animal: Animal) =&gt; {\n    if (animal.kind === 'dog') {\n        animal.bark();\n    } else {\n        animal.meow();\n    }\n};\n\nconst dog: Dog = {\n    kind: 'dog',\n    bark: () =&gt; console.log('bark'),\n};\nmakeNoise(dog);\n</code></pre> <p>The property \"kind\" is a value that can be used at runtime to distinguish between objects in JavaScript.</p> <p>It is also possible for a value at runtime to have a type different from the one declared in the type declaration. For instance, if the developer has misinterpreted an API type and annotated it incorrectly.</p> <p>TypeScript is a superset of JavaScript, so the \"class\" keyword can be used as a type and value at runtime.</p> <pre><code>class Animal {\n    constructor(public name: string) {}\n}\nclass Dog extends Animal {\n    constructor(public name: string, public bark: () =&gt; void) {\n        super(name);\n    }\n}\nclass Cat extends Animal {\n    constructor(public name: string, public meow: () =&gt; void) {\n        super(name);\n    }\n}\ntype Mammal = Dog | Cat;\n\nconst makeNoise = (mammal: Mammal) =&gt; {\n    if (mammal instanceof Dog) {\n        mammal.bark();\n    } else {\n        mammal.meow();\n    }\n};\n\nconst dog = new Dog('Fido', () =&gt; console.log('bark'));\nmakeNoise(dog);\n</code></pre> <p>In JavaScript, a \"class\" has a \"prototype\" property, and the \"instanceof\" operator can be used to test if the prototype property of a constructor appears anywhere in the prototype chain of an object.</p> <p>TypeScript has no effect on runtime performance, as all types will be erased. However, TypeScript does introduce some build time overhead.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#modern-javascript-now-downleveling","title":"Modern JavaScript Now (Downleveling)","text":"<p>TypeScript can compile code to any released version of JavaScript since ECMAScript 3 (1999). This means that TypeScript can transpile code from the latest JavaScript features to older versions, a process known as downleveling. This allows the usage of modern JavaScript while maintaining maximum compatibility with older runtime environments.</p> <p>It's important to note that during transpilation to an older version of JavaScript, TypeScript may generate code that could incur a performance overhead compared to native implementations.</p> <p>Here are some of the modern JavaScript features that can be used in TypeScript:</p> <ul> <li>ECMAScript modules instead of AMD-style \"define\" callbacks or CommonJS \"require\" statements.</li> <li>Classes instead of prototypes.</li> <li>Variables declaration using \"let\" or \"const\" instead of \"var\".</li> <li>\"for-of\" loop or \".forEach\" instead of the traditional \"for\" loop.</li> <li>Arrow functions instead of function expressions.</li> <li>Destructuring assignment.</li> <li>Shorthand property/method names and computed property names.</li> <li>Default function parameters.</li> </ul> <p>By leveraging these modern JavaScript features, developers can write more expressive and concise code in TypeScript.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#getting-started-with-typescript","title":"Getting Started With TypeScript","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#installation","title":"Installation","text":"<p>Visual Studio Code provides excellent support for the TypeScript language but does not include the TypeScript compiler. To install the TypeScript compiler, you can use a package manager like npm or yarn:</p> <pre><code>npm install typescript --save-dev\n</code></pre> <p>or</p> <pre><code>yarn add typescript --dev\n</code></pre> <p>Make sure to commit the generated lockfile to ensure that every team member uses the same version of TypeScript.</p> <p>To run the TypeScript compiler, you can use the following commands</p> <pre><code>npx tsc\n</code></pre> <p>or</p> <pre><code>yarn tsc\n</code></pre> <p>It is recommended to install TypeScript project-wise rather than globally, as it provides a more predictable build process. However, for one-off occasions, you can use the following command:</p> <pre><code>npx tsc\n</code></pre> <p>or installing it globally:</p> <pre><code>npm install -g typescript\n</code></pre> <p>If you are using Microsoft Visual Studio, you can obtain TypeScript as a package in NuGet for your MSBuild projects. In the NuGet Package Manager Console, run the following command:</p> <pre><code>Install-Package Microsoft.TypeScript.MSBuild\n</code></pre> <p>During the TypeScript installation, two executables are installed: \"tsc\" as the TypeScript compiler and \"tsserver\" as the TypeScript standalone server. The standalone server contains the compiler and language services that can be utilized by editors and IDEs to provide intelligent code completion.</p> <p>Additionally, there are several TypeScript-compatible transpilers available, such as Babel (via a plugin) or swc. These transpilers can be used to convert TypeScript code into other target languages or versions.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#configuration","title":"Configuration","text":"<p>TypeScript can be configured using the tsc CLI options or by utilizing a dedicated configuration file called tsconfig.json placed in the root of the project.</p> <p>To generate a tsconfig.json file prepopulated with recommended settings, you can use the following command:</p> <pre><code>tsc --init\n</code></pre> <p>When executing the <code>tsc</code> command locally, TypeScript will compile the code using the configuration specified in the nearest tsconfig.json file.</p> <p>Here are some examples of CLI commands that run with the default settings:</p> <pre><code>tsc main.ts // Compile a specific file (main.ts) to JavaScript\ntsc src/*.ts // Compile any .ts files under the 'src' folder to JavaScript\ntsc app.ts util.ts --outfile index.js // Compile two TypeScript files (app.ts and util.ts) into a single JavaScript file (index.js)\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#typescript-configuration-file-tsconfigjson","title":"TypeScript configuration file \u200b\u200btsconfig.json","text":"<p>A tsconfig.json file is used to configure the TypeScript Compiler (tsc). Usually, it is added to the root of the project, together with the <code>package.json</code> file.</p> <p>Notes:</p> <ul> <li>tsconfig.json accepts comments even if it is in json format.</li> <li>It is advisable to use this configuration file instead of the command-line options.</li> </ul> <p>At the following link you can find the complete documentation and its schema: https://www.typescriptlang.org/tsconfig http://json.schemastore.org/tsconfig</p> <p>The following represents a list of the common and useful configurations:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#target","title":"target","text":"<p>The \"target\" property is used to specify which version of JavaScript ECMAScript version your TypeScript should emit/compile into. For modern browsers ES6 is a good option, for older browsers, ES5 is recommended.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#lib","title":"lib","text":"<p>The \"lib\" property is used to specify which library files to include at compilation time. TypeScript automatically includes APIs for features specified in the \"target\" property, but it is possible to omit or pick specific libraries for particular needs. For instance, if you are working on a server project, you could exclude the \"DOM\" library, which is useful only in a browser environment.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#strict","title":"strict","text":"<p>The \"strict\" property enables stronger guarantees and enhances type safety. It is advisable to always include this property in your project's tsconfig.json file. Enabling the \"strict\" property allows TypeScript to:</p> <ul> <li>Emit code using \"use strict\" for each source file.</li> <li>Consider \"null\" and \"undefined\" in the type checking process.</li> <li>Disable the usage of the \"any\" type when no type annotations are present.</li> <li>Raise an error on the usage of the \"this\" expression, which would otherwise imply the \"any\" type.</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#module","title":"module","text":"<p>The \"module\" property sets the module system supported for the compiled program. During runtime, a module loader is used to locate and execute dependencies based on the specified module system.</p> <p>The most common module loaders used in JavaScript are Node.js CommonJS for server-side applications and RequireJS for AMD modules in browser-based web applications. TypeScript can emit code for various module systems, including UMD, System, ESNext, ES2015/ES6, and ES2020.</p> <p>Note: The module system should be chosen based on the target environment and the module loading mechanism available in that environment.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#moduleresolution","title":"moduleResolution","text":"<p>The \"moduleResolution\" property specifies the module resolution strategy. Use \u201cnode\u201d for modern TypeScript code, the \u201cclassic\u201d strategy is used only for old versions of TypeScript (before 1.6).</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#esmoduleinterop","title":"esModuleInterop","text":"<p>The \"esModuleInterop\" property allows import default from CommonJS modules that did not export using the \u201cdefault\u201d property, this property provides a shim to ensure compatibility in the emitted JavaScript. After enabling this option we can use \u201cimport MyLibrary from \u2018my-library\u2019\u201d instead of \u201cimport * as MyLibrary from \u2018my-library\u2019\u201d.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#jsx","title":"jsx","text":"<p>The \"jsx\" property applies only to .tsx files used in ReactJS and controls how JSX constructs are compiled into JavaScript. A common option is \u201cpreserve\u201d which will compile to a .jsx file keeping unchanged the JSX so it can be passed to different tools like Babel for further transformations.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#skiplibcheck","title":"skipLibCheck","text":"<p>The \"skipLibCheck'' property will prevent TypeScript from type-checking the entire imported third-party packages. This property will reduce the compile time of a project. TypeScript will still check your code against the type definitions provided by these packages.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#files","title":"files","text":"<p>The \"files\" property indicates to the compiler a list of files that must always be included in the program.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#include","title":"include","text":"<p>The \"include\" property indicates to the compiler a list of files that we would like to include. This property allows glob-like patterns, such as \"*\" for any subdirectory, \"\" for any file name, and \"?\" for optional characters.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#exclude","title":"exclude","text":"<p>The \"exclude\" property indicates to the compiler a list of files that should not be included in the compilation. This can include files such as \"node_modules\" or test files. Note: tsconfig.json allows comments.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#migration-to-typescript-advice","title":"Migration to TypeScript Advice","text":"<p>For large projects, it is recommended to adopt a gradual transition where TypeScript and JavaScript code will initially coexist. Only small projects can be migrated to TypeScript in one go.</p> <p>The first step of this transition is to introduce TypeScript into the build chain process. This can be done by using the \"allowJs\" compiler option, which permits .ts and .tsx files to coexist with existing JavaScript files. As TypeScript will fall back to a type of \"any\" for a variable when it cannot infer the type from JavaScript files, it is recommended to disable \"noImplicitAny\" in your compiler options at the beginning of the migration.</p> <p>The second step is to ensure that your JavaScript tests work alongside TypeScript files so that you can run tests as you convert each module. If you are using Jest, consider using <code>ts-jest</code>, which allows you to test TypeScript projects with Jest.</p> <p>The third step is to include type declarations for third-party libraries in your project. These declarations can be found either bundled or on DefinitelyTyped. You can search for them using https://www.typescriptlang.org/dt/search and install them using</p> <pre><code>npm install --save-dev @types/package-name or yarn add --dev @types/package-name.\n</code></pre> <p>The fourth step is to migrate module by module with a bottom-up approach, following your Dependency Graph starting with the leaves. The idea is to start converting Modules that do not depend on other Modules. To visualize the dependency graphs, you can use the <code>madge</code> tool.</p> <p>Good candidate modules for these initial conversions are utility functions and code related to external APIs or specifications. It is possible to automatically generate TypeScript type definitions from Swagger contracts, GraphQL or JSON schemas to be included in your project.</p> <p>When there are no specifications or official schemas available, you can generate types from raw data, such as JSON returned by a server. However, it is recommended to generate types from specifications instead of data to avoid missing edge cases.</p> <p>During the migration, refrain from code refactoring and focus only on adding types to your modules.</p> <p>The fifth step is to enable \"noImplicitAny,\" which will enforce that all types are known and defined, providing a better TypeScript experience for your project.</p> <p>During the migration, you can use the <code>@ts-check</code> directive, which enables TypeScript type checking in a JavaScript file. This directive provides a loose version of type checking and can be initially used to identify issues in JavaScript files. When <code>@ts-check</code> is included in a file, TypeScript will try to deduce definitions using JSDoc-style comments. However, consider using JSDoc annotations only at a very early stage of the migration.</p> <p>Consider keeping the default value of <code>noEmitOnError</code> in your tsconfig.json as false. This will allow you to output JavaScript source code even if errors are reported.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#exploring-the-type-system","title":"Exploring the Type System","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#the-typescript-language-service","title":"The TypeScript language service","text":"<p>The TypeScript language service, also known as tsserver, offers various features such as error reporting, diagnostics, compile-on-save, renaming, go to definition, completion lists, signature help, and more. It is primarily used by integrated development environments (IDEs) to provide IntelliSense support. It seamlessly integrates with Visual Studio Code and is utilized by tools like Conquer of Completion (Coc).</p> <p>Developers can leverage a dedicated API and create their own custom language service plugins to enhance the TypeScript editing experience. This can be particularly useful for implementing special linting features or enabling auto-completion for a custom templating language.</p> <p>An example of a real-world custom plugin is \"typescript-styled-plugin,\" which provides syntax error reporting and IntelliSense support for CSS properties in styled components.</p> <p>For more information and quick start guides, you can refer to the official TypeScript Wiki on GitHub: https://github.com/microsoft/TypeScript/wiki/</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#structural-typing","title":"Structural Typing","text":"<p>TypeScript is based on a structural type system. This means that the compatibility and equivalence of types are determined by the type's actual structure or definition, rather than its name or place of declaration, as in nominative type systems like C# or C.</p> <p>TypeScript's structural type system was designed based on how JavaScript's dynamic duck typing system works during runtime.</p> <p>The following example is valid TypeScript code. As you can observe, \"X\" and \"Y\" have the same member \"a,\" even though they have different declaration names. The types are determined by their structures, and in this case, since the structures are the same, they are compatible and valid.</p> <pre><code>type X = {\n    a: string;\n};\ntype Y = {\n    a: string;\n};\nconst x: X = { a: 'a' };\nconst y: Y = x; // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#typescript-fundamental-comparison-rules","title":"TypeScript Fundamental Comparison Rules","text":"<p>The TypeScript comparison process is recursive and executed on types nested at any level.</p> <p>A type 'X' is compatible with 'Y' if 'Y' has at least the same members as 'X'.</p> <pre><code>type X = {\n    a: string;\n};\nconst y = { a: 'A', b: 'B' }; // Valid, as it has at least the same members as X\nconst r: X = y;\n</code></pre> <p>Function parameters are compared by types, not by their names:</p> <pre><code>type X = (a: number) =&gt; void;\ntype Y = (a: number) =&gt; void;\nlet x: X = (j: number) =&gt; undefined;\nlet y: Y = (k: number) =&gt; undefined;\ny = x; // Valid\nx = y; // Valid\n</code></pre> <p>Function return types must be the same:</p> <pre><code>type X = (a: number) =&gt; undefined;\ntype Y = (a: number) =&gt; number;\nlet x: X = (a: number) =&gt; undefined;\nlet y: Y = (a: number) =&gt; 1;\ny = x; // Invalid\nx = y; // Invalid\n</code></pre> <p>The return type of a source function must be a subtype of the return type of a target function:</p> <pre><code>let x = () =&gt; ({ a: 'A' });\nlet y = () =&gt; ({ a: 'A', b: 'B' });\nx = y; // Valid\ny = x; // Invalid member b is missing\n</code></pre> <p>Discarding function parameters is allowed, as it is a common practice in JavaScript, for instance using Array.prototype.map():</p> <pre><code>[1, 2, 3].map((element, _index, _array) =&gt; element + 'x');\n</code></pre> <p>Therefore, the following type declarations are completely valid:</p> <pre><code>type X = (a: number) =&gt; undefined;\ntype Y = (a: number, b: number) =&gt; undefined;\nlet x: X = (a: number) =&gt; undefined;\nlet y: Y = (a: number) =&gt; undefined; // Missing b parameter\ny = x; // Valid\n</code></pre> <p>Any additional optional parameters of the source type are valid:</p> <pre><code>type X = (a: number, b?: number, c?: number) =&gt; undefined;\ntype Y = (a: number) =&gt; undefined;\nlet x: X = a =&gt; undefined;\nlet y: Y = a =&gt; undefined;\ny = x; // Valid\nx = y; //Valid\n</code></pre> <p>Any optional parameters of the target type without corresponding parameters in the source type are valid and not an error:</p> <pre><code>type X = (a: number) =&gt; undefined;\ntype Y = (a: number, b?: number) =&gt; undefined;\nlet x: X = a =&gt; undefined;\nlet y: Y = a =&gt; undefined;\ny = x; // Valid\nx = y; // Valid\n</code></pre> <p>The rest parameter is treated as an infinite series of optional parameters:</p> <pre><code>type X = (a: number, ...rest: number[]) =&gt; undefined;\nlet x: X = a =&gt; undefined; //valid\n</code></pre> <p>Functions with overloads are valid if the overload signature is compatible with its implementation signature:</p> <pre><code>function x(a: string): void;\nfunction x(a: string, b: number): void;\nfunction x(a: string, b?: number): void {\n    console.log(a, b);\n}\nx('a'); // Valid\nx('a', 1); // Valid\n\nfunction y(a: string): void; // Invalid, not compatible with implementation signature\nfunction y(a: string, b: number): void;\nfunction y(a: string, b: number): void {\n    console.log(a, b);\n}\ny('a');\ny('a', 1);\n</code></pre> <p>Function parameter comparison succeeds if the source and target parameters are assignable to supertypes or subtypes (bivariance).</p> <pre><code>// Supertype\nclass X {\n    a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\n// Subtype\nclass Y extends X {}\n// Subtype\nclass Z extends X {}\n\ntype GetA = (x: X) =&gt; string;\nconst getA: GetA = x =&gt; x.a;\n\n// Bivariance does accept supertypes\nconsole.log(getA(new X('x'))); // Valid\nconsole.log(getA(new Y('Y'))); // Valid\nconsole.log(getA(new Z('z'))); // Valid\n</code></pre> <p>Enums are comparable and valid with numbers and vice versa, but comparing Enum values from different Enum types is invalid.</p> <pre><code>enum X {\n    A,\n    B,\n}\nenum Y {\n    A,\n    B,\n    C,\n}\nconst xa: number = X.A; // Valid\nconst ya: Y = 0; // Valid\nX.A === Y.A; // Invalid\n</code></pre> <p>Instances of a class are subject to a compatibility check for their private and protected members:</p> <pre><code>class X {\n    public a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\n\nclass Y {\n    private a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\n\nlet x: X = new Y('y'); // Invalid\n</code></pre> <p>The comparison check does not take into consideration the different inheritance hierarchy, for instance:</p> <pre><code>class X {\n    public a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\nclass Y extends X {\n    public a: string;\n    constructor(value: string) {\n        super(value);\n        this.a = value;\n    }\n}\nclass Z {\n    public a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\nlet x: X = new X('x');\nlet y: Y = new Y('y');\nlet z: Z = new Z('z');\nx === y; // Valid\nx === z; // Valid even if z is from a different inheritance hierarchy\n</code></pre> <p>Generics are compared using their structures based on the resulting type after applying the generic parameter, only the final result is compared as a non-generic type.</p> <pre><code>interface X&lt;T&gt; {\n    a: T;\n}\nlet x: X&lt;number&gt; = { a: 1 };\nlet y: X&lt;string&gt; = { a: 'a' };\nx === y; // Invalid as the type argument is used in the final structure\n</code></pre> <pre><code>interface X&lt;T&gt; {}\nconst x: X&lt;number&gt; = 1;\nconst y: X&lt;string&gt; = 'a';\nx === y; // Valid as the type argument is not used in the final structure\n</code></pre> <p>When generics do not have their type argument specified, all the unspecified arguments are treated as types with \"any\":</p> <pre><code>type X = &lt;T&gt;(x: T) =&gt; T;\ntype Y = &lt;K&gt;(y: K) =&gt; K;\nlet x: X = x =&gt; x;\nlet y: Y = y =&gt; y;\nx = y; // Valid\n</code></pre> <p>Remember:</p> <pre><code>let a: number = 1;\nlet b: number = 2;\na = b; // Valid, everything is assignable to itself\n\nlet c: any;\nc = 1; // Valid, all types are assignable to any\n\nlet d: unknown;\nd = 1; // Valid, all types are assignable to unknown\n\nlet e: unknown;\nlet e1: unknown = e; // Valid, unknown is only assignable to itself and any\nlet e2: any = e; // Valid\nlet e3: number = e; // Invalid\n\nlet f: never;\nf = 1; // Invalid, nothing is assignable to never\n\nlet g: void;\nlet g1: any;\ng = 1; // Invalid, void is not assignable to or from anything expect any\ng = g1; // Valid\n</code></pre> <p>Please note that when \"strictNullChecks\" is enabled, \"null\" and \"undefined\" are treated similarly to \"void\"; otherwise, they are similar to \"never\".</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#types-as-sets","title":"Types as sets","text":"<p>In TypeScript, a type is a set of possible values. This set is also referred to as the domain of the type. Each value of a type can be viewed as an element in a set. A type establishes the constraints that every element in the set must satisfy to be considered a member of that set. The primary task of TypeScript is to check and verify whether one set is a subset of another.</p> <p>TypeScript supports various types of sets:</p> Set term TypeScript Notes Empty set never \u201cnever\u201d contains anything apart itself Single element set undefined / null / literal type Finite set boolean / union Infinite set string / number / object Universal set any / unknown Every element is a member of \u201cany\u201d and every set is a subset of it / \u201cunknown\u201d is a type-safe counterpart of \u201cany\u201d <p>Here few examples:</p> TypeScript Set term Example never \u2205 (empty set) const x: never = 'x'; // Error: Type 'string' is not assignable to type 'never' Literal type Single element set type X = 'X'; type Y = 7; Value assignable to T Value \u2208 T (member of) type XY = 'X' | 'Y'; const x: XY = 'X'; T1 assignable to T2 T1 \u2286 T2 (subset of) type XY = 'X' | 'Y'; const x: XY = 'X'; const j: XY = 'J'; // Type '\"J\"' is not assignable to type 'XY'. T1 extends T2 T1 \u2286 T2 (subset of) type X = 'X' extends string ? true : false; T1 | T2 T1 \u222a T2 (union) type XY = 'X' | 'Y'; type JK = 1 | 2; T1 &amp; T2 T1 \u2229 T2 (intersection) type X = { a: string } type Y = { b: string } type XY = X &amp; Y const x: XY = { a: 'a', b: 'b' } unknown Universal set const x: unknown = 1 <p>An union, (T1 | T2) creates a wider set (both):</p> <pre><code>type X = {\n    a: string;\n};\ntype Y = {\n    b: string;\n};\ntype XY = X | Y;\nconst r: XY = { a: 'a', b: 'x' }; // Valid\n</code></pre> <p>An intersection, (T1 &amp; T2) create a narrower set (only shared):</p> <pre><code>type X = {\n    a: string;\n};\ntype Y = {\n    a: string;\n    b: string;\n};\ntype XY = X &amp; Y;\nconst r: XY = { a: 'a' }; // Invalid\nconst j: XY = { a: 'a', b: 'b' }; // Valid\n</code></pre> <p>The <code>extends</code> keyword could be considered as a \u201csubset of\u201d in this context. It sets a constraint for a type. The extends used with a generic, take the generic as an infinite set and it will constrain it to a more specific type. Please note that <code>extends</code> has nothing to do with hierarchy in a OOP sense (there is no this concept in TypeScript). TypeScript works with sets and does not have a strict hierarchy, infact, as in the example below, two types could overlap without either being a subtype of the other type (TypeScript considers the structure, shape of the objects).</p> <pre><code>interface X {\n    a: string;\n}\ninterface Y extends X {\n    b: string;\n}\ninterface Z extends Y {\n    c: string;\n}\nconst z: Z = { a: 'a', b: 'b', c: 'c' };\ninterface X1 {\n    a: string;\n}\ninterface Y1 {\n    a: string;\n    b: string;\n}\ninterface Z1 {\n    a: string;\n    b: string;\n    c: string;\n}\nconst z1: Z1 = { a: 'a', b: 'b', c: 'c' };\n\nconst r: Z1 = z; // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#assign-a-type-type-declarations-and-type-assertions","title":"Assign a type: Type Declarations and Type Assertions","text":"<p>A type can be assigned in different ways in TypeScript:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-declaration","title":"Type Declaration","text":"<p>In the following example, we use x: X (\": Type\") to declare a type for the variable x.</p> <pre><code>type X = {\n    a: string;\n};\n\nconst x: X = {\n    // Type declaration\n    a: 'a',\n};\n</code></pre> <p>If the variable is not in the specified format, TypeScript will report an error. For instance:</p> <pre><code>type X = {\n    a: string;\n};\n\nconst x: X = {\n    a: 'a',\n    b: 'b', // Error: Object literal may only specify known properties\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-assertion","title":"Type Assertion","text":"<p>It is possible to add an assertion by using the <code>as</code> keyword. This tells the compiler that the developer has more information about a type and silences any errors that may occur.</p> <p>For example:</p> <pre><code>type X = {\n    a: string;\n};\nconst x = {\n    a: 'a',\n    b: 'b',\n} as X;\n</code></pre> <p>In the above example, the object x is asserted to have the type X using the as keyword. This informs the TypeScript compiler that the object conforms to the specified type, even though it has an additional property b not present in the type definition.</p> <p>Type assertions are useful in situations where a more specific type needs to be specified, especially when working with the DOM. For instance:</p> <pre><code>const myInput = document.getElementById('my_input') as HTMLInputElement;\n</code></pre> <p>Here, the type assertion as HTMLInputElement is used to tell TypeScript that the result of getElementById should be treated as an HTMLInputElement. Type assertions can also be used to remap keys, as shown in the example below with template literals:</p> <pre><code>type J&lt;Type&gt; = {\n    [Property in keyof Type as `prefix_${string &amp;\n        Property}`]: () =&gt; Type[Property];\n};\ntype X = {\n    a: string;\n    b: number;\n};\ntype Y = J&lt;X&gt;;\n</code></pre> <p>In this example, the type <code>J&lt;Type&gt;</code> uses a mapped type with a template literal to remap the keys of Type. It creates new properties with a prefix_ added to each key, and their corresponding values are functions returning the original property values.</p> <p>It is worth noting that when using a type assertion, TypeScript will not execute excess property checking. Therefore, it is generally preferable to use a Type Declaration when the structure of the object is known in advance.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#non-null-assertion","title":"Non-null assertion","text":"<p>This assertion is applied using a post-fix <code>!</code> expression operator, which tells TypeScript that a value cannot be null or undefined.</p> <pre><code>let x: null | number;\nlet y = x!; // number\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#ambient-declarations","title":"Ambient Declarations","text":"<p>Ambient declarations are files that describe types for JavaScript code, they have a file name format as <code>.d.ts.</code>. They are usually imported and used to annotate existing JavaScript libraries or to add types to existing JS files in your project.</p> <p>Many common libraries types can be found at: https://github.com/DefinitelyTyped/DefinitelyTyped/</p> <p>and can be installed using:</p> <pre><code>npm install --save-dev @types/library-name\n</code></pre> <p>For your defined Ambient Declarations, you can import using the \u201ctriple-slash\u201d reference:</p> <pre><code>/// &lt;reference path=\"./library-types.d.ts\" /&gt;\n</code></pre> <p>You can use Ambient Declarations even within JavaScript files using <code>// @ts-check</code>.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#property-checking-and-excess-property-checking","title":"Property Checking and Excess Property Checking","text":"<p>TypeScript is based on a structural type system but excess property checking is a property of TypeScript which allows it to check whether an object has the exact properties specified in the type.</p> <p>Excess Property Checking is performed when assigning object literals to variables or when passing them as arguments to the function's excess property, for instance.</p> <pre><code>type X = {\n    a: string;\n};\nconst y = { a: 'a', b: 'b' };\nconst x: X = y; // Valid because structural typing\nconst w: X = { a: 'a', b: 'b' }; // Invalid because excess property checking\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#weak-types","title":"Weak Types","text":"<p>A type is considered weak when it contains nothing but a set of all-optional properties:</p> <pre><code>type X = {\n    a?: string;\n    b?: string;\n};\n</code></pre> <p>TypeScript considers an error to assign anything to a weak type when there is no overlap, for instance, the following throws an error:</p> <pre><code>type Options = {\n    a?: string;\n    b?: string;\n};\n\nconst fn = (options: Options) =&gt; undefined;\n\nfn({ c: 'c' }); // Invalid\n</code></pre> <p>Although not recommended, if needed, it is possible to bypass this check by using type assertion:</p> <pre><code>type Options = {\n    a?: string;\n    b?: string;\n};\nconst fn = (options: Options) =&gt; undefined;\nfn({ c: 'c' } as Options); // Valid\n</code></pre> <p>Or by adding <code>unknown</code> to the index signature to the weak type:</p> <pre><code>type Options = {\n    [prop: string]: unknown;\n    a?: string;\n    b?: string;\n};\n\nconst fn = (options: Options) =&gt; undefined;\nfn({ c: 'c' }); // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#strict-object-literal-checking-freshness","title":"Strict Object Literal Checking (Freshness)","text":"<p>Strict object literal checking, sometimes referred to as freshness, is a feature in TypeScript that helps catch excess or misspelled properties that would otherwise go unnoticed in normal structural type checks.</p> <p>When creating an object literal, the TypeScript compiler considers it \"fresh.\" If the object literal is assigned to a variable or passed as a parameter, TypeScript will throw an error if the object literal specifies properties that do not exist in the target type.</p> <p>However, strict object literal checking does not apply when the type of an object literal is widened, meaning the object literal is structurally type compatible with a broader type. Here are some examples to illustrate:</p> <pre><code>type X = { a: string };\ntype Y = { a: string; b: string };\n\nlet x: X;\nx = { a: 'a', b: 'b' }; // Freshness check: Invalid assignment\nvar y: Y;\ny = { a: 'a', bx: 'bx' }; // Freshness check: Invalid assignment\n\nconst fn = (x: X) =&gt; console.log(x.a);\n\nfn(x);\nfn(y); // No errors, structurally type compatible\n\nfn({ a: 'a', bx: 'b' }); // Freshness check: Invalid argument\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-inference","title":"Type Inference","text":"<p>TypeScript can infer types when no annotation is provided during:</p> <ul> <li>Variable initialization.</li> <li>Member initialization.</li> <li>Setting defaults for parameters.</li> <li>Function return type.</li> </ul> <p>For example:</p> <pre><code>let x = 'x'; // The type inferred is string\n</code></pre> <p>The TypeScript compiler analyzes the value or expression and determines its type based on the available information.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#more-advanced-inferences","title":"More advanced inferences","text":"<p>When multiple expressions are used in type inference, TypeScript looks for the \"best common types.\" For instance:</p> <pre><code>let x = [1, 'x', 1, null]; // The type inferred is: (string | number | null)[]\n</code></pre> <p>If the compiler cannot find the best common types, it returns a union type. For example:</p> <pre><code>let x = [new RegExp('x'), new Date()]; // Type inferred is: (RegExp | Date)[]\n</code></pre> <p>TypeScript utilizes \"contextual typing\" based on the variable's location to infer types. In the following example, the compiler knows that <code>e</code> is of type <code>MouseEvent</code> because of the <code>click</code> event type defined in the lib.d.ts file, which contains ambient declarations for various common JavaScript constructs and the DOM:</p> <pre><code>window.addEventListener('click', function (e) {}); // e inferred type is MouseEvent\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-widening","title":"Type Widening","text":"<p>Type widening is the process in which TypeScript assigns a type to a variable initialized when no type annotation was provided. It allows narrow to wider types but not vice versa. In the following example:</p> <pre><code>let x = 'x'; // TypeScript infers as string, a wide type\nlet y: 'y' | 'x' = 'y'; // y types is a union of literal types\ny = x; // Invalid Type 'string' is not assignable to type '\"x\" | \"y\"'.\n</code></pre> <p>TypeScript assigns <code>string</code> to <code>x</code> based on the single value provided during initialization (<code>x</code>), this is an example of widening.</p> <p>TypeScript provides ways to have control of the widening process, for instance using:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#const","title":"Const","text":"<p>Using the <code>const</code> keyword when declaring a variable results in a narrower type inference in TypeScript.</p> <p>For example:</p> <pre><code>const x = 'x'; // TypeScript infers the type of x as 'x', a narrower type\nlet y: 'y' | 'x' = 'y';\ny = x; // Valid: The type of x is inferred as 'x'\n</code></pre> <p>By using <code>const</code> to declare the variable x, its type is narrowed to the specific literal value 'x'. Since the type of x is narrowed, it can be assigned to the variable y without any error. The reason the type can be inferred is because <code>const</code> variables cannot be reassigned, so their type can be narrowed down to a specific literal type, in this case, the literal type 'x'.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#const-modifier-on-type-parameters","title":"const modifier on type parameters","text":"<p>From version 5.0 of TypeScript, it is possible to specify the <code>const</code> attribute on a generic type parameter. This allows for inferring the most precise type possible. Let's see an example without using <code>const</code>:</p> <pre><code>function identity&lt;T&gt;(value: T) {\n    // No const here\n    return value;\n}\nconst values = identity({ a: 'a', b: 'b' }); // Type infered is: { a: string; b: string; }\n</code></pre> <p>As you can see, the properties <code>a</code> and <code>b</code> are inferred with a type of <code>string</code>   .</p> <p>Now, let's see the difference with the <code>const</code> version:</p> <pre><code>function identity&lt;const T&gt;(value: T) {\n    // Using const modifier on type parameters\n    return value;\n}\nconst values = identity({ a: 'a', b: 'b' }); // Type infered is: { a: \"a\"; b: \"b\"; }\n</code></pre> <p>Now we can see that the properties <code>a</code> and <code>b</code> are inferred as <code>const</code>, so <code>a</code> and <code>b</code> are treated as string literals rather than just <code>string</code> types.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#explicit-type-annotation","title":"Explicit Type Annotation","text":"<p>We can be specific and pass a type, in the following example property <code>x</code> is of type <code>number</code>:</p> <pre><code>const v = {\n    x: 1, // Inferred type: number (widening)\n};\nv.x = 3; // Valid\n</code></pre> <p>We can make the type annotation more specific by using a union of literal types:</p> <pre><code>const v: { x: 1 | 2 | 3 } = {\n    x: 1, // x is now a union of literal types: 1 | 2 | 3\n};\nv.x = 3; // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#const-assertion","title":"Const assertion","text":"<p>Const assertion allows us to be more specific by asserting a <code>const</code> type. It can be used on individual properties or on an entire object. Here are a few examples:</p> <p>On a single property:</p> <pre><code>const v = {\n    x: 3 as const,\n};\nv.x = 3;\n</code></pre> <p>On an entire object:</p> <pre><code>const v = {\n    x: 1,\n    y: 2,\n} as const;\n</code></pre> <p>This can be particularly useful when defining the type for a tuple:</p> <pre><code>const x = [1, 2, 3]; // number[]\nconst y = [1, 2, 3] as const; // Tuple of readonly [1, 2, 3]\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-narrowing","title":"Type Narrowing","text":"<p>Type Narrowing is the process in TypeScript where a general type is narrowed down to a more specific type. This occurs when TypeScript analyzes the code and determines that certain conditions or operations can refine the type information.</p> <p>Narrowing types can occur in different ways, including:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#conditions","title":"Conditions","text":"<p>By using conditional statements, such as <code>if</code> or <code>switch</code>, TypeScript can narrow down the type based on the outcome of the condition. For example:</p> <pre><code>let x: number | undefined = 10;\n\nif (x !== undefined) {\n    x += 100; // The type is number, which had been narrowed by the condition\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#throwing-or-returning","title":"Throwing or returning","text":"<p>Throwing an error or returning early from a branch can be used to help TypeScript narrow down a type. For example:</p> <pre><code>let x: number | undefined = 10;\n\nif (x === undefined) {\n    throw 'error';\n}\nx += 100;\n</code></pre> <p>Other ways to narrow down types in TypeScript include:</p> <ul> <li><code>instanceof</code> operator: Used to check if an object is an instance of a specific class.</li> <li><code>in</code> operator: Used to check if a property exists in an object.</li> <li><code>typeof</code> operator: Used to check the type of a value at runtime.</li> <li>Built-in functions like <code>Array.isArray()</code>: Used to check if a value is an array.</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#discriminated-union","title":"Discriminated union","text":"<p>Using a \"discriminated union\" is a pattern in TypeScript where an explicit \"tag\" is added to objects to distinguish between different types within a union. This pattern is also referred to as a \"tagged union.\" In the following example, the \"tag\" is represented by the property \"type\":</p> <pre><code>type A = { type: 'type_a'; value: number };\ntype B = { type: 'type_b'; value: string };\n\nconst x = (input: A | B): string | number =&gt; {\n    switch (input.type) {\n        case 'type_a':\n            return input.value + 100; // type is A\n        case 'type_b':\n            return input.value + 'extra'; // type is B\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#user-defined-type-guards","title":"User-defined type guards","text":"<p>In cases where TypeScript is unable to determine a type, it is possible to write a helper function known as a \"user-defined type guard.\" In the following example, we will utilize a Type Predicate to narrow down the type after applying certain filtering:</p> <pre><code>const data = ['a', null, 'c', 'd', null, 'f'];\n\nconst r1 = data.filter(x =&gt; x != null); // The type is (string | null)[], TypeScript was not able to infer the type properly\n\nconst isValid = (item: string | null): item is string =&gt; item !== null; // Custom type guard\n\nconst r2 = data.filter(isValid); // The type is fine now string[], by using the predicate type guard we were able to narrow the type\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#primitive-types","title":"Primitive Types","text":"<p>TypeScript supports 7 primitive types. A primitive data type refers to a type that is not an object and does not have any methods associated with it. In TypeScript, all primitive types are immutable, meaning their values cannot be changed once they are assigned.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#string","title":"string","text":"<p>The <code>string</code> primitive type stores textual data, and the value is always double or single-quoted.</p> <pre><code>const x: string = 'x';\nconst y: string = 'y';\n</code></pre> <p>Strings can span multiple lines if surrounded by the backtick (`) character:</p> <pre><code>let sentence: string = `xxx,\n   yyy`;\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#boolean","title":"boolean","text":"<p>The <code>boolean</code> data type in TypeScript stores a binary value, either <code>true</code> or <code>false</code>.</p> <pre><code>const isReady: boolean = true;\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#number","title":"number","text":"<p>A <code>number</code> data type in TypeScript is represented with a 64-bit floating point value. A <code>number</code> type can represent integers and fractions. TypeScript also supports hexadecimal, binary, and octal, for instance:</p> <pre><code>const decimal: number = 10;\nconst hexadecimal: number = 0xa00d; // Hexadecimal starts with 0x\nconst binary: number = 0b1010; // Binary starts with 0b\nconst octal: number = 0o633; // Octal starts with 0c\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#bigint","title":"bigInt","text":"<p>A <code>bigInt</code> represents numeric values that are very large (253 \u2013 1) and cannot be represented with a <code>number</code>.</p> <p>A <code>bigInt</code> can be created by calling the built-in function <code>BigInt()</code> or by adding <code>n</code> to the end of any integer numeric literal:</p> <pre><code>const x: bigint = BigInt(9007199254740991);\nconst y: bigint = 9007199254740991n;\n</code></pre> <p>Notes: <code>bigInt</code> values cannot be mixed with <code>number</code> and cannot be used with built-in <code>Math</code>, they must be coerced to the same type.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#symbol","title":"symbol","text":"<p>JavaScript has a primitive function, Symbol(), that creates a globally unique reference.</p> <pre><code>let sym = Symbol('x'); // Type symbol\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#null-and-undefined","title":"null and undefined","text":"<p><code>null</code> and <code>undefined</code> types both represent no value or the absence of any value.</p> <p>The <code>undefined</code> type means the value is not assigned or initialized or indicates an unintentional absence of value.</p> <p>The <code>null</code> type means that we know that the field does not have a value, so value is unavailable, it indicates an intentional absence of value.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#array","title":"Array","text":"<p>An <code>array</code> is a data type that can store multiple values of the same type or not. It can be defined using the following syntax:</p> <pre><code>const x: string[] = ['a', 'b'];\nconst y: Array&lt;string&gt; = ['a', 'b'];\nconst j: Array&lt;string | number&gt; = ['a', 1, 'b', 2]; // Union\n</code></pre> <p>TypeScript supports readonly arrays using the following syntax:</p> <pre><code>const x: readonly string[] = ['a', 'b']; // Readonly modifier\nconst y: ReadonlyArray&lt;string&gt; = ['a', 'b'];\nconst j: ReadonlyArray&lt;string | number&gt; = ['a', 1, 'b', 2];\nj.push('x'); // Invalid\n</code></pre> <p>TypeScript supports tuple and readonly tuple:</p> <pre><code>const x: [string, number] = ['a', 1];\nconst y: readonly [string, number] = ['a', 1];\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#any","title":"any","text":"<p>The <code>any</code> data type represents literally \u201cany\u201d value, it is the default value when TypeScript cannot infer the type or is not specified.</p> <p>When using <code>any</code> TypeScript compiler skips the type checking so there is no type safety when <code>any</code> is being used. Generally do not use <code>any</code> to silence the compiler when an error occurs, instead focus on fixing the error as with using <code>any</code>  it is possible to break contracts and we lose the benefits of TypeScript autocomplete.</p> <p>The <code>any</code> type could be useful during a gradual migration from JavaScript to TypeScript, as it can silence the compiler.</p> <p>For new projects use TypeScript configuration <code>noImplicitAny</code> which enables TypeScript to issue errors where <code>any</code> is used or inferred.</p> <p>The <code>any</code>type  is usually a source of errors which can mask real problems with your types. Avoid using it as much as possible.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-annotations","title":"Type Annotations","text":"<p>On variables declared using <code>var</code>, <code>let</code> and <code>const</code>, it is possible to optionally add a type:</p> <pre><code>const x: number = 1;\n</code></pre> <p>TypeScript does a good job of inferring types, especially when simple one, so these declarations in most cases are not necessary.</p> <p>On functions is possible to add type annotations to parameters:</p> <pre><code>function sum(a: number, b: number) {\n    return a + b;\n}\n</code></pre> <p>The following is an example using a anonymous functions (so called lambda function):</p> <pre><code>const sum = (a: number, b: number) =&gt; a + b;\n</code></pre> <p>These annotation can be avoided when a default value for a parameter is present:</p> <pre><code>const sum = (a = 10, b: number) =&gt; a + b;\n</code></pre> <p>Return type annotations can be added to functions:</p> <pre><code>const sum = (a = 10, b: number): number =&gt; a + b;\n</code></pre> <p>This is useful especially for  more complex functions as writing expliciting the return type before an implementation can help better think about the function.</p> <p>Generally consider annotating type signatures but not the body local variables and add types always to object literals.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#optional-properties","title":"Optional Properties","text":"<p>An object can specify Optional Properties by adding a question mark <code>?</code> to the end of the property name:</p> <pre><code>type X = {\n    a: number;\n    b?: number; // Optional\n};\n</code></pre> <p>It is possible to specify a default value when a property is optional\u201d</p> <pre><code>type X = {\n    a: number;\n    b?: number;\n};\nconst x = ({ a, b = 100 }: X) =&gt; a + b;\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#readonly-properties","title":"Readonly Properties","text":"<p>Is it possible to prevent writing on a property by using the modifier <code>readonly</code>which  makes sure that the property cannot be re-written but does not provide any guarantee of total immutability:</p> <pre><code>interface Y {\n    readonly a: number;\n}\n\ntype X = {\n    readonly a: number;\n};\n\ntype J = Readonly&lt;{\n    a: number;\n}&gt;;\n\ntype K = {\n    readonly [index: number]: string;\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#index-signatures","title":"Index Signatures","text":"<p>In TypeScript we can use as index signature <code>string</code>, <code>number</code>, and <code>symbol</code>:</p> <pre><code>type K = {\n    [name: string | number]: string;\n};\nconst k: K = { x: 'x', 1: 'b' };\nconsole.log(k['x']);\nconsole.log(k[1]);\nconsole.log(k['1']); // same result as k[1]\n</code></pre> <p>Please note that JavaScript automatically converts an index with <code>number</code> to an index with <code>string</code> so <code>k[1]</code> or k[\"1\"] return the same value.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#extending-types","title":"Extending Types","text":"<p>It is possible to extend an <code>interface</code> (copy members from another type):</p> <pre><code>interface X {\n    a: string;\n}\ninterface Y extends X {\n    b: string;\n}\n</code></pre> <p>It is also possible to extend from multiple types:</p> <pre><code>interface A {\n    a: string;\n}\ninterface B {\n    b: string;\n}\ninterface Y extends A, B {\n    y: string;\n}\n</code></pre> <p>The <code>extends</code> keyword works only on interfaces and classes, for types use an intersection:</p> <pre><code>type A = {\n    a: number;\n};\ntype B = {\n    b: number;\n};\ntype C = A &amp; B;\n</code></pre> <p>It is possible to extend a type using an inference but not vice versa:</p> <pre><code>type A = {\n    a: string;\n};\ninterface B extends A {\n    b: string;\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#literal-types","title":"Literal Types","text":"<p>A Literal Type is a single element set from a collective type, it defines a very exact value that is a JavaScript primitive.</p> <p>Literal Types in TypeScript are numbers, strings, and booleans.</p> <p>Example of literals:</p> <pre><code>const a = 'a'; // string literal type\nconst b = 1; // numeric literal type\nconst c = true; // boolean literal type\n</code></pre> <p>String, Numeric, and Boolean Literal Types are used in the union, type guard, and type aliases. In the following example you can see a type alias union, <code>O</code> can be the only value specified and not any other string:</p> <pre><code>type O = 'a' | 'b' | 'c';\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#literal-inference","title":"Literal Inference","text":"<p>Literal Inference is a feature in TypeScript that allows the type of a variable or parameter to be inferred based on its value.</p> <p>In the following example we can see that TypeScript considers <code>x</code> a literal type as the value cannot be changed any time later, when instead <code>y</code> is inferred as string as it can be modified any time later.</p> <pre><code>const x = 'x'; // literal type of x, because this value cannot be changed\nlet y = 'y'; // string, as we can change this value\n</code></pre> <p>In the following example we can see that <code>o.x</code> was inferred as a <code>string</code> (and not a literal of <code>a</code>) as TypeScript considers that the value can be changed any time later.</p> <pre><code>type X = 'a' | 'b';\n\nlet o = {\n    x: 'a', // this is a wider string\n};\n\nconst fn = (x: X) =&gt; `${x}-foo`;\n\nconsole.log(fn(o.x)); // Argument of type 'string' is not assignable to parameter of type 'X'\n</code></pre> <p>As you can see the code throws an error when passing <code>o.x</code> to <code>fn</code> as X is a narrower type.</p> <p>We can solve this issue by using type assertion using <code>const</code> or the <code>X</code> type:</p> <pre><code>let o = {\n    x: 'a' as const,\n};\n</code></pre> <p>or:</p> <pre><code>let o = {\n    x: 'a' as X,\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#strictnullchecks","title":"strictNullChecks","text":"<p><code>strictNullChecks</code> is a TypeScript compiler option that enforces strict null checking. When this option is enabled, variables and parameters can only be assigned <code>null</code> or <code>undefined</code> if they have been explicitly declared to be of that type using the union type <code>null</code> | <code>undefined</code>. If a variable or parameter is not explicitly declared as nullable, TypeScript will generate an error to prevent potential runtime errors.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#non-null-assertion-operator-postfix","title":"Non-null Assertion Operator (Postfix !)","text":"<p>The Non-null Assertion Operator (Postfix !) is a TypeScript feature that allows you to assert that a variable or property is not <code>null</code> or <code>undefined</code>, even if TypeScript's static type analysis suggests that it might be. With this feature it is possible to remove any explicit checking.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#enums","title":"Enums","text":"<p>In TypeScript, an enum is a set of named constant values.</p> <pre><code>enum Color {\n    Red = '#ff0000',\n    Green = '#00ff00',\n    Blue = '#0000ff',\n}\n</code></pre> <p>Enums can be defined in different ways:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#numeric-enums","title":"Numeric enums","text":"<p>In TypeScript, a numeric enum is an enum where each constant is assigned a numeric value, starting from 0 by default.</p> <pre><code>enum Size {\n    Small, // value starts from 0\n    Medium,\n    Large,\n}\n</code></pre> <p>It is possible to specify custom values by explicitly assigning them:</p> <pre><code>enum Size {\n    Small = 10,\n    Medium,\n    Large,\n}\nconsole.log(Size.Medium); // 11\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#string-enums","title":"String enums","text":"<p>In TypeScript, a string enum is an enum where each constant is assigned a string value.</p> <pre><code>enum Language {\n    English = 'EN',\n    Spanish = 'ES',\n}\n</code></pre> <p>Note: TypeScript allows the usage of heterogeneous enums where string and numeric members can coexist.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#constant-enums","title":"Constant enums","text":"<p>A constant enum in TypeScript is a special type of enum where all the values are known at compile time and are inlined wherever the enum is used, resulting in more efficient code.</p> <pre><code>const enum Language {\n    English = 'EN',\n    Spanish = 'ES',\n}\nconsole.log(Language.English);\n</code></pre> <p>Will be compiled into:</p> <pre><code>console.log('EN' /* Language.English */);\n</code></pre> <p>Notes: Const enums have hardcoded values, erasing the enum, which can be more efficient in self-contained libraries but is generally not desirable. Also, const enums cannot have computed members.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#reverse-mapping","title":"Reverse mapping","text":"<p>In TypeScript, reverse mappings in enums refer to the ability to retrieve the enum member name from its value. By default, enum members have forward mappings from name to value, but reverse mappings can be created by explicitly setting values for each member. Reverse mappings are useful when you need to look up an enum member by its value, or when you need to iterate over all the enum members. Note that only numeric enums members will generate reverse mappings, while string enum members do not get a reverse mapping generated at all.</p> <p>The following enum:</p> <pre><code>enum Grade {\n    A = 90,\n    B = 80,\n    C = 70,\n    F = 'fail',\n}\n</code></pre> <p>Compiles to:</p> <pre><code>'use strict';\nvar Grade;\n(function (Grade) {\n    Grade[(Grade['A'] = 90)] = 'A';\n    Grade[(Grade['B'] = 80)] = 'B';\n    Grade[(Grade['C'] = 70)] = 'C';\n    Grade['F'] = 'fail';\n})(Grade || (Grade = {}));\n</code></pre> <p>Therefore, mapping values to keys works for numeric enum members, but not for string enum members:</p> <pre><code>enum Grade {\n    A = 90,\n    B = 80,\n    C = 70,\n    F = 'fail',\n}\nconst myGrade = Grade.A;\nconsole.log(Grade[myGrade]); // A\nconsole.log(Grade[90]); // A\n\nconst failGrade = Grade.F;\nconsole.log(failGrade); // fail\nconsole.log(Grade[failGrade]); // Element implicitly has an 'any' type because index expression is not of type 'number'.\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#ambient-enums","title":"Ambient enums","text":"<p>An ambient enum in TypeScript is a type of enum that is defined in a declaration file (*.d.ts) without an associated implementation. It allows you to define a set of named constants that can be used in a type-safe way across different files without having to import the implementation details in each file.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#computed-and-constant-members","title":"Computed and constant members","text":"<p>In TypeScript, a computed member is a member of an enum that has a value calculated at runtime, while a constant member is a member whose value is set at compile-time and cannot be changed during runtime. Computed members are allowed in regular enums, while constant members are allowed in both regular and const enums.</p> <pre><code>// constant members\nenum Color {\n    Red = 1,\n    Green = 5,\n    Blue = Red + Green,\n}\nconsole.log(Color.Blue); // 6 generation at compilation time\n</code></pre> <pre><code>// computed members\nenum Color {\n    Red = 1,\n    Green = Math.pow(2, 2),\n    Blue = Math.floor(Math.random() * 3) + 1,\n}\nconsole.log(Color.Blue); // random number generated at run time\n</code></pre> <p>Enums are denoted by unions comprising their member types. The values of each member can be determined through constant or non-constant expressions, with members possessing constant values being assigned literal types. To illustrate, consider the declaration of type E and its subtypes E.A, E.B, and E.C. In this case, E represents the union E.A | E.B | E.C.</p> <pre><code>const identity = (value: number) =&gt; value;\n\nenum E {\n    A = 2 * 5, // Numeric literal\n    B = 'bar', // String literal\n    C = identity(42), // Opaque computed\n}\n\nconsole.log(E.C); //42\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#narrowing","title":"Narrowing","text":"<p>TypeScript narrowing is the process of refining the type of a variable within a conditional block. This is useful when working with union types, where a variable can have more than one type.</p> <p>TypeScript recognizes several ways to narrow the type:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#typeof-type-guards","title":"typeof type guards","text":"<p>The typeof type guard is one specific type guard in TypeScript that checks the type of a variable based on its built-in JavaScript type.</p> <pre><code>const fn = (x: number | string): number =&gt; {\n    if (typeof x === 'number') {\n        return x + 1; // x is number\n    }\n    return -1;\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#truthiness-narrowing","title":"Truthiness narrowing","text":"<p>Truthiness narrowing in TypeScript works by checking whether a variable is truthy or falsy to narrow its type accordingly.</p> <pre><code>const printName = (name: string | null | undefined) =&gt; {\n    if (name) {\n        console.log(name.toUpperCase());\n    } else {\n        console.log('No name specified');\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#equality-narrowing","title":"Equality narrowing","text":"<p>Equality narrowing in TypeScript works by checking whether a variable is equal to a specific value or not, to narrow its type accordingly.</p> <pre><code>const logMessage = (status: 'success' | 'error') =&gt; {\n    switch (status) {\n        case 'success':\n            console.log('Operation was successful!');\n            break;\n        case 'error':\n            console.log('An error occurred.');\n            break;\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#in-operator-narrowing","title":"In operator narrowing","text":"<p>The in operator narrowing in TypeScript is a way to narrow the type of a variable based on whether a property exists within the variable's type.</p> <pre><code>type Dog = {\n    name: string;\n    breed: string;\n};\n\ntype Cat = {\n    name: string;\n    likesCream: boolean;\n};\n\nconst printPet = (pet: Dog | Cat) =&gt; {\n    if ('breed' in pet) {\n        console.log(`This is a ${pet.breed} dog named ${pet.name}.`);\n    } else {\n        console.log(\n            `This is a cat named ${pet.name} that ${\n                pet.likesCream ? 'likes' : \"doesn't like\"\n            } cream.`\n        );\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#instanceof-narrowing","title":"instanceof narrowing","text":"<p>The instanceof operator narrowing in TypeScript is a way to narrow the type of a variable based on its constructor function, by checking if an object is an instance of a certain class or interface.</p> <pre><code>class Square {\n    constructor(public width: number) {}\n}\nclass Rectangle {\n    constructor(public width: number, public height: number) {}\n}\nfunction area(shape: Square | Rectangle) {\n    if (shape instanceof Square) {\n        return shape.width * shape.width;\n    } else {\n        return shape.width * shape.height;\n    }\n}\nconst square = new Square(5);\nconst rectangle = new Rectangle(5, 10);\nconsole.log(area(square)); // 25\nconsole.log(area(rectangle)); // 50\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#assignments","title":"Assignments","text":"<p>TypeScript narrowing using assignments is a way to narrow the type of a variable based on the value assigned to it. When a variable is assigned a value, TypeScript infers its type based on the assigned value, and it narrows the type of the variable to match the inferred type.</p> <pre><code>let value: string | number;\nvalue = 'hello';\nif (typeof value === 'string') {\n    console.log(value.toUpperCase());\n}\nvalue = 42;\nif (typeof value === 'number') {\n    console.log(value.toFixed(2));\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#control-flow-analysis","title":"Control flow analysis","text":"<p>Control flow analysis in TypeScript is a way to statically analyze the code flow to infer the types of variables, allowing the compiler to narrow the types of those variables as needed, based on the results of the analysis.</p> <p>Prior to TypeScript 4.4, code flow analysis would only be applied to code within an if statement, but from TypeScript 4.4, it can also be applied to conditional expressions and discriminant property accesses indirectly referenced through const variables.</p> <p>For example:</p> <pre><code>const f1 = (x: unknown) =&gt; {\n    const isString = typeof x === 'string';\n    if (isString) {\n        x.length;\n    }\n};\n\nconst f2 = (\n    obj: { kind: 'foo'; foo: string } | { kind: 'bar'; bar: number }\n) =&gt; {\n    const isFoo = obj.kind === 'foo';\n    if (isFoo) {\n        obj.foo;\n    } else {\n        obj.bar;\n    }\n};\n</code></pre> <p>Some examples where narrowing does not occur:</p> <pre><code>const f1 = (x: unknown) =&gt; {\n    let isString = typeof x === 'string';\n    if (isString) {\n        x.length; // error, no narrowing because isString it is not const\n    }\n};\n\nconst f6 = (\n    obj: { kind: 'foo'; foo: string } | { kind: 'bar'; bar: number }\n) =&gt; {\n    const isFoo = obj.kind === 'foo';\n    obj = obj;\n    if (isFoo) {\n        obj.foo; // Error, no narrowing because obj is assigned in function body\n    }\n};\n</code></pre> <p>Notes: Up to five levels of indirection are analyzed in conditional expressions.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-predicates","title":"type predicates","text":"<p>Type predicates in TypeScript are functions that return a boolean value and are used to narrow the type of a variable to a more specific type.</p> <pre><code>const isString = (value: unknown): value is string =&gt; typeof value === 'string';\n\nconst foo = (bar: unknown) =&gt; {\n    if (isString(bar)) {\n        console.log(bar.toUpperCase());\n    } else {\n        console.log('not a string');\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#discriminated-unions","title":"Discriminated unions","text":"<p>Discriminated unions in TypeScript are a type of union type that uses a common property, known as the discriminant, to narrow down the set of possible types for the union.</p> <pre><code>type Square = {\n    kind: 'square'; // Discriminant\n    size: number;\n};\n\ntype Circle = {\n    kind: 'circle'; // Discriminant\n    radius: number;\n};\n\ntype Shape = Square | Circle;\n\nconst area = (shape: Shape) =&gt; {\n    switch (shape.kind) {\n        case 'square':\n            return Math.pow(shape.size, 2);\n        case 'circle':\n            return Math.PI * Math.pow(shape.radius, 2);\n    }\n};\n\nconst square: Square = { kind: 'square', size: 5 };\nconst circle: Circle = { kind: 'circle', radius: 2 };\n\nconsole.log(area(square)); // 25\nconsole.log(area(circle)); // 12.566370614359172\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#the-never-type","title":"The never type","text":"<p>When a variable is narrowed to a type that cannot contain any values, the TypeScript compiler will infer that the variable must be of the <code>never</code> type. This is because the never type represents a value that can never be produced.</p> <pre><code>const printValue = (val: string | number) =&gt; {\n    if (typeof val === 'string') {\n        console.log(val.toUpperCase());\n    } else if (typeof val === 'number') {\n        console.log(val.toFixed(2));\n    } else {\n        // val has type never here because it can never be anything other than a string or a number\n        const neverVal: never = val;\n        console.log(`Unexpected value: ${neverVal}`);\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#exhaustiveness-checking","title":"Exhaustiveness checking","text":"<p>Exhaustiveness checking is a feature in TypeScript that ensures all possible cases of a discriminated union are handled in a switch statement or an if statement.</p> <pre><code>type Direction = 'up' | 'down';\n\nconst move = (direction: Direction) =&gt; {\n    switch (direction) {\n        case 'up':\n            console.log('Moving up');\n            break;\n        case 'down':\n            console.log('Moving down');\n            break;\n        default:\n            const exhaustiveCheck: never = direction;\n            console.log(exhaustiveCheck); // this line will never be executed\n    }\n};\n</code></pre> <p>The <code>never</code> type is used to ensure that the default case is exhaustive and that TypeScript will raise an error if a new value is added to the Direction type without being handled in the switch statement.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#object-types","title":"Object Types","text":"<p>In TypeScript, object types describe the shape of an object. They specify the names and types of the object's properties, as well as whether those properties are required or optional.</p> <p>In TypeScript, you can define object types in two primary ways:</p> <p>Interface which defines the shape of an object by specifying the names, types, and optionality of its properties.</p> <pre><code>interface User {\n    name: string;\n    age: number;\n    email?: string;\n}\n</code></pre> <p>Type alias, similar to an interface, defines the shape of an object. However, it can also create a new custom type that is based on an existing type or a combination of existing types. This includes defining union types, intersection types, and other complex types.</p> <pre><code>type Point = {\n    x: number;\n    y: number;\n};\n</code></pre> <p>It also possible to define a type anonymously:</p> <pre><code>const sum = (x: { a: number; b: number }) =&gt; x.a + x.b;\nconsole.log(sum({ a: 5, b: 1 }));\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#tuple-type","title":"Tuple Type","text":"<p>A Tuple Type is a type that represents an array with a fixed number of elements and their corresponding types. A tuple type enforces a specific number of elements and their respective types in a fixed order. Tuple types are useful when you want to represent a collection of values with specific types, where the position of each element in the array has a specific meaning.</p> <pre><code>type Point = [number, number];\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#fixed-length-tuple","title":"Fixed length tuple","text":"<p>A Fixed length tuple is a specific type of tuple that enforces a fixed number of elements of specific types, and disallows any modifications to the length of the tuple once it is defined.</p> <p>Fixed length tuples are useful when you need to represent a collection of values with a specific number of elements and specific types, and you want to ensure that the length and types of the tuple cannot be changed inadvertently.</p> <pre><code>const x = [10, 'hello'] as const;\nx.push(2); // Error\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#union-type","title":"Union Type","text":"<p>A Union Type is a type that represents a value that can be one of several types. Union Types are denoted using the | symbol between each possible type.</p> <pre><code>let x: string | number;\nx = 'hello'; // Valid\nx = 123; // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#intersection-types","title":"Intersection Types","text":"<p>An Intersection Type is a type that represents a value that has all the properties of two or more types. Intersection Types are denoted using the `&amp;`` symbol between each type.</p> <pre><code>type X = {\n    a: string;\n};\n\ntype Y = {\n    b: string;\n};\n\ntype J = X &amp; Y; // Intersection\n\nconst j: J = {\n    a: 'a',\n    b: 'b',\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-indexing","title":"Type Indexing","text":"<p>Type indexing refers to the ability to define types that can be indexed by a key that is not known in advance, using an index signature to specify the type for properties that are not explicitly declared.</p> <pre><code>type Dictionary&lt;T&gt; = {\n    [key: string]: T;\n};\nconst myDict: Dictionary&lt;string&gt; = { a: 'a', b: 'b' };\nconsole.log(myDict['a']); // return a\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-from-value","title":"Type from Value","text":"<p>\"Type from Value\" in TypeScript refers to the automatic inference of a type from a value or expression through type inference.</p> <pre><code>const x = 'x'; // TypeScript can automatically infer that the type of the message variable is string\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-from-func-return","title":"Type from Func Return","text":"<p>Type from Func Return refers to the ability to automatically infer the return type of a function based on its implementation. This allows TypeScript to determine the type of the value returned by the function without explicit type annotations.</p> <pre><code>const add = (x: number, y: number) =&gt; x + y; // TypeScript can infer that the return type of the function is a number\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-from-module","title":"Type from Module","text":"<p>Type from Module refers to the ability to use a module's exported values to automatically infer their types. When a module exports a value with a specific type, TypeScript can use that information to automatically infer the type of that value when it is imported into another module.</p> <pre><code>// calc.ts\nexport const add = (x: number, y: number) =&gt; x + y;\n// index.ts\nimport { add } from 'calc';\nconst r = add(1, 2); // r is number\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#mapped-types","title":"Mapped types","text":"<p>Mapped types in TypeScript allow you to create new types based on an existing type by transforming each property using a mapping function. By mapping existing types, you can create new types that represent the same information in a different format. To create a mapped type, you access the properties of an existing type using the <code>keyof</code> operator and then alter them to produce a new type. In the following example:</p> <pre><code>type MyMappedType&lt;T&gt; = {\n    [P in keyof T]: T[P][];\n};\ntype MyType = {\n    foo: string;\n    bar: number;\n};\ntype MyNewType = MyMappedType&lt;MyType&gt;;\nconst x: MyNewType = {\n    foo: ['hello', 'world'],\n    bar: [1, 2, 3],\n};\n</code></pre> <p>we define MyMappedType to map over T's properties, creating a new type with each property as an array of its original type. Using this, we create MyNewType to represent the same info as MyType, but with each property as an array.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#conditional-types","title":"Conditional Types","text":"<p>Conditional types are a way to create a type that depends on a condition, where the type to be created is determined based on the result of the condition. They are defined using the <code>extends</code> keyword and a ternary operator to conditionally choose between two types.</p> <pre><code>type IsArray&lt;T&gt; = T extends any[] ? true : false;\n\nconst myArray = [1, 2, 3];\nconst myNumber = 42;\n\ntype IsMyArrayAnArray = IsArray&lt;typeof myArray&gt;; // Type true\ntype IsMyNumberAnArray = IsArray&lt;typeof myNumber&gt;; // Type false\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#distributive-conditional-types","title":"Distributive conditional types","text":"<p>Distributive conditional types are a feature that allow a type to be distributed over a union of types, by applying a transformation to each member of the union individually. This can be especially useful when working with mapped types or higher-order types.</p> <pre><code>type Nullable&lt;T&gt; = T extends any ? T | null : never;\ntype NumberOrBool = number | boolean;\ntype NullableNumberOrBool = Nullable&lt;NumberOrBool&gt;; // number | boolean | null\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#infer-type-inference-in-conditional-types","title":"\u201cinfer\u201d Type inference in conditional types","text":"<p>The <code>infer</code>keyword is used in conditional types to infer (extract) the type of a generic parameter from a type that depends on it. This allows you to write more flexible and reusable type definitions.</p> <pre><code>type ElementType&lt;T&gt; = T extends (infer U)[] ? U : never;\ntype Numbers = ElementType&lt;number[]&gt;; // number\ntype Strings = ElementType&lt;string[]&gt;; // string\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#predefined-conditional-types","title":"Predefined conditional types","text":"<p>In TypeScript, predefined conditional types are built-in conditional types provided by the language. They are designed to perform common type transformations based on the characteristics of a given type.</p> <p><code>Exclude&lt;UnionType, ExcludedType&gt;</code>: This type removes all the types from Type that are assignable to ExcludedType.</p> <p><code>Extract&lt;Type, Union&gt;</code>: This type extracts all the types from Union that are assignable to Type.</p> <p><code>NonNullable&lt;Type&gt;</code>: This type removes null and undefined from Type.</p> <p><code>ReturnType&lt;Type&gt;</code>: This type extracts the return type of a function Type.</p> <p><code>Parameters&lt;Type&gt;</code>: This type extracts the parameter types of a function Type.</p> <p><code>Required&lt;Type&gt;</code>: This type makes all properties in Type required.</p> <p><code>Partial&lt;Type&gt;</code>: This type makes all properties in Type optional.</p> <p><code>Readonly&lt;Type&gt;</code>: This type makes all properties in Type readonly.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#template-union-types","title":"Template Union Types","text":"<p>Template union types can be used to merge and manipulate text inside the type system for instance:</p> <pre><code>type Status = 'active' | 'inactive';\ntype Products = 'p1' | 'p2';\ntype ProductId = `id-${Products}-${Status}`; // \"id-p1-active\" | \"id-p1-inactive\" | \"id-p2-active\" | \"id-p2-inactive\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#any-type","title":"Any type","text":"<p>The <code>any</code> type is a special type (universal supertype) that can be used to represent any type of value (primitives, objects, arrays, functions, errors, symbols). It is often used in situations where the type of a value is not known at compile time, or when working with values from external APIs or libraries that do not have TypeScript typings.</p> <p>By utilizing any type, you are indicating to the TypeScript compiler that values should be represented without any limitations. In order to maximizing type safety in your code consider the following:</p> <ul> <li>Limit the usage of any to specific cases where the type is truly unknown.</li> <li>Do not return <code>any</code> types from a function as you will lose type safety in the code using that function weakening your type safety.</li> <li>Instead of <code>any</code> use @ts-ignore` if you need to silence the compiler.</li> </ul> <pre><code>let value: any;\nvalue = true; // Valid\nvalue = 7; // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#unknown-type","title":"Unknown type","text":"<p>In TypeScript, the unknown type represents a value that is of an unknown type. Unlike <code>any</code> type, which allows for any type of value, unknown requires a type check or assertion before it can be used in a specific way so no operations are permitted on an <code>unknown</code> without first asserting or narrowing to a more specific type.</p> <p>The <code>unknown</code> type is only assignable to any type and the unknown type itself, it is a type-safe alternative to any.</p> <pre><code>let value: unknown;\n\nlet value1: unknown = value; // Valid\nlet value2: any = value; // Valid\nlet value3: boolean = value; // Invalid\nlet value4: number = value; // Invalid\n</code></pre> <pre><code>const add = (a: unknown, b: unknown): number | undefined =&gt;\n    typeof a === 'number' &amp;&amp; typeof b === 'number' ? a + b : undefined;\nconsole.log(add(1, 2)); // 3\nconsole.log(add('x', 2)); // undefined\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#void-type","title":"Void type","text":"<p>The <code>void</code> type is used to indicate that a function does not return a value.</p> <pre><code>const sayHello = (): void =&gt; {\n    console.log('Hello!');\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#never-type","title":"Never type","text":"<p>The <code>never</code> type represents values that never occur. It is used to denote functions or expressions that never return or throw an error.</p> <p>For instance an infinite loop:</p> <pre><code>const infiniteLoop = (): never =&gt; {\n    while (true) {\n        // do something\n    }\n};\n</code></pre> <p>Throwing an error:</p> <pre><code>const throwError = (message: string): never =&gt; {\n    throw new Error(message);\n};\n</code></pre> <p>The <code>never</code> type is useful in ensuring type safety and catching potential errors in your code. It helps TypeScript analyze and infer more precise types when used in combination with other types and control flow statements, for instance:</p> <pre><code>type Direction = 'up' | 'down';\nconst move = (direction: Direction): void =&gt; {\n    switch (direction) {\n        case 'up':\n            // move up\n            break;\n        case 'down':\n            // move down\n            break;\n        default:\n            const exhaustiveCheck: never = direction;\n            throw new Error(`Unhandled direction: ${exhaustiveCheck}`);\n    }\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#interface-and-type","title":"Interface and Type","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#common-syntax","title":"Common Syntax","text":"<p>In TypeScript, interfaces define the structure of objects, specifying the names and types of properties or methods that an object must have. The common syntax for defining an interface in TypeScript is as follows:</p> <pre><code>interface InterfaceName {\n    property1: Type1;\n    // ...\n    method1(arg1: ArgType1, arg2: ArgType2): ReturnType;\n    // ...\n}\n</code></pre> <p>Similarly for type definition:</p> <pre><code>type TypeName = {\n    property1: Type1;\n    // \u2026\n    method1(arg1: ArgType1, arg2: ArgType2): ReturnType;\n    // ...\n};\n</code></pre> <p><code>interface InterfaceName</code> or <code>type TypeName</code>: Defines the name of the interface. <code>property1</code>: <code>Type1</code>: Specifies the properties of the interface along with their corresponding types. Multiple properties can be defined, each separated by a semicolon. <code>method1(arg1: ArgType1, arg2: ArgType2): ReturnType;</code> method2(): void;: Specifies the methods of the interface. Methods are defined with their names, followed by a parameter list in parentheses and the return type. Multiple methods can be defined, each separated by a semicolon.</p> <p>Example interface:</p> <pre><code>interface Person {\n    name: string;\n    age: number;\n    greet(): void;\n}\n</code></pre> <p>Example of type:</p> <pre><code>type TypeName = {\n    property1: string;\n    method1(arg1: string, arg2: string): string;\n};\n</code></pre> <p>In TypeScript, types are used to define the shape of data and enforce type checking. There are several common syntaxes for defining types in TypeScript, depending on the specific use case. Here are some examples:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#basic-types","title":"Basic types","text":"<pre><code>let myNumber: number = 123; // number type\nlet myBoolean: boolean = true; // boolean type\nlet myArray: string[] = ['a', 'b']; // array of strings\nlet myTuple: [string, number] = ['a', 123]; // tuple\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#objects-and-interfaces","title":"Objects and interfaces","text":"<pre><code>const x: { name: string; age: number } = { name: 'Simon', age: 7 };\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#union-and-intersection-types","title":"Union and intersection types","text":"<pre><code>type MyType = string | number; // union type\nlet myUnion: MyType = 'hello'; // can be a string\nmyUnion = 123; // or a number\n\ntype TypeA = { name: string };\ntype TypeB = { age: number };\ntype CombinedType = TypeA &amp; TypeB; // intersection type\nlet myCombined: CombinedType = { name: 'John', age: 25 }; // object with both name and age properties\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#built-in-type-primitives","title":"Built-in Type Primitives","text":"<p>TypeScript has several built-in type primitives that can be used to define variables, function parameters, and return types:</p> <ul> <li><code>number</code>: Represents numeric values, including integers and floating-point numbers.</li> <li><code>string</code>: Represents textual data</li> <li><code>boolean</code>: Represents logical values, which can be either true or false.</li> <li><code>null</code>: Represents the absence of a value.</li> <li><code>undefined</code>: Represents a value that has not been assigned or has not been defined.</li> <li><code>symbol</code>: Represents a unique identifier. Symbols are typically used as keys for object properties.</li> <li><code>bigint</code>: Represents arbitrary-precision integers.</li> <li><code>any</code>: Represents a dynamic or unknown type. Variables of type any can hold values of any type, and they bypass type checking.</li> <li><code>void</code>: Represents the absence of any type. It is commonly used as the return type of functions that do not return a value.</li> <li><code>never</code>: Represents a type for values that never occur. It is typically used as the return type of functions that throw an error or enter an infinite loop.</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#common-built-in-js-objects","title":"Common Built-in JS Objects","text":"<p>TypeScript is a superset of JavaScript, it includes all the commonly used built-in JavaScript objects. You can find an extensive list of these objects on the Mozilla Developer Network (MDN) documentation website: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects</p> <p>Here is a list of some commonly used built-in JavaScript objects:</p> <ul> <li>Function</li> <li>Object</li> <li>Boolean</li> <li>Error</li> <li>Number</li> <li>BigInt</li> <li>Math</li> <li>Date</li> <li>String</li> <li>RegExp</li> <li>Array</li> <li>Map</li> <li>Set</li> <li>Promise</li> <li>Intl</li> </ul>"},{"location":"programming/typescript/the_concise_typeScript_book/#overloads","title":"Overloads","text":"<p>Function overloads in TypeScript allow you to define multiple function signatures for a single function name, enabling you to define functions that can be called in multiple ways. Here's an example:</p> <pre><code>// Overloads\nfunction sayHi(name: string): string;\nfunction sayHi(names: string[]): string[];\n\n// Implementation\nfunction sayHi(name: unknown): unknown {\n    if (typeof name === 'string') {\n        return `Hi, ${name}!`;\n    } else if (Array.isArray(name)) {\n        return name.map(name =&gt; `Hi, ${name}!`);\n    }\n    throw new Error('Invalid value');\n}\n\nsayHi('xx'); // Valid\nsayHi(['aa', 'bb']); // Valid\n</code></pre> <p>Here's another example of using function overloads within a <code>class</code>:</p> <pre><code>class Greeter {\n    message: string;\n\n    constructor(message: string) {\n        this.message = message;\n    }\n\n    // overload\n    sayHi(name: string): string;\n    sayHi(names: string[]): ReadonlyArray&lt;string&gt;;\n\n    // implementation\n    sayHi(name: unknown): unknown {\n        if (typeof name === 'string') {\n            return `${this.message}, ${name}!`;\n        } else if (Array.isArray(name)) {\n            return name.map(name =&gt; `${this.message}, ${name}!`);\n        }\n        throw new Error('value is invalid');\n    }\n}\nconsole.log(new Greeter('Hello').sayHi('Simon'));\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#get-set","title":"Get &amp; Set","text":"<p>Getters and setters are special methods that allow you to define custom access and modification behavior for class properties. They enable you to encapsulate the internal state of an object and provide additional logic when getting or setting the values of properties. In TypeScript, getters and setters are defined using the <code>get</code> and <code>set</code> keywords respectively. Here's an example:</p> <pre><code>class MyClass {\n    private _myProperty: string;\n\n    constructor(value: string) {\n        this._myProperty = value;\n    }\n    get myProperty(): string {\n        return this._myProperty;\n    }\n    set myProperty(value: string) {\n        this._myProperty = value;\n    }\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#merging-and-extension","title":"Merging and Extension","text":"<p>Merging and extension refer to two different concepts related to working with types and interfaces.</p> <p>Merging allows you to combine multiple declarations of the same name into a single definition, for example, when you define an interface with the same name multiple times:</p> <pre><code>interface X {\n    a: string;\n}\n\ninterface X {\n    b: number;\n}\n\nconst person: X = {\n    a: 'a',\n    b: 7,\n};\n</code></pre> <p>Extension refers to the ability to extend or inherit from existing types or interfaces to create new ones. It is a mechanism to add additional properties or methods to an existing type without modifying its original definition. Example:</p> <pre><code>interface Animal {\n    name: string;\n    eat(): void;\n}\n\ninterface Bird extends Animal {\n    sing(): void;\n}\n\nconst dog: Bird = {\n    name: 'Bird 1',\n    eat() {\n        console.log('Eating');\n    },\n    sing() {\n        console.log('Singing');\n    },\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#differences-between-type-and-interface","title":"Differences between Type and Interface","text":"<p>Declaration merging (augmentation): Interfaces support declaration merging, which means that you can define multiple interfaces with the same name, and TypeScript will merge them into a single interface with the combined properties and methods. On the other hand, types do not support declaration merging. This can be helpful when you want to add extra functionality or customize existing types without modifying the original definitions or patching missing or incorrect types.</p> <pre><code>interface A {\n    x: string;\n}\ninterface A {\n    y: string;\n}\nconst j: A = {\n    x: 'xx',\n    y: 'yy',\n};\n</code></pre> <p>Extending other types/interfaces: Both types and interfaces can extend other types/interfaces, but the syntax is different. With interfaces, you use the <code>extends</code> keyword to inherit properties and methods from other interfaces. However, an interface cannot extend a complex type like a union type.</p> <pre><code>interface A {\n    x: string;\n    y: number;\n}\ninterface B extends A {\n    z: string;\n}\nconst car: B = {\n    x: 'x',\n    y: 123,\n    z: 'z',\n};\n</code></pre> <p>For types, you use the &amp; operator to combine multiple types into a single type (intersection).</p> <pre><code>interface A {\n    x: string;\n    y: number;\n}\n\ntype B = A &amp; {\n    j: string;\n};\n\nconst c: B = {\n    x: 'x',\n    y: 123,\n    j: 'j',\n};\n</code></pre> <p>Union and intersection types: Types are more flexible when it comes to defining union and intersection types. With the <code>type</code> keyword, you can easily create union types using the <code>|</code> operator and intersection types using the <code>&amp;</code> operator. While interfaces can also represent union types indirectly, they don't have built-in support for intersection types.</p> <pre><code>type Department = 'dep-x' | 'dep-y'; // Union\n\ntype Person = {\n    name: string;\n    age: number;\n};\n\ntype Employee = {\n    id: number;\n    department: Department;\n};\n\ntype EmployeeInfo = Person &amp; Employee; // Intersection\n</code></pre> <p>Example with interfaces:</p> <pre><code>interface A {\n    x: 'x';\n}\ninterface B {\n    y: 'y';\n}\n\ntype C = A | B; // Union of interfaces\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#class","title":"Class","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#class-common-syntax","title":"Class Common Syntax","text":"<p>The <code>class</code> keyword is used in TypeScript to define a class. Below, you can see an example:</p> <pre><code>class Person {\n    private name: string;\n    private age: number;\n    constructor(name: string, age: number) {\n        this.name = name;\n        this.age = age;\n    }\n    public sayHi(): void {\n        console.log(\n            `Hello, my name is ${this.name} and I am ${this.age} years old.`\n        );\n    }\n}\n</code></pre> <p>The <code>class</code> keyword is used to define a class named \"Person\".</p> <p>The class has two private properties: name of type <code>string</code> and age of type <code>number</code>.</p> <p>The constructor is defined using the <code>constructor</code> keyword. It takes name and age as parameters and assigns them to the corresponding properties.</p> <p>The class has a <code>public</code> method named sayHi that logs a greeting message.</p> <p>To create an instance of a class in TypeScript, you can use the <code>new</code> keyword followed by the class name, followed by parentheses (). For instance:</p> <pre><code>const myObject = new Person('John Doe', 25);\nmyObject.sayHi(); // output: Hello, my name is John Doe and I am 25 years old.\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#constructor","title":"Constructor","text":"<p>Constructors are special methods within a class that are used to initialize the object's properties when an instance of the class is created.</p> <pre><code>class Person {\n    public name: string;\n    public age: number;\n\n    constructor(name: string, age: number) {\n        this.name = name;\n        this.age = age;\n    }\n\n    sayHello() {\n        console.log(\n            `Hello, my name is ${this.name} and I'm ${this.age} years old.`\n        );\n    }\n}\n\nconst john = new Person('Simon', 17);\njohn.sayHello();\n</code></pre> <p>It is possible to overload a constructor using the following syntax:</p> <pre><code>type Sex = 'm' | 'f';\n\nclass Person {\n    name: string;\n    age: number;\n    sex: Sex;\n\n    constructor(name: string, age: number, sex?: Sex);\n    constructor(name: string, age: number, sex: Sex) {\n        this.name = name;\n        this.age = age;\n        this.sex = sex ?? 'm';\n    }\n}\n\nconst p1 = new Person('Simon', 17);\nconst p2 = new Person('Alice', 22, 'f');\n</code></pre> <p>In TypeScript, it is possible to define multiple constructor overloads, but you can have only one implementation that must be compatible with all the overloads, this can be achieved  by using an optional parameter.</p> <pre><code>class Person {\n    name: string;\n    age: number;\n\n    constructor();\n    constructor(name: string);\n    constructor(name: string, age: number);\n    constructor(name?: string, age?: number) {\n        this.name = name ?? 'Unknown';\n        this.age = age ?? 0;\n    }\n\n    displayInfo() {\n        console.log(`Name: ${this.name}, Age: ${this.age}`);\n    }\n}\n\nconst person1 = new Person();\nperson1.displayInfo(); // Name: Unknown, Age: 0\n\nconst person2 = new Person('John');\nperson2.displayInfo(); // Name: John, Age: 0\n\nconst person3 = new Person('Jane', 25);\nperson3.displayInfo(); // Name: Jane, Age: 25\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#private-and-protected-constructors","title":"Private and Protected Constructors","text":"<p>In TypeScript, constructors can be marked as private or protected, which restricts their accessibility and usage.</p> <p>Private Constructors: Can be called only within the class itself. Private constructors are often used in scenarios where you want to enforce a singleton pattern or restrict the creation of instances to a factory method within the class</p> <p>Protected Constructors: Protected constructors are useful when you want to create a base class that should not be instantiated directly but can be extended by subclasses.</p> <pre><code>class BaseClass {\n    protected constructor() {}\n}\n\nclass DerivedClass extends BaseClass {\n    private value: number;\n\n    constructor(value: number) {\n        super();\n        this.value = value;\n    }\n}\n\n// attempting to instantiate the base class directly will result in an error\n// const baseObj = new BaseClass(); // Error: Constructor of class 'BaseClass' is protected.\n\n// create an instance of the derived class\nconst derivedObj = new DerivedClass(10);\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#access-modifiers","title":"Access modifiers","text":"<p>Access modifiers <code>private</code>, <code>protected</code>, and <code>public</code> are used to control the visibility and accessibility of class members, such as properties and methods, in TypeScript classes. These modifiers are essential for enforcing encapsulation and establishing boundaries for accessing and modifying the internal state of a class.</p> <p>The <code>private</code> modifier restricts access to the class member only within the containing class.</p> <p>The <code>protected</code> modifier allows access to the class member within the containing class and its derived classes.</p> <p>The <code>public</code> modifier provides unrestricted access to the class member, allowing it to be accessed from anywhere.\"</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#auto-accessors-in-classes","title":"Auto-Accessors in Classes","text":"<p>TypeScript version 4.9 adds support for auto-accessors, a forthcoming ECMAScript feature. They resemble class properties but are declared with the \"accessor\" keyword.</p> <pre><code>class Animal {\n    accessor name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n</code></pre> <p>Auto-accessors are \"de-sugared\" into private <code>get</code> and <code>set</code> accessors, operating on an inaccessible property.</p> <pre><code>class Animal {\n    #__name: string;\n\n    get name() {\n        return this.#__name;\n    }\n    set name(value: string) {\n        this.#__name = name;\n    }\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#this","title":"this","text":"<p>In TypeScript, the <code>this</code> keyword refers to the current instance of a class within its methods or constructors. It allows you to access and modify the properties and methods of the class from within its own scope. It provides a way to access and manipulate the internal state of an object within its own methods.</p> <pre><code>class Person {\n    private name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n    public introduce(): void {\n        console.log(`Hello, my name is ${this.name}.`);\n    }\n}\n\nconst person1 = new Person('Alice');\nperson1.introduce(); // Hello, my name is Alice.\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#parameter-properties","title":"Parameter Properties","text":"<p>Parameter properties allow you to declare and initialize class properties directly within the constructor parameters avoiding boilerplate code, example:</p> <pre><code>class Person {\n    constructor(private name: string, public age: number) {\n        // the \"private\" and \"public\" keywords in the constructor\n        // automatically declare and initialize the corresponding class properties.\n    }\n    public introduce(): void {\n        console.log(\n            `Hello, my name is ${this.name} and I am ${this.age} years old.`\n        );\n    }\n}\nconst person = new Person('Alice', 25);\nperson.introduce();\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#abstract-classes","title":"Abstract Classes","text":"<p>Abstract Classes are used in TypeScript mainly for inheritance, they provide a way to define common properties and methods that can be inherited by subclasses. This is useful when you want to define common behavior and enforce that subclasses implement certain methods. They provide a way to create a hierarchy of classes where the abstract base class provides a shared interface and common functionality for the subclasses.</p> <pre><code>abstract class Animal {\n    protected name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    abstract makeSound(): void;\n}\n\nclass Cat extends Animal {\n    makeSound(): void {\n        console.log(`${this.name} meows.`);\n    }\n}\n\nconst cat = new Cat('Whiskers');\ncat.makeSound(); // Output: Whiskers meows.\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#with-generics","title":"With Generics","text":"<p>Classes with generics allow you to define reusable classes which can work with different types.</p> <pre><code>class Container&lt;T&gt; {\n    private item: T;\n\n    constructor(item: T) {\n        this.item = item;\n    }\n\n    getItem(): T {\n        return this.item;\n    }\n\n    setItem(item: T): void {\n        this.item = item;\n    }\n}\n\nconst container1 = new Container&lt;number&gt;(42);\nconsole.log(container1.getItem()); //  42\n\nconst container2 = new Container&lt;string&gt;('Hello');\ncontainer2.setItem('World');\nconsole.log(container2.getItem()); // World\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#decorators","title":"Decorators","text":"<p>Decorators provide a mechanism to add metadata, modify behavior, validate, or extend the functionality of the target element. They are functions that execute at runtime. Multiple decorators can be applied to a declaration.</p> <p>Decorators are experimental features, and the following examples are only compatible with TypeScript version 5 or above using ES6.</p> <p>For TypeScript versions prior to 5, they should be enabled using the <code>experimentalDecorators</code> property in your <code>tsconfig.json</code> or by using <code>--experimentalDecorators</code> in your command line (but the following example won't work).</p> <p>Some of the common use cases for decorators include:</p> <ul> <li>Watching property changes</li> <li>Watching method calls</li> <li>Adding extra properties or methods</li> <li>Runtime validation</li> <li>Automatic serialization and deserialization</li> <li>Logging</li> <li>Authorization and authentication</li> <li>Error guarding</li> </ul> <p>Note: Decorators for version 5 do not allow decorating parameters.</p> <p>Types of decorators:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#class-decorators","title":"Class decorators","text":"<p>Class decorators are useful for extending an existing class, such as adding properties or methods, or collecting instances of a class. In the following example, we add a <code>toString</code> method that converts the class into a string representation.</p> <pre><code>type Constructor&lt;T = {}&gt; = new (...args: any[]) =&gt; T;\n\nfunction toString&lt;Class extends Constructor&gt;(\n    Value: Class,\n    context: ClassDecoratorContext&lt;Class&gt;\n) {\n    return class extends Value {\n        constructor(...args: any[]) {\n            super(...args);\n            console.log(JSON.stringify(this));\n            console.log(JSON.stringify(context));\n        }\n    };\n}\n\n@toString\nclass Person {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    greet() {\n        return 'Hello, ' + this.name;\n    }\n}\nconst person = new Person('Simon');\n/* Logs:\n{\"name\":\"Simon\"}\n{\"kind\":\"class\",\"name\":\"Person\"}\n*/\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#property-decorator","title":"Property Decorator","text":"<p>Property decorators are useful for modifying the behavior of a property, such as changing the initialization values. In the following code, we have a script that sets a property to always be in uppercase:</p> <pre><code>function upperCase&lt;T&gt;(\n    target: undefined,\n    context: ClassFieldDecoratorContext&lt;T, string&gt;\n) {\n    return function (this: T, value: string) {\n        return value.toUpperCase();\n    };\n}\n\nclass MyClass {\n    @upperCase\n    prop1 = 'hello!';\n}\n\nconsole.log(new MyClass().prop1); // Logs: HELLO!\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#method-decorator","title":"Method Decorator","text":"<p>Method decorators allow you to change or enhance the behavior of methods. Below is an example of a simple logger:</p> <pre><code>function log&lt;This, Args extends any[], Return&gt;(\n    target: (this: This, ...args: Args) =&gt; Return,\n    context: ClassMethodDecoratorContext&lt;\n        This,\n        (this: This, ...args: Args) =&gt; Return\n    &gt;\n) {\n    const methodName = String(context.name);\n\n    function replacementMethod(this: This, ...args: Args): Return {\n        console.log(`LOG: Entering method '${methodName}'.`);\n        const result = target.call(this, ...args);\n        console.log(`LOG: Exiting method '${methodName}'.`);\n        return result;\n    }\n\n    return replacementMethod;\n}\n\nclass MyClass {\n    @log\n    sayHello() {\n        console.log('Hello!');\n    }\n}\n\nconsole.log(new MyClass().sayHello()); // Logs: Hello!\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#getter-and-setter-decorators","title":"Getter and Setter Decorators","text":"<p>Getter and setter decorators allow you to change or enhance the behavior of class accessors. They are useful, for instance, for validating property assignments. Here's a simple example for a getter decorator:</p> <pre><code>function range&lt;This, Return extends number&gt;(min: number, max: number) {\n    return function (\n        target: (this: This) =&gt; Return,\n        context: ClassGetterDecoratorContext&lt;This, Return&gt;\n    ) {\n        return function (this: This): Return {\n            const value = target.call(this);\n            if (value &lt; min || value &gt; max) {\n                throw 'Invalid';\n            }\n            Object.defineProperty(this, context.name, {\n                value,\n                enumerable: true,\n            });\n            return value;\n        };\n    };\n}\n\nclass MyClass {\n    private _value = 0;\n\n    constructor(value: number) {\n        this._value = value;\n    }\n    @range(1, 100)\n    get getValue(): number {\n        return this._value;\n    }\n}\n\nconst obj = new MyClass(10);\nconsole.log(obj.getValue); // Valid: 10\n\nconst obj2 = new MyClass(999);\nconsole.log(obj2.getValue); // Throw: Invalid!\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#inheritance","title":"Inheritance","text":"<p>Inheritance refers to the mechanism by which a class can inherit properties and methods from another class, known as the base class or superclass. The derived class, also called the child class or subclass, can extend and specialize the functionality of the base class by adding new properties and methods or overriding existing ones.</p> <pre><code>class Animal {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    speak(): void {\n        console.log('The animal makes a sound');\n    }\n}\n\nclass Dog extends Animal {\n    breed: string;\n\n    constructor(name: string, breed: string) {\n        super(name);\n        this.breed = breed;\n    }\n\n    speak(): void {\n        console.log('Woof! Woof!');\n    }\n}\n\n// create an instance of the base class\nconst animal = new Animal('Generic Animal');\nanimal.speak(); // The animal makes a sound\n\n// create an instance of the derived class\nconst dog = new Dog('Max', 'Labrador');\ndog.speak(); // Woof! Woof!\"\n</code></pre> <p>TypeScript does not support multiple inheritance in the traditional sense and instead allows inheritance from a single base class. TypeScript supports multiple interfaces. An interface can define a contract for the structure of an object, and a class can implement multiple interfaces. This allows a class to inherit behavior and structure from multiple sources.</p> <pre><code>interface Flyable {\n    fly(): void;\n}\n\ninterface Swimmable {\n    swim(): void;\n}\n\nclass FlyingFish implements Flyable, Swimmable {\n    fly() {\n        console.log('Flying...');\n    }\n\n    swim() {\n        console.log('Swimming...');\n    }\n}\n\nconst flyingFish = new FlyingFish();\nflyingFish.fly();\nflyingFish.swim();\n</code></pre> <p>The <code>class</code> keyword in TypeScript, similar to JavaScript, is often referred to as syntactic sugar. It was introduced in ECMAScript 2015 (ES6) to offer a more familiar syntax for creating and working with objects in a class-based manner. However, it's important to note that TypeScript, being a superset of JavaScript, ultimately compiles down to JavaScript, which remains prototype-based at its core.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#statics","title":"Statics","text":"<p>TypeScript has static members. To access the static members of a class, you can use the class name followed by a dot, without the need to create an object.</p> <pre><code>class OfficeWorker {\n    static memberCount: number = 0;\n\n    constructor(private name: string) {\n        OfficeWorker.memberCount++;\n    }\n}\n\nconst w1 = new OfficeWorker('James');\nconst w2 = new OfficeWorker('Simon');\nconst total = OfficeWorker.memberCount;\nconsole.log(total);\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#property-initialization","title":"Property initialization","text":"<p>There are several ways how you can initialize properties for a class in TypeScript:</p> <p>Inline:</p> <p>In the following example these initial values will be used when an instance of the class is created.</p> <pre><code>class MyClass {\n    property1: string = 'default value';\n    property2: number = 42;\n}\n</code></pre> <p>In the constructor:</p> <pre><code>class MyClass {\n    property1: string;\n    property2: number;\n\n    constructor() {\n        this.property1 = 'default value';\n        this.property2 = 42;\n    }\n}\n</code></pre> <p>Using constructor parameters:</p> <pre><code>class MyClass {\n    constructor(\n        private property1: string = 'default value',\n        public property2: number = 42\n    ) {\n        // there is no need to assign the values to the properties explicitly.\n    }\n    log() {\n        console.log(this.property2);\n    }\n}\nconst x = new MyClass();\nx.log();\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#method-overloading","title":"Method overloading","text":"<p>Method overloading allows a class to have multiple methods with the same name but different parameter types or a different number of parameters. This allows us to call a method in different ways based on the arguments passed.</p> <pre><code>class MyClass {\n    add(a: number, b: number): number; // Overload signature 1\n    add(a: string, b: string): string; // Overload signature 2\n\n    add(a: number | string, b: number | string): number | string {\n        if (typeof a === 'number' &amp;&amp; typeof b === 'number') {\n            return a + b;\n        }\n        if (typeof a === 'string' &amp;&amp; typeof b === 'string') {\n            return a.concat(b);\n        }\n        throw new Error('Invalid arguments');\n    }\n}\n\nconst r = new MyClass();\nconsole.log(r.add(10, 5));\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#generics","title":"Generics","text":"<p>Generics allow you to create reusable components and functions that can work with multiple types. With generics, you can parameterize types, functions, and interfaces, allowing them to operate on different types without explicitly specifying them beforehand.</p> <p>Generics allow you to make code more flexible and reusable.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#generic-type","title":"Generic Type","text":"<p>To define a generic type, you use angle brackets (&lt;&gt;) to specify the type parameters, for instance:</p> <pre><code>function identity&lt;T&gt;(arg: T): T {\n    return arg;\n}\nconst a = identity('x');\nconst b = identity(123);\n\nconst getLen = &lt;T&gt;(data: ReadonlyArray&lt;T&gt;) =&gt; data.length;\nconst len = getLen([1, 2, 3]);\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#generic-classes","title":"Generic Classes","text":"<p>Generics can be applied also to classes, in this way they can work with multiple types by using type parameters. This is useful to create reusable class definitions that can operate on different data types while maintaining type safety.</p> <pre><code>class Container&lt;T&gt; {\n    private item: T;\n\n    constructor(item: T) {\n        this.item = item;\n    }\n\n    getItem(): T {\n        return this.item;\n    }\n}\n\nconst numberContainer = new Container&lt;number&gt;(123);\nconsole.log(numberContainer.getItem()); // 123\n\nconst stringContainer = new Container&lt;string&gt;('hello');\nconsole.log(stringContainer.getItem()); // hello\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#generic-constraints","title":"Generic Constraints","text":"<p>Generic parameters can be constrained using the <code>extends</code> keyword followed by a type or interface that the type parameter must satisfy.</p> <p>In the following example T it is must containing a properly <code>length</code> in order to be valid:</p> <pre><code>const printLen = &lt;T extends { length: number }&gt;(value: T): void =&gt; {\n    console.log(value.length);\n};\n\nprintLen('Hello'); // 5\nprintLen([1, 2, 3]); // 3\nprintLen({ length: 10 }); // 10\nprintLen(123); // Invalid\n</code></pre> <p>An interesting feature of generic introduced in version 3.4 RC is Higher order function type inference which introduced  propagated generic type arguments:</p> <pre><code>declare function pipe&lt;A extends any[], B, C&gt;(\n    ab: (...args: A) =&gt; B,\n    bc: (b: B) =&gt; C\n): (...args: A) =&gt; C;\n\ndeclare function list&lt;T&gt;(a: T): T[];\ndeclare function box&lt;V&gt;(x: V): { value: V };\n\nconst listBox = pipe(list, box); // &lt;T&gt;(a: T) =&gt; { value: T[] }\nconst boxList = pipe(box, list); // &lt;V&gt;(x: V) =&gt; { value: V }[]\n</code></pre> <p>This functionality allows more easily typed safe pointfree style programming which is common in functional programming.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#generic-contextual-narrowing","title":"Generic contextual narrowing","text":"<p>Contextual narrowing for generics is the mechanism in TypeScript that allows the compiler to narrow down the type of a generic parameter based on the context in which it is used, it is useful when working with generic types in conditional statements:</p> <pre><code>function process&lt;T&gt;(value: T): void {\n    if (typeof value === 'string') {\n        // Value is narrowed down to type 'string'\n        console.log(value.length);\n    } else if (typeof value === 'number') {\n        // Value is narrowed down to type 'number'\n        console.log(value.toFixed(2));\n    }\n}\n\nprocess('hello'); // 5\nprocess(3.14159); // 3.14\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#erased-structural-types","title":"Erased Structural Types","text":"<p>In TypeScript, objects do not have to match a specific, exact type. For instance, if we create an object that fulfills an interface's requirements, we can utilize that object in places where that interface is required, even if there was no explicit connection between them. Example:</p> <pre><code>type NameProp1 = {\n    prop1: string;\n};\n\nfunction log(x: NameProp1) {\n    console.log(x.prop1);\n}\n\nconst obj = {\n    prop2: 123,\n    prop1: 'Origin',\n};\n\nlog(obj); // Valid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#namespacing","title":"Namespacing","text":"<p>In TypeScript, namespaces are used to organize code into logical containers, preventing naming collisions and providing a way to group related code together. The usage of the <code>export</code> keywords allows access to the namespace in \u201coutside\u201d modules.</p> <pre><code>export namespace MyNamespace {\n    export interface MyInterface1 {\n        prop1: boolean;\n    }\n    export interface MyInterface2 {\n        prop2: string;\n    }\n}\n\nconst a: MyNamespace.MyInterface1 = {\n    prop1: true,\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#symbols","title":"Symbols","text":"<p>Symbols are a primitive data type that represents an immutable value which is guaranteed to be globally unique throughout the lifetime of the program.</p> <p>Symbols can be used as keys for object properties and provide a way to create non-enumerable properties.</p> <pre><code>const key1: symbol = Symbol('key1');\nconst key2: symbol = Symbol('key2');\n\nconst obj = {\n    [key1]: 'value 1',\n    [key2]: 'value 2',\n};\n\nconsole.log(obj[key1]); // value 1\nconsole.log(obj[key2]); // value 2\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#triple-slash-directives","title":"Triple-Slash Directives","text":"<p>Triple-slash directives are special comments that provide instructions to the compiler about how to process a file. These directives begin with three consecutive slashes (///) and are typically placed at the top of a TypeScript file and have no effects on the runtime behavior.</p> <p>Triple-slash directives are used to reference external dependencies, specify module loading behavior, enable/disable certain compiler features, and more. Few examples:</p> <p>Referencing a declaration file:</p> <pre><code>/// &lt;reference path=\"path/to/declaration/file.d.ts\" /&gt;\n</code></pre> <p>Indicate the module format:</p> <pre><code>/// &lt;amd|commonjs|system|umd|es6|es2015|none&gt;\n</code></pre> <p>Enable compiler options, in the following example strict mode:</p> <pre><code>/// &lt;strict|noImplicitAny|noUnusedLocals|noUnusedParameters&gt;\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#type-manipulation","title":"Type Manipulation","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#creating-types-from-types","title":"Creating Types from Types","text":"<p>Is it possible to create new types composing, manipulating or transforming existing types.</p> <p>Intersection Types (<code>&amp;</code>):</p> <p>Allow you to combine multiple types into a single  type:</p> <pre><code>type A = { foo: number };\ntype B = { bar: string };\ntype C = A &amp; B; // Intersection of A and B\nconst obj: C = { foo: 42, bar: 'hello' };\n</code></pre> <p>Union Types (<code>|</code>):</p> <p>Allow you to define a type that can be one of several types:</p> <pre><code>type Result = string | number;\nconst value1: Result = 'hello';\nconst value2: Result = 42;\n</code></pre> <p>Mapped Types:</p> <p>Allow you to transform the properties of an existing type to create new type:</p> <pre><code>type Mutable&lt;T&gt; = {\n    readonly [P in keyof T]: T[P];\n};\ntype Person = {\n    name: string;\n    age: number;\n};\ntype ImmutablePerson = Mutable&lt;Person&gt;; // properties become read-only\n</code></pre> <p>Conditional types:</p> <p>Allow you to create types based on some conditions:</p> <pre><code>type ExtractParam&lt;T&gt; = T extends (param: infer P) =&gt; any ? P : never;\ntype MyFunction = (name: string) =&gt; number;\ntype ParamType = ExtractParam&lt;MyFunction&gt;; // string\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#indexed-access-types","title":"Indexed Access Types","text":"<p>In TypeScript is it possible to access and manipulate  the types of properties within another type using an index, <code>Type[Key]</code>.</p> <pre><code>type Person = {\n    name: string;\n    age: number;\n};\n\ntype AgeType = Person['age']; // number\n</code></pre> <pre><code>type MyTuple = [string, number, boolean];\ntype MyType = MyTuple[2]; // boolean\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#utility-types","title":"Utility Types","text":"<p>Several built-in utility types can be used to manipulate types, below a list of the most common used:</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#awaitedt","title":"Awaited\\&lt;T&gt;","text":"<p>Constructs a type recursively unwrap Promises.</p> <pre><code>type A = Awaited&lt;Promise&lt;string&gt;&gt;; // string\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#partialt","title":"Partial\\&lt;T&gt;","text":"<p>Constructs a type with all properties of T set to optional.</p> <pre><code>type Person = {\n    name: string;\n    age: number;\n};\n\ntype A = Partial&lt;Person&gt;; // { name?: string | undefined; age?: number | undefined; }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#requiredt","title":"Required\\&lt;T&gt;","text":"<p>Constructs a type with all properties of T set to required.</p> <pre><code>type Person = {\n    name?: string;\n    age?: number;\n};\n\ntype A = Required&lt;Person&gt;; // { name: string; age: number; }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#readonlyt","title":"Readonly\\&lt;T&gt;","text":"<p>Constructs a type with all properties of T set to readonly.</p> <pre><code>type Person = {\n    name: string;\n    age: number;\n};\n\ntype A = Readonly&lt;Person&gt;;\n\nconst a: A = { name: 'Simon', age: 17 };\na.name = 'John'; // Invalid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#recordk-t","title":"Record\\&lt;K, T&gt;","text":"<p>Constructs a type with a set of properties K of type T.</p> <pre><code>type Product = {\n    name: string;\n    price: number;\n};\n\nconst products: Record&lt;string, Product&gt; = {\n    apple: { name: 'Apple', price: 0.5 },\n    banana: { name: 'Banana', price: 0.25 },\n};\n\nconsole.log(products.apple); // { name: 'Apple', price: 0.5 }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#pickt-k","title":"Pick\\&lt;T, K&gt;","text":"<p>Constructs a type by picking the specified properties K from T.</p> <pre><code>type Product = {\n    name: string;\n    price: number;\n};\n\ntype Price = Pick&lt;Product, 'price'&gt;; // { price: number; }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#omitt-k","title":"Omit\\&lt;T, K&gt;","text":"<p>Constructs a type by omitting the specified properties K from T.</p> <pre><code>type Product = {\n    name: string;\n    price: number;\n};\n\ntype Name = Omit&lt;Product, 'price'&gt;; // { name: string; }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#excludet-u","title":"Exclude\\&lt;T, U&gt;","text":"<p>Constructs a type by excluding all values of type U from T.</p> <pre><code>type Union = 'a' | 'b' | 'c';\ntype MyType = Exclude&lt;Union, 'a' | 'c'&gt;; // b\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#extractt-u","title":"Extract\\&lt;T, U&gt;","text":"<p>Constructs a type by extracting all values of type U from T.</p> <pre><code>type Union = 'a' | 'b' | 'c';\ntype MyType = Extract&lt;Union, 'a' | 'c'&gt;; // a | c\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#nonnullablet","title":"NonNullable\\&lt;T&gt;","text":"<p>Constructs a type by excluding null and undefined from T.</p> <pre><code>type Union = 'a' | null | undefined | 'b';\ntype MyType = NonNullable&lt;Union&gt;; // 'a' | 'b'\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#parameterst","title":"Parameters\\&lt;T&gt;","text":"<p>Extracts the parameter types of a function type T.</p> <pre><code>type Func = (a: string, b: number) =&gt; void;\ntype MyType = Parameters&lt;Func&gt;; // [a: string, b: number]\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#constructorparameterst","title":"ConstructorParameters\\&lt;T&gt;","text":"<p>Extracts the parameter types of a constructor function type T.</p> <pre><code>class Person {\n    constructor(public name: string, public age: number) {}\n}\ntype PersonConstructorParams = ConstructorParameters&lt;typeof Person&gt;; // [name: string, age: number]\nconst params: PersonConstructorParams = ['John', 30];\nconst person = new Person(...params);\nconsole.log(person); // Person { name: 'John', age: 30 }\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#returntypet","title":"ReturnType\\&lt;T&gt;","text":"<p>Extracts the return type of a function type T.</p> <pre><code>type Func = (name: string) =&gt; number;\ntype MyType = ReturnType&lt;Func&gt;; // number\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#instancetypet","title":"InstanceType\\&lt;T&gt;","text":"<p>Extracts the instance type of a class type T.</p> <pre><code>class Person {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    sayHello() {\n        console.log(`Hello, my name is ${this.name}!`);\n    }\n}\n\ntype PersonInstance = InstanceType&lt;typeof Person&gt;;\n\nconst person: PersonInstance = new Person('John');\n\nperson.sayHello(); // Hello, my name is John!\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#thisparametertypet","title":"ThisParameterType\\&lt;T&gt;","text":"<p>Extracts the type of 'this' parameter from a function type T.</p> <pre><code>interface Person {\n    name: string;\n    greet(this: Person): void;\n}\ntype PersonThisType = ThisParameterType&lt;Person['greet']&gt;; // Person\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#omitthisparametert","title":"OmitThisParameter\\&lt;T&gt;","text":"<p>Removes the 'this' parameter from a function type T.</p> <pre><code>function capitalize(this: String) {\n    return this[0].toUpperCase + this.substring(1).toLowerCase();\n}\n\ntype CapitalizeType = OmitThisParameter&lt;typeof capitalize&gt;; // () =&gt; string\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#thistypet","title":"ThisType\\&lt;T&gt;","text":"<p>Servers as a market for a contextual <code>this</code> type.</p> <pre><code>type Logger = {\n    log: (error: string) =&gt; void;\n};\n\nlet helperFunctions: { [name: string]: Function } &amp; ThisType&lt;Logger&gt; = {\n    hello: function () {\n        this.log('some error'); // Valid as \"log\" is a part of \"this\".\n        this.update(); // Invalid\n    },\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#uppercaset","title":"Uppercase\\&lt;T&gt;","text":"<p>Make uppercase the name of the input type T.</p> <pre><code>type MyType = Uppercase&lt;'abc'&gt;; // \"ABC\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#lowercaset","title":"Lowercase\\&lt;T&gt;","text":"<p>Make lowercase the name of the input type T.</p> <pre><code>type MyType = Lowercase&lt;'ABC'&gt;; // \"abc\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#capitalizet","title":"Capitalize\\&lt;T&gt;","text":"<p>Capitalize the name of the input type T.</p> <pre><code>type MyType = Capitalize&lt;'abc'&gt;; // \"Abc\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#uncapitalizet","title":"Uncapitalize\\&lt;T&gt;","text":"<p>Uncapitalize the name of the input type T.</p> <pre><code>type MyType = Uncapitalize&lt;'Abc'&gt;; // \"abc\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#others","title":"Others","text":""},{"location":"programming/typescript/the_concise_typeScript_book/#errors-and-exception-handling","title":"Errors and Exception Handling","text":"<p>TypeScript allows you to catch and handle errors using standard JavaScript error handling mechanisms:</p> <p>Try-Catch-Finally Blocks:</p> <pre><code>try {\n    // code that might throw an error\n} catch (error) {\n    // handle the error\n} finally {\n    // code that always executes, finally is optional\n}\n</code></pre> <p>You can also handle different types of error:</p> <pre><code>try {\n    // code that might throw different types of errors\n} catch (error) {\n    if (error instanceof TypeError) {\n        // handle TypeError\n    } else if (error instanceof RangeError) {\n        // handle RangeError\n    } else {\n        // handle other errors\n    }\n}\n</code></pre> <p>Custom Error Types:</p> <p>It is possible to specify more specific error by extending on the Error <code>class</code>:</p> <pre><code>class CustomError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'CustomError';\n    }\n}\n\nthrow new CustomError('This is a custom error.');\n</code></pre> <p>Mixin classes allow you to combine and compose behavior from multiple classes into a single class. They provide a way to reuse and extend functionality without the need for deep inheritance chains.</p> <pre><code>abstract class Identifiable {\n    name: string = '';\n    logId() {\n        console.log('id:', this.name);\n    }\n}\nabstract class Selectable {\n    selected: boolean = false;\n    select() {\n        this.selected = true;\n        console.log('Select');\n    }\n    deselect() {\n        this.selected = false;\n        console.log('Deselect');\n    }\n}\nclass MyClass {\n    constructor() {}\n}\n\n// extend MyClass to include the behavior of Identifiable and Selectable\ninterface MyClass extends Identifiable, Selectable {}\n\n// function to apply mixins to a class\nfunction applyMixins(source: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor =&gt; {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name =&gt; {\n            let descriptor = Object.getOwnPropertyDescriptor(\n                baseCtor.prototype,\n                name\n            );\n            if (descriptor) {\n                Object.defineProperty(source.prototype, name, descriptor);\n            }\n        });\n    });\n}\n\n// apply the mixins to MyClass\napplyMixins(MyClass, [Identifiable, Selectable]);\nlet o = new MyClass();\no.name = 'abc';\no.logId();\no.select();\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#asynchronous-language-features","title":"Asynchronous Language Features","text":"<p>As TypeScript is a superset of JavaScript, it has built-in asynchronous language features of JavaScript as:</p> <p>Promises: Promises are a way to handle asynchronous operations and their results using methods like <code>.then()</code> and <code>.catch()</code> to handle success and error conditions.</p> <p>To learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</p> <p>Async/await: Async/await keywords are a way to provide a more synchronous-looking syntax for working with Promises. The <code>async</code> keyword is used to define an asynchronous function, and the <code>await</code> keyword is used within an async function to pause execution until a Promise is resolved or rejected.</p> <p>To learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await</p> <p>The following API are well supported in TypeScript:</p> <p>Fetch API https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API</p> <p>Web Workers https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API</p> <p>Shared Workers https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker</p> <p>WebSocket https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#iterators-and-generators","title":"Iterators and Generators","text":"<p>Both Interators and Generators are well supported in TypeScript.</p> <p>Iterators are objects that implement the iterator protocol, providing a way to access elements of a collection or sequence one by one. It is a structure that contains a pointer to the next element in the iteration. They have a <code>next()</code> method that returns the next value in the sequence along with a boolean indicating if the sequence is <code>done</code>.</p> <pre><code>class NumberIterator implements Iterable&lt;number&gt; {\n    private current: number;\n\n    constructor(private start: number, private end: number) {\n        this.current = start;\n    }\n\n    public next(): IteratorResult&lt;number&gt; {\n        if (this.current &lt;= this.end) {\n            const value = this.current;\n            this.current++;\n            return { value, done: false };\n        } else {\n            return { value: undefined, done: true };\n        }\n    }\n\n    [Symbol.iterator](): Iterator&lt;number&gt; {\n        return this;\n    }\n}\n\nconst iterator = new NumberIterator(1, 3);\n\nfor (const num of iterator) {\n    console.log(num);\n}\n</code></pre> <p>Generators are special functions defined using the <code>function*</code> syntax that simplifies the creation of iterators. They use the <code>yield</code> keyword to define the sequence of values and automatically pause and resume execution when values are requested.</p> <p>Generators make it easier to create iterators and are especially useful for working with large or infinite sequences.</p> <p>Example:</p> <pre><code>function* numberGenerator(start: number, end: number): Generator&lt;number&gt; {\n    for (let i = start; i &lt;= end; i++) {\n        yield i;\n    }\n}\n\nconst generator = numberGenerator(1, 5);\n\nfor (const num of generator) {\n    console.log(num);\n}\n</code></pre> <p>TypeScript also supports async iterators and async Generators.</p> <p>To learn more: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#tsdocs-jsdoc-reference","title":"TsDocs JSDoc Reference","text":"<p>When working with a JavaScript code base, it is possible to help TypeScript to infer the right Type by using JSDoc comments with additional annotation to provide type information.</p> <p>Example:</p> <pre><code>/**\n * Computes the power of a given number\n * @constructor\n * @param {number} base \u2013 The base value of the expression\n * @param {number} exponent \u2013 The exponent value of the expression\n */\nfunction power(base: number, exponent: number) {\n    return Math.pow(base, exponent);\n}\npower(10, 2); // function power(base: number, exponent: number): number\n</code></pre> <p>Full documentation is provided to this link: https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html</p> <p>From version 3.7 it is possible to generate .d.ts type definitions from JavaScript JSDoc syntax. More information can be found here: https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#types","title":"@types","text":"<p>Packages under the @types organization are special package naming conventions used to provide type definitions for existing JavaScript libraries or modules. For instance using:</p> <pre><code>npm install --save-dev @types/lodash\n</code></pre> <p>Will install the type definitions of <code>lodash</code> in your current project.</p> <p>To contribute to the type definitions of @types package, please submit a pull request to https://github.com/DefinitelyTyped/DefinitelyTyped.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#jsx_1","title":"JSX","text":"<p>JSX (JavaScript XML) is an extension to the JavaScript language syntax that allows you to write HTML-like code within your JavaScript or TypeScript files. It is commonly used in React to define the HTML structure.</p> <p>TypeScript extends the capabilities of JSX by providing type checking and static analysis.</p> <p>To use JSX you need to set the <code>jsx</code> compiler option in your <code>tsconfig.json</code> file. Two common configuration options:</p> <ul> <li>\"preserve\": emit .jsx files with the JSX unchanged. This option tells TypeScript to keep the JSX syntax as-is and not transform it during the compilation process. You can use this option if you have a separate tool, like Babel, that handles the transformation.</li> <li>\"react\": enables TypeScript's built-in JSX transformation. React.createElement will be used.</li> </ul> <p>All options are available here: https://www.typescriptlang.org/tsconfig#jsx</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#es6-modules","title":"ES6 Modules","text":"<p>TypeScript does support ES6 (ECMAScript 2015) and many subsequent versions. This means you can use ES6 syntax, such as arrow functions, template literals, classes, modules, destructuring, and more.</p> <p>To enable ES6 features in your project, you can specify the <code>target</code> property in the tsconfig.json.</p> <p>A configuration example:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"es6\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"outDir\": \"dist\"\n  },\n  \"include\": [\"src\"]\n}\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#es7-exponentiation-operator","title":"ES7 exponentiation operator","text":"<p>The exponentiation (**) operator computes the value obtained by raising the first operand to the power of the second operand. It functions similarly to Math.pow(), but with the added capability of accepting BigInts as operands. TypeScript fully supports this operator using as <code>target</code> in your tsconfig.json file <code>es2016</code> or larger version.</p> <pre><code>console.log(2 ** (2 ** 2)); // 16\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#the-for-await-of-statement","title":"The for-await-of Statement","text":"<p>This is a JavaScript feature fully supported in TypeScript which allows you to iterate over asynchronous iterable objects from target version es2018.</p> <pre><code>async function* asyncNumbers(): AsyncIterableIterator&lt;number&gt; {\n    yield Promise.resolve(1);\n    yield Promise.resolve(2);\n    yield Promise.resolve(3);\n}\n\n(async () =&gt; {\n    for await (const num of asyncNumbers()) {\n        console.log(num);\n    }\n})();\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#newtarget","title":"New.target","text":"<p>You can use in TypeScript the <code>new.target</code> meta-property which enables you to determine if a function or constructor was invoked using the new operator. It allows you to detect whether an object was created as a result of a constructor call.</p> <pre><code>class Parent {\n    constructor() {\n        debugger;\n        console.log(new.target); // logs the constructor function used to create an instance\n    }\n}\n\nclass Child extends Parent {\n    constructor() {\n        super();\n    }\n}\n\nconst parentX = new Parent(); // [Function: Parent]\nconst child = new Child(); // [Function: Child]\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#dynamic-import-expressions","title":"Dynamic Import Expressions","text":"<p>It is possible to conditionally load modules or lazy load them on-demand using the ECMAScript proposal for dynamic import which is supported in TypeScript.</p> <p>The syntax for dynamic import expressions in TypeScript is as follows:</p> <pre><code>async function renderWidget() {\n    const container = document.getElementById('widget');\n    if (container !== null) {\n        const widget = await import('./widget'); // dynamic import\n        widget.render(container);\n    }\n}\n\nrenderWidget();\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#tsc-watch","title":"\u201ctsc \u2013watch\u201d","text":"<p>This command starts a TypeScript compiler with --watch parameter, with the ability to automatically recompile TypeScript files whenever they are modified.</p> <pre><code>tsc --watch\n</code></pre> <p>Starting from TypeScript version 4.9, file monitoring primarily relies on file system events, automatically resorting to polling if an event-based watcher cannot be established.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#definite-assignment-assertions","title":"Definite Assignment Assertions (!)","text":"<p>The Definite Assignment Assertions or also called non-null assertion operator tells the TypeScript compiler that a value typed cannot be null or undefined which is a way to override the compiler's analysis and inform it that a variable will be assigned a value before it is used.</p> <pre><code>type Person = {\n    name: string;\n};\n\nconst printName = (person?: Person) =&gt; {\n    console.log(`Name is ${person!.name}`);\n};\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#defaulted-declarations","title":"Defaulted declarations","text":"<p>Defaulted declarations are used when a variable or parameter is assigned a default value. This means that if no value is provided for that variable or parameter, the default value will be used instead.</p> <pre><code>function greet(name: string = 'Anonymous'): void {\n    console.log(`Hello, ${name}!`);\n}\ngreet(); // Hello, Anonymous!\ngreet('John'); // Hello, John!\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#const-assertions","title":"\u201cconst\u201c assertions","text":"<p>Const assertions are a feature that allows you to declare a variable with a more specific literal type based on its initialization value. It is a way to state to the compiler that the value has to be treated as an immutable literal.</p> <pre><code>let arr = [1, 2, 3] as const; // readonly [1, 2, 3]\narr.push(4); // Invalid\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#optional-chaining","title":"Optional Chaining","text":"<p>The optional chaining operator ?. works like the regular dot operator (.) for accessing properties or methods. However, it gracefully handles null or undefined values by terminating the expression and returning undefined, instead of throwing an error.</p> <pre><code>type Person = {\n    name: string;\n    age?: number;\n    address?: {\n        street?: string;\n        city?: string;\n    };\n};\n\nconst person: Person = {\n    name: 'John',\n};\n\nconsole.log(person.address?.city); // undefined\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#nullish-coalescing-operator","title":"Nullish coalescing operator (??)","text":"<p>The nullish coalescing operator <code>??</code> returns the right-hand side value if the left-hand side is <code>null</code> or <code>undefined</code>; otherwise, it returns the left-hand side value.</p> <pre><code>const foo = null ?? 'foo';\nconsole.log(foo); // foo\n\nconst baz = 1 ?? 'baz';\nconst baz2 = 0 ?? 'baz';\nconsole.log(baz); // 1\nconsole.log(baz2); // 0\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#template-literal-types","title":"Template Literal Types","text":"<p>Template Literal Types allow to manipulate string value at type level and generate new string types based on existing ones. They are useful to create more expressive and precise types from string-based operations.</p> <pre><code>type Department = 'engineering' | 'hr';\ntype Language = 'english' | 'spanish';\ntype Id = `${Department}-${Language}-id`; // \"engineering-english-id\" | \"engineering-spanish-id\" | \"hr-english-id\" | \"hr-spanish-id\"\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#function-overloading","title":"Function overloading","text":"<p>Function overloading allows you to define multiple function signatures for the same function name, each with different parameter types and return type. When you call an overloaded function, TypeScript uses the provided arguments to determine the correct function signature:</p> <pre><code>function makeGreeting(name: string): string;\nfunction makeGreeting(names: string[]): string[];\n\nfunction makeGreeting(person: unknown): unknown {\n    if (typeof person === 'string') {\n        return `Hi ${person}!`;\n    } else if (Array.isArray(person)) {\n        return person.map(name =&gt; `Hi, ${name}!`);\n    }\n    throw new Error('Unable to greet');\n}\n\nmakeGreeting('Simon');\nmakeGreeting(['Simone', 'John']);\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#recursive-conditional-types","title":"Recursive Conditional Types","text":"<p>It is possible to define complex type relationships using logic and recursion in TypeScript. Let\u2019s break it down in simple terms:</p> <p>Conditional Types: allows you to define types based on boolean conditions:</p> <pre><code>type CheckNumber&lt;T&gt; = T extends number ? 'Number' : 'Not a number';\ntype A = CheckNumber&lt;123&gt;; // 'Number'\ntype B = CheckNumber&lt;'abc'&gt;; // 'Not a number'\n</code></pre> <p>Recursion: means a type definition that refers to itself within its own definition:</p> <pre><code>type Json = string | number | boolean | null | Json[] | { [key: string]: Json };\n\nconst data: Json = {\n    prop1: true,\n    prop2: 'prop2',\n    prop3: {\n        prop4: [],\n    },\n};\n</code></pre> <p>Recursive Conditional Types combine both conditional logic and recursion. It means that a type definition can depend on itself through conditional logic, creating complex and flexible type relationships.</p> <pre><code>type Flatten&lt;T&gt; = T extends Array&lt;infer U&gt; ? Flatten&lt;U&gt; : T;\n\ntype NestedArray = [1, [2, [3, 4], 5], 6];\ntype FlattenedArray = Flatten&lt;NestedArray&gt;; // 2 | 3 | 4 | 5 | 1 | 6\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#ecmascript-module-support-in-nodejs","title":"ECMAScript Module Support in Node.js","text":"<p>Node.js added support for ECMAScript Modules starting from version 15.3.0, and TypeScript has had ECMAScript Module Support for Node.js since version 4.7. This support can be enabled by using the <code>module</code> property with the value <code>nodenext</code> in the tsconfig.json file. Here's an example:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"module\": \"nodenext\",\n    \"outDir\": \"./lib\",\n    \"declaration\": true\n  }\n}\n</code></pre> <p>Node.js supports two file extensions for modules: <code>.mjs</code> for ES modules and <code>.cjs</code> for CommonJS modules. The equivalent file extensions in TypeScript are <code>.mts</code> for ES modules and <code>.cts</code> for CommonJS modules. When the TypeScript compiler transpiles these files to JavaScript, it will create <code>.mjs</code> and <code>.cjs</code> files.</p> <p>If you want to use ES modules in your project, you can set the <code>type</code> property to \"module\" in your package.json file. This instructs Node.js to treat the project as an ES module project.</p> <p>Additionally, TypeScript also supports type declarations in .d.ts files. These declaration files provide type information for libraries or modules written in TypeScript, allowing other developers to utilize them with TypeScript's type checking and auto-completion features.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#assertion-functions","title":"Assertion Functions","text":"<p>In TypeScript, assertion functions are functions that indicate the verification of a specific condition based on their return value. In their simplest form, an assert function examines a provided predicate and raises an error when the predicate evaluates to false.</p> <pre><code>function isNumber(value: unknown): asserts value is number {\n    if (typeof value !== 'number') {\n        throw new Error('Not a number');\n    }\n}\n</code></pre> <p>Or can be declared as function expression:</p> <pre><code>type AssertIsNumber = (value: unknown) =&gt; asserts value is number;\nconst isNumber: AssertIsNumber = value =&gt; {\n    if (typeof value !== 'number') {\n        throw new Error('Not a number');\n    }\n};\n</code></pre> <p>Assertion functions share similarities with type guards. Type guards were initially introduced to perform runtime checks and ensure the type of a value within a specific scope. Specifically, a type guard is a function that evaluates a type predicate and returns a boolean value indicating whether the predicate is true or false. This differs slightly from assertion functions,where the intention is to throw an error rather than returning false when the predicate is not satisfied.</p> <p>Example of type guard:</p> <pre><code>const isNumber = (value: unknown): value is number =&gt; typeof value === 'number';\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#variadic-tuple-types","title":"Variadic Tuple Types","text":"<p>Variadic Tuple Types are a features introduces in TypeScript version 4.0, let\u2019s start to learn them by revise what is a tuple:</p> <p>A tuple type is an array which has a defined length, and were the type of each element is known:</p> <pre><code>type Student = [string, number];\nconst [name, age]: Student = ['Simone', 20];\n</code></pre> <p>The term \u201cvariadic\u201d means indefinite arity (accept a variable number of arguments).</p> <p>A variadic tuple is a tuple type which has all the property as before but the exact shape is not defined yet:</p> <pre><code>type Bar&lt;T extends unknown[]&gt; = [boolean, ...T, number];\n\ntype A = Bar&lt;[boolean]&gt;; // [boolean, boolean, number]\ntype B = Bar&lt;['a', 'b']&gt;; // [boolean, 'a', 'b', number]\ntype C = Bar&lt;[]&gt;; // [boolean, number]\n</code></pre> <p>In the previous code we can see that the tuple shape is defined by the <code>T</code> generic passed in.</p> <p>Variadic tuples can accept multiple generics make them very flexible:</p> <pre><code>type Bar&lt;T extends unknown[], G extends unknown[]&gt; = [...T, boolean, ...G];\n\ntype A = Bar&lt;[number], [string]&gt;; // [number, boolean, string]\ntype B = Bar&lt;['a', 'b'], [boolean]&gt;; // [\"a\", \"b\", boolean, boolean]\n</code></pre> <p>With the new variadic tuples we can use:</p> <ul> <li>The spreads in tuple type syntax can now be generic, so we can represent higher-order operation on tuples and arrays even when we do not know the actual types we are operating over.</li> <li>The rest elements can occur anywhere in a tuple.</li> </ul> <p>Example:</p> <pre><code>type Items = readonly unknown[];\n\nfunction concat&lt;T extends Items, U extends Items&gt;(\n    arr1: T,\n    arr2: U\n): [...T, ...U] {\n    return [...arr1, ...arr2];\n}\n\nconcat([1, 2, 3], ['4', '5', '6']); // [1, 2, 3, \"4\", \"5\", \"6\"]\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#boxed-types","title":"Boxed types","text":"<p>Boxed types refer to the wrapper objects that are used to represent primitive types as objects. These wrapper objects provide additional functionality and methods that are not available directly on the primitive values.</p> <p>When you access a method like <code>charAt</code> or <code>normalize</code> on a <code>string</code> primitive, JavaScript wraps it in a <code>String</code> object, calls the method, and then throws the object away.</p> <p>Demonstration:</p> <pre><code>const originalNormalize = String.prototype.normalize;\nString.prototype.normalize = function () {\n    console.log(this, typeof this);\n    return originalNormalize.call(this);\n};\nconsole.log('\\u0041'.normalize());\n</code></pre> <p>TypeScript represents this differentiation by providing separate types for the primitives and their corresponding object wrappers:</p> <p>string =&gt; String number =&gt; Number boolean =&gt; Boolean symbol =&gt; Symbol bigint =&gt; BigInt</p> <p>The boxed types are usually not needed. Avoid using boxed types and instead use type for the primitives,  for instance <code>string</code> instead of <code>String</code>.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#key-remapping-in-mapped-types","title":"Key Remapping in Mapped Types","text":"<p>Mapped types allow you to create new types by transforming the properties of an existing type. Using the <code>keyof</code> and <code>in</code> keywords, you can iterate over the properties of a type and define modifications, such as making them optional or readonly. Here an example:</p> <pre><code>type Person = {\n    name: string;\n    age: number;\n    email: string;\n};\n\ntype PartialPerson = {\n    [K in keyof Person]?: Person[K]; // This will make all properties are optional\n};\n\nconst partialPerson: PartialPerson = {\n    name: 'John',\n    age: 30,\n};\n\npartialPerson.email = 'john@example.com';\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#covariance-and-contravariance-in-typescript","title":"Covariance and Contravariance in TypeScript","text":"<p>Covariance and Contravariance are used to describe how relationships work when dealing with inheritance or assignment of types.</p> <p>Covariance means that a type relationship preserves the direction of inheritance or assignment, so if a type A is a subtype of type B, then an array of type A is also considered a subtype of an array of type B. The important thing to note here is that the subtype relationship is maintained this means that Covariance accept subtype but doesn't accept supertype.</p> <p>Contravariance means that a type relationship reverses the direction of inheritance or assignment, so if a type A is a subtype of type B, then an array of type B is considered a subtype of an array of type A. The subtype relationship is reversed this means that Contravariance accept supertype but doesn't accept subtype.</p> <p>Notes: Bivariance means accept both supertype &amp; subtype.</p> <p>Example: Let's say we have a space for all animals and a separate space just for dogs.</p> <p>In Covariance, you can put all the dogs in the animals space because dogs are a type of animal. But you cannot put all the animals in the dog space because there might be other animals mixed in.</p> <p>In Contravariance, you cannot put all the animals in the dogs space because the animals space might contain other animals as well. However, you can put all the dogs in the animal space because all dogs are also animals.</p> <pre><code>// Covariance example\nclass Animal {\n    name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    breed: string;\n    constructor(name: string, breed: string) {\n        super(name);\n        this.breed = breed;\n    }\n}\n\nlet animals: Animal[] = [];\nlet dogs: Dog[] = [];\n\n// Covariance allows assigning subtype (Dog) array to supertype (Animal) array\nanimals = dogs;\ndogs = animals; // Invalid: Type 'Animal[]' is not assignable to type 'Dog[]'\n\n// Contravariance example\ntype Feed&lt;in T&gt; = (animal: T) =&gt; void;\n\nlet feedAnimal: Feed&lt;Animal&gt; = (animal: Animal) =&gt; {\n    console.log(`Animal name: ${animal.name}`);\n};\n\nlet feedDog: Feed&lt;Dog&gt; = (dog: Dog) =&gt; {\n    console.log(`Dog name: ${dog.name}, Breed: ${dog.breed}`);\n};\n\n// Contravariance allows assigning supertype (Animal) callback to subtype (Dog) callback\nfeedDog = feedAnimal;\nfeedAnimal = feedDog; // Invalid: Type 'Feed&lt;Dog&gt;' is not assignable to type 'Feed&lt;Animal&gt;'.\n</code></pre> <p>In TypeScript, type relationships for arrays are covariant, while type relationships for function parameters are contravariant. This means that TypeScript exhibits both covariance and contravariance, depending on the context.</p>"},{"location":"programming/typescript/the_concise_typeScript_book/#optional-variance-annotations-for-type-parameters","title":"Optional Variance Annotations for Type Parameters","text":"<p>As of TypeScript 4.7.0, we can use the <code>out</code> and <code>in</code> keywords to be specific about Variance annotation.</p> <p>For Covariant, use the <code>out</code> keyword:</p> <pre><code>type AnimalCallback&lt;out T&gt; = () =&gt; T; // T is Covariant here\n</code></pre> <p>And for Contravariant, use the <code>in</code> keyword:</p> <pre><code>type AnimalCallback&lt;in T&gt; = (value: T) =&gt; void; // T is Contravariance here\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#symbol-and-template-string-pattern-index-signatures","title":"Symbol and Template String Pattern Index Signatures","text":"<p>Symbols are unique identifiers that can be used as property keys in objects to prevent naming conflicts.</p> <p>Template string pattern index signatures allow us to define flexible index signatures using template string patterns. This feature enables us to create objects that can be indexed with specific patterns of string keys, providing more control and specificity when accessing and manipulating properties.</p> <p>TypeScript from version 4.4 allows index signatures for symbols and template string patterns.</p> <pre><code>type Obj = {\n    [sym: symbol]: number;\n};\n\nconst a = Symbol('a');\nconst b = Symbol('b');\n\nlet obj: Obj = {};\n\nobj[b] = 123;\n</code></pre>"},{"location":"programming/typescript/the_concise_typeScript_book/#the-satisfies-operator","title":"The satisfies Operator","text":"<p>The <code>satisfies</code>  allows you to check if a given type satisfies a specific interface or condition. In other words, it ensures that a type has all the required properties and methods of a specific interface. It is a way to ensure a variable fits into a definition of a type Here is an example:</p> <pre><code>type Columns = 'name' | 'nickName' | 'attributes';\n\ntype User = Record&lt;Columns, string | string[] | undefined&gt;;\n\n// Type Annotation using `User`\nconst user: User = {\n    name: 'Simone',\n    nickName: undefined,\n    attributes: ['dev', 'admin'],\n};\n\n// In the following lines, TypeScript won't be able to infer properly\nuser.attributes?.map(console.log); // Property 'map' does not exist on type 'string | string[]'. Property 'map' does not exist on type 'string'.\nuser.nickName; // string | string[] | undefined\n\n// Type assertion using `as`\nconst user2 = {\n    name: 'Simon',\n    nickName: undefined,\n    attributes: ['dev', 'admin'],\n} as User;\n\n// Here too, TypeScript won't be able to infer properly\nuser2.attributes?.map(console.log); // Property 'map' does not exist on type 'string | string[]'. Property 'map' does not exist on type 'string'.\nuser2.nickName; // string | string[] | undefined\n\n// Using `satisfies` operators we can properly infer the types now\nconst user3 = {\n    name: 'Simon',\n    nickName: undefined,\n    attributes: ['dev', 'admin'],\n} satisfies User;\n\nuser3.attributes?.map(console.log); // TypeScript infers correctly: string[]\nuser3.nickName; // TypeScript infers correctly: undefined\n</code></pre>"},{"location":"programs/flameshot/","title":"Flameshot","text":"<p>https://flameshot.org/key-bindings/</p>"},{"location":"programs/flameshot/#install","title":"Install","text":"<pre><code>sudo apt install flameshot\n</code></pre> <p>You can easily configure your <code>'print'</code> keyboard shortcut to be assigned to Flameshot. Below an example to open Flameshot in GUI mode:</p> <ul> <li>Open <code>Settings \u2192 Devices \u2192 Keyboard \u2192 Shortcuts</code>.</li> <li>Search for <code>'print'</code>, and unbind the screen capture function by selecting it, and clicking <code>backspace</code>.</li> <li>Scroll down and click on the <code>'+'</code>.</li> <li>On <code>'Name'</code>, name it <code>'Flameshot'</code> or <code>'PrintScreen'</code>.</li> <li>Define the command as <code>'flameshot gui'</code>.</li> <li>Select <code>'Define shortcut...'</code> and click your keyboard <code>Prt Sc key</code>.</li> </ul> <p>Now you can use your default keyboard key to launch Flameshot.</p> <p>For defining multiple shortcuts you can repeat the process above, and just change the command.</p> <p>Some examples of commands are:</p> <pre><code># Capture a region using the GUI, and have it automatically saved to your pictures folder when clicking the save button in GUI\nflameshot gui -p /home/user/Pictures\n# Capture the active monitor and save it automatically to your pictures folder\nflameshot screen -p /home/user/Pictures\n# Capture the full desktop (all monitors) and save it automatically to your pictures folder\nflameshot full -p /home/user/Pictures\n</code></pre>"},{"location":"programs/flameshot/#usage","title":"Usage","text":"<p>Example commands: - capture with GUI:</p> <pre><code>flameshot gui\n</code></pre> <p>Capture with GUI with custom save path:</p> <pre><code>flameshot gui -p ~/myStuff/captures\n</code></pre> <p>Open GUI with a delay of 2 seconds:</p> <pre><code>flameshot gui -d 2000\n</code></pre> <p>Fullscreen capture (asking savepath):</p> <pre><code>flameshot full\n</code></pre> <p>Fullscreen capture with custom save path (no GUI) and delayed:</p> <pre><code>flameshot full -p ~/myStuff/captures -d 5000\n</code></pre> <p>Fullscreen capture with custom save path copying to clipboard:</p> <pre><code>flameshot full -c -p ~/myStuff/captures\n</code></pre> <p>In case of doubt choose the first or the second command as shortcut in your favorite desktop environment.</p> <p>A systray icon will be in your system's panel while Flameshot is running. Do a right click on the tray icon and you'll see some menu items to open the configuration window and the information window. Check out the information window to see all the available shortcuts in the graphical capture mode.</p>"},{"location":"programs/flameshot/#cli-configuration","title":"CLI configuration","text":"<p>You can use the graphical menu to configure Flameshot, but alternatively you can use your terminal or scripts to do so.</p> <p>Open the configuration menu:</p> <pre><code>flameshot config\n</code></pre> <p>Show the initial help message in the capture mode:</p> <pre><code>flameshot config --showhelp true\n</code></pre> <p>For more information about the available options use the help flag:</p> <pre><code>flameshot config -h\n</code></pre>"},{"location":"programs/phpmyadmin/","title":"phpmyadmin","text":""},{"location":"programs/phpmyadmin/#config","title":"Config","text":""},{"location":"programs/phpmyadmin/#enable-host-selection","title":"Enable host selection","text":"<p>In the root directory of phpmyadmin open <code>config.inc.php</code> file, if this file don't appear create it and inside define the next variable</p> <pre><code>$cfg['AllowArbitraryServer'] = true;\n</code></pre>"},{"location":"programs/apache/general/","title":"Apache","text":""},{"location":"programs/apache/general/#look-at-first-php-files","title":"Look at first php files","text":"<p>In most cases, you will want to modify the way that Apache serves files when a directory is requested.  After installation if a user requests a directory from the server, Apache will first look for a file called  <code>index.html</code>. We want to tell the web server to prefer PHP files over others, so make Apache look  for an <code>index.php</code> file first.</p> <p>To do this, type this command to open the <code>dir.conf</code> file in a text editor with root privileges:</p> <pre><code>sudo nano /etc/apache2/mods-enabled/dir.conf\n</code></pre> <p>It will look like this:</p> <pre><code>&lt;IfModule mod_dir.c&gt;\n    DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm\n&lt;/IfModule&gt;\n</code></pre> <p>Move the PHP index file (highlighted above) to the first position after the <code>DirectoryIndex</code> specification, like this:</p> <pre><code>&lt;IfModule mod_dir.c&gt;\n    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm\n&lt;/IfModule&gt;\n</code></pre> <p>When you are finished, save and close the file by pressing <code>CTRL+X</code>. Confirm the save by typing <code>Y</code> and then hit <code>ENTER</code> to verify the file save location.</p> <p>After this, restart the Apache web server in order for your changes to be recognized. Do this by typing this:</p> <pre><code>sudo systemctl restart apache2\n</code></pre> <p>You can also check on the status of the apache2 service using systemctl:</p> <pre><code>sudo systemctl status apache2\n</code></pre>"},{"location":"programs/apache/permits/","title":"Permisos de apache sobre el sistema de ficheros","text":"<p>Esto es en modo desarrollo y si tiene 1 solo usuario por lo que no deber\u00eda preocuparse por alguno m\u00e1s, tampoco por www-data.</p> <p>Abrir el fichero de configuraci\u00f3n de apache, el cual mayormente se ubica en:</p> <pre><code>/etc/apache2/apache2.conf\n</code></pre> <p>Buscar las l\u00edneas que definen el usuario y grupo que usa apache para trabajar</p> <pre><code>User ${APACHE_RUN_USER}\nGroup ${APACHE_RUN_GROUP}\n</code></pre> <p>y cambiar por</p> <pre><code>User username\nGroup usergroup\n</code></pre> <p>donde <code>username</code> y <code>usergroup</code> son los correspondietes al usuario admin</p>"},{"location":"technologies/ionic/ionic/","title":"ionic","text":"<p>Ejecutar aplicaci\u00f3n ionic en dispositivo f\u00edsico externo</p> <pre><code>ionic cordova run android -l --external -c\n</code></pre>"}]}