{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to &lt;dev notes/&gt;","text":"<pre><code>'########::'########:'##::::'##:'##::: ##::'#######::'########:'########::'######::\n ##.... ##: ##.....:: ##:::: ##: ###:: ##:'##.... ##:... ##..:: ##.....::'##... ##:\n ##:::: ##: ##::::::: ##:::: ##: ####: ##: ##:::: ##:::: ##:::: ##::::::: ##:::..::\n ##:::: ##: ######::: ##:::: ##: ## ## ##: ##:::: ##:::: ##:::: ######:::. ######::\n ##:::: ##: ##...::::. ##:: ##:: ##. ####: ##:::: ##:::: ##:::: ##...:::::..... ##:\n ##:::: ##: ##::::::::. ## ##::: ##:. ###: ##:::: ##:::: ##:::: ##:::::::'##::: ##:\n ########:: ########:::. ###:::: ##::. ##:. #######::::: ##:::: ########:. ######::\n........:::........:::::...:::::..::::..:::.......::::::..:::::........:::......:::\n</code></pre>"},{"location":"about/about/","title":"Sobre","text":""},{"location":"about/about/#subtitulo-1","title":"Subtitulo 1","text":""},{"location":"about/about/#subtitulo-2","title":"Subtitulo 2","text":""},{"location":"about/authors/","title":"Authors","text":""},{"location":"about/authors/#autor","title":"Autor","text":""},{"location":"about/mkdocs/","title":"MkDocs basics","text":"<p>For full documentation visit mkdocs.org.</p> <ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs help</code> - Print this help message.</li> </ul>"},{"location":"about/mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"commands/dd/","title":"dd","text":"<p>sudo su -c 'dd if=/dev/zero | pv | dd of=/dev/sdc'</p>"},{"location":"commands/jq/","title":"jq - commandline JSON processor","text":"<p>Usage: <code>jq [options] &lt;jq filter&gt; [file...]</code></p> <p>jq is a tool for processing JSON inputs, applying the given filter to its JSON text inputs and producing the filter's results as JSON on standard output.</p> <p>The simplest filter is ., which is the identity filter, copying jq's input to its output unmodified (except for formatting).</p> <p>For more advanced filters see the jq(1) manpage (\"man jq\") and/or https://stedolan.github.io/jq</p> <p>Some of the options include:</p> <ul> <li><code>-c</code> compact instead of pretty-printed output;</li> <li><code>-n</code> use <code>null</code> as the single input value;</li> <li><code>-e</code> set the exit status code based on the output;</li> <li><code>-s</code> read (slurp) all inputs into an array; apply filter to it;</li> <li><code>-r</code> output raw strings, not JSON texts;</li> <li><code>-R</code> read raw strings, not JSON texts;</li> <li><code>-C</code> colorize JSON;</li> <li><code>-M</code> monochrome (don't colorize JSON);</li> <li><code>-S</code> sort keys of objects on output;</li> <li><code>--tab</code> use tabs for indentation;</li> <li><code>--arg</code> a <code>v</code> set variable <code>$a</code> to value <code>&lt;v&gt;</code>;</li> <li><code>--argjson</code> a <code>v</code> set variable <code>$a</code> to JSON value <code>&lt;v&gt;</code>;</li> <li><code>--slurpfile</code> a <code>f</code> set variable <code>$a</code> to an array of JSON texts read from <code>&lt;f&gt;</code>;</li> </ul>"},{"location":"commands/jq/#examples","title":"Examples","text":"<pre><code>jq -r '.version' #obtener el propiedad version de un json pasado como parametro \n</code></pre>"},{"location":"commands/mktemp/","title":"mktemp","text":"<p>Usage: <code>mktemp [OPTION]... [TEMPLATE]</code></p> <p>Create a temporary file or directory, safely, and print its name. <code>TEMPLATE</code> must contain at least 3 consecutive 'X's in last component. If TEMPLATE is not specified, use <code>tmp.XXXXXXXXXX</code>, and <code>--tmpdir</code> is implied. Files are created <code>u+rw</code>, and directories <code>u+rwx</code>, minus umask restrictions.</p> <ul> <li><code>-d, --directory</code>     create a directory, not a file</li> <li><code>-u, --dry-run</code>       do not create anything; merely print a name (unsafe)</li> <li><code>-q, --quiet</code>         suppress diagnostics about file/dir-creation failure</li> <li><code>--suffix=SUFF</code>   append <code>SUFF</code> to <code>TEMPLATE</code>; <code>SUFF</code> must not contain a slash.                         This option is implied if <code>TEMPLATE</code> does not end in X</li> <li><code>-p DIR, --tmpdir[=DIR]</code>  interpret <code>TEMPLATE</code> relative to <code>DIR</code>; if <code>DIR</code> is not                         specified, use <code>$TMPDIR</code> if set, else <code>/tmp</code>.  With                         this option, <code>TEMPLATE</code> must not be an absolute name;                         unlike with <code>-t</code>, <code>TEMPLATE</code> may contain slashes, but                         mktemp creates only the final component</li> <li><code>-t</code>                  interpret <code>TEMPLATE</code> as a single file name component,                         relative to a directory: <code>$TMPDIR</code>, if set; else the                         directory specified via <code>-p</code>; else <code>/tmp [deprecated]</code></li> <li><code>--help</code>     display this help and exit</li> <li><code>--version</code>  output version information and exit</li> </ul>"},{"location":"commands/mktemp/#example","title":"Example","text":"<p>By default create the directory in the <code>tmp</code> folder and return de path</p> <pre><code>mktemp -d\n/tmp/tmp.CxYovCveam  #output\n</code></pre> <p>If you want open the path in the same sentence</p> <pre><code>cd $(mktemp -d)\n</code></pre> <p>To create in the directory</p> <pre><code>mktemp -p .\n</code></pre>"},{"location":"commands/ncdu/","title":"ncdu","text":"<p>Sirve para saber el espacio ocupado por carpetas</p>"},{"location":"commands/ncdu/#instalar","title":"Instalar","text":"<pre><code>sudo apt install ncdu\n</code></pre>"},{"location":"commands/others/","title":"Others commands","text":""},{"location":"commands/others/#echo","title":"echo","text":"<p>Los comandos en linux tienen c\u00f3digos de retorno por convenci\u00f3n el 0 es que todo se ejecut\u00f3 de manera satisfactoria en caso de no ser 0 cada uno de los comandos tienen su propio significado para el c\u00f3digo de retorno.</p> <p>Una de las formas de saber que retorno un comando es luego de su ejecuci\u00f3n hacer la consulta con <code>echo $?</code> esto devolver\u00e1 el c\u00f3digo en cuesti\u00f3n.</p>"},{"location":"commands/others/#saber-el-nombre-de-tu-usuario","title":"Saber el nombre de tu usuario","text":"<pre><code>whoami\n</code></pre>"},{"location":"commands/pwgen/","title":"pwgen","text":""},{"location":"commands/pwgen/#generador-de-passwords-en-la-terminal","title":"Generador de passwords en la terminal","text":""},{"location":"commands/pwgen/#instalar","title":"Instalar","text":"<pre><code>sudo apt install pwgen\n</code></pre>"},{"location":"commands/pwgen/#optionssyntax","title":"Options/Syntax","text":"<p>Usage: pwgen [ OPTIONS ] [ pw_length ] [ num_pw ]</p> <p>Options supported by pwgen:</p> <ul> <li><code>-c</code> or <code>--capitalize</code> Include at least one capital letter in the password</li> <li><code>-A</code> or <code>--no-capitalize</code> Don't include capital letters in the password</li> <li><code>-n</code> or <code>--numerals</code> Include at least one number in the password</li> <li><code>-0</code> or <code>--no-numerals</code> Don't include numbers in the password</li> <li><code>-y</code> or <code>--symbols</code>   Include at least one special symbol in the password</li> <li><code>-r &lt;chars&gt;</code> or <code>--remove-chars=&lt;chars&gt;</code> Remove characters from the set of characters to generate passwords</li> <li><code>-s</code> or <code>--secure</code> Generate completely random passwords</li> <li><code>-B</code> or <code>--ambiguous</code> Don't include ambiguous characters in the password</li> <li><code>-h</code> or <code>--help</code> Print a help message</li> <li><code>-H</code> or <code>--sha1=path/to/file[#seed]</code> Use sha1 hash of given file as a (not so) random generator</li> <li><code>-C</code> Print the generated passwords in columns</li> <li><code>-1</code> Don't print the generated passwords in columns</li> <li><code>-v</code> or <code>--no-vowels</code> Do not use any vowels so as to avoid accidental nasty words</li> </ul>"},{"location":"commands/seq/","title":"seq","text":"<p>Generar secuencias de n\u00fameros en consola</p> <p>NAME        seq - print a sequence of numbers</p> <p>SYNOPSIS        seq [OPTION]... LAST        seq [OPTION]... FIRST LAST        seq [OPTION]... FIRST INCREMENT LAST</p> <p>DESCRIPTION        Print numbers from FIRST to LAST, in steps of INCREMENT.</p> <pre><code>   Mandatory arguments to long options are mandatory for short options too.\n\n   -f, --format=FORMAT\n          use printf style floating-point FORMAT\n\n   -s, --separator=STRING\n          use STRING to separate numbers (default: \\n)\n\n   -w, --equal-width\n          equalize width by padding with leading zeroes\n\n   --help display this help and exit\n\n   --version\n          output version information and exit\n\n   If  FIRST  or INCREMENT is omitted, it defaults to 1.  That is, an omitted INCREMENT defaults to 1 even when LAST is smaller than FIRST.  The sequence of numbers ends when the sum of the current number and INCRE\u2010\n   MENT would become greater than LAST.  FIRST, INCREMENT, and LAST are interpreted as floating point values.  INCREMENT is usually positive if FIRST is smaller than LAST, and INCREMENT is usually negative if  FIRST\n   is  greater  than LAST.  INCREMENT must not be 0; none of FIRST, INCREMENT and LAST may be NaN.  FORMAT must be suitable for printing one argument of type 'double'; it defaults to %.PRECf if FIRST, INCREMENT, and\n   LAST are all fixed point decimal numbers with maximum precision PREC, and to %g otherwise.\n</code></pre>"},{"location":"commands/tar/","title":"tar","text":"<p>Compres files</p> <p>Usage: <code>tar [OPTION...] [FILE]...</code></p> <ul> <li><code>-c, --create</code> create a new archive</li> <li><code>-u, --update</code> only append files newer than copy in archive</li> <li><code>-x, --extract, --get</code> extract files from an archive</li> <li><code>-f, --file=ARCHIVE</code> use archive file or device <code>ARCHIVE</code></li> <li><code>-a, --auto-compress</code> use archive suffix to determine the compression program</li> <li><code>-z, --gzip, --gunzip, --ungzip</code> filter the archive through gzip</li> <li><code>-v, --verbose</code> verbosely list files processed</li> <li><code>-t, --list</code> list the contents of an archive</li> </ul>"},{"location":"commands/tar/#ejemplos","title":"Ejemplos","text":""},{"location":"commands/tar/#crear-comprimido","title":"Crear comprimido","text":"<pre><code>tar -caf nombreFichero.tar.gz * # con el * comprime todo en el directorio donde se ejecuta el comando, sustituir por nombre de carpeta en case de querer solo una\n</code></pre>"},{"location":"commands/tar/#mostrar-el-contenido-de-un-fichero-comprimido","title":"Mostrar el contenido de un fichero comprimido","text":"<pre><code>tar -taf nombreFichero.tar.gz\n</code></pre>"},{"location":"commands/tar/#extraer-solo-una-de-las-carpetas-o-fichero-dentro-del-comprimido","title":"Extraer solo una de las carpetas o fichero dentro del comprimido","text":"<pre><code>tar -xaf nombreFichero.tar.gz carpetaInterna\n</code></pre>"},{"location":"commands/uniq/","title":"uniq","text":"<p>Reportar u omitir lineas repetidas</p> <p>Un caso de uso de este comando es cuando queremos obtener las lineas \u00fanicas de un fichero o una entrada.</p> <p>Supongamos que tenemos un fichero de texto <code>ficheroEjemplo.txt</code> y queremos obtener todas las entradas del fichero desechando las duplicadas, el fichero contiene:</p> <pre><code>item 1\nitem 1\nitem 2\nitem 2\nitem 3\nitem 4\nitem 5\nitem 6\n</code></pre> <p>En este caso el item 1 y 2 se repiten varias veces por lo que si ejecutamos:</p> <pre><code>cat ficheroEjemplo.txt | uniq\n</code></pre> <p>Devolver\u00e1</p> <pre><code>item 1\nitem 2\nitem 3\nitem 4\nitem 5\nitem 6\n</code></pre>"},{"location":"commands/uniq/#man-uniq","title":"man uniq","text":""},{"location":"commands/uniq/#name","title":"NAME","text":"<p><code>uniq</code> - report or omit repeated lines</p>"},{"location":"commands/uniq/#synopsis","title":"SYNOPSIS","text":"<p><code>uniq [OPTION]... [INPUT [OUTPUT]]</code></p>"},{"location":"commands/uniq/#description","title":"DESCRIPTION","text":"<p>Filter adjacent matching lines from <code>INPUT</code> (or standard input), writing to <code>OUTPUT</code> (or standard output).</p> <p>With no options, matching lines are merged to the first occurrence.</p> <p>Mandatory arguments to long options are mandatory for short options too.</p> <ul> <li><code>-c, --count</code> prefix lines by the number of occurrences</li> <li><code>-d, --repeated</code> only print duplicate lines, one for each group</li> <li><code>-D</code> print all duplicate lines</li> <li><code>--all-repeated[=METHOD]</code> like <code>-D</code>, but allow separating groups with an empty line; METHOD={none(default),prepend,separate}</li> <li><code>-f, --skip-fields=N</code> avoid comparing the first N fields</li> <li><code>--group[=METHOD]</code> show all items, separating groups with an empty line; METHOD={separate(default),prepend,append,both}</li> <li><code>-i, --ignore-case</code> ignore differences in case when comparing</li> <li><code>-s, --skip-chars=N</code> avoid comparing the first N characters</li> <li><code>-u, --unique</code> only print unique lines</li> <li><code>-z, --zero-terminated</code> line delimiter is NUL, not newline</li> <li><code>-w, --check-chars=N</code> compare no more than N characters in lines</li> <li><code>--help</code> display this help and exit</li> <li><code>--version</code> output version information and exit</li> </ul> <p>A field is a run of blanks (usually spaces and/or TABs), then non-blank characters.  Fields are skipped before chars.</p> <p>Note: <code>uniq</code> does not detect repeated lines unless they are adjacent.  You may want to sort the input first, or use <code>sort -u</code> without <code>uniq</code>.  Also, comparisons honor the rules specified by <code>LC_COLLATE</code>.</p>"},{"location":"commands/grep/directory_word_search/","title":"C\u00f3mo encontrar una cadena o palabra espec\u00edfica en archivos y directorios","text":"<p>El siguiente comando mostrar\u00e1 una lista de todos los archivos que contienen una l\u00ednea con el texto <code>\"check_root\"</code>, buscando de forma recursiva y agresiva el directorio <code>~/bin</code>.</p> <pre><code>grep -Rw ~/bin/ -e 'check_root'\n</code></pre> <p>Donde la opci\u00f3n <code>-R</code> le dice a <code>grep</code> que lea todos los archivos debajo de cada directorio, recursivamente, siguiendo los enlaces simb\u00f3licos solo si est\u00e1n en la l\u00ednea de comando y la opci\u00f3n <code>-w</code> le indica que seleccione solo las l\u00edneas que contienen coincidencias que forman palabras completas, y <code>-e</code> se utiliza para especificar la cadena (patr\u00f3n) a buscar.</p> <p>Debe usar el comando sudo cuando busque en determinados directorios o archivos que requieren permisos de root (a menos que est\u00e9 administrando su sistema con la cuenta de root).</p> <pre><code>sudo grep -Rw / -e 'check_root' \n</code></pre> <p>Para ignorar las distinciones de casos, utilice la opci\u00f3n <code>-i</code> como se muestra:</p> <pre><code>grep -Riw ~/bin/ -e 'check_root'\n</code></pre> <p>Si desea saber la l\u00ednea exacta donde existe la cadena de texto, incluya la opci\u00f3n <code>-n</code>.</p> <pre><code>grep -Rinw ~/bin/ -e 'check_root'\n</code></pre> <p>Suponiendo que hay varios tipos de archivos en un directorio en el que desea buscar, tambi\u00e9n puede especificar el tipo de archivos que se buscar\u00e1n, por su extensi\u00f3n, mediante la opci\u00f3n <code>--include</code>.</p> <p>Este ejemplo le indica a grep que solo mire todos los archivos <code>.sh</code>.</p> <pre><code>grep -Rnw --include=\\*.sh ~/bin/ -e 'check_root'\n</code></pre> <p>Adem\u00e1s, es posible buscar m\u00e1s de un patr\u00f3n, utilizando el siguiente comando.</p> <pre><code>grep -Rinw ~/bin/ -e 'check_root' -e 'netstat'\n</code></pre>"},{"location":"commands/ssh/copy_the_public_key/","title":"Copy the Public Key to Server","text":"<p>Fuente</p> <p>The quickest way to copy your public key to the Ubuntu host is to use a utility called <code>ssh-copy-id</code>. Due to its simplicity, this method is highly recommended if available. If you do not have <code>ssh-copy-id</code> available to you on your client machine, you may use one of the two alternate methods provided in this section (copying via password-based SSH, or manually copying the key).</p>"},{"location":"commands/ssh/copy_the_public_key/#copying-public-key-using-ssh-copy-id","title":"Copying Public Key Using ssh-copy-id","text":"<p>The <code>ssh-copy-id</code> tool is included by default in many operating systems, so you may have it available on your local system. For this method to work, you must already have password-based SSH access to your server.</p> <p>To use the utility, you simply need to specify the remote host that you would like to connect to and the user account that you have password SSH access to. This is the account to which your public SSH key will be copied.</p> <p>The syntax is:</p> <pre><code>ssh-copy-id username@remote_host\n</code></pre> <p>You may see the following message:</p> <pre><code>Output\nThe authenticity of host '203.0.113.1 (203.0.113.1)' can't be established.\nECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.\nAre you sure you want to continue connecting (yes/no)? yes\n</code></pre> <p>This means that your local computer does not recognize the remote host. This will happen the first time you connect to a new host. Type \u201cyes\u201d and press <code>ENTER</code> to continue.</p> <p>Next, the utility will scan your local account for the <code>id_rsa.pub</code> key that we created earlier. When it finds the key, it will prompt you for the password of the remote user\u2019s account:</p> <p>Type in the password (your typing will not be displayed for security purposes) and press <code>ENTER</code>. The utility will connect to the account on the remote host using the password you provided. It will then copy the contents of your <code>~/.ssh/id_rsa.pub</code> key into a file in the remote account\u2019s home <code>~/.ssh</code> directory called <code>authorized_keys</code>.</p> <p>You should see the following output:</p> <pre><code>Output\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh 'username@203.0.113.1'\"\nand check to make sure that only the key(s) you wanted were added.\n</code></pre>"},{"location":"commands/ssh/copy_the_public_key/#copying-public-key-using-ssh","title":"Copying Public Key Using SSH","text":"<p>If you do not have <code>ssh-copy-id</code> available, but you have password-based SSH access to an account on your server, you can upload your keys using a conventional SSH method.</p> <p>We can do this by using the <code>cat</code> command to read the contents of the public SSH key on our local computer and piping that through an SSH connection to the remote server.</p> <p>On the other side, we can make sure that the <code>~/.ssh</code> directory exists and has the correct permissions under the account we\u2019re using.</p> <p>We can then output the content we piped over into a file called <code>authorized_keys</code> within this directory. We\u2019ll use the <code>&gt;&gt;</code> redirect symbol to append the content instead of overwriting it. This will let us add keys without destroying previously added keys.</p> <p>The full command looks like this:</p> <pre><code>cat ~/.ssh/id_rsa.pub | ssh username@remote_host \"mkdir -p ~/.ssh &amp;&amp; touch ~/.ssh/authorized_keys &amp;&amp; chmod -R go= ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"\n</code></pre> <p>You may see the following message:</p> <pre><code>Output\nThe authenticity of host '203.0.113.1 (203.0.113.1)' can't be established.\nECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe.\nAre you sure you want to continue connecting (yes/no)? yes\n</code></pre> <p>This means that your local computer does not recognize the remote host. This will happen the first time you connect to a new host. Type \u201cyes\u201d and press <code>ENTER</code> to continue.</p> <p>Afterwards, you should be prompted to enter the remote user account password:</p> <pre><code>Output\nusername@203.0.113.1's password:\n</code></pre> <p>After entering your password, the content of your <code>id_rsa.pub</code> key will be copied to the end of the <code>authorized_keys</code> file of the remote user\u2019s account. Continue on to Step 3 if this was successful.</p>"},{"location":"commands/ssh/copy_the_public_key/#copying-public-key-manually","title":"Copying Public Key Manually","text":"<p>If you do not have password-based SSH access to your server available, you will have to complete the above process manually.</p> <p>We will manually append the content of your <code>id_rsa.pub</code> file to the <code>~/.ssh/authorized_keys</code> file on your remote machine.</p> <p>To display the content of your <code>id_rsa.pub</code> key, type this into your local computer:</p> <pre><code>cat ~/.ssh/id_rsa.pub\n</code></pre> <p>You will see the key\u2019s content, which should look something like this:</p> <pre><code>Output\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqql6MzstZYh1TmWWv11q5O3pISj2ZFl9HgH1JLknLLx44+tXfJ7mIrKNxOOwxIxvcBF8PXSYvobFYEZjGIVCEAjrUzLiIxbyCoxVyle7Q+bqgZ8SeeM8wzytsY+dVGcBxF6N4JS+zVk5eMcV385gG3Y6ON3EG112n6d+SMXY0OEBIcO6x+PnUSGHrSgpBgX7Ks1r7xqFa7heJLLt2wWwkARptX7udSq05paBhcpB0pHtA1Rfz3K2B+ZVIpSDfki9UVKzT8JUmwW6NNzSgxUfQHGwnW7kj4jp4AT0VZk3ADw497M2G/12N0PPB5CnhHf7ovgy6nL1ikrygTKRFmNZISvAcywB9GVqNAVE+ZHDSCuURNsAInVzgYo9xgJDW8wUw2o8U77+xiFxgI5QSZX3Iq7YLMgeksaO4rBJEa54k8m5wEiEE1nUhLuJ0X/vh2xPff6SQ1BL/zkOhvJCACK6Vb15mDOeCSq54Cr7kvS46itMosi/uS66+PujOO+xt/2FWYepz6ZlN70bRly57Q06J+ZJoc9FfBCbCyYH7U/ASsmY095ywPsBo1XQ9PqhnN1/YOorJ068foQDNVpm146mUpILVxmq41Cj55YKHEazXGsdBIbXWhcrRf4G2fJLRcGUr9q8/lERo9oxRm5JFX6TCmj6kmiFqv+Ow9gI0x8GvaQ== demo@test\n</code></pre> <p>Access your remote host using whichever method you have available.</p> <p>Once you have access to your account on the remote server, you should make sure the ~/.ssh directory exists. This command will create the directory if necessary, or do nothing if it already exists:</p> <pre><code>mkdir -p ~/.ssh\n</code></pre> <p>Now, you can create or modify the <code>authorized_keys</code> file within this directory. You can add the contents of your <code>id_rsa.pub</code> file to the end of the <code>authorized_keys</code> file, creating it if necessary, using this command:</p> <pre><code>echo public_key_string &gt;&gt; ~/.ssh/authorized_keys\n</code></pre> <p>In the above command, substitute the <code>public_key_string</code> with the output from the <code>cat ~/.ssh/id_rsa.pub</code> command that you executed on your local system. It should start with <code>ssh-rsa AAAA....</code></p> <p>Finally, we\u2019ll ensure that the <code>~/.ssh</code> directory and <code>authorized_keys</code> file have the appropriate permissions set:</p> <pre><code>chmod -R go= ~/.ssh\n</code></pre> <p>This recursively removes all \u201cgroup\u201d and \u201cother\u201d permissions for the <code>~/.ssh/</code> directory.</p> <p>If you\u2019re using the <code>root</code> account to set up keys for a user account, it\u2019s also important that the <code>~/.ssh</code> directory belongs to the user and not to <code>root</code>:</p> <pre><code>chown -R sammy:sammy ~/.ssh\n</code></pre> <p>In this tutorial our user is named <code>sammy</code> but you should substitute the appropriate username into the above command.</p> <p>We can now attempt passwordless authentication with our Ubuntu server.</p>"},{"location":"commands/ssh/ssh/","title":"ssh","text":""},{"location":"commands/ssh/ssh/#create-ssh-key","title":"Create ssh key","text":"<p>Las herramientas para crear y usar SSH son est\u00e1ndar y est\u00e1n presentes en la mayor\u00eda de las distribuciones de Linux. Con los siguientes comandos, puede generar la key ssh.</p> <ul> <li>Corre: <code>ssh-keygen -t rsa</code>. Para una llave m\u00e1s segura de 4096-bit key, corra: <code>ssh-keygen -t rsa -b 4096</code></li> <li>Al dar enter se preguntar\u00e1 donde quiere guardar la clave que se va a generar, en caso de dar enter guardar\u00e1 la key en el lugar por defecto <code>/home/username/.ssh/id_rsa</code></li> <li>Luego se deber\u00e1 introducir una frase y su confirmaci\u00f3n.</li> <li>Como resultado se informa el lugar donde se guard\u00f3 la llave publica y privada adem\u00e1s del fingerprint.</li> </ul> <p>Nota: en caso de especificar el par\u00e1metro <code>-f ruta</code> se le dice donde quedar\u00e1 la nueva key generada por lo que se omite la pregunta de ubicaci\u00f3n ej: <code>ssh-keygen -t rsa -f /home/username/.ssh/new-key</code></p>"},{"location":"commands/ssh/ssh/#create-alias-for-ssh-command","title":"Create alias for ssh command","text":"<p>Standard ssh client reads the configuration files before any connection:</p> <pre><code>/etc/ssh/ssh_config   # system-wide\n~/.ssh/config         # per user\n</code></pre> <p>with the latter with more priority.</p> <p>Ideally you want to configure the systemwide config with parameters that please all users and the config in your homedir with options specific to you. Here's an expample of <code>~/.ssh/config</code></p> <pre><code>Host server1\n  HostName 10.12.152.200\n  User jonh\n\nHost server2\n  HostName 25.74.84.203\n  User root\n  Port 2022\n</code></pre> <p>Then to connect to server1:</p> <pre><code>ssh server1\n</code></pre> <p>Note: <code>~/.ssh/config</code> must have read/write permissions for the user, and not be accessible by others (<code>chmod 600 ~/.ssh/config</code>)</p> <p>All possible options are documented in ssh_config manual pages: man ssh_config</p>"},{"location":"commands/ssh/ssh/#use-multiple-ssh-private-keys-on-one-client","title":"Use multiple SSH private keys on one client","text":"<p>Suppose you have 2 keys</p> <pre><code>/home/username/.ssh/id_rsa #default key\n/home/username/some_directory/other-ssh-key\n</code></pre> <p>One way is using the -i param followed by the route to the key, example <code>ssh -i /home/username/some_directory/other-ssh-key hostuser@servername</code></p> <p>Other way is configure the alias on the ssh config file (default location) <code>/home/username/.ssh/config</code> the param <code>IdentityFile</code>, example:</p> <pre><code>Host serverAlias\n    HostName 12.25.36.175\n    IdentityFile ~/some_directory/other-ssh-key  # different private key to the default\n    User remoteusername\n\nHost serverAlias2\n    HostName server.organism.org\n    IdentityFile ~/.ssh/id_rsa  # default private key \n    User username\n</code></pre>"},{"location":"database/mysql/","title":"MySql","text":""},{"location":"database/mysql/#habilitar-el-acceso-a-mysql-con-el-usuario-root","title":"Habilitar el acceso a mysql con el usuario root","text":"<p>Entrar en la terminal y conecctarse a mysql mediante el comando</p> <pre><code>sudo -u mysql\n</code></pre> <p>Luego ejecutar los siguientes comandos:</p> <pre><code>use mysql;\n\nupdate user set plugin='mysql_native_password' where user='root';\n\nflush privileges;\n</code></pre>"},{"location":"database/mysql/#permitir-en-el-phpmyadmin-entrar-sin-password","title":"Permitir en el phpmyadmin entrar sin password","text":"<pre><code>// Ubicacion del fichero en el sistema (Ubuntu)\n/etc/phpyadmin/config.inc.php\n\n$cfg['Servers'][$i]['AllowNoPassword'] = TRUE;\n</code></pre> <p>Se descomenta en las 2 l\u00edneas que aparece y luego para que los cambios tengan efecto se debe reiniciar el apache</p>"},{"location":"database/mysql/#cambiar-la-collations-a-todas-las-tablas","title":"Cambiar la collations a todas las tablas","text":"<p>Cambiar dbase por el nombre de la bd luego ejecutar los script que da la consulta como resultado</p> <pre><code>SELECT CONCAT('ALTER TABLE `', \n        tbl.`TABLE_SCHEMA`, '`.`', \n        tbl.`TABLE_NAME`, \n        '` CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;') \nFROM `information_schema`.`TABLES` tbl \nWHERE tbl.`TABLE_SCHEMA` = 'dbase';\n</code></pre>"},{"location":"database/sql_server/","title":"SQL Server","text":""},{"location":"database/sql_server/#t-sql-listar-todos-los-procedimientos-almacenados","title":"T-SQL: Listar todos los Procedimientos Almacenados","text":"<pre><code>SELECT ROUTINE_NAME \nFROM INFORMATION_SCHEMA.ROUTINES \nWHERE ROUTINE_TYPE = 'PROCEDURE'\nORDER BY ROUTINE_NAME \n</code></pre>"},{"location":"database/sql_server/#desencriptando-procedimientos-almacenados","title":"Desencriptando Procedimientos almacenados","text":"<p>Para desencriptar procedimientos almacenados debemos hacer lo siguiente:</p> <p>Si tenemos un procedimiento encriptado como el siguiente:</p> <pre><code>CREATE PROCEDURE desencriptame\nWITH ENCRYPTION\nAS\nPRINT 'desencriptame porfavor'\nGO\n</code></pre> <p>y si luego quiesieramos visualizar el texto de este procedimiento nos apareceria lo siguiente:</p> <pre><code>exec sp_helptext desencriptame\n\nmensaje: Los comentarios de objeto han sido cifrados.\n</code></pre> <p>Para ver el c\u00f3digo desencriptado hagamos lo siguiente. Vamos a crear un procedimiento que desencripte esto. este procedimiento se llamar\u00e1 <code>DECRYPTSP2K</code> y su c\u00f3digo es el siguiente: compilenlo:</p> <pre><code>CREATE PROCEDURE [DBO].[DECRYPTSP2K](\n@objName VARCHAR(50))\nAS\nDECLARE @a NVARCHAR(4000),\n@b NVARCHAR(4000),\n@c NVARCHAR(4000),\n@d NVARCHAR(4000),\n@i INT,\n@t BIGINT\n--get encrypted data\nSET @a = (SELECT CTEXT\nFROM SYSCOMMENTS\nWHERE ID = OBJECT_ID(@objName))\nSET @b = 'ALTER PROCEDURE ' + @objName + ' WITH ENCRYPTION AS ' +\n\nREPLICATE('-',4000 - 62)\n\nEXECUTE( @b)\n--get encrypted bogus SP\nSET @c = (SELECT CTEXT\nFROM SYSCOMMENTS\nWHERE ID = OBJECT_ID(@objName))\nSET @b = 'CREATE PROCEDURE ' + @objName + ' WITH ENCRYPTION AS ' +\n\nREPLICATE('-',4000 - 62)\n--start counter\nSET @i = 1\n\n--fill temporary variable\n\nSET @d = REPLICATE(N'A',(DATALENGTH(@a) / 2))\n\n--loop\n\nWHILE @i &lt;= DATALENGTH(@a) / 2\n\nBEGIN\n\n--xor original+bogus+bogus encrypted\n\nSET @d = STUFF(@d,@i,1,NCHAR(UNICODE(SUBSTRING(@a,@i,1)) ^ (UNICODE(SUBSTRING(@b,@i,1)) ^ UNICODE(SUBSTRING(@c,@i,1)))))\n\nSET @i = @i + 1\n\nEND\n\n--drop original SP\n\nEXECUTE( 'drop PROCEDURE ' + @objName)\n\n--remove encryption\n\n--try to preserve case\n\nSET @d = REPLACE((@d),'WITH ENCRYPTION','')\n\nSET @d = REPLACE((@d),'With Encryption','')\n\nSET @d = REPLACE((@d),'with encryption','')\n\nIF CHARINDEX('WITH ENCRYPTION',UPPER(@d)) &gt; 0\n\nSET @d = REPLACE(UPPER(@d),'WITH ENCRYPTION','')\n\n--replace SP\n\nEXECUTE( @d)\n</code></pre> <p>Luego ejecutenlo de la siguiente manera:</p> <pre><code>exec DECRYPTSP2K 'desencriptame'\ngo\n</code></pre> <p>Luego vuelvan a ejecutar el sp_helptext y obtendr\u00e1n el c\u00f3digo desencriptado:</p> <pre><code>exec sp_helptext desencriptame\nmensaje:\nText\nCREATE PROCEDURE desencriptame\nAS\nPRINT 'desencriptame porfavor'\n</code></pre>"},{"location":"docker/docker_install/","title":"Instalar Docker","text":"<p>Config file <code>/lib/systemd/system/docker.service</code></p>"},{"location":"docker/docker_install/#centos","title":"CentOS","text":"<p>Utilidades</p> <pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre> <p>Agregar el repo de docker</p> <pre><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre> <p>Instalar docker</p> <pre><code>sudo yum install docker-ce -y\n</code></pre> <p>Iniciar el servicio</p> <pre><code>sudo systemctl start docker\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_install/#fedoras","title":"Fedoras","text":"<p>La instalaci\u00f3n es igual que en CentOS, solo deben modificar la url del repo, porque los pasos son id\u00e9nticos</p> <p>Utilidades</p> <pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n</code></pre> <p>Agregar el repo de docker</p> <pre><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo\n</code></pre> <p>Instalar docker</p> <pre><code>sudo yum install docker-ce -y\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_install/#ubuntu","title":"Ubuntu","text":"<p>Actualiza los repos</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instala utilidades</p> <pre><code>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y\n</code></pre> <p>Agregar el gpg </p> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n</code></pre> <p>Agregar el repo</p> <pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n</code></pre> <p>Actualizar de nuevo</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instalar docker</p> <pre><code>sudo apt-get install docker-ce\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_install/#debian","title":"Debian","text":"<p>Actualiza los repos</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instala utilidades</p> <pre><code>sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common -y\n</code></pre> <p>Agregar el gpg</p> <pre><code>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -\n</code></pre> <p>Agregar el repo</p> <pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\"\n</code></pre> <p>Actualizar de nuevo</p> <pre><code>sudo apt-get update\n</code></pre> <p>Instalar docker</p> <pre><code>sudo apt-get install docker-ce\n</code></pre> <p>Iniciarlo con el sistema</p> <pre><code>sudo systemctl enable docker\n</code></pre> <p>Agregar usuario al grupo docker</p> <pre><code>whoami # Saber el nombre de tu usuario\nsudo usermod -aG docker nombre_de_salida_en_whoami\n</code></pre> <p>Salir de la sesi\u00f3n</p> <pre><code>exit\n</code></pre> <p>Iniciar de nuevo con el usuario y probar</p> <pre><code>docker run hello-world\n</code></pre>"},{"location":"docker/docker_notes/","title":"Docker","text":""},{"location":"docker/docker_notes/#hacer-cat-a-fichero-dentro-de-contenedor","title":"Hacer cat a fichero dentro de contenedor","text":"<p>Esto es util para cuando hace falta el contenido de un fichero dentro del container por ejemplo luego de una instalacion de jenkins </p> <pre><code>docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n</code></pre> <p>Descargar una imagen oficial</p> <pre><code>-docker pull &lt;nombreImagen&gt;:&lt;tag&gt;\n</code></pre> <p>Mostrar contenedores corriendo (<code>-a</code> los lista todos)</p> <pre><code>-docker ps\n</code></pre> <p>Mostrar la historia de las capas de una imagen <code>--no-trunc</code> no trunca la descripcion de salida</p> <pre><code>-docker history -H &lt;nombreImagen&gt; --no-trunc\n</code></pre> <p>Construir imagen de dockerfile <code>tag</code> no es requerido</p> <pre><code>-docker build -t &lt;nombreimagen&gt;:&lt;tag&gt; .\n</code></pre> <p>especificar un dockerfile con distinto nombre se suma la bandera <code>-f &lt;nombrefichero&gt;</code></p> <p>Ver las imagenes que tienes en la pc</p> <pre><code>-docker images\n</code></pre> <p>Para filtrar imagenes dangling</p> <pre><code>-docker images -f dangling=true\n</code></pre> <p>Eliminar imagenes</p> <pre><code>-docker rmi (&lt;id&gt; || &lt;nombreImagen&gt;:&lt;tag&gt;)\n</code></pre> <p>Eliminar todas las imagenes dangling</p> <pre><code>-docker images -f dangling=true -q | xargs docker rmi\n</code></pre> <p>Correr container en base a una imagen</p> <ul> <li><code>-p &lt;puertoMiMaquina&gt;:&lt;puertoContenedor&gt;</code> mapea el puerto del container al host</li> <li><code>-d</code> correr el contenedor en segundo plano</li> <li><code>-t</code> terminal</li> <li><code>-i</code> interactive</li> <li><code>--name &lt;nombreContainer&gt;</code> definir nombre al contenedor</li> <li><code>-e \"&lt;nombreVariableEntorno&gt;=&lt;valor&gt;\"</code>  definir variable de entorno</li> <li><code>-m | --memory \"xxxmb\" | \"xxxgb\"</code> limitar la memoria que tendra como limite el contenedor</li> <li><code>-cpuset-cpus 0-3</code> cantidad de cpu que podra usar el contenerdor ej: si son 2 sera 0-1</li> </ul> <pre><code>-docker run -d -p 80:80 &lt;nombreImagen&gt;:&lt;tag&gt; \n</code></pre> <p>Borrar contenedor corriendo <code>-f</code> fuerza el borrado</p> <pre><code>-docker rm -fv &lt;nombreContenedor&gt;\n</code></pre> <p>Borrar todos los contenedores</p> <pre><code>-docker rm -fv $(docker ps -aq)\n</code></pre> <p>Detener un contenedor</p> <pre><code>-docker stop (&lt;nombreContainer&gt; || &lt;idContainer&gt;)\n</code></pre> <p>Iniciar contenedor</p> <pre><code>-docker start (&lt;nombreContainer&gt; || &lt;idContainer&gt;)\n</code></pre> <p>Reiniciar contenedor</p> <pre><code>-docker restart (&lt;nombreContainer&gt; || &lt;idContainer&gt;)\n</code></pre> <p>Cambiar nombre a un container corriendo</p> <pre><code>-docker rename &lt;nombreViejo&gt; &lt;nombreNuevo&gt;\n</code></pre> <p>Entrar a un container</p> <ul> <li><code>-t</code> terminal</li> <li><code>-i</code> interactivo</li> <li><code>-u root</code> para entrar como otro usuario en este caso root</li> </ul> <pre><code>-docker exec -ti (&lt;nombreContainer&gt; || &lt;idContainer&gt;) bash\n</code></pre> <p>Ver detalles de contendor corriendo</p> <pre><code>-docker inspect &lt;nombreContainer&gt;\n</code></pre> <p>Saber cuantos recursos esta usando un contenedor</p> <pre><code>-docker stats &lt;nombreContainer&gt;\n</code></pre> <p>Copiar ficheros dentro de un contenedor</p> <pre><code>-docker cp fichero &lt;container&gt;:&lt;ruta&gt;\n</code></pre> <p>Copiar ficheros de un contenedor al host</p> <pre><code>-docker cp &lt;container&gt;:&lt;ruta&gt; &lt;destino&gt;\n</code></pre> <p>Para sobreescribir el CMD de una imagen se pasa el comando luego del nombre de la imagen al crear un contenerdor</p> <pre><code>-docker run -d -p 8080:8080 centos python -m SimpleHTTPServer 8080\n</code></pre> <p>Listas volumenes</p> <pre><code>-docker volume ls\n</code></pre> <p>Crear Volumen</p> <pre><code>-docker volume create &lt;nombre&gt;\n</code></pre> <p>Borrar volumen</p> <pre><code>-docker volume -rm &lt;nombre&gt;\n</code></pre> <p>Listar volumenes dangling</p> <pre><code>-docker volume ls -f dangling=true\n</code></pre> <p>Eliminar volumenes dangling</p> <pre><code>-docker volume ls -f dangling=true -q | xargs docker volume rm\n</code></pre> <p>Ejecutar comando desde fuera del container</p> <pre><code>-docker exec &lt;nombreContainer&gt; bash -c \"&lt;comando a ejecutar&gt;\"\n</code></pre>"},{"location":"docker/docker_notes/#redes","title":"Redes","text":"<p>Listar las redes de docker</p> <pre><code>-docker network ls\n</code></pre> <p>Inspeccionar la red (bridge) network por defecto de docker</p> <pre><code>-docker network inspect bridge\n</code></pre> <p>Crear red en docker</p> <pre><code>-docker network create &lt;nombre&gt;\n</code></pre> <p>Definir propiedades ej</p> <pre><code>-d # driver por defecto bridge\n-subnet 172.142.10.0/24 \n--gateway 172.124.10.1\n</code></pre> <p>Crear contenedor en una red distinta a la por defecto</p> <pre><code>-dcoker run --network &lt;nombreRed&gt; -d --name &lt;nombreContenedor&gt; &lt;nombreImagen&gt;\n</code></pre> <p>Conectar contenedores en distintas redes</p> <pre><code>-docker network conect &lt;nombreRed&gt; &lt;nombreContenedorOtraRed&gt;\n</code></pre> <p>Esto le poner al <code>&lt;nombreContenedorOtraRed&gt;</code> otra interfaz de red conectada a <code>&lt;nombreRed&gt;</code></p> <p>Desconectar contenedor de una red</p> <pre><code>-docker network disconnect &lt;nombreRed&gt; &lt;nombreContenedor&gt;\n</code></pre> <p>Eliminar redes, si da error es porque tiene contenedores conectados</p> <pre><code>-docker network rm &lt;nombreRed&gt;\n</code></pre> <p>Asignar ip a contenedor</p> <pre><code>-docker run --network &lt;nombreRed&gt; --ip &lt;ip&gt;  -d --name &lt;nombreContainer&gt; &lt;imagen&gt;\n</code></pre>"},{"location":"docker/docker_notes/#salvar-en-fichero-una-imagen","title":"Salvar en fichero una imagen","text":"<p>Util cuando se quiere compartir una imagen sin depender de docker hub o un repositorio alojado en la nube, se comprime la imagen y se comparte como un fichero</p> <pre><code>docker save myusername/myproject:latest | gzip -c &gt; myproject_img_bak20141103.tgz\n</code></pre> <p>Forma de cargarla en la pc destino </p> <pre><code>gunzip -c myproject_img_bak20141103.tgz | docker load\n</code></pre>"},{"location":"ghost_docs/ok/","title":"Gosth","text":"<p>asdasdasd</p>"},{"location":"git/git/","title":"git","text":""},{"location":"git/git/#mostrar-grafica-de-commits-en-consola","title":"Mostrar grafica de commits en consola","text":"<pre><code>git log --branches --remotes --tags --graph --oneline --decorate\n</code></pre>"},{"location":"git/git/#cambios-locales-que-no-se-han-subido-al-server","title":"Cambios locales que no se han subido al server","text":"<pre><code>git log --branches --not --remotes=origin\n</code></pre> <p>por revisar</p> <pre><code>git log --reverse --pretty=format:'\"%h\":{%n \"parents\":\"%p\",%n \"message\":\"%s\",%n \"dat\":\"%cr\",%n \"name\":\"%an\"%n},'\n</code></pre>"},{"location":"git/git/#exportar-de-una-revision-a-otra-en-git","title":"Exportar de una revisi\u00f3n a otra en git","text":"<p>Este comando es sobre el cmd de windows</p> <pre><code>for /f \"usebackq tokens=*\" %A in (`git diff-tree -r --no-commit-id --name-only --diff-filter=ACMRT 441dc870f52ee04068a5aba6a2c4acd1d6840ffe HEAD`) do echo FA|xcopy \"%~fA\" \"C:\\git_changed_files\\%A\"\n</code></pre>"},{"location":"git/git/#guardar-credenciales","title":"Guardar credenciales","text":"<p>Se usa para que no las solicite cada vez que se realiza una operaci\u00f3n sobre los remotes, tener cuidado que se almacenan en texto plano en <code>/home/username/.git-credentials</code></p> <pre><code>git config --global credential.helper store\n</code></pre>"},{"location":"git/git/#definir-usuario-y-email-para-los-commits","title":"Definir usuario y email para los commits","text":"<p>Esta configuraci\u00f3n se alamcena en <code>/home/username/.gitconfig</code></p> <pre><code>git config --global user.email \"usuario@servidor.com\"\ngit config --global user.name \"Nombre Usuario\"\n</code></pre>"},{"location":"git/git/#cambiar-origen-de-repositorio-de-https-a-ssh","title":"Cambiar origen de repositorio de https a ssh","text":"<p>Para ver donde apuntan los origenes del repositorio se ejecuta el comando <code>git remote -v</code> el que tiene como salida algo como esto:</p> <pre><code>origin  https://usuario@servidor.org/url/del/repositorio.git (fetch)\norigin  https://usuario@servidor.org/url/del/repositorio.git (push)\n</code></pre> <p>Para cambiar la url de origen a <code>ssh</code> se realiza con el siguiente comando:</p> <pre><code>git remote set-url origin git@servidor.org:url/del/repositorio.git\n</code></pre> <p>Si volvieramos a ejecutar <code>git remote -v</code> veremos como nuestro origen a cambiado de <code>https</code> a <code>ssh</code></p> <pre><code>origin  git@servidor.org:url/del/repositorio.git (fetch)\norigin  git@servidor.org:url/del/repositorio.git (push)\n</code></pre> <p>Nota: en caso de querer cambiar de <code>ssh</code> a <code>https</code> ser\u00eda el mismo proceso pero cambiando la url</p>"},{"location":"git/tips/","title":"Tips","text":"<p>https://firstaidgit.io/</p>"},{"location":"git/tips/#merge-my-local-changes-with-another-branch","title":"Merge my local changes with another branch","text":""},{"location":"git/tips/#modify-undo-commit-after-push-reset","title":"modify undo commit after push reset","text":"<p>This can be done while a regular <code>merge</code>, and you should keep your merge history by making sure to use <code>--no-ff</code>, which means no fast forward. </p> <p>Switch to the branch you're merging against, make sure it's up to date, and merge: </p> <p><code>git merge &lt;the-other-branch&gt; --no-ff</code> </p> <p>You should get a commit message with the <code>merge X into Y branch</code>, anthen you can safely push your merge.&gt;</p>"},{"location":"git/tips/#undo-commit-before-pushing-changes","title":"Undo commit before pushing changes","text":""},{"location":"git/tips/#modify-undo-commit-local-before-push-reset","title":"modify undo commit local before push reset","text":"<p>If you made a commit that you wish to modify or erase entirely, the git <code>reset</code> command can be of help here. </p> <p><code>git reset HEAD~1 # undo last commit, keep the changes</code> </p> <p><code>git reset --hard HEAD~1 #undo last commit, erase the changes</code> </p> <p>Naturally, be careful when using the last option as your local files will be discarded! </p> <p>To keep the samcommit message:</p> <p><code>git commit -a -c ORIG_HEAD</code></p> <p>You will be prompted with your last commit message. </p> <p>Tips from hrbonz </p>"},{"location":"git/tips/#recover-a-deleted-branch","title":"Recover a deleted branch","text":""},{"location":"git/tips/#recover-deleted-branch","title":"recover deleted branch\"","text":"<p>By typing <code>git reflog</code>, you can grab the commit hash (SHA1) at the top of your deleted branch. Copy this <code>sha</code>, then use: </p> <p><code>git checkout &lt;sha&gt;</code> </p> <p>Once you've done that, recover the branch by typing: </p> <p><code>git checkout -b &lt;branchname&gt;</code></p> <p>git reflog</p>"},{"location":"git/tips/#display-the-commits-that-have-deleted-files","title":"Display the commits that have deleted files","text":""},{"location":"git/tips/#display-show-deleted-files-history","title":"display show deleted files history","text":"<p>You can quickly check which commits included deleted files by using the following command: </p> <p><code>git log --diff-filter=D --summary</code> </p> <p>This will show you the commits in which files were removed.</p>"},{"location":"git/tips/#rebase-my-branch-with-master","title":"Rebase my branch with master","text":""},{"location":"git/tips/#rebase-branch-against-master-changes","title":"rebase branch against master changes","text":"<p>To catch-up with the latest changes from master (or any other branch you started from), you can and should rebase against it. Say you're working on the <code>foobar</code> branch: </p> <p><code>git checkout foobar</code> </p> <p>Followed by a rebase: </p> <p><code>git rebase master</code> </p> <p>This applies the <code>origin</code> commits on top of master. When you're done with solving conflicts, continuby using <code>git rebase --continue</code>. At this point you can continue to work on your branch or merge it against master. </p> <p>Learn more about rebases</p>"},{"location":"git/tips/#restore-a-deleted-file","title":"Restore a deleted file","text":""},{"location":"git/tips/#restore-recover-deleted-file","title":"restore recover deleted file","text":"<p>If you deleted a file by accident, you can get it back by checking it out again: </p> <p><code>git checkout myFile.txt</code> </p> <p>If you need to restore a file from a certain point in time in your commit history, grab the hash of that commit and run: </p> <p><code>git checkout $commit~1 myFile.txt</code></p>"},{"location":"git/tips/#discard-local-file-changes","title":"Discard local file changes","text":""},{"location":"git/tips/#revert-changes-reset-file-specific-version","title":"revert changes reset file specific version","text":"<p>The easiest way to get rid of unwanted changes is by resetting a file or a folder to the current commit state. To do so, you can use </p> <p><code>git checkout myFile.txt</code> </p> <p>You can also reset a specific path instead: </p> <p><code>git checkout -- myPath</code></p>"},{"location":"git/tips/#clear-all-stashed-states","title":"Clear all stashed states","text":""},{"location":"git/tips/#clear-stash","title":"clear stash","text":"<p>You can clear all stashed states by using: </p> <p><code>git stash clear</code></p>"},{"location":"git/tips/#remove-untracked-files-and-folders","title":"Remove untracked files and folders","text":""},{"location":"git/tips/#remove-clear-untracked-files","title":"remove clear untracked files\"","text":"<p>To remove all untracked files from your working copy: </p> <p><code>git clean -f</code> </p> <p>To remove all untracked files and folders: </p> <p><code>git clean -fd</code> </p> <p>Tip: If you'd like to see first which files will be untracked before actually removing them, you can do a safe clean test by running: </p> <p><code>git clean -n</code></p> <p>git clean</p>"},{"location":"git/tips/#undo-a-commit-message-before-pushing","title":"Undo a commit message before pushing","text":""},{"location":"git/tips/#undo-commit-message-before-pushing-amend","title":"undo commit message before pushing amend","text":"<p>You can amend your commit message by typing <code>git commit --amend</code>, which will open your editor and allow you to make changes to the most recent commit message. </p> <p>You can also modify the message directly, by using: </p> <p><code>git commit --amend -m \\\"My new awesome message\\\"</code></p>"},{"location":"git/tips/#display-commits-by-author","title":"Display commits by author","text":""},{"location":"git/tips/#display-show-commits-by-author-name","title":"display show commits by author name\"","text":"<p>You can filter the commit history by author by using: </p> <p><code>git log --author=\\\"AuthorName\\\"</code></p> <p>git log author</p>"},{"location":"git/tips/#search-for-a-specific-commit-message-in-all-commits","title":"Search for a specific commit message in all commits","text":""},{"location":"git/tips/#search-commit-message-regexp-log-find","title":"search commit message regexp log find","text":"<p>You can search for a specific commit log by matching it on a regular expression. Use: </p> <p><code>git log --grep &lt;your-query&gt;</code></p>"},{"location":"git/tips/#undo-a-commit-message-after-pushing","title":"Undo a commit message after pushing","text":""},{"location":"git/tips/#undo-commit-message-after-pushing-amend","title":"undo commit message after pushing amend","text":"<p>This is a two-step process. You need to amend your commit message by using <code>git commit --amend</code>, and then you re-write your branch commit history by force pushing the commit: <code>git push &lt;remote&gt; &lt;branch&gt; --force</code> </p> <p>Warning: by force pushing, you can lose the remote branch commits if your local branch is not up to date, so be careful.</p>"},{"location":"git/tips/#combine-two-or-more-commits","title":"Combine two or more commits","text":""},{"location":"git/tips/#combine-commits-join-rebase","title":"combine commits join rebase\"","text":"<p>You will need to use an interactive rebase. If you're rebasing against master, start the process by typing <code>git rebase -i master</code>. However, if you're not rebasing against a branch, you'll need to rebase against your <code>HEAD</code>.</p> <p>If you want to squash your last 2 commits, you can use: </p> <p><code>git rebase -i HEAD~2</code>.</p> <p>You will then be prompted to folloinstructions to pick commits. If you wish to combine all your commits with the oldest first commit, leave the first line with <code>pick</code> and change the letter to <code>f</code> on all other commits. Learn more about rebases </p> <p>git rebase</p>"},{"location":"git/tips/#remove-a-file-from-git-but-keep-the-local-file","title":"Remove a file from git but keep the local file","text":""},{"location":"git/tips/#remove-file-from-git-delete","title":"remove file from git delete","text":"<p>This will remove the file your your git tracking, but keep your local copy:</p> <p><code>git rm --cached myfile.txt</code></p>"},{"location":"git/tips/#compare-an-old-revision-of-a-file","title":"Compare an old revision of a file","text":""},{"location":"git/tips/#compare-old-revision-file","title":"compare old revision file\"","text":"<p>You can easily view the contents of a file at a specific point in time by using: </p> <p><code>git show commitHash:myFile.txt</code></p> <p>git show</p>"},{"location":"git/tips/#squash-feature-branch-commits-to-merge-into-the-release-branch","title":"Squash feature branch commits to merge into the release branch","text":""},{"location":"git/tips/#squash-combine-commits-feature-merge-update-release","title":"squash combine commits feature merge update release\"","text":"<p>If you decide to merge and squash your commits, this will create a new commit but only in the release branch, therefore the history of the feature branch will remain intact. </p> <p>Here's an example on how to achieve this: </p> <p><code>git fetch origin</code> </p> <p><code>git checkout [release-branch]</code> </p> <p><code>git rebase origin/[release-branch]</code> </p> <p><code>git merge \u2014squas\u2014no-commit [feature-branch]</code> </p> <p><code>git commit -m 'Merge X into Y'</code> </p> <p>You'll end up with one commit only in your release branch, while keeping the feature history intact. </p> <p>Learn more about feature branches</p> <p>git squash</p>"},{"location":"git/tips/#reset-to-a-certain-commit-in-history","title":"Reset to a certain commit in history","text":""},{"location":"git/tips/#revert-reset-commit-certain-history","title":"revert reset commit certain history","text":"<p>If you don't care about your local changes, you can reset back to one commit back in time by doing a hard reset: </p> <p><code>git reset --hard HEAD~1</code> </p> <p>This will set the HEAD back by one commit. You can also do this using the commit hash instead.</p>"},{"location":"git/tips/#untrack-files-that-already-exist","title":"Untrack files that already exist","text":""},{"location":"git/tips/#untrack-remove-files-already-exist-there","title":"untrack remove files already exist there","text":"<p>If you want to untrack a file that already exists in the repo but would still like to keep it locally, commit your changes and run: </p> <p><code>git rm -r --cached</code> </p> <p>This will remove changed files from the staging area. Afterwards, just run a normal: </p> <p><code>git add .</code> and commit your changes.</p>"},{"location":"git/tips/#recover-a-deleted-tag","title":"Recover a deleted tag","text":""},{"location":"git/tips/#recover-undo-deleted-tag-accident","title":"recover undo deleted tag accident","text":"<p>If you want to recover a tag deleted by accident, start by grabbing it: </p> <p><code>git fsck --unreachable | grep tag</code> </p> <p>Once you found it, you can restore it: </p> <p><code>git update-ref refs/tags/NAME KEY</code> </p> <p>Source</p>"},{"location":"git/tips/#move-uncommited-changes-to-a-new-branch","title":"Move uncommited changes to a new branch","text":""},{"location":"git/tips/#create-new-branch-keep-changes","title":"create new branch keep changes","text":"<p>Too often we start changing files on a branch to fix something, only then realising we didn't create a new branch before. Luckily, this is as simple as creating a new branch: </p> <p><code>git checkout -b my-new-branch-name</code> </p> <p>This will bring any files from your current branch into the new one, which you can commit then.</p>"},{"location":"git/tips/#push-locally-created-branch-to-remote","title":"Push locally created branch to remote","text":""},{"location":"git/tips/#push-local-branch-remote","title":"push local branch remote","text":"<p>If you've created a local branch but now want it to be tracked on the remote you can run: </p> <p><code>git push -u origin my-new-branch-name</code> </p> <p>Now everyone can checkout to your branch.</p>"},{"location":"git/tips/#recover-stashed-changes","title":"Recover stashed changes","text":""},{"location":"git/tips/#recover-stash-stash-changes-stashed","title":"recover stash stash@ changes stashed\"","text":"<p>If you still have your changes stashed, you can apply them onto your branch by using <code>git stash apply</code>. You can run <code>git diff</code> to compare the differences. To get rid of the stash afterwards run: </p> <p><code>git stash drop</code> </p> <p>If you have more than one stash, find the one you need by running: </p> <p><code>git stash list</code> and applying it by referencing its index</p> <p><code>git stash@{1}</code> </p> <p>Keep in mind that this is zero-based (<code>stash@{0}</code> is the first one) </p> <p>Read more about stashes</p> <p>git checkout stash</p>"},{"location":"git/tips/#rename-my-local-and-remote-branch","title":"Rename my local and remote branch","text":""},{"location":"git/tips/#rename-wrong-name-branch","title":"rename wrong name branch","text":"<p>Let\u2019s say you have a \u201cfix-bug25\u201d branch, and you want to rename it to \u201chotfix-users\u201d. First, change the local branch: </p> <p><code>git branch -m fix-bug25 hotfix-users</code> </p> <p>Now, the remote branch: you can\u2019t rename the branch directly, so you\u2019ll need to delete it and push it again with the new name. Make sure no one else within your team is working on itDelete the branch: <code>git push origin --delete fix-bug25</code> </p> <p>And now let's push the new one: <code>git push origin hotfix-users</code></p>"},{"location":"git/tips/#undo-a-commit-after-pushing-it-to-master","title":"Undo a commit after pushing it to master","text":""},{"location":"git/tips/#undo-revert-commit-pushed-after-push","title":"undo revert commit pushed after push\"","text":"<p>This will revert one or more commits that you want to erase from the remote branch. You can either specify one by hash: </p> <p><code>git revert b712c3c</code> </p> <p>Revert only the second to last commit: </p> <p><code>git revert HEAD^</code> </p> <p>Or undo the last commit without creating a revert commit: </p> <p><code>git revert -n HEAD</code> </p> <p>Tip: <code>HEAD~1</code> is a shortcut to <code>HEAD^</code>, themean the same thing. Learn more about git revert</p> <p>git revert</p>"},{"location":"git/tips/#unstage-a-file","title":"Unstage a file","text":""},{"location":"git/tips/#unstage-file-from-remove-commit","title":"unstage file from remove commit","text":"<p>To unstage a file added by mistake, the easiest option would be: </p> <p><code>git reset HEAD unlovedFile.txt</code></p>"},{"location":"git/tips/#committed-to-the-wrong-branc-commit-wrong-branch-master-accident","title":"Committed to the wrong branc### commit wrong branch master accident","text":"<p>Start by switching to the new branch you forgot to create, by typing </p> <p><code>git checkout -b &lt;new-branch&gt;</code>. </p> <p>Switch back to the original branch now: </p> <p><code>git checkout &lt;original-branch&gt;</code> </p> <p>...and reset to the last commit you want to keep. </p> <p>To do so, you can type <code>git log</code> and save the hash (SHA1) of the last commit that you want to keep. Let'say this is <code>a31a45c</code>. </p> <p>Now you have to reset it: <code>git reset --hard a31a45c</code> and push this last forced reset. </p> <p>Warning: Make sure no one has committed to that original branch in the meantime, or changes might be lost!</p>"},{"location":"git/tips/#delete-remote-branch","title":"Delete remote branch","text":""},{"location":"git/tips/#delete-remote-branch_1","title":"delete remote branch","text":"<p>If you are positive this branch can be deleted, type: </p> <p><code>git push origin --delete branch-name</code></p> <p>ssuming that you have no changes that you want to save, this can be done with two easy commands. </p> <p>First let's get a fresh fetch of the remote: </p> <p><code>git fetch &lt;remoteBranchName&gt;</code>. </p> <p>Then let's tell git that we want to reset our local to the head of our remote branch like so: </p> <p><code>git reset --hard origin/&lt;localBranchName&gt;</code>. </p> <p>If you do hav### you wish to keep, you should check out a new branch and make a commit before resetting: <code>git commit -m \\\"just in case\\\"</code> </p> <p><code>git branch my-new-branch-name</code>\"</p>"},{"location":"git/tips/#reset-local-branch-to-match-remote","title":"Reset local branch to match remote","text":"<p>reset local branch to match remote</p>"},{"location":"git/tips/#show-number-of-commits-from-each-contributor","title":"Show number of commits from each contributor","text":""},{"location":"git/tips/#show-number-commits","title":"show number commits","text":"<p>Want to see how many commits everyone in your team has made? </p> <p><code>git shortlog -s -n</code> </p> <p>This will order the authors in decending order by number of commits made.</p>"},{"location":"git/tips/#show-all-the-commits-to-one-file","title":"Show all the commits to one file","text":""},{"location":"git/tips/#show-all-commits-file","title":"show all commits file\"","text":"<p>Ever wanted to see all the commits made to a single file? </p> <p><code>git log --follow -p -- myfile</code> </p> <p>This will show all the commits made to a single file. The <code>--follow</code> argument ensures that we can see commits made to that file even if it was under a different file name at the time. </p> <p>Omit the <code>-p</code> to just see the commit messages and not the commicontent.</p> <p>git log follow</p>"},{"location":"git/tips/#use-command-aliass-in-your-cli","title":"Use command alias's in your CLI","text":""},{"location":"git/tips/#command-alias","title":"command alias","text":"<p>Getting fed up of typing <code>git status</code>? Well we can easily alias that command to something slightly quicker to type within git. </p> <p><code>git config --global alias.st status</code> </p> <p>Now all we have to type is <code>git st</code> </p> <p>We can take it a step further by aliasing more complicated commands to an alias: </p> <p><code>git config --global alias.logme 'log ---author=Rob'</code> </p> <p>Now we've aliased <code>git logme</code> to show all of our commits.</p>"},{"location":"git/tips/#mark-a-conflict-file-as-resolved","title":"Mark a conflict file as resolved","text":""},{"location":"git/tips/#conflict-mark-resolve-file","title":"conflict mark resolve file\"","text":"<p>To mark a file (or several) conflicted files as resolved so you can push the changes up, normally add these files: </p> <p><code>git add &lt;file&gt;</code> </p> <p>You can then type <code>git commit</code> to solve these conflicts and push the changes up. </p> <p>Suggested by Robert W\u00fcnsch.</p> <p>git add</p>"},{"location":"git/tips/#display-all-unpushed-commits","title":"Display all unpushed commits","text":""},{"location":"git/tips/#display-show-unpushed-commits","title":"display show unpushed commits\"","text":"<p>To view all the commits that are yet to be pushed to all branches, use the following command: </p> <p><code>git log --branches --not --remotes</code> </p> <p>Alternatively, you can also use: </p> <p><code>git log origin/master..HEAD</code></p> <p>git log</p>"},{"location":"git/tips/#rename-a-git-tag","title":"Rename a git tag","text":""},{"location":"git/tips/#rename-tag-name-change","title":"rename tag name change\"","text":"<p>To rename an existing tag: </p> <p><code>git tag &lt;newTag&gt; &lt;oldTag&gt;</code> </p> <p><code>git tag -d &lt;oldTag&gt;</code> </p> <p><code>git push origin :refs/tags/&lt;oldTag&gt;</code> </p> <p><code>git push --tags</code></p> <p>git tag</p>"},{"location":"git/tips/#remove-old-remote-git-branches","title":"Remove old remote git branches","text":""},{"location":"git/tips/#remove-old-prune-branch","title":"remove old prune branch\"","text":"<p>If a branch is removed on the remote, you can delete it from the local refs by using the <code>git-remote prune &lt;name&gt;</code> feature. </p> <p>This will delete the stale remote-tracking branch under , where the stale branch has already been removed from the remote repository referenced by , but are still locally available in <code>remotes/&lt;name&gt;</code>. <p>git remote prune"},{"location":"git/tips/#update-a-specific-submodule","title":"Update a specific submodule","text":""},{"location":"git/tips/#update-submodule","title":"update submodule\"","text":"<p>To update a specific submodule in your repository, you should append the path to your submodule: </p> <p><code>git submodule update --remote --merge &lt;path&gt;</code> </p> <p>Suggested by Wouter Peschier.</p> <p>git submodule remote merge</p>"},{"location":"git/tips/#stage-deleted-files","title":"Stage deleted files","text":""},{"location":"git/tips/#stage-commit-deleted-files-folders","title":"stage commit deleted files folders\"","text":"<p>To stage for commit files or folders that you have deleted locally, you can use: </p> <p><code>git add -u</code> </p> <p>If you only want to stage the current path you're in, use: </p> <p><code>git add -u .</code></p> <p>git add -u</p>"},{"location":"git/tips/#move-recent-commits-to-a-new-branch","title":"Move recent commits to a new branch","text":""},{"location":"git/tips/#move-recent-commits-to-new-branch-last","title":"move recent commits to new branch last\"","text":"<p>Say you want to move the last 2 commits into a new, separate branch. You can do this by creating the branch, rolling back 2 commits and checking out the branch. So: </p> <p><code>git branch &lt;branch-name&gt;</code> </p> <p><code>git reset --hard HEAD~2 # this rolls back 2 commits</code> </p> <p><code>git checkout &lt;branch-name&gt;</code> </p> <p>Note that by HARD resetting you will lose any uncommitework. So make sure that everything is committed!</p> <p>git reset branch</p>"},{"location":"git/tips/#show-all-remote-branches","title":"Show all remote branches","text":""},{"location":"git/tips/#show-branches-remote-display","title":"show branches remote display\"","text":"<p>To view a list of all tracked and untracked remote branches, use: </p> <p><code>git remote show origin</code></p> <p>git add -u</p>"},{"location":"git/tips/#list-all-files-changed-in-a-commit","title":"List all files changed in a commit","text":""},{"location":"git/tips/#show-branches-remote-display_1","title":"show branches remote display\"","text":"<p>To view just the file names, use: </p> <p><code>git show --name-only SHA1</code></p> <p>Also view the status:</p> <p><code>git show --name-status SHA1</code></p> <p>git show</p>"},{"location":"git/tips/#checkout-a-file-from-a-different-branch","title":"Checkout a file from a different branch","text":""},{"location":"git/tips/#checkout-file-different-branch","title":"checkout file different branch\"","text":"<p>You can checkout a single file from a different branch without switching to it. Use: </p> <p><code>git checkout &lt;branch_name&gt; -- &lt;file_path&gt;</code></p> <p>git checkout</p>"},{"location":"git/tips/#show-contents-of-a-file-at-a-specific-commit","title":"Show contents of a file at a specific commit","text":""},{"location":"git/tips/#show-contents-of-a-file-at-a-particular-commit","title":"Show contents of a file at a particular commit\"","text":"<p>You can get a file\u2019s contents out from a specific commit. Use: </p> <p><code>git show &lt;treeish&gt;:&lt;file&gt;</code> </p> <p>Source</p> <p>git show</p>"},{"location":"git/tips/#clone-a-repository-without-getting-the-entire-history","title":"Clone a repository without getting the entire history","text":""},{"location":"git/tips/#git-clone","title":"git clone\"","text":"<p>You're looking for a shallow clone. This will only fetch the latest history and not all the objects in the repository, which might take a long time while not necessary. </p> <p><code>git clone &lt;repository URL&gt; --depth 1</code> </p> <p>The <code>depth</code> parameter allows you to specify how deep you want to go: </p> <p><code>git clone &lt;repository URL&gt; --depth 5</code></p> <p>clone shallow depth</p>"},{"location":"git/tips/#add-a-remote-repository","title":"Add a remote repository","text":""},{"location":"git/tips/#remote-add-origin","title":"remote add origin\"","text":"<p>Before you can push to a remote, you first need to add one. When you clone a repository, git will automatically add the URL you cloned from as the <code>origin</code> remote. To add one yourself, use: </p> <p><code>git remote add &lt;remote eame&gt; &lt;repository URL&gt;</code> </p> <p>For example: </p> <p><code>git remote add upstream https://github.com/magalhini/firstaidgit.git</code></p> <p>git remote add</p>"},{"location":"git/tips/#list-all-remote-branches","title":"List all remote branches","text":""},{"location":"git/tips/#remote-branch-list-all","title":"remote branch list all\"","text":"<p>To list all remotes: </p> <p><code>git remote</code> </p> <p>This will only show the names of the remotes. To view more information, use <code>git remote show</code>.</p> <p>git remote</p>"},{"location":"git/tips/#show-information-about-a-remote-branch","title":"Show information about a remote branch","text":""},{"location":"git/tips/#remote-branch-show-information","title":"remote branch show information\"","text":"<p>To show information about a remote branch, such as fetch and push URLs, tracked branches and HEAD, use: </p> <p><code>git remote show origin</code> </p> <p>Where <code>origin</code> is your remote.</p> <p>git remote show</p>"},{"location":"git/tips/#delete-specified-tag","title":"Delete specified tag","text":""},{"location":"git/tips/#delete-tag-for-local-and-remote","title":"delete tag for local and remote\"","text":"<p>You can delete a specific tag locally using: </p> <p><code>git tag -d [tag name]</code> </p> <p>Remove tag from remote using: </p> <p><code>git push [remote name] :refs/tags/[tag name]</code> </p> <p>git tag</p> <p>## Rename a remote</p>"},{"location":"git/tips/#rename-a-remote","title":"rename a remote\"","text":"<p>To rename a remote: </p> <p><code>git remote rename &lt;oldRemote&gt; &lt;newRemote&gt;</code> </p> <p>You can verify your changes by listing the remotes: </p> <p><code>git remote</code> </p> <p>Source</p> <p>git remote rename  <p>{</p>"},{"location":"git/tips/#remove-a-submodule","title":"Remove a submodule","text":""},{"location":"git/tips/#remove-submodule-rm-delete","title":"remove submodule rm delete\"","text":"<p>To remove a submodule use: </p> <p><code>git rm &lt;submodule_path&gt;</code></p> <p>In case you later want to add a submodule with the same name, you will also need to use:</p> <p><code>rm -rf .git/modules/&lt;submodule_path&gt;</code></p> <p>git rm</p>"},{"location":"git/tips/#compare-commit-log-difference-between-2-branches","title":"Compare commit log difference between 2 branches","text":""},{"location":"git/tips/#commit-log-difference-between-2-branches","title":"commit log difference between 2 branches\"","text":"<p>You can compare difference in commit log between 2 branches by: </p> <p><code>git log [branch one]..[branch two]</code> </p> <p>Example to compare the staging and development branch logs: </p> <p><code>git log staging..development</code> </p> <p>git log</p>"},{"location":"git/tips/#list-untracked-files-within-untracked-directories","title":"List untracked files within untracked directories","text":""},{"location":"git/tips/#list-untracked-files-within-untracked-directories_1","title":"list untracked files within untracked directories\"","text":"<p>To list untracked files within untracked directories: </p> <p><code>git status -u</code> </p> <p>By default, git will not show files within directories that are untracked.</p> <p>git status</p>"},{"location":"links/api/","title":"api","text":"<ul> <li>https://unsplash.com/developers</li> </ul>"},{"location":"links/api/#directorio-de-apis","title":"Directorio de api's","text":"<ul> <li> <p>https://rapidapi.com/collection/stock-photo-api</p> </li> <li> <p>Api para probar frontend con datos reales https://reqres.in/</p> </li> </ul>"},{"location":"links/images/","title":"Images","text":"<ul> <li>Pexels</li> <li>Pixabay</li> <li>Unsplash</li> <li>Morguefile</li> <li>Foter</li> <li>123rf</li> <li>Wallhaven</li> <li>Undraw</li> <li>Flaticon</li> <li>Freepik</li> <li>svgporn</li> </ul>"},{"location":"links/others/","title":"Others links","text":"<ul> <li> <p>Zedge</p> </li> <li> <p>Linuxize</p> </li> <li> <p>https://tldr.sh/</p> </li> <li> <p>https://devhints.io/</p> </li> <li> <p>https://crontab.guru/</p> </li> <li> <p>Consultar IP p\u00fablica http://www.vermiip.es/</p> </li> <li> <p>Compartir ficheros https://pixeldrain.com/apps</p> </li> <li> <p>P\u00e1gina de art\u00edculos de linux https://es.linux-console.net/</p> </li> </ul>"},{"location":"operating_systems/linux/cdpath/","title":"CDPATH","text":"<p>CDPATH es una variable de entorno. Muy parecida a PATH que contiene muchas rutas diferentes concatenadas usando ':'</p>"},{"location":"operating_systems/linux/cdpath/#uso","title":"Uso","text":"<p>Digamos, por ejemplo, que el usuario accede con frecuencia a algunos directorios presentes en un directorio <code>\"X\"</code>. Cada vez que el usuario quiere llegar a cualquiera de estos directorios presentes en <code>\"X\"</code>, la mayor\u00eda de las veces lo atraviesa dando la ruta absoluta, lo que lleva poco tiempo si tiene que encontrarla. Qu\u00e9 bueno ser\u00eda si pudi\u00e9ramos hacer <code>\"cd\"</code> en el directorio en particular como si ese directorio que est\u00e1 buscando estuviera justo debajo de su directorio actual. Esto es lo que logra <code>CDPATH</code>.</p> <p>Normalmente, cuando se da el comando <code>cd</code>, verifica el nombre del directorio en el directorio actual y arroja un error si no se encuentra, de lo contrario, atraviesa el directorio. Si se establece el <code>CDPATH</code>, el comando <code>\"cd\"</code> comienza a buscar el directorio en la lista de directorios presentes en la variable <code>CDPATH</code> y luego hace que el directorio cambie de manera apropiada.</p>"},{"location":"operating_systems/linux/cdpath/#como-definir-la-varialbe-cdpath","title":"Como definir la varialbe CDPATH","text":"<p>Definir la variable <code>CDPATH</code> es exactamente igual que con la variable <code>PATH</code>, puedes agregar mas de un directorio de entrada separando las rutas por <code>:</code>, por ejemplo:</p> <pre><code>$ export CDPATH=\".:/home/guru:/usr\"\n</code></pre> <p>Para que tengas estos cambios cada vez que inicies sesi\u00f3n deberias ubicar la exportaci\u00f3n dentro de el fichero <code>~/.bash_profile</code> o <code>~/.profile</code></p>"},{"location":"operating_systems/linux/estructura_de_directorios/","title":"estructura-de-directorios","text":"<p>Fuente https://geekland.eu/estructura-de-directorios-en-linux/</p>"},{"location":"operating_systems/linux/bash/ps1/","title":"PS1","text":"<p>Cuando lo ejecutamos de forma interactiva, y cuando est\u00e1 preparado para leer un comando, bash nos muestra el indicador primario <code>PS1</code>. El indicador secundario <code>PS2</code> aparece cuando necesita m\u00e1s informaci\u00f3n para completar un comando.</p> <p>Bash nos permite personalizar las cadenas de mensajes, insertando barra invertida y caracteres especiales. En la siguiente tabla vemos como se decodifican los caracteres.</p> Car\u00e1cter Que mensaje insertan \\a an ASCII bell character (07) \\d the date in \"Weekday Month Date\" format (e.g., \"Tue May 26\") \\D the format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation. The braces are required \\e an ASCII escape character (033) \\h the hostname up to the first `.' \\H the hostname \\j the number of jobs currently managed by the shell \\l the basename of the shell's terminal device name \\n newline \\r carriage return \\s the name of the shell, the basename of $0 (the portion following the final slash) \\t the current time in 24-hour HH:MM:SS format \\T the current time in 12-hour HH:MM:SS format \\@ the current time in 12-hour am/pm format \\A the current time in 24-hour HH:MM format \\u the username of the current user \\v the version of bash (e.g., 4.3) \\V the release of bash, version + patch level (e.g., 4.3.48) \\w the current working directory, with $HOME abbreviated with a tilde (uses the value of the PROMPT_DIRTRIM variable) \\W the basename of the current working directory, with $HOME abbreviated with a tilde ! the history number of this command # the command number of this command \\$ if the effective UID is 0, a #, otherwise a $ \\nnn the character corresponding to the octal number nnn | \\ a backslash [ begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt"},{"location":"operating_systems/linux/gnome/extensions/","title":"Extensions","text":"<p>Weather In The Clock - GNOME Shell Extensions https://extensions.gnome.org/extension/1380/weather-in-the-clock/</p> <p>gTile - GNOME Shell Extensions https://extensions.gnome.org/extension/28/gtile/</p> <p>Random Wallpaper - GNOME Shell Extensions https://extensions.gnome.org/extension/1040/random-wallpaper/</p>"},{"location":"operating_systems/ubuntu/clipboard/","title":"Access Clipboard From Terminal In Ubuntu Using Xclip!","text":"<p>If You are going back and forth between terminal and any other application, accessing system clipboard contents from command line will be invaluable.</p> <p>If You are using mac, there are inbuilt commands pbcopy &amp; pbpaste. But in Ubuntu these are not available. You need to install a small utility called xclip. Go ahead and install it.</p> <pre><code>sudo apt-get install xclip\n</code></pre> <p>Now, You can copy any text ( or the output one command ) into the clipboard using xclip. To copy contents of fruits.txt to clipboard,</p> <pre><code>cat fruits.txt | xclip\n</code></pre> <p>If You want to see the contents of clipboard, You can use</p> <pre><code>xclip -o\n</code></pre> <p>This copy and paste will work only in the terminal, If You switch to another application and try to paste there, it wont work.</p> <p>If You want to paste in another application, You need to copy like this</p> <pre><code>cat fruits.txt | xclip -selection clipboard\n</code></pre> <p>Now, You can switch to any other application &amp; You can paste (CTRL + V) the contents.</p> <p>Tip: Instead of typing all of this everytime, You can setup alias in .bashrc file</p> <pre><code>alias c='xclip -selection clipboard'\nalias v='xclip -o'\n</code></pre> <p>Now You can easily copy the contents like this</p> <pre><code>cat fruits.txt | c\n</code></pre>"},{"location":"operating_systems/ubuntu/create_a_self_signed_ssl_certificate_for_apache/","title":"ssl","text":"<p>https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04-es</p>"},{"location":"operating_systems/ubuntu/lamp/","title":"lamp","text":"<p>https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-ubuntu-18-04</p>"},{"location":"operating_systems/ubuntu/my_config/","title":"Tools and config's","text":""},{"location":"operating_systems/ubuntu/my_config/#used-tools","title":"Used tools","text":"<ul> <li>Flameshot</li> <li>Tweaks</li> <li>Zoom</li> <li>Dbeaver Community</li> <li>VS Code</li> <li>Firefox Developer Edition</li> <li>Guake</li> <li>Google Chrome</li> <li>Ranger</li> <li>Synaptic</li> <li>Gparted</li> <li>xclip</li> <li>docker</li> <li>docker-compose</li> <li>nvm</li> <li>openssh-server</li> <li>apache2</li> <li>mysql-server</li> <li>git</li> <li>Fonts Fira Code (<code>sudo apt install fonts-firacode</code>)</li> </ul>"},{"location":"operating_systems/ubuntu/my_config/#extensions","title":"Extensions","text":"<ul> <li>[x] Clipboard indicator</li> <li>[x] Dash to panel</li> <li>[ ] Desktop icons</li> <li>[x] Refresh wifi connections</li> <li>[x] Resource monitor</li> <li>[ ] Ubuntu appindicators</li> <li>[ ] Ubuntu dock</li> <li>[x] User themes</li> <li>[ ] Vitals</li> </ul> <p>Revisar (instalaci\u00f3n de las extenciones seg\u00fan el n\u00famero en la web)</p> <p>wget -q -O gnome-shell-extension-installer \"https://github.com/brunelli/gnome-shell-extension-installer/raw/master/gnome-shell-extension-installer\" 1&gt;/dev/null chmod +x gnome-shell-extension-installer sudo cp gnome-shell-extension-installer /usr/local/bin/</p>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/","title":"Rename several files at once, in batch, from console","text":"<p>Muchas veces tenemos un mont\u00f3n de ficheros y queremos modificar en lote su nombre de archivo por alguna circunstancia, a\u00f1adir texto, suprimir texto, reemplazar alg\u00fan car\u00e1cter por otro... y nos llevar\u00eda mucho tiempo ir editando uno a uno cuando lo que queremos es hacer la misma edici\u00f3n para todos. Para ello podemos renombrar todos los archivos en lote, todos a la vez, usando desde una consola Linux el comando rename con expresiones regulares que nos permitan reemplazar lo que necesitemos. Mostraremos caracter\u00edsticas, algunos ejemplos y la explicaci\u00f3n de expresiones regulares para usar con rename:</p> <pre><code>Usage:\n\n    rename [ -h|-m|-V ] [ -v ] [ -n ] [ -f ] [ -e|-E *perlexpr*]*|*perlexpr* [ *files* ]\n</code></pre> <p>Please note that the rename command is part of the util-linux package and can be installed on a Debian or Ubuntu Linux, using the following syntax:</p> <pre><code>$ sudo apt-get install renameutils\n</code></pre>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/#caracteristicas","title":"Caracter\u00edsticas:","text":"<p>Par\u00e1metros del comando rename (poner a continuaci\u00f3n del nombre del comando):</p> <ul> <li><code>-v</code> (Verbose: modo detallado, nos saca en pantalla lo que se va haciendo en el proceso)</li> <li><code>-n</code> (No Action: no realiza la acci\u00f3n, solo nos muestra lo que har\u00eda, es importante poner este par\u00e1metro junto con <code>-v</code> la primera vez que ejecutamos para comprobar que el resultado que vamos a obtener es el que queremos)</li> <li><code>-f</code> (Force: sobrescribe los ficheros existentes)</li> <li><code>*.*</code> para que trate todos los archivos con extensi\u00f3n del directorio</li> <li><code>\\</code> Localiza caracteres especiales tipo <code>[ , {, (, -, _, \".\", \u2026</code></li> </ul>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/#ejemplos","title":"Ejemplos","text":"<p>1) A\u00f1adir algo tras una parte del nombre del archivo que es com\u00fan en todos los ficheros. Ejemplo:</p> <p><code>imagenXXXX.jpg</code> por <code>imagen_NEW_XXXX.jpg</code></p> <pre><code># rename -v -n 's/imagen/imagen_NEW_/' *.jpg\n</code></pre> <p>2) Renombrar un grupo de im\u00e1genes con nombres diferentes. Si tenemos un grupo de im\u00e1genes (por ejemplo PNG) a las que les queremos a\u00f1adir una informaci\u00f3n en la parte final del nombre de la imagen antes de la extensi\u00f3n. Ejemplo: <code>nombreimagen.png</code> por <code>nombreimagen_150x150.png</code></p> <pre><code># rename -v -n 's/\\.png/\\_150x150.png/' *.png\n</code></pre> <p>3) Vamos a suponer que queremos reemplazar los guiones bajos por guiones medios (\"_\" por \"-\") en los nombres de nuestros archivos de un directorio determinado.</p> <pre><code># rename -v -n 's/_/-/' *.jpg\n</code></pre> <p>Podemos ejecutar repetidamente por si hay varios guiones bajos en el nombre del archivo o utilizar expresiones regulares de repetici\u00f3n tipo {m} {n}...</p> <p>4) A\u00f1adir texto al inicio del nombre del fichero. Con el car\u00e1cter ^ le indicamos al comando rename que se sit\u00fae en el comienzo del nombre del fichero y ah\u00ed inserte o ejecute la segunda parte. Ejemplo:</p> <pre><code>leccion 1.doc,\nleccion 2.doc ...\n</code></pre> <p>por</p> <pre><code>tema - leccion 1.doc,\ntema - leccion 2.doc ...\n</code></pre> <pre><code># rename -v -n 's/^/tema \u2013 /' *.doc\n</code></pre> <p>5) Si queremos eliminar varios caracteres antes de un punto de corte determinado. Ejemplo:</p> <pre><code>texto1_abc_001_small.jpg,\ntexto2_abc_002_small.jpg,\ntexto3_abc_003_small.jpg\n</code></pre> <p>por</p> <pre><code>texto1_small.jpg,\ntexto2_small.jpg,\ntexto3_small.jpg\n</code></pre> <p>Utilizamos para el corte la cadena \"_small\" y le decimos que nos elimine los 8 caracteres (\\w) anteriores, o los reemplace por lo que indiquemos en la segunda parte del comando rename.</p> <pre><code># rename -v -n 's/\\w{8}\\_small/_small/' *.jpg\n</code></pre> <p>5b) Si queremos reemplazar desde un punto determinado de corte, pero respetando un n\u00famero concreto de caracteres num\u00e9ricos antes de la parte donde se produce el corte. Para este caso usamos el elemento \"$1\" en la cadena de la parte derecha, para que nos coja esa variable obtenida de la parte izquierda.  Viendo el ejemplo se entender\u00e1 mejor. Ejemplo:</p> <pre><code>texto1_uno001_small.jpg,\ntexto2_otro002_small.jpg,\ntexto3_cualquiera003_small.jpg ...\n</code></pre> <p>por</p> <pre><code>texto1_uno_ADD-001_small.jpg,\ntexto2_otro_ADD-002_small.jpg,\ntexto3_cualquiera_ADD-003_small.jpg ...\n</code></pre> <p>Utilizamos para el corte la cadena \"_small\" y le decimos que nos guarde los 3 caracteres num\u00e9ricos (\\d) anteriores (001, 002, 003...) utilizando el $1 en la segunda parte del comando (la expresi\u00f3n de la derecha) Nos a\u00f1adir\u00e1 o modificara lo indicado en la segunda parte del comando rename justo antes de esos 3 caracteres reservados antes del corte.</p> <pre><code># rename -v -n 's/(\\w{3})\\_small/_ADD\u2013$1_small/' *.jpg\n</code></pre> <p>6) Cambiar may\u00fasculas y min\u00fasculas. Ejemplo: <code>mi_fichero.txt</code> por <code>MI_FICHERO.TXT</code></p> <pre><code># rename -v -n 'y/a-z/A-Z/' *.txt\n</code></pre> <p>7) Eliminar del nombre del fichero caracteres especiales que no est\u00e1n entre la letra a y la z (a-z) . Dejando en el nombre del fichero solo caracteres alfanum\u00e9ricos. Ejemplo: <code>mi-fichero.txt</code> por <code>mifichero.txt</code></p> <pre><code># rename -v -n 'v/[^a-z]//' *.*\n</code></pre> <p>Para cambiar varios caracteres lo ejecutamos varias veces. Ejemplo: <code>mi-fichero-con-varios-caracteres.txt</code> por <code>mificheroconvarioscaracteres.txt</code> lo ejecutaremos 4 veces.</p>"},{"location":"operating_systems/ubuntu/rename_several_files_from_console/#expresiones-regulares","title":"Expresiones regulares","text":"<p>A continuaci\u00f3n dejo un listado explicando (en ingl\u00e9s) las expresiones regulares que se pueden utilizar con este comando rename:</p> <ul> <li><code>^</code> matches the beginning of the line</li> <li><code>$</code> matches the end of the line</li> <li><code>.</code> Matches any single character</li> <li><code>(character)*</code> match arbitrarily many occurences of (character)</li> <li><code>(character)?</code> Match 0 or 1 instance of (character)</li> <li><code>[abcdef]</code> Match any character enclosed in [] (in this instance, a b c d e or f) ranges of characters such as [a-z] are permitted. The behaviour of this deserves more description.</li> <li><code>[^abcdef]</code> Match any character NOT enclosed in [] (in this instance, any character other than a b c d e or f)</li> <li><code>(character){m,n}</code> Match m-n repetitions of (character)</li> <li><code>(character){m,}</code> Match m or more repetitions of (character)</li> <li><code>(character){,n}</code> Match n or less (possibly 0) repetitions of (character)</li> <li><code>(character){n}</code> Match exactly n repetitions of (character)</li> <li><code>(expression)</code> Group operator.</li> <li><code>expression1|expression2</code> Matches expression1 or expression 2. Works with GNU sed, but this feature might not work with other forms of sed.</li> <li><code>\\w</code> matches any single character classified as a \u201cword\u201d character (alphanumeric or \u201c_\u201d)</li> <li><code>\\W</code> matches any non-\u201cword\u201d character</li> <li><code>\\s</code> matches any whitespace character (space, tab, newline)</li> <li><code>\\S</code> matches any non-whitespace character</li> <li><code>\\d</code> matches any digit character, equiv. to [0-9]</li> <li><code>\\D</code> matches any non-digit character</li> </ul>"},{"location":"operating_systems/ubuntu/top_process/","title":"Procesos","text":"<pre><code>top -b -n1 -c -o %MEM |head -n 20\n</code></pre> <pre><code>ps aux --sort -%mem\n</code></pre>"},{"location":"operating_systems/ubuntu/ubuntu_splash_screen/","title":"Disable splash screen","text":"<p>How to disable the boot splash screen, and only show kernel and boot text instead?</p> <p>Yes. Edit <code>/etc/default/grub</code> (using gksu <code>gedit /etc/default/grub</code>), and remove the <code>\"quiet splash\"</code> from the Linux command line:</p> <p>Here's what it looks like by default:</p> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"\n</code></pre> <p>Make it look like this:</p> <pre><code>GRUB_CMDLINE_LINUX_DEFAULT=\"\"\n</code></pre> <p>After this run <code>sudo update-grub2</code></p> <p>Also from the GRUB menu, if you want to do this temporarily, you can hit <code>E</code> on a line to edit it, then <code>Ctrl+X</code> to boot the kernel line.</p> <p>Make sure you don't have <code>plymouth-theme-ubuntu-text</code> package installed.</p>"},{"location":"operating_systems/windows/enable_version_selection_in_the_installer/","title":"Habilitar selecci\u00f3n de la versi\u00f3n de windows en el proceso de instalaci\u00f3n","text":"<p>A\u00f1adir un archivo llamado <code>\"ei.cfg\"</code> a la iso o USB creado con la herramienta de creaci\u00f3n de medios para que me permita elegir al inicio de la instalaci\u00f3n que versi\u00f3n quiero instalar.</p> <p>El archivo en concreto se llama <code>\"ei.cfg\"</code> y hay que copiarlo dentro de la carpeta <code>\"Source\"</code> que hay en la iso o USB creados con la herramienta de creaci\u00f3n de medios.</p> <p>Este archivo se puede crear f\u00e1cilmente. Simplemente hay que abrir un bloc de notas y copiar lo siguiente:</p> <pre><code>[Channel]\nRetail\n</code></pre> <p>Una vez copiado eso hay que guardar el archivo con el nombre <code>\"ei.cfg\"</code> fij\u00e1ndose que se queda con extensi\u00f3n CFG y que no se llama <code>\"ei.cfg.txt\"</code></p> <p>Una vez se tiene creado este archivo <code>\"ei.cfg\"</code> se copia en la carpeta source como dec\u00eda antes y cuando se inicie la instalaci\u00f3n limpia de Windows 10 te preguntar\u00e1 que versi\u00f3n quieres instalar.</p>"},{"location":"operating_systems/windows/install_net_framework/","title":"Install .NET Framework 3.5 via DISM","text":"<p>Para instalar el .net framework desde el iso de windows montar la imagen en una torre virtual o introducir el disco en la unidad \u00f3ptica, luego desde una terminal ejecutar el siguiente comando:</p> <pre><code>Dism /online /enable-feature /featurename:NetFX3 /All /Source:%setupdrv%:\\sources\\sxs /LimitAccess\n</code></pre> <p>Sustituyendo <code>%setupdrv%</code> por la letra de la unidad donde esta montada la imagen o unidad \u00f3ptica.</p> <p>Otra forma de realizarlo es copiando el siguiente c\u00f3digo en un fichero con la extenci\u00f3n cmd y ejecutarlo desde una terminal. Este se encarga de buscar una a una por cada una de las unidades disponibles hasta que encuentra donde se encuentra  la instalaci\u00f3n de windows y comienza a instalar el .net framework.</p> <pre><code>@echo off\nTitle .NET Framework 3.5 Offline Installer\nfor %%I in (D E F G H I J K L M N O P Q R S T U V W X Y Z) do if exist \"%%I:\\\\sources\\install.wim\" set setupdrv=%%I\nif defined setupdrv (\necho Found drive %setupdrv%\necho Installing .NET Framework 3.5...\nDism /online /enable-feature /featurename:NetFX3 /All /Source:%setupdrv%:\\sources\\sxs /LimitAccess\necho.\necho .NET Framework 3.5 should be installed\necho.\n) else (\necho No installation media found!\necho Insert DVD or USB flash drive and run this file once again. \necho.\n)\npause\n</code></pre>"},{"location":"programming/bash/30_bash_examples/","title":"Bash examples","text":"<p>Source https://linuxhint.com/30_bash_script_examples/</p>"},{"location":"programming/bash/30_bash_examples/#first-bash-program","title":"First BASH Program","text":"<p>You can run bash script from the terminal or by executing any bash file. Run the following command from the terminal to execute a very simple bash statement. The output of the command will be <code>\u2018Hello World\u2019</code>.</p> <pre><code>$ echo \"Hello World\"\n</code></pre> <p>Open any editor to create a bash file. Here, nano editor is used to create the file and filename is set as <code>\u2018First.sh\u2019</code>.</p> <pre><code>$ nano First.sh\n</code></pre> <p>Add the following bash script to the file and save the file.</p> <pre><code>#!/bin/bash\necho \"Hello World\"\n</code></pre> <p>You can run bash file by two ways. One way is by using bash command and another is by setting execute permission to bash file and run the file. Both ways are shown here.</p> <pre><code>$ bash First.sh\n</code></pre> <p>Or,</p> <pre><code>$ chmod a+x First.sh\n$ ./First.sh\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#echo-command","title":"echo command","text":"<p>You can use echo command with various options. Some useful options are mentioned in the following example. When you use <code>\u2018echo\u2019</code> command without any option then a newline is added by default. <code>\u2018-n\u2019</code> option is used to print any text without new line and <code>\u2018-e\u2019</code> option is used to remove backslash characters from the output. Create a new bash file with a name, <code>\u2018echo_example.sh\u2019</code> and add the following script.</p> <pre><code>#!/bin/bash\necho \"Printing text with newline\"\necho -n \"Printing text without newline\"\necho -e \"\\nRemoving \\t backslash \\t characters\\n\"\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#comment","title":"comment","text":"<p><code>\u2018#\u2019</code> symbol is used to add single line comment in bash script. Create a new file named <code>\u2018comment_example.sh\u2019</code> and add  the following script with single line comment.</p> <pre><code>#!/bin/bash\n\n# Add two numeric value\n((sum=25+35))\n\n#Print the result\necho $sum\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#multi-line-comment","title":"Multi-line comment","text":"<p>You can use multi line comment in bash in various ways. A simple way is shown in the following example. Create a new bash named, <code>\u2018multiline-comment.sh\u2019</code> and add the following script. Here, <code>\u2018:\u2019</code> and <code>\u201c \u2019 \u201d</code> symbols are used to add multiline  comment in bash script. This following script will calculate the square of 5.</p> <pre><code>#!/bin/bash\n: '\nThe following script calculates\nthe square value of the number, 5.\n'\n((area=5*5))\necho $area\n</code></pre> <p>You can check the following link to know more about the use of bash comment.</p> <p>https://linuxhint.com/bash_comments/</p>"},{"location":"programming/bash/30_bash_examples/#while-loop","title":"While Loop","text":"<p>Create a bash file with the name, \u2018while_example.sh\u2019, to know the use of while loop. In the example, while loop will iterate for 5 times. The value of count variable will increment by 1 in each step. When the value of count variable will 5 then the while loop will terminate.</p> <pre><code>#!/bin/bash\nvalid=true\ncount=1\nwhile [ $valid ]\ndo\necho $count\nif [ $count -eq 5 ];\nthen\nbreak\nfi\n((count++))\ndone\n</code></pre> <p>You can check the following link to know more about the use of while loop.</p> <p>https://linuxhint.com/bash-while-loop-examples/</p>"},{"location":"programming/bash/30_bash_examples/#for-loop","title":"For Loop","text":"<p>The basic <code>for</code> loop declaration is shown in the following example. Create a file named <code>\u2018for_example.sh\u2019</code> and add the following script using <code>for</code> loop. Here, <code>for</code> loop will iterate for 10 times and print all values of the variable, counter in single line.</p> <pre><code>#!/bin/bash\nfor (( counter=10; counter&gt;0; counter-- ))\ndo\necho -n \"$counter \"\ndone\nprintf \"\\n\"\n</code></pre> <p>You can use for loop for different purposes and ways in your bash script. You can check the following link to know more about the use of for loop.</p> <p>https://linuxhint.com/bash-for-loop-examples/</p>"},{"location":"programming/bash/30_bash_examples/#user-input","title":"User Input","text":"<p><code>\u2018read\u2019</code> command is used to take input from user in bash. Create a file named <code>\u2018user_input.sh\u2019</code> and add the following script for taking input from the user. Here, one string value will be taken from the user and display the value by combining other string value.</p> <pre><code>#!/bin/bash\necho \"Enter Your Name\"\nread name\necho \"Welcome $name to LinuxHint\"\n</code></pre> <p>You can check the following link to know more about the use of user input.</p> <p>https://linuxhint.com/bash-script-user-input/</p>"},{"location":"programming/bash/30_bash_examples/#if-statement","title":"if statement","text":"<p>You can use if condition with single or multiple conditions. Starting and ending block of this statement is define by <code>\u2018if\u2019</code> and <code>\u2018fi\u2019</code>. Create a file named <code>\u2018simple_if.sh\u2019</code> with the following script to know the use if statement in bash. Here, <code>10</code> is assigned to the variable, <code>n</code>. if the value of <code>$n</code> is less than <code>10</code> then the output will be <code>\u201cIt is a one digit number\u201d</code>, otherwise the output will be <code>\u201cIt is a two digit number\u201d</code>. For comparison, <code>\u2018-lt\u2019</code> is used here. For comparison, you can also use <code>\u2018-eq\u2019</code> for <code>equality</code>, <code>\u2018-ne\u2019</code> for <code>not equality</code> and <code>\u2018-gt\u2019</code> for <code>greater than</code> in bash script.</p> <pre><code>#!/bin/bash\nn=10\nif [ $n -lt 10 ];\nthen\necho \"It is a one digit number\"\nelse\necho \"It is a two digit number\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#if-statement-with-and-logic","title":"if statement with AND logic","text":"<p>Different types of logical conditions can be used in if statement with two or more conditions. How you can define multiple conditions in if statement using <code>AND</code> logic is shown in the following example. <code>\u2018&amp;&amp;\u2019</code> is used to apply <code>AND</code> logic of <code>if</code> statement. Create a file named <code>\u2018if_with_AND.sh\u2019</code> to check the following code. Here, the value of username and password variables will be taken from the user and compared with <code>\u2018admin\u2019</code> and <code>\u2018secret\u2019</code>. If both values match then the output will be <code>\u201cvalid user\u201d</code>, otherwise the output will be <code>\u201cinvalid user\u201d</code>.</p> <pre><code>!/bin/bash\n\necho \"Enter username\"\nread username\necho \"Enter password\"\nread password\n\nif [[ ( $username == \"admin\" &amp;&amp; $password == \"secret\" ) ]]; then\necho \"valid user\"\nelse\necho \"invalid user\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#if-statement-with-or-logic","title":"if statement with OR logic","text":"<p><code>\u2018||\u2019</code> is used to define <code>OR</code> logic in <code>if</code> condition. Create a file named <code>\u2018if_with_OR.sh\u2019</code> with the following code to check the use of <code>OR</code> logic of <code>if</code> statement. Here, the value of <code>n</code> will be taken from the user. If the value is equal to <code>15</code> or <code>45</code> then the output will be <code>\u201cYou won the game\u201d</code>, otherwise the output will be <code>\u201cYou lost the game\u201d</code>.</p> <pre><code>#!/bin/bash\n\necho \"Enter any number\"\nread n\n\nif [[ ( $n -eq 15 || $n  -eq 45 ) ]]\nthen\necho \"You won the game\"\nelse\necho \"You lost the game\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#else-if-statement","title":"else if statement","text":"<p>The use of <code>else if</code> condition is little different in bash than other programming language. <code>\u2018elif\u2019</code> is used to define <code>else if</code> condition in bash. Create a file named, <code>\u2018elseif_example.sh\u2019</code> and add the following script to check how <code>else if</code> is defined in bash script.</p> <pre><code>#!/bin/bash\n\necho \"Enter your lucky number\"\nread n\n\nif [ $n -eq 101 ];\nthen\necho \"You got 1st prize\"\nelif [ $n -eq 510 ];\nthen\necho \"You got 2nd prize\"\nelif [ $n -eq 999 ];\nthen\necho \"You got 3rd prize\"\n\nelse\necho \"Sorry, try for the next time\"\nfi\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#case-statement","title":"Case Statement","text":"<p><code>Case</code> statement is used as the alternative of <code>if-elseif-else</code> statement. The starting and ending block of this statement is defined by <code>\u2018case\u2019</code> and <code>\u2018esac\u2019</code>. Create a new file named, <code>\u2018case_example.sh\u2019</code> and add the following script. The output of the following script will be same to the previous <code>else if</code> example.</p> <pre><code>#!/bin/bash\n\necho \"Enter your lucky number\"\nread n\ncase $n in\n101)\necho echo \"You got 1st prize\" ;;\n510)\necho \"You got 2nd prize\" ;;\n999)\necho \"You got 3rd prize\" ;;\n*)\necho \"Sorry, try for the next time\" ;;\nesac\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#arguments-from-command-line","title":"Arguments from Command Line","text":"<p>Bash script can read input from command line argument like other programming language. For example, <code>$1</code> and <code>$2</code> variable are used to read first and second command line arguments. Create a file named <code>\u201ccommand_line.sh\u201d</code> and add the following script. Two argument values read by the following script and prints the total number of arguments and the argument values as output.</p> <pre><code>#!/bin/bash\necho \"Total arguments : $#\"\necho \"1st Argument = $1\"\necho \"2nd argument = $2\"\n</code></pre> <p>You can check the following link to know more about the use of command line argument.</p> <p>https://linuxhint.com/command_line_arguments_bash_script/</p>"},{"location":"programming/bash/30_bash_examples/#arguments-from-command-line-with-names","title":"arguments from command line with names","text":"<p>How you can read command line arguments with names is shown in the following script. Create a file named, <code>\u2018command_line_names.sh\u2019</code> and add the following code. Here, two arguments, <code>X</code> and <code>Y</code> are read by this script and print the sum of X and Y.</p> <pre><code>#!/bin/bash\nfor arg in \"$@\"\ndo\nindex=$(echo $arg | cut -f1 -d=)\nval=$(echo $arg | cut -f2 -d=)\ncase $index in\nX) x=$val;;\n\nY) y=$val;;\n\n*)\nesac\ndone\n((result=x+y))\necho \"X+Y=$result\"\n</code></pre> <p>Run the file with bash command and with two command line arguments.</p> <pre><code>$ bash command_line_names X=45 Y=30\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#combine-string-variables","title":"Combine String variables","text":"<p>You can easily combine string variables in bash. Create a file named <code>\u201cstring_combine.sh\u201d</code> and add the following script to check how you can combine string variables in bash by placing variables together or using <code>\u2018+\u2019</code> operator.</p> <pre><code>#!/bin/bash\n\nstring1=\"Linux\"\nstring2=\"Hint\"\necho \"$string1$string2\"\nstring3=$string1+$string2\nstring3+=\" is a good tutorial blog site\"\necho $string3\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#get-substring-of-string","title":"Get substring of String","text":"<p>Like other programming language, bash has no built-in function to cut value from any string data. But you can do the task of substring in another way in bash that is shown in the following script. To test the script, create a file named <code>\u2018substring_example.sh\u2019</code> with the following code. Here, the value, <code>6</code> indicates the starting point from where the substring will start and <code>5</code> indicates the length of the substring.</p> <pre><code>#!/bin/bash\nStr=\"Learn Linux from LinuxHint\"\nsubStr=${Str:6:5}\necho $subStr\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#add-two-numbers","title":"Add Two Numbers","text":"<p>You can do the arithmetical operations in bash in different ways. How you can add two integer numbers in bash using double brackets is shown in the following script. Create a file named <code>\u2018add_numbers.sh\u2019</code> with the following code. Two integer values will be taken from the user and printed the result of addition.</p> <pre><code>#!/bin/bash\necho \"Enter first number\"\nread x\necho \"Enter second number\"\nread y\n(( sum=x+y ))\necho \"The result of addition=$sum\"\n</code></pre> <p>You can check the following link to know more about bash arithmetic.</p> <p>https://linuxhint.com/bash_arithmetic_operations/</p>"},{"location":"programming/bash/30_bash_examples/#create-function","title":"Create Function:","text":"<p>How you can create a simple function and call the function is shown in the following script. Create a file named <code>\u2018function_example.sh\u2019</code> and add the following code. You can call any function by name only without using any bracket in bash script.</p> <pre><code>#!/bin/bash\nfunction F1()\n{\necho 'I like bash programming'\n}\n\nF1\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#create-function-with-parameters","title":"Create function with Parameters","text":"<p>Bash can\u2019t declare function parameter or arguments at the time of function declaration. But you can use parameters in function by using other variable. If two values are passed at the time of function calling then <code>$1</code> and <code>$2</code> variable are used for reading the values. Create a file named <code>\u2018function|_parameter.sh\u2019</code> and add the following code. Here, the function, <code>\u2018Rectangle_Area\u2019</code> will calculate the area of a rectangle based on the parameter values.</p> <pre><code>#!/bin/bash\n\nRectangle_Area() {\narea=$(($1 * $2))\necho \"Area is : $area\"\n}\n\nRectangle_Area 10 20\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#pass-return-value-from-function","title":"Pass Return Value from Function","text":"<p>Bash function can pass both numeric and string values. How you can pass a string value from the function is shown in the following example. Create a file named, <code>\u2018function_return.sh\u2019</code> and add the following code. The function, <code>greeting()</code> returns a string value into the variable, <code>val</code> which prints later by combining with other string.</p> <pre><code>#!/bin/bash\nfunction greeting() {\n\nstr=\"Hello, $name\"\necho $str\n\n}\n\necho \"Enter your name\"\nread name\n\nval=$(greeting)\necho \"Return value of the function is $val\"\n</code></pre> <p>You can check the following link to know more about the use of bash function.</p> <p>https://linuxhint.com/return-string-bash-functions/</p>"},{"location":"programming/bash/30_bash_examples/#make-directory","title":"Make Directory","text":"<p>Bash uses <code>\u2018mkdir\u2019</code> command to create a new directory. Create a file named <code>\u2018make_directory.sh\u2019</code> and add the following code to take a new directory name from the user. If the directory name is not exist in the current location then it will create the directory, otherwise the program will display error.</p> <pre><code>#!/bin/bash\necho \"Enter directory name\"\nread newdir\n`mkdir $newdir`\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#make-directory-by-checking-existence","title":"Make directory by checking existence","text":"<p>If you want to check the existence of directory in the current location before executing the <code>\u2018mkdir\u2019</code> command then you can use the following code. <code>\u2018-d\u2019</code> option is used to test a particular directory is exist or not. Create a file named, <code>\u2018directory_exist.sh\u2019</code> and add the following code to create a directory by checking existence.</p> <pre><code>#!/bin/bash\necho \"Enter directory name\"\nread ndir\nif [ -d \"$ndir\" ]\nthen\necho \"Directory exist\"\nelse\n`mkdir $ndir`\necho \"Directory created\"\nfi\n</code></pre> <p>You can check the following link to know more about directory creation.</p> <p>https://linuxhint.com/bash_mkdir_not_existent_path/</p>"},{"location":"programming/bash/30_bash_examples/#read-a-file","title":"Read a File","text":"<p>You can read any file line by line in bash by using loop. Create a file named, <code>\u2018read_file.sh\u2019</code> and add the following code to read an existing file named, <code>\u2018book.txt\u2019</code>.</p> <pre><code>#!/bin/bash\nfile='book.txt'\nwhile read line; do\necho $line\ndone &lt; $file\n</code></pre> <p>You can check the following link to know the different ways to read file.</p> <p>https://linuxhint.com/read_file_line_by_line_bash/</p>"},{"location":"programming/bash/30_bash_examples/#delete-a-file","title":"Delete a File","text":"<p><code>\u2018rm\u2019</code> command is used in bash to remove any file. Create a file named <code>\u2018delete_file.sh\u2019</code> with the following code to take the filename from the user and remove. Here, <code>\u2018-i\u2019</code> option is used to get permission from the user before removing the file.</p> <pre><code>#!/bin/bash\necho \"Enter filename to remove\"\nread fn\nrm -i $fn\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#append-to-file","title":"Append to File","text":"<p>New data can be added into any existing file by using <code>\u2018&gt;&gt;\u2019</code> operator in bash. Create a file named <code>\u2018append_file.sh\u2019</code> and add the following code to add new content at the end of the file. Here, <code>\u2018Learning Laravel 5\u2019</code> will be added at the of <code>\u2018book.txt\u2019</code> file after executing the script.</p> <pre><code>#!/bin/bash\n\necho \"Before appending the file\"\ncat book.txt\n\necho \"Learning Laravel 5\"&gt;&gt; book.txt\necho \"After appending the file\"\ncat book.txt\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#test-if-file-exist","title":"Test if File Exist","text":"<p>You can check the existence of file in bash by using <code>\u2018-e\u2019</code> or <code>\u2018-f\u2019</code> option. <code>\u2018-f\u2019</code> option is used in the following script to test the file existence. Create a file named, <code>\u2018file_exist.sh\u2019</code> and add the following code. Here, the filename will pass from the command line.</p> <pre><code>#!/bin/bash\nfilename=$1\nif [ -f \"$filename\" ]; then\necho \"File exists\"\nelse\necho \"File does not exist\"\nfi\n</code></pre> <p>Run the following commands to check the existence of the file. Here, book.txt file exists and  book2.txt is not exist in the current location.</p> <pre><code>$ ls\n$ bash file_exist.sh book.txt\n$ bash file_exist.sh book2.txt\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#send-email","title":"Send Email","text":"<p>You can send email by using <code>\u2018mail\u2019</code> or <code>\u2018sendmail\u2019</code> command. Before using these commands, you have to install all necessary packages. Create a file named, <code>\u2018mail_example.sh\u2019</code> and add the following code to send the email.</p> <pre><code>#!/bin/bash\nRecipient=\u201dadmin@example.com\u201d\nSubject=\u201dGreeting\u201d\nMessage=\u201dWelcome to our site\u201d\n`mail -s $Subject $Recipient &lt;&lt;&lt; $Message`\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#parse-current-date","title":"Parse Current Date","text":"<p>You can get the current system date and time value using <code>date</code> command. Every part of date and time value can be parsed using <code>\u2018Y\u2019</code>, <code>\u2018m\u2019</code>, <code>\u2018d\u2019</code>, <code>\u2018H\u2019</code>, <code>\u2018M\u2019</code> and <code>\u2018S\u2019</code>. Create a new file named <code>\u2018date_parse.sh\u2019</code> and add the following code to separate day, month, year, hour, minute and second values.</p> <pre><code>#!/bin/bash\nYear=`date +%Y`\nMonth=`date +%m`\nDay=`date +%d`\nHour=`date +%H`\nMinute=`date +%M`\nSecond=`date +%S`\necho `date`\necho \"Current Date is: $Day-$Month-$Year\"\necho \"Current Time is: $Hour:$Minute:$Second\"\n</code></pre>"},{"location":"programming/bash/30_bash_examples/#wait-command","title":"Wait Command","text":"<p><code>wait</code> is a built-in command of Linux that waits for completing any running process. <code>wait</code> command is used with a particular process id or job id. If no process id or job id is given with wait command then it will wait for all current child processes to complete and returns exit status. Create a file named <code>\u2018wait_example.sh\u2019</code> and add the following script.</p> <pre><code>#!/bin/bash\necho \"Wait command\" &amp;\nprocess_id=$!\nwait $process_id\necho \"Exited with status $?\"\n</code></pre> <p>See more https://linuxhint.com/wait_command_linux/</p>"},{"location":"programming/bash/30_bash_examples/#sleep-command","title":"Sleep Command","text":"<p>When you want to pause the execution of any command for specific period of time then you can use <code>sleep</code> command. You can set the delay amount by seconds <code>(s)</code>, minutes <code>(m)</code>, hours <code>(h)</code> and days <code>(d)</code>. Create a file named <code>\u2018sleep_example.sh\u2019</code> and add the following script. This script will wait for 5 seconds after running.</p> <pre><code>#!/bin/bash\n\necho \u201cWait for 5 seconds\u201d\nsleep 5\necho \u201cCompleted\u201d\n</code></pre> <p>You can check the following link to know more about sleep command.</p> <p>https://linuxhint.com/sleep_command_linux/</p>"},{"location":"programming/bash/30_bash_examples/#_1","title":"bash examples","text":""},{"location":"programming/composer/composer/","title":"Composer","text":""},{"location":"programming/composer/composer/#ejecutar-composer-con-instancia-de-php-que-no-sea-la-por-defecto-del-sistema","title":"Ejecutar composer con instancia de php que no sea la por defecto del sistema","text":"<pre><code>/usr/bin/php7.4 /usr/local/bin/composer install\n</code></pre>"},{"location":"programming/html/text_tags/","title":"Text tags","text":"<pre><code>&lt;p&gt;Esto es texto regular&lt;/p&gt;\n\n&lt;p&gt;&lt;b&gt;Texto en negrita&lt;/b&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;i&gt;Texto en cursiva&lt;/i&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;small&gt;Texto peque\u00f1o&lt;/small&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Texto fuerte&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Normal &lt;sub&gt;Texto subindice&lt;/sub&gt;&lt;/p&gt;\n\n&lt;p&gt;Normal &lt;sup&gt;Texto superindice&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;ins&gt;Texto insertado&lt;/ins&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;del&gt;Texto borrado&lt;/del&gt;&lt;/p&gt;\n</code></pre>"},{"location":"programming/javascript/map/","title":"Map","text":"<p>Map is a collection of keyed data items, just like an Object. But the main difference is that Map allows keys of any type.</p> <p>Methods and properties are:</p> <ul> <li><code>new Map()</code> \u2013 creates the map.</li> <li><code>map.set(key, value)</code> \u2013 stores the value by the key.</li> <li><code>map.get(key)</code> \u2013 returns the value by the key, undefined if key doesn\u2019t exist in map.</li> <li><code>map.has(key)</code> \u2013 returns true if the key exists, false otherwise.</li> <li><code>map.delete(key)</code> \u2013 removes the value by the key.</li> <li><code>map.clear()</code> \u2013 removes everything from the map.</li> <li><code>map.size()</code> \u2013 returns the current element count.</li> </ul> <p>For instance:</p> <pre><code>let map = new Map();\nmap.set('1', 'str1');   // a string key\nmap.set(1, 'num1');     // a numeric key\nmap.set(true, 'bool1'); // a boolean key\n\n// remember the regular Object? it would convert keys to string\n// Map keeps the type, so these two are different:\nalert( map.get(1)   ); // 'num1'\nalert( map.get('1') ); // 'str1'\n\nalert( map.size ); // 3\n</code></pre> <p>As we can see, unlike objects, keys are not converted to strings. Any type of key is possible.</p> <p>Map can also use objects as keys.</p> <p>For instance:</p> <pre><code>let john = { name: \"John\" };\n\n// for every user, let's store their visits count\nlet visitsCountMap = new Map();\n\n// john is the key for the map\nvisitsCountMap.set(john, 123);\n\nalert( visitsCountMap.get(john) ); // 123\n</code></pre> <p>Using objects as keys is one of the most notable and important Map features. The same does not count for Object. String as a key in Object is fine, but we can\u2019t use another Object as a key in Object.</p> <p>Let\u2019s try:</p> <pre><code>let john = { name: \"John\" };\nlet ben = { name: \"Ben\" };\n\nlet visitsCountObj = {}; // try to use an object\n\nvisitsCountObj[ben] = 234; // try to use ben object as the key\nvisitsCountObj[john] = 123; // try to use john object as the key, ben object will get replaced\n\n// That's what got written!\nalert( visitsCountObj[\"[object Object]\"] ); // 123\n</code></pre> <p>As visitsCountObj is an object, it converts all Object keys, such as john and ben above, to same string \"[object Object]\". Definitely not what we want.</p> <p>Every map.set call returns the map itself, so we can \u201cchain\u201d the calls:</p> <pre><code>map.set('1', 'str1')\n  .set(1, 'num1')\n  .set(true, 'bool1');\n</code></pre>"},{"location":"programming/javascript/map/#iteration-over-map","title":"Iteration over Map","text":"<p>For looping over a map, there are 3 methods:</p> <ul> <li><code>map.keys()</code> \u2013 returns an iterable for keys,</li> <li><code>map.values()</code> \u2013 returns an iterable for values,</li> <li><code>map.entries()</code> \u2013 returns an iterable for entries [key, value], it\u2019s used by default in for..of.</li> </ul> <p>For instance:</p> <pre><code>let recipeMap = new Map([\n  ['cucumber', 500],\n  ['tomatoes', 350],\n  ['onion',    50]\n]);\n\n// iterate over keys (vegetables)\nfor (let vegetable of recipeMap.keys()) {\n  alert(vegetable); // cucumber, tomatoes, onion\n}\n\n// iterate over values (amounts)\nfor (let amount of recipeMap.values()) {\n  alert(amount); // 500, 350, 50\n}\n\n// iterate over [key, value] entries\nfor (let entry of recipeMap) { // the same as of recipeMap.entries()\n  alert(entry); // cucumber,500 (and so on)\n}\n</code></pre> <p>The iteration goes in the same order as the values were inserted. Map preserves this order, unlike a regular Object.</p> <p>Besides that, Map has a built-in forEach method, similar to Array:</p> <pre><code>// runs the function for each (key, value) pair\nrecipeMap.forEach( (value, key, map) =&gt; {\n  alert(`${key}: ${value}`); // cucumber: 500 etc\n});\n</code></pre>"},{"location":"programming/javascript/map/#objectentries-map-from-object","title":"Object.entries: Map from Object","text":"<p>When a Map is created, we can pass an array (or another iterable) with key/value pairs for initialization, like this:</p> <pre><code>// array of [key, value] pairs\nlet map = new Map([\n  ['1',  'str1'],\n  [1,    'num1'],\n  [true, 'bool1']\n]);\n\nalert( map.get('1') ); // str1\n</code></pre> <p>If we have a plain object, and we\u2019d like to create a Map from it, then we can use built-in method Object.entries(obj) that returns an array of key/value pairs for an object exactly in that format.</p> <p>So we can create a map from an object like this:</p> <pre><code>let obj = {\n  name: \"John\",\n  age: 30\n};\n\nlet map = new Map(Object.entries(obj));\n\nalert( map.get('name') ); // John\n</code></pre> <p>Here, Object.entries returns the array of key/value pairs: [ [\"name\",\"John\"], [\"age\", 30] ]. That\u2019s what Map needs.</p>"},{"location":"programming/javascript/map/#objectfromentries-object-from-map","title":"Object.fromEntries: Object from Map","text":"<p>We\u2019ve just seen how to create Map from a plain object with Object.entries(obj).</p> <p>There\u2019s Object.fromEntries method that does the reverse: given an array of [key, value] pairs, it creates an object from them:</p> <pre><code>let prices = Object.fromEntries([\n  ['banana', 1],\n  ['orange', 2],\n  ['meat', 4]\n]);\n\n// now prices = { banana: 1, orange: 2, meat: 4 }\n\nalert(prices.orange); // 2\n</code></pre> <p>We can use Object.fromEntries to get a plain object from Map.</p> <p>E.g. we store the data in a Map, but we need to pass it to a 3rd-party code that expects a plain object.</p> <p>Here we go:</p> <pre><code>let map = new Map();\nmap.set('banana', 1);\nmap.set('orange', 2);\nmap.set('meat', 4);\n\nlet obj = Object.fromEntries(map.entries()); // make a plain object (*)\n\n// done!\n// obj = { banana: 1, orange: 2, meat: 4 }\n\nalert(obj.orange); // 2\n</code></pre> <p>A call to map.entries() returns an iterable of key/value pairs, exactly in the right format for Object.fromEntries.</p> <p>We could also make line (*) shorter:</p> <pre><code>let obj = Object.fromEntries(map); // omit .entries()\n</code></pre> <p>That\u2019s the same, because Object.fromEntries expects an iterable object as the argument. Not necessarily an array. And the standard iteration for map returns same key/value pairs as map.entries(). So we get a plain object with same key/values as the map.</p>"},{"location":"programming/javascript/set/","title":"Set","text":"<p>A Set is a special type collection \u2013 \u201cset of values\u201d (without keys), where each value may occur only once.</p> <p>Its main methods are:</p> <ul> <li><code>new Set(iterable)</code> \u2013 creates the set, and if an iterable object is provided (usually an array), copies values from it into the set.</li> <li><code>set.add(value)</code> \u2013 adds a value, returns the set itself.</li> <li><code>set.delete(value)</code> \u2013 removes the value, returns true if value existed at the moment of the call, otherwise false.</li> <li><code>set.has(value)</code> \u2013 returns true if the value exists in the set, otherwise false.</li> <li><code>set.clear()</code> \u2013 removes everything from the set.</li> <li><code>set.size</code> \u2013 is the elements count.</li> </ul> <p>The main feature is that repeated calls of set.add(value) with the same value don\u2019t do anything. That\u2019s the reason why each value appears in a Set only once.</p> <p>For example, we have visitors coming, and we\u2019d like to remember everyone. But repeated visits should not lead to duplicates. A visitor must be \u201ccounted\u201d only once.</p> <p>Set is just the right thing for that:</p> <pre><code>let set = new Set();\n\nlet john = { name: \"John\" };\nlet pete = { name: \"Pete\" };\nlet mary = { name: \"Mary\" };\n\n// visits, some users come multiple times\nset.add(john);\nset.add(pete);\nset.add(mary);\nset.add(john);\nset.add(mary);\n\n// set keeps only unique values\nalert( set.size ); // 3\n\nfor (let user of set) {\n  alert(user.name); // John (then Pete and Mary)\n}\n</code></pre> <p>The alternative to Set could be an array of users, and the code to check for duplicates on every insertion using arr.find. But the performance would be much worse, because this method walks through the whole array checking every element. Set is much better optimized internally for uniqueness checks.</p>"},{"location":"programming/javascript/set/#iteration-over-set","title":"Iteration over Set","text":"<p>We can loop over a set either with for..of or using forEach:</p> <pre><code>let set = new Set([\"oranges\", \"apples\", \"bananas\"]);\n\nfor (let value of set) alert(value);\n\n// the same with forEach:\nset.forEach((value, valueAgain, set) =&gt; {\n  alert(value);\n});\n</code></pre> <p>Note the funny thing. The callback function passed in forEach has 3 arguments: a value, then the same value valueAgain, and then the target object. Indeed, the same value appears in the arguments twice.</p> <p>That\u2019s for compatibility with Map where the callback passed forEach has three arguments. Looks a bit strange, for sure. But may help to replace Map with Set in certain cases with ease, and vice versa.</p> <p>The same methods Map has for iterators are also supported:</p> <ul> <li><code>set.keys()</code> \u2013 returns an iterable object for values,</li> <li><code>set.values()</code> \u2013 same as set.keys(), for compatibility with Map,</li> <li><code>set.entries()</code> \u2013 returns an iterable object for entries [value, value], exists for compatibility with Map.</li> </ul>"},{"location":"programming/npm/dependency_cruiser/","title":"Dependency cruiser","text":"<p>Easily visualize a project's dependency graph with dependency-cruiser</p> <p>You can install <code>dependency-cruiser</code> globally with <code>npm i -g dependency-cruiser</code>. Then, in the folder of any project you care about, you can run:</p> <pre><code>depcruise --exclude \"^node_modules\" --output-type dot src | dot -T svg &gt; dependencygraph.svg\n</code></pre> <p>assuming the core of your code lives in the <code>src</code> sub folder</p>"},{"location":"programming/php/constants/","title":"Constants","text":""},{"location":"programming/php/constants/#question","title":"Question","text":"<p>Const access from outside a class contained in string</p> <p>With this code:</p> <pre><code>class Constants{\n   const ONE = 1;\n   const TWO = 2;\n   const THREE = 3;\n}\n\n$input = \"ONE\";\n\necho Constants::$input;\n</code></pre> <p>I want to access to the constants inside the class having the name in a variable.</p> <p>I'ts that posible.</p>"},{"location":"programming/php/constants/#answer","title":"Answer","text":"<p>Constant function will return value of a constant by its name:</p> <pre><code>class Contants{\n   const ONE = 1;\n   const TWO = 2;\n   const THREE = 3;\n}\n\n$input = \"ONE\";\n\necho constant(Contants::class . '::' . $input);\n</code></pre>"},{"location":"programming/php/dates/","title":"Dates","text":""},{"location":"programming/php/dates/#compare-two-24-hour-time","title":"Compare two 24 hour time","text":"<p>Use the built-in function strtotime():</p> <pre><code>$time=\"00:05:00\"; //5 minutes\nif(strtotime($time) &lt;= strtotime('00:03:00')) {\n    //do some work\n} else {\n    //do something\n}\n</code></pre>"},{"location":"programming/php/global_dates/","title":"Mostrar fechas de acuerdo a uso horario","text":"<p>Problema de fecha utilizada en varios lugares del mundo (diferentes UTC). Se tiene como problema una aplicaci\u00f3n utilizada en diversas partes del mundo en donde se utiliza la misma fecha para mostrarse a diferentes usuarios que pueden estar utilizando el APP en cualquier parte del mundo.</p> <p>Para resolver este problema se utilizo el siguiente comando que se ejecuto en la base de datos:</p> <pre><code>SET time_zone = \"+00: 00\";\n</code></pre> <p>El mismo setea la zona horaria (<code>UTC-0</code>) por defecto en caso de que tu base de datos utilice <code>timestamp</code> automatizados para el update y creacion de datos.</p> <p>Luego dentro del proyecto de servicios, por ejemplo <code>Lumen</code> con <code>PHP</code>, necesitamos setear la siguiente linea en el archivo de configuraci\u00f3n <code>.env</code>:</p> <pre><code>APP_TIMEZONE = UTC\n</code></pre>"},{"location":"programming/php/pretty/","title":"Pretty format arrays and objects","text":"<pre><code>class Persona{\n    public $nombre;\n    public $apellidos;\n    public $sexo;\n\n    function __construct($nombre, $apellidos, $sexo){\n        $this-&gt;nombre = $nombre;\n        $this-&gt;apellidos = $apellidos;\n        $this-&gt;sexo = $sexo;\n    }\n}\n\n\nfunction pretty($var)\n{\n    return gettype($var) . ' ' . json_encode(\n        $var,\n        JSON_UNESCAPED_SLASHES |\n            JSON_UNESCAPED_UNICODE |\n            JSON_PRETTY_PRINT |\n            JSON_PARTIAL_OUTPUT_ON_ERROR |\n            JSON_INVALID_UTF8_SUBSTITUTE\n    );\n}\n\n$oPersona = new Persona(\"Jonh\", \"Doe\", \"Masculino\");\n\necho '&lt;pre&gt;';\necho pretty($oPersona);\necho '&lt;/pre&gt;';\n\n\n// output\n/**\nobject {\n    \"nombre\": \"Jonh\",\n    \"apellidos\": \"Doe\",\n    \"sexo\": \"Masculino\"\n}\n*/\n</code></pre>"},{"location":"programming/python/diccionarios/","title":"Diccionarios","text":""},{"location":"programming/python/diccionarios/#crear","title":"Crear","text":"<pre><code>diccionario = {\n    \"nombre\": \"Jonh\",\n    \"sexo\": \"Masculino\",\n    \"edad\": 35\n}\n</code></pre> <p>Adem\u00e1s se puede crear usando el constructor dict</p> <pre><code>persona = dict(nombre=\"Jonh Doe\", sexo=\"Masculino\")\n</code></pre>"},{"location":"programming/python/diccionarios/#acceder-a-un-elemento","title":"Acceder a un elemento","text":"<pre><code>diccionario[\"nombre\"]\n# o\ndiccionario.get('nombre')\n</code></pre>"},{"location":"programming/python/diccionarios/#modificando-valores","title":"Modificando valores","text":"<pre><code>diccionario[\"nombre\"] = \"Myke\"\n</code></pre>"},{"location":"programming/python/diccionarios/#longitud-len","title":"Longitud (len)","text":"<pre><code>len(diccionario)\n</code></pre>"},{"location":"programming/python/diccionarios/#agregar-valores","title":"Agregar valores","text":"<pre><code>diccionario[\"direccion\"] = \"Time scuare 1256\"\n</code></pre>"},{"location":"programming/python/diccionarios/#eliminar-obteniendo-el-valor-pop","title":"Eliminar obteniendo el valor (pop)","text":"<pre><code>edad = diccionario.pop('edad')\n</code></pre>"},{"location":"programming/python/diccionarios/#eliminar-ultimo-valor-agregado-popitem","title":"Eliminar \u00faltimo valor agregado (popitem)","text":"<pre><code>diccionario.popitem()\n</code></pre> <p>Remueve el \u00faltimo elemento que fue insertado en el diccionario. El valor de retorno es el item eliminado en forma de tupla.</p>"},{"location":"programming/python/diccionarios/#eliminar-del","title":"Eliminar (del)","text":"<pre><code>del diccionario[\"edad\"]\n</code></pre>"},{"location":"programming/python/diccionarios/#crear-copia-copydict","title":"Crear copia (copy)(dict)","text":"<pre><code>diccionario2 = diccionario.copy()\n</code></pre> <p>Otra forma de hacerlo es usando <code>dict</code></p> <pre><code>diccionario2 = dict(diccionario)\n</code></pre>"},{"location":"programming/python/diccionarios/#eliminar-todos-los-elementos-clear","title":"Eliminar todos los elementos (clear)","text":"<pre><code>diccionario.clear()\n</code></pre>"},{"location":"programming/python/listas/","title":"Listas","text":""},{"location":"programming/python/listas/#creacion","title":"Creaci\u00f3n","text":"<pre><code>lista = [1, 2, 3]\n</code></pre>"},{"location":"programming/python/listas/#copiar-o-duplicar-una-lista-copy","title":"Copiar o duplicar una lista (copy)","text":"<pre><code>lista2 = lista.copy()\n</code></pre>"},{"location":"programming/python/listas/#agregar-append","title":"Agregar (append)","text":"<pre><code>lista.append(4)\n</code></pre>"},{"location":"programming/python/listas/#vaciar-elementos-de-una-lista-clear","title":"Vaciar elementos de una lista (clear)","text":"<pre><code>lista.clear()\n</code></pre>"},{"location":"programming/python/listas/#contar-ocurrencias-de-un-elemento-count","title":"Contar ocurrencias de un elemento (count)","text":"<pre><code>lista.count(2)\n</code></pre>"},{"location":"programming/python/listas/#contar-elementos-len","title":"Contar elementos (len)","text":"<pre><code>len(lista)\n</code></pre>"},{"location":"programming/python/listas/#accediendo-a-elemento-por-posicion","title":"Accediendo a elemento por posici\u00f3n","text":"<pre><code>lista[2]  # accede al tercer elemento de la lista\n</code></pre>"},{"location":"programming/python/listas/#eliminar-elemento-devolviendolo-a-una-variable-pop","title":"Eliminar elemento devolviendolo a una variable (pop)","text":"<pre><code>ultimo = lista.pop()\n</code></pre>"},{"location":"programming/python/listas/#eliminar-elemento-que-no-sea-el-ultimo-remove","title":"Eliminar elemento que no sea el ultimo (remove)","text":"<pre><code>lista.remove(2)\n</code></pre>"},{"location":"programming/python/listas/#ordenar-sort","title":"Ordenar (sort)","text":"<p>Para poder ordenar con el m\u00e9todo sort todos los elementos de la lista tienen que ser del mismo tipo</p> <pre><code>lista.sort() \n</code></pre>"},{"location":"programming/python/listas/#revertir-elementos-reverse","title":"Revertir elementos (reverse)","text":"<pre><code>lista.reverse()\n</code></pre>"},{"location":"programming/python/rangos/","title":"Rangos","text":"<pre><code>rango = range(6)\nprint(rango)\n\n# range(0, 6)\n</code></pre>"},{"location":"programming/python/tuplas/","title":"tuplas","text":"<p>Al igual que con las cadenas, las componentes de las tuplas no pueden ser modificadas.</p> <pre><code>tupla = ('hola', 'mundo')\n</code></pre>"},{"location":"programming/python/tuplas/#contar-ocurrencia-de-elemento-count","title":"Contar ocurrencia de elemento (count)","text":"<pre><code>tupla.count('hola') # 1\n</code></pre>"},{"location":"programming/python/tuplas/#buscar-el-indice-de-un-elemento-index","title":"Buscar el indice de un elemento (index)","text":"<pre><code>tupla.index('mundo')\n</code></pre>"},{"location":"programming/python/tuplas/#transformar-de-tupla-a-lista-list","title":"Transformar de tupla a lista (list)","text":"<pre><code>listaDeTupla = list(tupla)\n</code></pre>"},{"location":"programming/react/github_pages/","title":"Deploy react app to github pages","text":""},{"location":"programming/react/github_pages/#prerequisitos","title":"Prerequisitos","text":"<ul> <li>Cuenta en Github</li> <li>Git instalado y configurado en la pc</li> <li>Node y npm (min v8.10)</li> <li>Tener instalado create-react-app para crear aplicaci\u00f3n react</li> </ul>"},{"location":"programming/react/github_pages/#procedimiento","title":"Procedimiento","text":"<ul> <li>Crear un repositorio en Github, para que funcione la p\u00e1gina si no es una cuenta de pago el repositorio debe ser p\u00fablico. </li> <li>Crear aplicaci\u00f3n react <code>npx create-react-app app-name</code>, al hacer esto el comando inicializar\u00e1 adem\u00e1s en el proyecto el repositorio git</li> <li>Luego instalar el m\u00f3dulo github-pages como dependencia de desarollo</li> </ul> <pre><code>cd app-name\nnpm install gh-pages --save-dev\n</code></pre> <ul> <li>Agregar la propiedad <code>homepage</code> en la parte superior del fichero <code>package.json</code> como string con el valor <code>https://{username}.github.io/{repo-name}</code> donde el <code>{username}</code> es su nombre de usuario en Github y el <code>{repo-name}</code> el nombre del repositorio, quedando de la siguiente forma: </li> </ul> <pre><code>\"homepage\": \"https://{username}.github.io/{repo-name}\"\n</code></pre> <ul> <li>En la secci\u00f3n de <code>scripts</code> necesitamos agregar 2 nuevos</li> </ul> <pre><code>\"scripts\": {\n    ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  },\n</code></pre> <ul> <li>Agregar el repositorio remoto al proyecto</li> </ul> <pre><code>git remote add origin git@github.com:{username}/{repo-name}.git\n</code></pre> <ul> <li>Ahora a desplegar a las p\u00e1ginas de GitHub ejecutando el siguiente comando</li> </ul> <pre><code>npm run deploy\n</code></pre> <p>Este comando crear\u00e1 una rama con el nombre <code>gh-pages</code> en github que tendr\u00e1 hosteada la app en la url definida en la propiedad <code>homepage</code> definida en el <code>package.json</code> - Haga commit y actualice la rama master de su repositorio remoto (opcional)</p> <pre><code>git add .\ngit commit -m \"Your awesome message\"\ngit push origin master\n</code></pre> <p>Nota: En caso de no visualizar el sitio en la url <code>https://{username}.github.io/{repo-name}</code> podr\u00edas chequear en la configuraci\u00f3n del repositorio <code>Settings</code> secci\u00f3n <code>GitHub Pages</code> y seleccionar la rama <code>gh-pages</code> y <code>/root</code> para redirigir correctamente al proyecto compilado.</p>"},{"location":"programming/react/newline_to_break/","title":"Newline to break (nl2br)","text":"<p>Source https://kevinsimper.medium.com/react-newline-to-break-nl2br-a1c240ba746</p> <p>Because you know that everything in React is functions, you can't really do this</p> <pre><code>this.state.text.replace(/(?:\\r\\n|\\r|\\n)/g, '&lt;br /&gt;')\n</code></pre> <p>Since that would return a string with DOM nodes inside, that is not allowed either, because has to be only a string.</p> <p>You then can try do something like this:</p> <pre><code>{this.props.text.split('\\n').map(function(item, key) {\n  return (\n    &lt;span key={key}&gt;\n      {item}\n      &lt;br/&gt;\n    &lt;/span&gt;\n  )\n})};\n</code></pre> <p>That is not allowed either because again React is pure functions and two functions can be next to each other.</p>"},{"location":"programming/react/newline_to_break/#tldr-solution","title":"tldr. Solution","text":"<pre><code>{this.props.text.split('\\n').map(function(item, key) {\n  return (\n    &lt;span key={key}&gt;\n      {item}\n      &lt;br/&gt;\n    &lt;/span&gt;\n  )\n})};\n</code></pre> <p>Now we're wrapping each line-break in a span, and that works fine because span\u2019s has display inline. Now we got a working nl2br line-break solution.</p> <p>And ES6 version</p> <pre><code>{this.props.text.split('\\n').map((item, key) =&gt; {\n  return &lt;span key={key}&gt;{item}&lt;br/&gt;&lt;/span&gt;\n})};\n</code></pre> <p>And with React Fragments</p> <pre><code>{this.props.text.split('\\n').map((item, key) =&gt; {\n  return &lt;Fragment key={key}&gt;{item}&lt;br/&gt;&lt;/Fragment&gt;\n})};\n</code></pre>"},{"location":"programs/flameshot/","title":"Flameshot","text":"<p>https://flameshot.org/key-bindings/</p>"},{"location":"programs/flameshot/#install","title":"Install","text":"<pre><code>sudo apt install flameshot\n</code></pre> <p>You can easily configure your <code>'print'</code> keyboard shortcut to be assigned to Flameshot. Below an example to open Flameshot in GUI mode:</p> <ul> <li>Open <code>Settings \u2192 Devices \u2192 Keyboard \u2192 Shortcuts</code>.</li> <li>Search for <code>'print'</code>, and unbind the screen capture function by selecting it, and clicking <code>backspace</code>.</li> <li>Scroll down and click on the <code>'+'</code>.</li> <li>On <code>'Name'</code>, name it <code>'Flameshot'</code> or <code>'PrintScreen'</code>.</li> <li>Define the command as <code>'flameshot gui'</code>.</li> <li>Select <code>'Define shortcut...'</code> and click your keyboard <code>Prt Sc key</code>.</li> </ul> <p>Now you can use your default keyboard key to launch Flameshot.</p> <p>For defining multiple shortcuts you can repeat the process above, and just change the command.</p> <p>Some examples of commands are:</p> <pre><code># Capture a region using the GUI, and have it automatically saved to your pictures folder when clicking the save button in GUI\nflameshot gui -p /home/user/Pictures\n# Capture the active monitor and save it automatically to your pictures folder\nflameshot screen -p /home/user/Pictures\n# Capture the full desktop (all monitors) and save it automatically to your pictures folder\nflameshot full -p /home/user/Pictures\n</code></pre>"},{"location":"programs/flameshot/#usage","title":"Usage","text":"<p>Example commands: - capture with GUI:</p> <pre><code>flameshot gui\n</code></pre> <p>Capture with GUI with custom save path:</p> <pre><code>flameshot gui -p ~/myStuff/captures\n</code></pre> <p>Open GUI with a delay of 2 seconds:</p> <pre><code>flameshot gui -d 2000\n</code></pre> <p>Fullscreen capture (asking savepath):</p> <pre><code>flameshot full\n</code></pre> <p>Fullscreen capture with custom save path (no GUI) and delayed:</p> <pre><code>flameshot full -p ~/myStuff/captures -d 5000\n</code></pre> <p>Fullscreen capture with custom save path copying to clipboard:</p> <pre><code>flameshot full -c -p ~/myStuff/captures\n</code></pre> <p>In case of doubt choose the first or the second command as shortcut in your favorite desktop environment.</p> <p>A systray icon will be in your system's panel while Flameshot is running. Do a right click on the tray icon and you'll see some menu items to open the configuration window and the information window. Check out the information window to see all the available shortcuts in the graphical capture mode.</p>"},{"location":"programs/flameshot/#cli-configuration","title":"CLI configuration","text":"<p>You can use the graphical menu to configure Flameshot, but alternatively you can use your terminal or scripts to do so.</p> <p>Open the configuration menu:</p> <pre><code>flameshot config\n</code></pre> <p>Show the initial help message in the capture mode:</p> <pre><code>flameshot config --showhelp true\n</code></pre> <p>For more information about the available options use the help flag:</p> <pre><code>flameshot config -h\n</code></pre>"},{"location":"programs/phpmyadmin/","title":"phpmyadmin","text":""},{"location":"programs/phpmyadmin/#config","title":"Config","text":""},{"location":"programs/phpmyadmin/#enable-host-selection","title":"Enable host selection","text":"<p>In the root directory of phpmyadmin open <code>config.inc.php</code> file, if this file don't appear create it and inside define the next variable</p> <pre><code>$cfg['AllowArbitraryServer'] = true;\n</code></pre>"},{"location":"programs/apache/general/","title":"Apache","text":""},{"location":"programs/apache/general/#look-at-first-php-files","title":"Look at first php files","text":"<p>In most cases, you will want to modify the way that Apache serves files when a directory is requested.  After installation if a user requests a directory from the server, Apache will first look for a file called  <code>index.html</code>. We want to tell the web server to prefer PHP files over others, so make Apache look  for an <code>index.php</code> file first.</p> <p>To do this, type this command to open the <code>dir.conf</code> file in a text editor with root privileges:</p> <pre><code>sudo nano /etc/apache2/mods-enabled/dir.conf\n</code></pre> <p>It will look like this:</p> <pre><code>&lt;IfModule mod_dir.c&gt;\n    DirectoryIndex index.html index.cgi index.pl index.php index.xhtml index.htm\n&lt;/IfModule&gt;\n</code></pre> <p>Move the PHP index file (highlighted above) to the first position after the <code>DirectoryIndex</code> specification, like this:</p> <pre><code>&lt;IfModule mod_dir.c&gt;\n    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm\n&lt;/IfModule&gt;\n</code></pre> <p>When you are finished, save and close the file by pressing <code>CTRL+X</code>. Confirm the save by typing <code>Y</code> and then hit <code>ENTER</code> to verify the file save location.</p> <p>After this, restart the Apache web server in order for your changes to be recognized. Do this by typing this:</p> <pre><code>sudo systemctl restart apache2\n</code></pre> <p>You can also check on the status of the apache2 service using systemctl:</p> <pre><code>sudo systemctl status apache2\n</code></pre>"},{"location":"programs/apache/permits/","title":"Permisos de apache sobre el sistema de ficheros","text":"<p>Esto es en modo desarrollo y si tiene 1 solo usuario por lo que no deber\u00eda preocuparse por alguno m\u00e1s, tampoco por www-data.</p> <p>Abrir el fichero de configuraci\u00f3n de apache, el cual mayormente se ubica en:</p> <pre><code>/etc/apache2/apache2.conf\n</code></pre> <p>Buscar las l\u00edneas que definen el usuario y grupo que usa apache para trabajar</p> <pre><code>User ${APACHE_RUN_USER}\nGroup ${APACHE_RUN_GROUP}\n</code></pre> <p>y cambiar por</p> <pre><code>User username\nGroup usergroup\n</code></pre> <p>donde <code>username</code> y <code>usergroup</code> son los correspondietes al usuario admin</p>"},{"location":"technologies/ionic/ionic/","title":"ionic","text":"<p>Ejecutar aplicaci\u00f3n ionic en dispositivo f\u00edsico externo</p> <pre><code>ionic cordova run android -l --external -c\n</code></pre>"},{"location":"todo/films_to_watch/","title":"Films to watch","text":"<ul> <li>[ ] Monster Hunter</li> <li>[ ] Godzilla vs Kong</li> <li>[ ] Chaos Walking</li> <li>[ ] Free Guy 13 December 2021</li> <li>[ ] Ghostbusters 3 Afterlife</li> <li>[ ] Morbius</li> <li>[ ] Sky Sharks</li> <li>[ ] Black Widow</li> <li>[ ] Dune</li> <li>[ ] The Falcon and The Winter Soldier</li> <li>[ ] Bliss</li> <li>[ ] Loki</li> <li>[ ] CosmoBall</li> <li>[ ] Shadow in the Cloud</li> </ul>"}]}